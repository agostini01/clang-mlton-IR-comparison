; MLton 20180207
;   created this file on Fri Nov 30 15:12:38 2018.
; Do not edit this file.
; Flag settings: 
;    align: 8
;    atMLtons: (@MLton, --)
;    chunk: coalesce 4096
;    closureConvertGlobalize: true
;    closureConvertShrink: true
;    codegen: llvm
;    contifyIntoMain: false
;    debug: false
;    defaultChar: char8
;    defaultWideChar: widechar32
;    defaultInt: int32
;    defaultReal: real64
;    defaultWord: word32
;    diag passes: []
;    execute passes: []
;    elaborate allowConstant (default): false
;    elaborate allowConstant (enabled): true
;    elaborate allowFFI (default): false
;    elaborate allowFFI (enabled): true
;    elaborate allowPrim (default): false
;    elaborate allowPrim (enabled): true
;    elaborate allowOverload (default): false
;    elaborate allowOverload (enabled): true
;    elaborate allowRedefineSpecialIds (default): false
;    elaborate allowRedefineSpecialIds (enabled): true
;    elaborate allowSpecifySpecialIds (default): false
;    elaborate allowSpecifySpecialIds (enabled): true
;    elaborate deadCode (default): false
;    elaborate deadCode (enabled): true
;    elaborate forceUsed (default): false
;    elaborate forceUsed (enabled): true
;    elaborate ffiStr (default): 
;    elaborate ffiStr (enabled): true
;    elaborate nonexhaustiveBind (default): warn
;    elaborate nonexhaustiveBind (enabled): true
;    elaborate nonexhaustiveExnBind (default): default
;    elaborate nonexhaustiveExnBind (enabled): true
;    elaborate redundantBind (default): warn
;    elaborate redundantBind (enabled): true
;    elaborate nonexhaustiveMatch (default): warn
;    elaborate nonexhaustiveMatch (enabled): true
;    elaborate nonexhaustiveExnMatch (default): default
;    elaborate nonexhaustiveExnMatch (enabled): true
;    elaborate redundantMatch (default): warn
;    elaborate redundantMatch (enabled): true
;    elaborate nonexhaustiveRaise (default): ignore
;    elaborate nonexhaustiveRaise (enabled): true
;    elaborate nonexhaustiveExnRaise (default): ignore
;    elaborate nonexhaustiveExnRaise (enabled): true
;    elaborate redundantRaise (default): warn
;    elaborate redundantRaise (enabled): true
;    elaborate resolveScope (default): strdec
;    elaborate resolveScope (enabled): true
;    elaborate sequenceNonUnit (default): ignore
;    elaborate sequenceNonUnit (enabled): true
;    elaborate valrecConstr (default): warn
;    elaborate valrecConstr (enabled): true
;    elaborate warnUnused (default): false
;    elaborate warnUnused (enabled): true
;    elaborate allowDoDecls (default): false
;    elaborate allowDoDecls (enabled): true
;    elaborate allowExtendedNumConsts (default): false
;    elaborate allowExtendedNumConsts (enabled): true
;    elaborate allowExtendedTextConsts (default): false
;    elaborate allowExtendedTextConsts (enabled): true
;    elaborate allowLineComments (default): false
;    elaborate allowLineComments (enabled): true
;    elaborate allowOptBar (default): false
;    elaborate allowOptBar (enabled): true
;    elaborate allowOptSemicolon (default): false
;    elaborate allowOptSemicolon (enabled): true
;    elaborate allowOrPats (default): false
;    elaborate allowOrPats (enabled): true
;    elaborate allowRecordPunExps (default): false
;    elaborate allowRecordPunExps (enabled): true
;    elaborate allowSigWithtype (default): false
;    elaborate allowSigWithtype (enabled): true
;    elaborate allowVectorExps (default): false
;    elaborate allowVectorExps (enabled): true
;    elaborate allowVectorPats (default): false
;    elaborate allowVectorPats (enabled): true
;    elaborate only: false
;    emit main: true
;    export header: None
;    exn history: false
;    generated output format: executable
;    gc check: Limit
;    indentation: 3
;    inlineIntoMain: true
;    inlineLeafA: {loops = true, repeat = true, size = Some 20}
;    inlineLeafB: {loops = true, repeat = true, size = Some 40}
;    inlineNonRec: {small = 60, product = 320}
;    input file: vecdotvec
;    keep AST: false
;    keep CoreML: false
;    keep def use: true
;    keep dot: false
;    keep Machine: false
;    keep passes: []
;    keep RSSA: false
;    keep SSA: false
;    keep SSA2: false
;    keep SXML: false
;    keep XML: false
;    extra_: false
;    lib dir: /usr/local/lib/mlton
;    lib target dir: /usr/local/lib/mlton/targets/self
;    loop ssa passes: 1
;    loop ssa2 passes: 1
;    loop unrolling limit: 150
;    loop unswitching limit: 300
;    mark cards: true
;    max function size: 10000
;    mlb path vars: [{var = SML_LIB, path = $(LIB_MLTON_DIR)/sml}]
;    native commented: 0
;    native live stack: false
;    native optimize: 1
;    native move hoist: true
;    native copy prop: true
;    native copy prop cutoff: 1000
;    native cutoff: 100
;    native live transfer: 8
;    native shuffle: true
;    native ieee fp: false
;    native split: Some 20000
;    optFuel: None
;    optimizationPasses: [<ssa2::default>, <ssa::default>, <sxml::default>, <xml::default>]
;    polyvariance: Some {hofo = true, rounds = 2, small = 30, product = 300}
;    prefer abs paths: false
;    prof passes: []
;    profile: None
;    profile branch: false
;    profile C: []
;    profile IL: ProfileSource
;    profile include/exclude: [(Seq [Star [.], Or [Seq [Seq [[$], [(], [S], [M], [L], [_], [L], [I], [B], [)]]]], Star [.]], false)]
;    profile raise: false
;    profile stack: false
;    profile val: false
;    show basis: None
;    show basis compact: false
;    show basis def: true
;    show basis flat: true
;    show def-use: None
;    show types: true
;    target: self
;    target arch: AMD64
;    target OS: Linux
;    type check: false
;    verbosity: Silent
;    warn unrecognized annotation: true
;    warn deprecated features: true
;    zone cut depth: 100
declare float @llvm.sqrt.f32(float %Val)
declare double @llvm.sqrt.f64(double %Val)
declare float @llvm.sin.f32(float %Val)
declare double @llvm.sin.f64(double %Val)
declare float @llvm.cos.f32(float %Val)
declare double @llvm.cos.f64(double %Val)
declare float @llvm.exp.f32(float %Val)
declare double @llvm.exp.f64(double %Val)
declare float @llvm.log.f32(float %Val)
declare double @llvm.log.f64(double %Val)
declare float @llvm.log10.f32(float %Val)
declare double @llvm.log10.f64(double %Val)
declare float @llvm.fma.f32(float %a, float %b, float %c)
declare double @llvm.fma.f64(double %a, double %b, double %c)
declare float @llvm.fabs.f32(float %Val) ; requires LLVM 3.2
declare double @llvm.fabs.f64(double %Val) ; requires LLVM 3.2
declare float @llvm.rint.f32(float %Val) ; requires LLVM 3.3
declare double @llvm.rint.f64(double %Val) ; requires LLVM 3.3
declare {i8, i1} @llvm.sadd.with.overflow.i8(i8 %a, i8 %b)
declare {i16, i1} @llvm.sadd.with.overflow.i16(i16 %a, i16 %b)
declare {i32, i1} @llvm.sadd.with.overflow.i32(i32 %a, i32 %b)
declare {i64, i1} @llvm.sadd.with.overflow.i64(i64 %a, i64 %b)
declare {i8, i1} @llvm.uadd.with.overflow.i8(i8 %a, i8 %b)
declare {i16, i1} @llvm.uadd.with.overflow.i16(i16 %a, i16 %b)
declare {i32, i1} @llvm.uadd.with.overflow.i32(i32 %a, i32 %b)
declare {i64, i1} @llvm.uadd.with.overflow.i64(i64 %a, i64 %b)
declare {i8, i1} @llvm.ssub.with.overflow.i8(i8 %a, i8 %b)
declare {i16, i1} @llvm.ssub.with.overflow.i16(i16 %a, i16 %b)
declare {i32, i1} @llvm.ssub.with.overflow.i32(i32 %a, i32 %b)
declare {i64, i1} @llvm.ssub.with.overflow.i64(i64 %a, i64 %b)
declare {i8, i1} @llvm.usub.with.overflow.i8(i8 %a, i8 %b)
declare {i16, i1} @llvm.usub.with.overflow.i16(i16 %a, i16 %b)
declare {i32, i1} @llvm.usub.with.overflow.i32(i32 %a, i32 %b)
declare {i64, i1} @llvm.usub.with.overflow.i64(i64 %a, i64 %b)
declare {i8, i1} @llvm.smul.with.overflow.i8(i8 %a, i8 %b)
declare {i16, i1} @llvm.smul.with.overflow.i16(i16 %a, i16 %b)
declare {i32, i1} @llvm.smul.with.overflow.i32(i32 %a, i32 %b)
declare {i64, i1} @llvm.smul.with.overflow.i64(i64 %a, i64 %b)
declare {i8, i1} @llvm.umul.with.overflow.i8(i8 %a, i8 %b)
declare {i16, i1} @llvm.umul.with.overflow.i16(i16 %a, i16 %b)
declare {i32, i1} @llvm.umul.with.overflow.i32(i32 %a, i32 %b)
declare {i64, i1} @llvm.umul.with.overflow.i64(i64 %a, i64 %b)

; ML types
%Pointer = type i8*
%Int8 = type i8
%Int16 = type i16
%Int32 = type i32
%Int64 = type i64
%Real32 = type float
%Real64 = type double
%Word8 = type i8
%Word16 = type i16
%Word32 = type i32
%Word64 = type i64
%CPointer = type i8*
%Objptr = type i8*

%uintptr_t = type i64

@globalCPointer = external hidden global [0 x %CPointer]
@CReturnQ = external hidden global %CPointer
@globalInt8 = external hidden global [0 x %Int8]
@CReturnI8 = external hidden global %Int8
@globalInt16 = external hidden global [0 x %Int16]
@CReturnI16 = external hidden global %Int16
@globalInt32 = external hidden global [0 x %Int32]
@CReturnI32 = external hidden global %Int32
@globalInt64 = external hidden global [0 x %Int64]
@CReturnI64 = external hidden global %Int64
@globalObjptr = external hidden global [153 x %Objptr]
@CReturnP = external hidden global %Objptr
@globalReal32 = external hidden global [0 x %Real32]
@CReturnR32 = external hidden global %Real32
@globalReal64 = external hidden global [6 x %Real64]
@CReturnR64 = external hidden global %Real64
@globalWord8 = external hidden global [0 x %Word8]
@CReturnW8 = external hidden global %Word8
@globalWord16 = external hidden global [0 x %Word16]
@CReturnW16 = external hidden global %Word16
@globalWord32 = external hidden global [0 x %Word32]
@CReturnW32 = external hidden global %Word32
@globalWord64 = external hidden global [0 x %Word64]
@CReturnW64 = external hidden global %Word64
@globalObjptrNonRoot = external hidden global [1 x %Pointer]

%struct.cont = type { i8* }
%struct.GC_state = type opaque
@nextFun = external hidden global %uintptr_t
@returnToC = external hidden global i32
@nextChunks = external hidden global [0 x void (%struct.cont*)*]
@gcState = external hidden global %struct.GC_state


define hidden %struct.cont @Chunk1() {
entry:
	%cont = alloca %struct.cont
	%frontier = alloca %Pointer
	%l_nextFun = alloca %uintptr_t
	%r0 = load %uintptr_t, %uintptr_t* @nextFun
	store %uintptr_t %r0, %uintptr_t* %l_nextFun
	%stackTop = alloca %Pointer
	; CacheFrontier
	%r1 = bitcast %struct.GC_state* @gcState to %Pointer
	%r2 = getelementptr inbounds i8, %Pointer %r1, i32 0
	%r3 = bitcast %Pointer %r2 to %Pointer*
	%r4 = load %Pointer, %Pointer* %r3
	store %Pointer %r4, %Pointer* %frontier
	; CacheStackTop
	%r5 = bitcast %struct.GC_state* @gcState to %Pointer
	%r6 = getelementptr inbounds i8, %Pointer %r5, i32 16
	%r7 = bitcast %Pointer %r6 to %Pointer*
	%r8 = load %Pointer, %Pointer* %r7
	store %Pointer %r8, %Pointer* %stackTop
	%regQ_0 = alloca %CPointer
	%regQ_1 = alloca %CPointer
	%regQ_2 = alloca %CPointer
	%regQ_3 = alloca %CPointer
	%regQ_4 = alloca %CPointer
	%regQ_5 = alloca %CPointer
	%regQ_6 = alloca %CPointer
	%regQ_7 = alloca %CPointer
	%regQ_8 = alloca %CPointer
	%regQ_9 = alloca %CPointer
	%regQ_10 = alloca %CPointer
	%regQ_11 = alloca %CPointer
	%regQ_12 = alloca %CPointer
	%regQ_13 = alloca %CPointer
	%regQ_14 = alloca %CPointer
	%regQ_15 = alloca %CPointer
	%regQ_16 = alloca %CPointer
	%regQ_17 = alloca %CPointer
	%regQ_18 = alloca %CPointer
	%regQ_19 = alloca %CPointer
	%regQ_20 = alloca %CPointer
	%regQ_21 = alloca %CPointer
	%regQ_22 = alloca %CPointer
	%regQ_23 = alloca %CPointer
	%regQ_24 = alloca %CPointer
	%regQ_25 = alloca %CPointer
	%regQ_26 = alloca %CPointer
	%regQ_27 = alloca %CPointer
	%regQ_28 = alloca %CPointer
	%regQ_29 = alloca %CPointer
	%regQ_30 = alloca %CPointer
	%regQ_31 = alloca %CPointer
	%regQ_32 = alloca %CPointer
	%regQ_33 = alloca %CPointer
	%regQ_34 = alloca %CPointer
	%regQ_35 = alloca %CPointer
	%regQ_36 = alloca %CPointer
	%regQ_37 = alloca %CPointer
	%regQ_38 = alloca %CPointer
	%regQ_39 = alloca %CPointer
	%regQ_40 = alloca %CPointer
	%regQ_41 = alloca %CPointer
	%regQ_42 = alloca %CPointer
	%regQ_43 = alloca %CPointer
	%regQ_44 = alloca %CPointer
	%regQ_45 = alloca %CPointer
	%regQ_46 = alloca %CPointer
	%regQ_47 = alloca %CPointer
	%regQ_48 = alloca %CPointer
	%regQ_49 = alloca %CPointer
	%regQ_50 = alloca %CPointer
	%regQ_51 = alloca %CPointer
	%regQ_52 = alloca %CPointer
	%regQ_53 = alloca %CPointer
	%regQ_54 = alloca %CPointer
	%regQ_55 = alloca %CPointer
	%regQ_56 = alloca %CPointer
	%regQ_57 = alloca %CPointer
	%regQ_58 = alloca %CPointer
	%regQ_59 = alloca %CPointer
	%regQ_60 = alloca %CPointer
	%regQ_61 = alloca %CPointer
	%regQ_62 = alloca %CPointer
	%regQ_63 = alloca %CPointer
	%regQ_64 = alloca %CPointer
	%regQ_65 = alloca %CPointer
	%regQ_66 = alloca %CPointer
	%regQ_67 = alloca %CPointer
	%regQ_68 = alloca %CPointer
	%regQ_69 = alloca %CPointer
	%regQ_70 = alloca %CPointer
	%regQ_71 = alloca %CPointer
	%regQ_72 = alloca %CPointer
	%regQ_73 = alloca %CPointer
	%regQ_74 = alloca %CPointer
	%regQ_75 = alloca %CPointer
	%regQ_76 = alloca %CPointer
	%regQ_77 = alloca %CPointer
	%regQ_78 = alloca %CPointer
	%regQ_79 = alloca %CPointer
	%regQ_80 = alloca %CPointer
	%regQ_81 = alloca %CPointer
	%regQ_82 = alloca %CPointer
	%regQ_83 = alloca %CPointer
	%regQ_84 = alloca %CPointer
	%regQ_85 = alloca %CPointer
	%regQ_86 = alloca %CPointer
	%regQ_87 = alloca %CPointer
	%regQ_88 = alloca %CPointer
	%regQ_89 = alloca %CPointer
	%regQ_90 = alloca %CPointer
	%regQ_91 = alloca %CPointer
	%regQ_92 = alloca %CPointer
	%regQ_93 = alloca %CPointer
	%regQ_94 = alloca %CPointer
	%regQ_95 = alloca %CPointer
	%regQ_96 = alloca %CPointer
	%regQ_97 = alloca %CPointer
	%regQ_98 = alloca %CPointer
	%regQ_99 = alloca %CPointer
	%regQ_100 = alloca %CPointer
	%regQ_101 = alloca %CPointer
	%regQ_102 = alloca %CPointer
	%regQ_103 = alloca %CPointer
	%regQ_104 = alloca %CPointer
	%regQ_105 = alloca %CPointer
	%regQ_106 = alloca %CPointer
	%regQ_107 = alloca %CPointer
	%regQ_108 = alloca %CPointer
	%regQ_109 = alloca %CPointer
	%regQ_110 = alloca %CPointer
	%regP_0 = alloca %Objptr
	%regP_1 = alloca %Objptr
	%regP_2 = alloca %Objptr
	%regP_3 = alloca %Objptr
	%regP_4 = alloca %Objptr
	%regP_5 = alloca %Objptr
	%regP_6 = alloca %Objptr
	%regP_7 = alloca %Objptr
	%regP_8 = alloca %Objptr
	%regP_9 = alloca %Objptr
	%regP_10 = alloca %Objptr
	%regP_11 = alloca %Objptr
	%regR64_0 = alloca %Real64
	%regR64_1 = alloca %Real64
	%regR64_2 = alloca %Real64
	%regR64_3 = alloca %Real64
	%regR64_4 = alloca %Real64
	%regW8_0 = alloca %Word8
	%regW8_1 = alloca %Word8
	%regW8_2 = alloca %Word8
	%regW32_0 = alloca %Word32
	%regW32_1 = alloca %Word32
	%regW32_2 = alloca %Word32
	%regW32_3 = alloca %Word32
	%regW32_4 = alloca %Word32
	%regW32_5 = alloca %Word32
	%regW64_0 = alloca %Word64
	%regW64_1 = alloca %Word64
	%regW64_2 = alloca %Word64
	%regW64_3 = alloca %Word64
	%regW64_4 = alloca %Word64
	%regW64_5 = alloca %Word64
	%regW64_6 = alloca %Word64
	%regW64_7 = alloca %Word64
	%regW64_8 = alloca %Word64
	%regW64_9 = alloca %Word64
	%regW64_10 = alloca %Word64
	%regW64_11 = alloca %Word64
	%regW64_12 = alloca %Word64
	%regW64_13 = alloca %Word64
	%regW64_14 = alloca %Word64
	%regW64_15 = alloca %Word64
	%regW64_16 = alloca %Word64
	%regW64_17 = alloca %Word64
	br label %top
top:
	%r9 = load %uintptr_t, %uintptr_t* %l_nextFun
	switch %uintptr_t %r9, label %default [
		%uintptr_t 2, label %L_5
		%uintptr_t 4, label %L_34
		%uintptr_t 5, label %L_43
		%uintptr_t 6, label %L_46
		%uintptr_t 7, label %L_48
		%uintptr_t 8, label %L_51
		%uintptr_t 9, label %L_53
		%uintptr_t 10, label %L_83
		%uintptr_t 11, label %L_104
		%uintptr_t 12, label %L_125
		%uintptr_t 13, label %L_147
		%uintptr_t 14, label %L_155
		%uintptr_t 15, label %L_161
		%uintptr_t 16, label %L_163
		%uintptr_t 17, label %L_165
		%uintptr_t 18, label %L_169
		%uintptr_t 19, label %L_170
		%uintptr_t 20, label %L_171
		%uintptr_t 21, label %L_173
		%uintptr_t 22, label %L_174
		%uintptr_t 23, label %L_176
		%uintptr_t 24, label %print_2
		%uintptr_t 25, label %L_179
		%uintptr_t 26, label %print_3
		%uintptr_t 27, label %L_181
		%uintptr_t 28, label %L_183
		%uintptr_t 29, label %L_188
		%uintptr_t 30, label %L_189
		%uintptr_t 31, label %L_191
		%uintptr_t 32, label %L_195
		%uintptr_t 33, label %L_196
		%uintptr_t 34, label %L_197
		%uintptr_t 35, label %L_199
		%uintptr_t 36, label %L_204
		%uintptr_t 37, label %L_209
		%uintptr_t 38, label %L_213
		%uintptr_t 39, label %L_214
		%uintptr_t 40, label %L_215
		%uintptr_t 41, label %L_220
		%uintptr_t 42, label %L_221
		%uintptr_t 43, label %L_222
		%uintptr_t 44, label %L_224
		%uintptr_t 45, label %L_225
		%uintptr_t 46, label %L_226
		%uintptr_t 47, label %L_243
		%uintptr_t 48, label %L_246
		%uintptr_t 49, label %L_250
		%uintptr_t 50, label %L_263
		%uintptr_t 51, label %L_268
		%uintptr_t 52, label %L_274
		%uintptr_t 53, label %L_277
		%uintptr_t 54, label %L_280
		%uintptr_t 55, label %L_293
		%uintptr_t 56, label %L_309
		%uintptr_t 57, label %L_325
		%uintptr_t 58, label %L_341
		%uintptr_t 59, label %L_346
		%uintptr_t 60, label %L_352
		%uintptr_t 61, label %L_356
		%uintptr_t 62, label %L_360
		%uintptr_t 63, label %L_395
		%uintptr_t 64, label %L_398
		%uintptr_t 65, label %L_400
		%uintptr_t 66, label %L_402
		%uintptr_t 67, label %put_0
		%uintptr_t 68, label %L_449
		%uintptr_t 69, label %L_454
		%uintptr_t 70, label %L_460
		%uintptr_t 71, label %L_463
		%uintptr_t 72, label %L_483
		%uintptr_t 73, label %L_488
		%uintptr_t 74, label %L_493
		%uintptr_t 75, label %L_496
		%uintptr_t 76, label %L_499
		%uintptr_t 77, label %L_501
		%uintptr_t 78, label %L_514
		%uintptr_t 79, label %L_516
		%uintptr_t 80, label %L_519
		%uintptr_t 81, label %L_521
		%uintptr_t 82, label %L_529
		%uintptr_t 83, label %L_530
		%uintptr_t 84, label %L_533
		%uintptr_t 85, label %L_536
		%uintptr_t 86, label %L_537
		%uintptr_t 87, label %L_540
		%uintptr_t 88, label %L_546
		%uintptr_t 89, label %L_549
		%uintptr_t 90, label %L_555
		%uintptr_t 91, label %L_576
		%uintptr_t 92, label %L_579
		%uintptr_t 93, label %L_585
		%uintptr_t 94, label %L_589
		%uintptr_t 95, label %L_591
		%uintptr_t 96, label %L_623
		%uintptr_t 97, label %L_628
		%uintptr_t 98, label %L_635
		%uintptr_t 99, label %L_652
		%uintptr_t 100, label %L_657
		%uintptr_t 101, label %L_663
		%uintptr_t 102, label %L_682
		%uintptr_t 103, label %L_706
		%uintptr_t 104, label %L_708
		%uintptr_t 105, label %L_711
		%uintptr_t 106, label %L_738
		%uintptr_t 107, label %L_741
		%uintptr_t 108, label %L_745
		%uintptr_t 109, label %full_0
		%uintptr_t 110, label %L_755
		%uintptr_t 111, label %L_756
		%uintptr_t 112, label %L_806
		%uintptr_t 113, label %L_807
		%uintptr_t 114, label %L_811
		%uintptr_t 115, label %L_815
		%uintptr_t 116, label %L_832
		%uintptr_t 117, label %L_835
		%uintptr_t 118, label %L_850
		%uintptr_t 119, label %L_851
		%uintptr_t 120, label %L_855
		%uintptr_t 121, label %L_857
		%uintptr_t 122, label %L_858
		%uintptr_t 123, label %L_862
		%uintptr_t 124, label %L_864
		%uintptr_t 125, label %L_876
		%uintptr_t 126, label %L_880
		%uintptr_t 127, label %L_890
		%uintptr_t 128, label %L_892
		%uintptr_t 129, label %L_898
		%uintptr_t 130, label %L_900
		%uintptr_t 131, label %L_902
		%uintptr_t 132, label %L_905
		%uintptr_t 133, label %L_907
		%uintptr_t 134, label %L_914
		%uintptr_t 135, label %L_927
		%uintptr_t 136, label %L_931
		%uintptr_t 137, label %L_939
		%uintptr_t 138, label %L_950
		%uintptr_t 139, label %L_952
		%uintptr_t 140, label %L_954
		%uintptr_t 141, label %L_961
		%uintptr_t 142, label %L_964
		%uintptr_t 143, label %L_1030
		%uintptr_t 144, label %L_1057
		%uintptr_t 145, label %L_1061
		%uintptr_t 146, label %L_1069
		%uintptr_t 147, label %L_1072
		%uintptr_t 148, label %L_1078
		%uintptr_t 149, label %L_1090
		%uintptr_t 150, label %L_1097
		%uintptr_t 151, label %L_1113
		%uintptr_t 152, label %L_1122
		%uintptr_t 153, label %L_1134
		%uintptr_t 154, label %L_1137
		%uintptr_t 155, label %L_1149
		%uintptr_t 156, label %L_1172
		%uintptr_t 157, label %L_1174
		%uintptr_t 158, label %L_1175
		%uintptr_t 159, label %L_1177
		%uintptr_t 160, label %L_1186
		%uintptr_t 161, label %L_1187
		%uintptr_t 162, label %L_1189
		%uintptr_t 163, label %L_1200
		%uintptr_t 164, label %L_1201
		%uintptr_t 165, label %L_1209
		%uintptr_t 166, label %L_1212
		%uintptr_t 167, label %L_1214
		%uintptr_t 168, label %L_1218
		%uintptr_t 169, label %L_1220
		%uintptr_t 170, label %L_1223
		%uintptr_t 171, label %L_1248
		%uintptr_t 172, label %L_1251
		%uintptr_t 173, label %L_1255
		%uintptr_t 174, label %L_1256
		%uintptr_t 175, label %L_1259
		%uintptr_t 176, label %L_1265
		%uintptr_t 177, label %L_1276
		%uintptr_t 178, label %L_1289
		%uintptr_t 179, label %L_1299
		%uintptr_t 180, label %L_1300
		%uintptr_t 181, label %L_1304
		%uintptr_t 182, label %L_1307
		%uintptr_t 183, label %L_1308
		%uintptr_t 184, label %L_1312
		%uintptr_t 185, label %L_1318
		%uintptr_t 186, label %exit_0
		%uintptr_t 187, label %exnMessage_0
		%uintptr_t 188, label %concat_0
		%uintptr_t 189, label %x_2
		%uintptr_t 190, label %flushBuf_0
		%uintptr_t 191, label %print_5
		%uintptr_t 192, label %main_0
	]
L_1318:
	; Push(-40)
	%r10 = load %Pointer, %Pointer* %stackTop
	%r11 = getelementptr inbounds i8, %Pointer %r10, i32 -40
	store %Pointer %r11, %Pointer* %stackTop
	; Goto L_1225
	br label %L_1225

L_1317:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 185}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_1318}
	; GetOperands
	%r12 = bitcast %struct.GC_state* @gcState to %Pointer
	%r13 = load %Pointer, %Pointer* %stackTop
	%r14 = getelementptr inbounds i8, %Pointer %r13, i32 32
	%r15 = bitcast %Pointer %r14 to %uintptr_t*
	store %uintptr_t 185, %uintptr_t* %r15
	; Push(40)
	%r16 = load %Pointer, %Pointer* %stackTop
	%r17 = getelementptr inbounds i8, %Pointer %r16, i32 40
	store %Pointer %r17, %Pointer* %stackTop
	; FlushFrontier
	%r18 = bitcast %struct.GC_state* @gcState to %Pointer
	%r19 = getelementptr inbounds i8, %Pointer %r18, i32 0
	%r20 = bitcast %Pointer %r19 to %Pointer*
	%r21 = load %Pointer, %Pointer* %frontier
	store %Pointer %r21, %Pointer* %r20
	; FlushStackTop
	%r22 = bitcast %struct.GC_state* @gcState to %Pointer
	%r23 = getelementptr inbounds i8, %Pointer %r22, i32 16
	%r24 = bitcast %Pointer %r23 to %Pointer*
	%r25 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r25, %Pointer* %r24
	; Call
	call void @GC_collect(%Pointer %r12, %Word64 0, %Word32 0)
	; CacheFrontier
	%r26 = bitcast %struct.GC_state* @gcState to %Pointer
	%r27 = getelementptr inbounds i8, %Pointer %r26, i32 0
	%r28 = bitcast %Pointer %r27 to %Pointer*
	%r29 = load %Pointer, %Pointer* %r28
	store %Pointer %r29, %Pointer* %frontier
	; CacheStackTop
	%r30 = bitcast %struct.GC_state* @gcState to %Pointer
	%r31 = getelementptr inbounds i8, %Pointer %r30, i32 16
	%r32 = bitcast %Pointer %r31 to %Pointer*
	%r33 = load %Pointer, %Pointer* %r32
	store %Pointer %r33, %Pointer* %stackTop
	br label %L_1318

L_1316:
	; Raise
	%r34 = bitcast %struct.GC_state* @gcState to %Pointer
	%r35 = getelementptr inbounds i8, %Pointer %r34, i32 1616
	%r36 = bitcast %Pointer %r35 to %Pointer*
	%r37 = load %Pointer, %Pointer* %r36
	%r38 = bitcast %struct.GC_state* @gcState to %Pointer
	%r39 = getelementptr inbounds i8, %Pointer %r38, i32 32
	%r40 = bitcast %Pointer %r39 to i32*
	%r41 = load i32, i32* %r40
	%r42 = getelementptr inbounds i8, %Pointer %r37, i32 %r41
	store %Pointer %r42, %Pointer* %stackTop
	%r43 = load %Pointer, %Pointer* %stackTop
	%r44 = getelementptr inbounds i8, %Pointer %r43, i32 -8
	%r45 = bitcast %Pointer %r44 to %uintptr_t*
	%r46 = load %uintptr_t, %uintptr_t* %r45
	store %uintptr_t %r46, %uintptr_t* %l_nextFun
	br label %top

L_1315:
	; Goto L_1229
	br label %L_1229

L_1314:
	; Goto L_1297
	br label %L_1297

L_1313:
	; Goto L_1294
	br label %L_1294

L_1312:
	; Push(-48)
	%r47 = load %Pointer, %Pointer* %stackTop
	%r48 = getelementptr inbounds i8, %Pointer %r47, i32 -48
	store %Pointer %r48, %Pointer* %stackTop
	; Goto L_1286
	br label %L_1286

L_1311:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 184}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_1312}
	; GetOperands
	%r49 = bitcast %struct.GC_state* @gcState to %Pointer
	%r50 = load %Pointer, %Pointer* %stackTop
	%r51 = getelementptr inbounds i8, %Pointer %r50, i32 40
	%r52 = bitcast %Pointer %r51 to %uintptr_t*
	store %uintptr_t 184, %uintptr_t* %r52
	; Push(48)
	%r53 = load %Pointer, %Pointer* %stackTop
	%r54 = getelementptr inbounds i8, %Pointer %r53, i32 48
	store %Pointer %r54, %Pointer* %stackTop
	; FlushFrontier
	%r55 = bitcast %struct.GC_state* @gcState to %Pointer
	%r56 = getelementptr inbounds i8, %Pointer %r55, i32 0
	%r57 = bitcast %Pointer %r56 to %Pointer*
	%r58 = load %Pointer, %Pointer* %frontier
	store %Pointer %r58, %Pointer* %r57
	; FlushStackTop
	%r59 = bitcast %struct.GC_state* @gcState to %Pointer
	%r60 = getelementptr inbounds i8, %Pointer %r59, i32 16
	%r61 = bitcast %Pointer %r60 to %Pointer*
	%r62 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r62, %Pointer* %r61
	; Call
	call void @GC_collect(%Pointer %r49, %Word64 0, %Word32 0)
	; CacheFrontier
	%r63 = bitcast %struct.GC_state* @gcState to %Pointer
	%r64 = getelementptr inbounds i8, %Pointer %r63, i32 0
	%r65 = bitcast %Pointer %r64 to %Pointer*
	%r66 = load %Pointer, %Pointer* %r65
	store %Pointer %r66, %Pointer* %frontier
	; CacheStackTop
	%r67 = bitcast %struct.GC_state* @gcState to %Pointer
	%r68 = getelementptr inbounds i8, %Pointer %r67, i32 16
	%r69 = bitcast %Pointer %r68 to %Pointer*
	%r70 = load %Pointer, %Pointer* %r69
	store %Pointer %r70, %Pointer* %stackTop
	br label %L_1312

L_1310:
	; Goto L_1297
	br label %L_1297

L_1309:
	; RP(0): Objptr (opt_37)  = OP (SP(8): Objptr (opt_37), 8): Objptr (opt_37)
	%r71 = load %Pointer, %Pointer* %stackTop
	%r72 = getelementptr inbounds i8, %Pointer %r71, i32 8
	%r73 = bitcast %Pointer %r72 to %Objptr*
	%r74 = load %Objptr, %Objptr* %r73
	%r75 = getelementptr inbounds i8, %Objptr %r74, i32 8
	%r76 = bitcast %Objptr %r75 to %Objptr*
	%r77 = load %Objptr, %Objptr* %r76
	store %Objptr %r77, %Objptr* %regP_0
	; RP(1): Objptr (opt_20)  = OP (SP(8): Objptr (opt_37), 0): Objptr (opt_20)
	%r78 = load %Pointer, %Pointer* %stackTop
	%r79 = getelementptr inbounds i8, %Pointer %r78, i32 8
	%r80 = bitcast %Pointer %r79 to %Objptr*
	%r81 = load %Objptr, %Objptr* %r80
	%r82 = getelementptr inbounds i8, %Objptr %r81, i32 0
	%r83 = bitcast %Objptr %r82 to %Objptr*
	%r84 = load %Objptr, %Objptr* %r83
	store %Objptr %r84, %Objptr* %regP_1
	; SP(8): Objptr (opt_37)  = RP(0): Objptr (opt_37)
	%r85 = load %Objptr, %Objptr* %regP_0
	%r86 = load %Pointer, %Pointer* %stackTop
	%r87 = getelementptr inbounds i8, %Pointer %r86, i32 8
	%r88 = bitcast %Pointer %r87 to %Objptr*
	store %Objptr %r85, %Objptr* %r88
	; RP(0): Objptr (opt_20)  = RP(1): Objptr (opt_20)
	%r89 = load %Objptr, %Objptr* %regP_1
	store %Objptr %r89, %Objptr* %regP_0
	; Goto L_1284
	br label %L_1284

L_1308:
	; Push(-24)
	%r90 = load %Pointer, %Pointer* %stackTop
	%r91 = getelementptr inbounds i8, %Pointer %r90, i32 -24
	store %Pointer %r91, %Pointer* %stackTop
	; RP(0): Objptr (opt_34, opt_33, opt_32, opt_31)  = glob {index = 0, isRoot = false, ty = Objptr (opt_34, opt_33, opt_32, opt_31)}
	%r92 = getelementptr inbounds [1 x %Objptr], [1 x %Objptr]* @globalObjptrNonRoot, i32 0, i32 0
	%r93 = load %Objptr, %Objptr* %r92
	store %Objptr %r93, %Objptr* %regP_0
	; switch {test = Cast (SP(8): Objptr (opt_37), Bits64), default = Some L_1309, cases = ((0x1, L_1310))}
	%r94 = load %Pointer, %Pointer* %stackTop
	%r95 = getelementptr inbounds i8, %Pointer %r94, i32 8
	%r96 = bitcast %Pointer %r95 to %Objptr*
	%r97 = load %Objptr, %Objptr* %r96
	%r98 = ptrtoint %Objptr %r97 to %Word64
	switch %Word64 %r98, label %L_1309 [
		%Word64 1, label %L_1310
	]

L_1307:
	; Push(-48)
	%r99 = load %Pointer, %Pointer* %stackTop
	%r100 = getelementptr inbounds i8, %Pointer %r99, i32 -48
	store %Pointer %r100, %Pointer* %stackTop
	; Goto L_1305
	br label %L_1305

L_1306:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 182}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_1307}
	; GetOperands
	%r101 = bitcast %struct.GC_state* @gcState to %Pointer
	%r102 = load %Pointer, %Pointer* %stackTop
	%r103 = getelementptr inbounds i8, %Pointer %r102, i32 40
	%r104 = bitcast %Pointer %r103 to %uintptr_t*
	store %uintptr_t 182, %uintptr_t* %r104
	; Push(48)
	%r105 = load %Pointer, %Pointer* %stackTop
	%r106 = getelementptr inbounds i8, %Pointer %r105, i32 48
	store %Pointer %r106, %Pointer* %stackTop
	; FlushFrontier
	%r107 = bitcast %struct.GC_state* @gcState to %Pointer
	%r108 = getelementptr inbounds i8, %Pointer %r107, i32 0
	%r109 = bitcast %Pointer %r108 to %Pointer*
	%r110 = load %Pointer, %Pointer* %frontier
	store %Pointer %r110, %Pointer* %r109
	; FlushStackTop
	%r111 = bitcast %struct.GC_state* @gcState to %Pointer
	%r112 = getelementptr inbounds i8, %Pointer %r111, i32 16
	%r113 = bitcast %Pointer %r112 to %Pointer*
	%r114 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r114, %Pointer* %r113
	; Call
	call void @GC_collect(%Pointer %r101, %Word64 0, %Word32 0)
	; CacheFrontier
	%r115 = bitcast %struct.GC_state* @gcState to %Pointer
	%r116 = getelementptr inbounds i8, %Pointer %r115, i32 0
	%r117 = bitcast %Pointer %r116 to %Pointer*
	%r118 = load %Pointer, %Pointer* %r117
	store %Pointer %r118, %Pointer* %frontier
	; CacheStackTop
	%r119 = bitcast %struct.GC_state* @gcState to %Pointer
	%r120 = getelementptr inbounds i8, %Pointer %r119, i32 16
	%r121 = bitcast %Pointer %r120 to %Pointer*
	%r122 = load %Pointer, %Pointer* %r121
	store %Pointer %r122, %Pointer* %stackTop
	br label %L_1307

L_1305:
	; Goto L_1291
	br label %L_1291

L_1304:
	; Push(-48)
	%r123 = load %Pointer, %Pointer* %stackTop
	%r124 = getelementptr inbounds i8, %Pointer %r123, i32 -48
	store %Pointer %r124, %Pointer* %stackTop
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r125 = bitcast %struct.GC_state* @gcState to %Pointer
	%r126 = getelementptr inbounds i8, %Pointer %r125, i32 8
	%r127 = bitcast %Pointer %r126 to %CPointer*
	%r128 = load %CPointer, %CPointer* %r127
	%r129 = load %Pointer, %Pointer* %frontier
	%r131 = icmp ult %Pointer %r128, %r129
	%r130 = zext i1 %r131 to %Word32
	store %Word32 %r130, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_1305), (0x1, L_1306))}
	%r132 = load %Word32, %Word32* %regW32_0
	%r133 = trunc %Word32 %r132 to i1
	br i1 %r133, label %L_1306, label %L_1305

L_1303:
	; RP(0): Objptr (opt_10)  = OP (Cast (RP(3): Objptr (opt_41, opt_40), Objptr (opt_41)), 8): Objptr (opt_10)
	%r134 = load %Objptr, %Objptr* %regP_3
	%r135 = bitcast %Objptr %r134 to %Objptr
	%r136 = getelementptr inbounds i8, %Objptr %r135, i32 8
	%r137 = bitcast %Objptr %r136 to %Objptr*
	%r138 = load %Objptr, %Objptr* %r137
	store %Objptr %r138, %Objptr* %regP_0
	; RP(1): Objptr (opt_11)  = OP (Cast (RP(3): Objptr (opt_41, opt_40), Objptr (opt_41)), 0): Objptr (opt_11)
	%r139 = load %Objptr, %Objptr* %regP_3
	%r140 = bitcast %Objptr %r139 to %Objptr
	%r141 = getelementptr inbounds i8, %Objptr %r140, i32 0
	%r142 = bitcast %Objptr %r141 to %Objptr*
	%r143 = load %Objptr, %Objptr* %r142
	store %Objptr %r143, %Objptr* %regP_1
	; CW64 (<Frontier>)  = 0x3D
	%r144 = load %Pointer, %Pointer* %frontier
	%r145 = bitcast %Pointer %r144 to %Word64*
	store %Word64 61, %Word64* %r145
	; RQ(110): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r146 = load %Pointer, %Pointer* %frontier
	%r148 = ptrtoint %Pointer %r146 to %uintptr_t
	%r149 = add %uintptr_t %r148, 8
	%r147 = inttoptr %uintptr_t %r149 to %Pointer
	store %CPointer %r147, %CPointer* %regQ_110
	; RP(4): Objptr (opt_30)  = Cast (RQ(110): CPointer, Objptr (opt_30))
	%r150 = load %CPointer, %CPointer* %regQ_110
	%r151 = bitcast %CPointer %r150 to %Objptr
	store %Objptr %r151, %Objptr* %regP_4
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r152 = load %Pointer, %Pointer* %frontier
	%r154 = ptrtoint %Pointer %r152 to %uintptr_t
	%r155 = add %uintptr_t %r154, 24
	%r153 = inttoptr %uintptr_t %r155 to %Pointer
	store %Pointer %r153, %Pointer* %frontier
	; OP (RP(4): Objptr (opt_30), 0): Objptr (opt_10)  = RP(0): Objptr (opt_10)
	%r156 = load %Objptr, %Objptr* %regP_0
	%r157 = load %Objptr, %Objptr* %regP_4
	%r158 = getelementptr inbounds i8, %Objptr %r157, i32 0
	%r159 = bitcast %Objptr %r158 to %Objptr*
	store %Objptr %r156, %Objptr* %r159
	; OP (RP(4): Objptr (opt_30), 8): Objptr (opt_11)  = RP(1): Objptr (opt_11)
	%r160 = load %Objptr, %Objptr* %regP_1
	%r161 = load %Objptr, %Objptr* %regP_4
	%r162 = getelementptr inbounds i8, %Objptr %r161, i32 8
	%r163 = bitcast %Objptr %r162 to %Objptr*
	store %Objptr %r160, %Objptr* %r163
	; SQ(16): Label L_1308  = L_1308
	%r164 = inttoptr %Word32 183 to %CPointer
	%r165 = load %Pointer, %Pointer* %stackTop
	%r166 = getelementptr inbounds i8, %Pointer %r165, i32 16
	%r167 = bitcast %Pointer %r166 to %CPointer*
	store %CPointer %r164, %CPointer* %r167
	; RQ(109): CPointer  = CPointer_add (<StackTop>, 0x18)
	%r168 = load %Pointer, %Pointer* %stackTop
	%r170 = ptrtoint %Pointer %r168 to %uintptr_t
	%r171 = add %uintptr_t %r170, 24
	%r169 = inttoptr %uintptr_t %r171 to %Pointer
	store %CPointer %r169, %CPointer* %regQ_109
	; RW64(17): Word64  = CPointer_diff (RQ(109): CPointer, OQ (<GCState>, 1616): CPointer)
	%r172 = load %CPointer, %CPointer* %regQ_109
	%r173 = bitcast %struct.GC_state* @gcState to %Pointer
	%r174 = getelementptr inbounds i8, %Pointer %r173, i32 1616
	%r175 = bitcast %Pointer %r174 to %CPointer*
	%r176 = load %CPointer, %CPointer* %r175
	%r178 = ptrtoint %Pointer %r172 to %uintptr_t
	%r179 = ptrtoint %Pointer %r176 to %uintptr_t
	%r177 = sub %uintptr_t %r178, %r179
	store %Word64 %r177, %Word64* %regW64_17
	; OW64 (<GCState>, 32): ExnStack  = Cast (RW64(17): Word64, ExnStack)
	%r180 = load %Word64, %Word64* %regW64_17
	%r181 = bitcast %Word64 %r180 to %Word64
	%r182 = bitcast %struct.GC_state* @gcState to %Pointer
	%r183 = getelementptr inbounds i8, %Pointer %r182, i32 32
	%r184 = bitcast %Pointer %r183 to %Word64*
	store %Word64 %r181, %Word64* %r184
	; SP(48): Objptr (opt_30)  = RP(4): Objptr (opt_30)
	%r185 = load %Objptr, %Objptr* %regP_4
	%r186 = load %Pointer, %Pointer* %stackTop
	%r187 = getelementptr inbounds i8, %Pointer %r186, i32 48
	%r188 = bitcast %Pointer %r187 to %Objptr*
	store %Objptr %r185, %Objptr* %r188
	; SP(56): Objptr (opt_15)  = RP(2): Objptr (opt_15)
	%r189 = load %Objptr, %Objptr* %regP_2
	%r190 = load %Pointer, %Pointer* %stackTop
	%r191 = getelementptr inbounds i8, %Pointer %r190, i32 56
	%r192 = bitcast %Pointer %r191 to %Objptr*
	store %Objptr %r189, %Objptr* %r192
	%r193 = load %Pointer, %Pointer* %stackTop
	%r194 = getelementptr inbounds i8, %Pointer %r193, i32 40
	%r195 = bitcast %Pointer %r194 to %uintptr_t*
	store %uintptr_t 181, %uintptr_t* %r195
	; Push(48)
	%r196 = load %Pointer, %Pointer* %stackTop
	%r197 = getelementptr inbounds i8, %Pointer %r196, i32 48
	store %Pointer %r197, %Pointer* %stackTop
	br label %flushBuf_0

L_1302:
	; Goto L_1297
	br label %L_1297

L_1301:
	; RP(0): Objptr (opt_37)  = OP (SP(8): Objptr (opt_37), 8): Objptr (opt_37)
	%r198 = load %Pointer, %Pointer* %stackTop
	%r199 = getelementptr inbounds i8, %Pointer %r198, i32 8
	%r200 = bitcast %Pointer %r199 to %Objptr*
	%r201 = load %Objptr, %Objptr* %r200
	%r202 = getelementptr inbounds i8, %Objptr %r201, i32 8
	%r203 = bitcast %Objptr %r202 to %Objptr*
	%r204 = load %Objptr, %Objptr* %r203
	store %Objptr %r204, %Objptr* %regP_0
	; RP(1): Objptr (opt_20)  = OP (SP(8): Objptr (opt_37), 0): Objptr (opt_20)
	%r205 = load %Pointer, %Pointer* %stackTop
	%r206 = getelementptr inbounds i8, %Pointer %r205, i32 8
	%r207 = bitcast %Pointer %r206 to %Objptr*
	%r208 = load %Objptr, %Objptr* %r207
	%r209 = getelementptr inbounds i8, %Objptr %r208, i32 0
	%r210 = bitcast %Objptr %r209 to %Objptr*
	%r211 = load %Objptr, %Objptr* %r210
	store %Objptr %r211, %Objptr* %regP_1
	; SP(8): Objptr (opt_37)  = RP(0): Objptr (opt_37)
	%r212 = load %Objptr, %Objptr* %regP_0
	%r213 = load %Pointer, %Pointer* %stackTop
	%r214 = getelementptr inbounds i8, %Pointer %r213, i32 8
	%r215 = bitcast %Pointer %r214 to %Objptr*
	store %Objptr %r212, %Objptr* %r215
	; RP(0): Objptr (opt_20)  = RP(1): Objptr (opt_20)
	%r216 = load %Objptr, %Objptr* %regP_1
	store %Objptr %r216, %Objptr* %regP_0
	; Goto L_1284
	br label %L_1284

L_1300:
	; Push(-24)
	%r217 = load %Pointer, %Pointer* %stackTop
	%r218 = getelementptr inbounds i8, %Pointer %r217, i32 -24
	store %Pointer %r218, %Pointer* %stackTop
	; RP(0): Objptr (opt_34, opt_33, opt_32, opt_31)  = glob {index = 0, isRoot = false, ty = Objptr (opt_34, opt_33, opt_32, opt_31)}
	%r219 = getelementptr inbounds [1 x %Objptr], [1 x %Objptr]* @globalObjptrNonRoot, i32 0, i32 0
	%r220 = load %Objptr, %Objptr* %r219
	store %Objptr %r220, %Objptr* %regP_0
	; switch {test = Cast (SP(8): Objptr (opt_37), Bits64), default = Some L_1301, cases = ((0x1, L_1302))}
	%r221 = load %Pointer, %Pointer* %stackTop
	%r222 = getelementptr inbounds i8, %Pointer %r221, i32 8
	%r223 = bitcast %Pointer %r222 to %Objptr*
	%r224 = load %Objptr, %Objptr* %r223
	%r225 = ptrtoint %Objptr %r224 to %Word64
	switch %Word64 %r225, label %L_1301 [
		%Word64 1, label %L_1302
	]

L_1299:
	; Push(-48)
	%r226 = load %Pointer, %Pointer* %stackTop
	%r227 = getelementptr inbounds i8, %Pointer %r226, i32 -48
	store %Pointer %r227, %Pointer* %stackTop
	; Goto L_1290
	br label %L_1290

L_1298:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 179}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_1299}
	; GetOperands
	%r228 = bitcast %struct.GC_state* @gcState to %Pointer
	%r229 = load %Pointer, %Pointer* %stackTop
	%r230 = getelementptr inbounds i8, %Pointer %r229, i32 40
	%r231 = bitcast %Pointer %r230 to %uintptr_t*
	store %uintptr_t 179, %uintptr_t* %r231
	; Push(48)
	%r232 = load %Pointer, %Pointer* %stackTop
	%r233 = getelementptr inbounds i8, %Pointer %r232, i32 48
	store %Pointer %r233, %Pointer* %stackTop
	; FlushFrontier
	%r234 = bitcast %struct.GC_state* @gcState to %Pointer
	%r235 = getelementptr inbounds i8, %Pointer %r234, i32 0
	%r236 = bitcast %Pointer %r235 to %Pointer*
	%r237 = load %Pointer, %Pointer* %frontier
	store %Pointer %r237, %Pointer* %r236
	; FlushStackTop
	%r238 = bitcast %struct.GC_state* @gcState to %Pointer
	%r239 = getelementptr inbounds i8, %Pointer %r238, i32 16
	%r240 = bitcast %Pointer %r239 to %Pointer*
	%r241 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r241, %Pointer* %r240
	; Call
	call void @GC_collect(%Pointer %r228, %Word64 0, %Word32 0)
	; CacheFrontier
	%r242 = bitcast %struct.GC_state* @gcState to %Pointer
	%r243 = getelementptr inbounds i8, %Pointer %r242, i32 0
	%r244 = bitcast %Pointer %r243 to %Pointer*
	%r245 = load %Pointer, %Pointer* %r244
	store %Pointer %r245, %Pointer* %frontier
	; CacheStackTop
	%r246 = bitcast %struct.GC_state* @gcState to %Pointer
	%r247 = getelementptr inbounds i8, %Pointer %r246, i32 16
	%r248 = bitcast %Pointer %r247 to %Pointer*
	%r249 = load %Pointer, %Pointer* %r248
	store %Pointer %r249, %Pointer* %stackTop
	br label %L_1299

L_1297:
	; CCall {args = (<GCState>, SW32(0): Word32), frameInfo = None, func = {args = (GCState, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = false, mayGC = false, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Int32), res = None}, return = Bits0, symbolScope = private, target = MLton_halt}, return = None}
	; GetOperands
	%r250 = bitcast %struct.GC_state* @gcState to %Pointer
	%r251 = load %Pointer, %Pointer* %stackTop
	%r252 = getelementptr inbounds i8, %Pointer %r251, i32 0
	%r253 = bitcast %Pointer %r252 to %Word32*
	%r254 = load %Word32, %Word32* %r253
	; FlushFrontier
	%r255 = bitcast %struct.GC_state* @gcState to %Pointer
	%r256 = getelementptr inbounds i8, %Pointer %r255, i32 0
	%r257 = bitcast %Pointer %r256 to %Pointer*
	%r258 = load %Pointer, %Pointer* %frontier
	store %Pointer %r258, %Pointer* %r257
	; FlushStackTop
	%r259 = bitcast %struct.GC_state* @gcState to %Pointer
	%r260 = getelementptr inbounds i8, %Pointer %r259, i32 16
	%r261 = bitcast %Pointer %r260 to %Pointer*
	%r262 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r262, %Pointer* %r261
	; Call
	call void @MLton_halt(%Pointer %r250, %Word32 %r254)
	unreachable

L_1296:
	; Goto L_1297
	br label %L_1297

L_1295:
	; RP(0): Objptr (opt_37)  = OP (SP(8): Objptr (opt_37), 8): Objptr (opt_37)
	%r263 = load %Pointer, %Pointer* %stackTop
	%r264 = getelementptr inbounds i8, %Pointer %r263, i32 8
	%r265 = bitcast %Pointer %r264 to %Objptr*
	%r266 = load %Objptr, %Objptr* %r265
	%r267 = getelementptr inbounds i8, %Objptr %r266, i32 8
	%r268 = bitcast %Objptr %r267 to %Objptr*
	%r269 = load %Objptr, %Objptr* %r268
	store %Objptr %r269, %Objptr* %regP_0
	; RP(1): Objptr (opt_20)  = OP (SP(8): Objptr (opt_37), 0): Objptr (opt_20)
	%r270 = load %Pointer, %Pointer* %stackTop
	%r271 = getelementptr inbounds i8, %Pointer %r270, i32 8
	%r272 = bitcast %Pointer %r271 to %Objptr*
	%r273 = load %Objptr, %Objptr* %r272
	%r274 = getelementptr inbounds i8, %Objptr %r273, i32 0
	%r275 = bitcast %Objptr %r274 to %Objptr*
	%r276 = load %Objptr, %Objptr* %r275
	store %Objptr %r276, %Objptr* %regP_1
	; SP(8): Objptr (opt_37)  = RP(0): Objptr (opt_37)
	%r277 = load %Objptr, %Objptr* %regP_0
	%r278 = load %Pointer, %Pointer* %stackTop
	%r279 = getelementptr inbounds i8, %Pointer %r278, i32 8
	%r280 = bitcast %Pointer %r279 to %Objptr*
	store %Objptr %r277, %Objptr* %r280
	; RP(0): Objptr (opt_20)  = RP(1): Objptr (opt_20)
	%r281 = load %Objptr, %Objptr* %regP_1
	store %Objptr %r281, %Objptr* %regP_0
	; Goto L_1284
	br label %L_1284

L_1294:
	; switch {test = Cast (SP(8): Objptr (opt_37), Bits64), default = Some L_1295, cases = ((0x1, L_1296))}
	%r282 = load %Pointer, %Pointer* %stackTop
	%r283 = getelementptr inbounds i8, %Pointer %r282, i32 8
	%r284 = bitcast %Pointer %r283 to %Objptr*
	%r285 = load %Objptr, %Objptr* %r284
	%r286 = ptrtoint %Objptr %r285 to %Word64
	switch %Word64 %r286, label %L_1295 [
		%Word64 1, label %L_1296
	]

L_1293:
	; Goto L_1294
	br label %L_1294

L_1292:
	; RP(0): Objptr (opt_39)  = OP (SP(32): Objptr (opt_39), 8): Objptr (opt_39)
	%r287 = load %Pointer, %Pointer* %stackTop
	%r288 = getelementptr inbounds i8, %Pointer %r287, i32 32
	%r289 = bitcast %Pointer %r288 to %Objptr*
	%r290 = load %Objptr, %Objptr* %r289
	%r291 = getelementptr inbounds i8, %Objptr %r290, i32 8
	%r292 = bitcast %Objptr %r291 to %Objptr*
	%r293 = load %Objptr, %Objptr* %r292
	store %Objptr %r293, %Objptr* %regP_0
	; RP(1): Objptr (opt_18)  = OP (SP(32): Objptr (opt_39), 0): Objptr (opt_18)
	%r294 = load %Pointer, %Pointer* %stackTop
	%r295 = getelementptr inbounds i8, %Pointer %r294, i32 32
	%r296 = bitcast %Pointer %r295 to %Objptr*
	%r297 = load %Objptr, %Objptr* %r296
	%r298 = getelementptr inbounds i8, %Objptr %r297, i32 0
	%r299 = bitcast %Objptr %r298 to %Objptr*
	%r300 = load %Objptr, %Objptr* %r299
	store %Objptr %r300, %Objptr* %regP_1
	; SP(32): Objptr (opt_39)  = RP(0): Objptr (opt_39)
	%r301 = load %Objptr, %Objptr* %regP_0
	%r302 = load %Pointer, %Pointer* %stackTop
	%r303 = getelementptr inbounds i8, %Pointer %r302, i32 32
	%r304 = bitcast %Pointer %r303 to %Objptr*
	store %Objptr %r301, %Objptr* %r304
	; RP(0): Objptr (opt_18)  = RP(1): Objptr (opt_18)
	%r305 = load %Objptr, %Objptr* %regP_1
	store %Objptr %r305, %Objptr* %regP_0
	; Goto L_1287
	br label %L_1287

L_1291:
	; switch {test = Cast (SP(32): Objptr (opt_39), Bits64), default = Some L_1292, cases = ((0x1, L_1293))}
	%r306 = load %Pointer, %Pointer* %stackTop
	%r307 = getelementptr inbounds i8, %Pointer %r306, i32 32
	%r308 = bitcast %Pointer %r307 to %Objptr*
	%r309 = load %Objptr, %Objptr* %r308
	%r310 = ptrtoint %Objptr %r309 to %Word64
	switch %Word64 %r310, label %L_1292 [
		%Word64 1, label %L_1293
	]

L_1290:
	; Goto L_1291
	br label %L_1291

L_1289:
	; Push(-48)
	%r311 = load %Pointer, %Pointer* %stackTop
	%r312 = getelementptr inbounds i8, %Pointer %r311, i32 -48
	store %Pointer %r312, %Pointer* %stackTop
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r313 = bitcast %struct.GC_state* @gcState to %Pointer
	%r314 = getelementptr inbounds i8, %Pointer %r313, i32 8
	%r315 = bitcast %Pointer %r314 to %CPointer*
	%r316 = load %CPointer, %CPointer* %r315
	%r317 = load %Pointer, %Pointer* %frontier
	%r319 = icmp ult %Pointer %r316, %r317
	%r318 = zext i1 %r319 to %Word32
	store %Word32 %r318, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_1290), (0x1, L_1298))}
	%r320 = load %Word32, %Word32* %regW32_0
	%r321 = trunc %Word32 %r320 to i1
	br i1 %r321, label %L_1298, label %L_1290

L_1288:
	; RP(0): Objptr (opt_10)  = OP (Cast (RP(3): Objptr (opt_41, opt_40), Objptr (opt_40)), 8): Objptr (opt_10)
	%r322 = load %Objptr, %Objptr* %regP_3
	%r323 = bitcast %Objptr %r322 to %Objptr
	%r324 = getelementptr inbounds i8, %Objptr %r323, i32 8
	%r325 = bitcast %Objptr %r324 to %Objptr*
	%r326 = load %Objptr, %Objptr* %r325
	store %Objptr %r326, %Objptr* %regP_0
	; RP(1): Objptr (opt_11)  = OP (Cast (RP(3): Objptr (opt_41, opt_40), Objptr (opt_40)), 0): Objptr (opt_11)
	%r327 = load %Objptr, %Objptr* %regP_3
	%r328 = bitcast %Objptr %r327 to %Objptr
	%r329 = getelementptr inbounds i8, %Objptr %r328, i32 0
	%r330 = bitcast %Objptr %r329 to %Objptr*
	%r331 = load %Objptr, %Objptr* %r330
	store %Objptr %r331, %Objptr* %regP_1
	; CW64 (<Frontier>)  = 0x3D
	%r332 = load %Pointer, %Pointer* %frontier
	%r333 = bitcast %Pointer %r332 to %Word64*
	store %Word64 61, %Word64* %r333
	; RQ(108): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r334 = load %Pointer, %Pointer* %frontier
	%r336 = ptrtoint %Pointer %r334 to %uintptr_t
	%r337 = add %uintptr_t %r336, 8
	%r335 = inttoptr %uintptr_t %r337 to %Pointer
	store %CPointer %r335, %CPointer* %regQ_108
	; RP(4): Objptr (opt_30)  = Cast (RQ(108): CPointer, Objptr (opt_30))
	%r338 = load %CPointer, %CPointer* %regQ_108
	%r339 = bitcast %CPointer %r338 to %Objptr
	store %Objptr %r339, %Objptr* %regP_4
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r340 = load %Pointer, %Pointer* %frontier
	%r342 = ptrtoint %Pointer %r340 to %uintptr_t
	%r343 = add %uintptr_t %r342, 24
	%r341 = inttoptr %uintptr_t %r343 to %Pointer
	store %Pointer %r341, %Pointer* %frontier
	; OP (RP(4): Objptr (opt_30), 0): Objptr (opt_10)  = RP(0): Objptr (opt_10)
	%r344 = load %Objptr, %Objptr* %regP_0
	%r345 = load %Objptr, %Objptr* %regP_4
	%r346 = getelementptr inbounds i8, %Objptr %r345, i32 0
	%r347 = bitcast %Objptr %r346 to %Objptr*
	store %Objptr %r344, %Objptr* %r347
	; OP (RP(4): Objptr (opt_30), 8): Objptr (opt_11)  = RP(1): Objptr (opt_11)
	%r348 = load %Objptr, %Objptr* %regP_1
	%r349 = load %Objptr, %Objptr* %regP_4
	%r350 = getelementptr inbounds i8, %Objptr %r349, i32 8
	%r351 = bitcast %Objptr %r350 to %Objptr*
	store %Objptr %r348, %Objptr* %r351
	; SQ(16): Label L_1300  = L_1300
	%r352 = inttoptr %Word32 180 to %CPointer
	%r353 = load %Pointer, %Pointer* %stackTop
	%r354 = getelementptr inbounds i8, %Pointer %r353, i32 16
	%r355 = bitcast %Pointer %r354 to %CPointer*
	store %CPointer %r352, %CPointer* %r355
	; RQ(107): CPointer  = CPointer_add (<StackTop>, 0x18)
	%r356 = load %Pointer, %Pointer* %stackTop
	%r358 = ptrtoint %Pointer %r356 to %uintptr_t
	%r359 = add %uintptr_t %r358, 24
	%r357 = inttoptr %uintptr_t %r359 to %Pointer
	store %CPointer %r357, %CPointer* %regQ_107
	; RW64(16): Word64  = CPointer_diff (RQ(107): CPointer, OQ (<GCState>, 1616): CPointer)
	%r360 = load %CPointer, %CPointer* %regQ_107
	%r361 = bitcast %struct.GC_state* @gcState to %Pointer
	%r362 = getelementptr inbounds i8, %Pointer %r361, i32 1616
	%r363 = bitcast %Pointer %r362 to %CPointer*
	%r364 = load %CPointer, %CPointer* %r363
	%r366 = ptrtoint %Pointer %r360 to %uintptr_t
	%r367 = ptrtoint %Pointer %r364 to %uintptr_t
	%r365 = sub %uintptr_t %r366, %r367
	store %Word64 %r365, %Word64* %regW64_16
	; OW64 (<GCState>, 32): ExnStack  = Cast (RW64(16): Word64, ExnStack)
	%r368 = load %Word64, %Word64* %regW64_16
	%r369 = bitcast %Word64 %r368 to %Word64
	%r370 = bitcast %struct.GC_state* @gcState to %Pointer
	%r371 = getelementptr inbounds i8, %Pointer %r370, i32 32
	%r372 = bitcast %Pointer %r371 to %Word64*
	store %Word64 %r369, %Word64* %r372
	; SP(48): Objptr (opt_30)  = RP(4): Objptr (opt_30)
	%r373 = load %Objptr, %Objptr* %regP_4
	%r374 = load %Pointer, %Pointer* %stackTop
	%r375 = getelementptr inbounds i8, %Pointer %r374, i32 48
	%r376 = bitcast %Pointer %r375 to %Objptr*
	store %Objptr %r373, %Objptr* %r376
	; SP(56): Objptr (opt_15)  = RP(2): Objptr (opt_15)
	%r377 = load %Objptr, %Objptr* %regP_2
	%r378 = load %Pointer, %Pointer* %stackTop
	%r379 = getelementptr inbounds i8, %Pointer %r378, i32 56
	%r380 = bitcast %Pointer %r379 to %Objptr*
	store %Objptr %r377, %Objptr* %r380
	%r381 = load %Pointer, %Pointer* %stackTop
	%r382 = getelementptr inbounds i8, %Pointer %r381, i32 40
	%r383 = bitcast %Pointer %r382 to %uintptr_t*
	store %uintptr_t 178, %uintptr_t* %r383
	; Push(48)
	%r384 = load %Pointer, %Pointer* %stackTop
	%r385 = getelementptr inbounds i8, %Pointer %r384, i32 48
	store %Pointer %r385, %Pointer* %stackTop
	br label %flushBuf_0

L_1287:
	; RP(1): Objptr (opt_16)  = OP (RP(0): Objptr (opt_18), 16): Objptr (opt_16)
	%r386 = load %Objptr, %Objptr* %regP_0
	%r387 = getelementptr inbounds i8, %Objptr %r386, i32 16
	%r388 = bitcast %Objptr %r387 to %Objptr*
	%r389 = load %Objptr, %Objptr* %r388
	store %Objptr %r389, %Objptr* %regP_1
	; RP(2): Objptr (opt_15)  = OP (RP(0): Objptr (opt_18), 24): Objptr (opt_15)
	%r390 = load %Objptr, %Objptr* %regP_0
	%r391 = getelementptr inbounds i8, %Objptr %r390, i32 24
	%r392 = bitcast %Objptr %r391 to %Objptr*
	%r393 = load %Objptr, %Objptr* %r392
	store %Objptr %r393, %Objptr* %regP_2
	; RP(3): Objptr (opt_41, opt_40)  = OP (RP(1): Objptr (opt_16), 0): Objptr (opt_41, opt_40)
	%r394 = load %Objptr, %Objptr* %regP_1
	%r395 = getelementptr inbounds i8, %Objptr %r394, i32 0
	%r396 = bitcast %Objptr %r395 to %Objptr*
	%r397 = load %Objptr, %Objptr* %r396
	store %Objptr %r397, %Objptr* %regP_3
	; RW64(0): Word64  = WordU64_rshift (OW64 (RP(3): Objptr (opt_41, opt_40), ~8): Word64, 0x1)
	%r398 = load %Objptr, %Objptr* %regP_3
	%r399 = getelementptr inbounds i8, %Objptr %r398, i32 -8
	%r400 = bitcast %Objptr %r399 to %Word64*
	%r401 = load %Word64, %Word64* %r400
	%r402 = zext %Word32 1 to %Word64
	%r403 = lshr %Word64 %r401, %r402
	store %Word64 %r403, %Word64* %regW64_0
	; switch {test = RW64(0): Word64, default = None, cases = ((0x28, L_1288), (0x29, L_1303))}
	%r404 = load %Word64, %Word64* %regW64_0
	switch %Word64 %r404, label %L_1288 [
		%Word64 41, label %L_1303
	]

L_1286:
	; RP(0): Objptr (opt_39)  = OP (SP(32): Objptr (opt_39), 8): Objptr (opt_39)
	%r405 = load %Pointer, %Pointer* %stackTop
	%r406 = getelementptr inbounds i8, %Pointer %r405, i32 32
	%r407 = bitcast %Pointer %r406 to %Objptr*
	%r408 = load %Objptr, %Objptr* %r407
	%r409 = getelementptr inbounds i8, %Objptr %r408, i32 8
	%r410 = bitcast %Objptr %r409 to %Objptr*
	%r411 = load %Objptr, %Objptr* %r410
	store %Objptr %r411, %Objptr* %regP_0
	; RP(1): Objptr (opt_18)  = OP (SP(32): Objptr (opt_39), 0): Objptr (opt_18)
	%r412 = load %Pointer, %Pointer* %stackTop
	%r413 = getelementptr inbounds i8, %Pointer %r412, i32 32
	%r414 = bitcast %Pointer %r413 to %Objptr*
	%r415 = load %Objptr, %Objptr* %r414
	%r416 = getelementptr inbounds i8, %Objptr %r415, i32 0
	%r417 = bitcast %Objptr %r416 to %Objptr*
	%r418 = load %Objptr, %Objptr* %r417
	store %Objptr %r418, %Objptr* %regP_1
	; SP(32): Objptr (opt_39)  = RP(0): Objptr (opt_39)
	%r419 = load %Objptr, %Objptr* %regP_0
	%r420 = load %Pointer, %Pointer* %stackTop
	%r421 = getelementptr inbounds i8, %Pointer %r420, i32 32
	%r422 = bitcast %Pointer %r421 to %Objptr*
	store %Objptr %r419, %Objptr* %r422
	; RP(0): Objptr (opt_18)  = RP(1): Objptr (opt_18)
	%r423 = load %Objptr, %Objptr* %regP_1
	store %Objptr %r423, %Objptr* %regP_0
	; Goto L_1287
	br label %L_1287

L_1285:
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r424 = bitcast %struct.GC_state* @gcState to %Pointer
	%r425 = getelementptr inbounds i8, %Pointer %r424, i32 8
	%r426 = bitcast %Pointer %r425 to %CPointer*
	%r427 = load %CPointer, %CPointer* %r426
	%r428 = load %Pointer, %Pointer* %frontier
	%r430 = icmp ult %Pointer %r427, %r428
	%r429 = zext i1 %r430 to %Word32
	store %Word32 %r429, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_1286), (0x1, L_1311))}
	%r431 = load %Word32, %Word32* %regW32_0
	%r432 = trunc %Word32 %r431 to i1
	br i1 %r432, label %L_1311, label %L_1286

L_1284:
	; SP(32): Objptr (opt_39)  = OP (RP(0): Objptr (opt_20), 0): Objptr (opt_39)
	%r433 = load %Objptr, %Objptr* %regP_0
	%r434 = getelementptr inbounds i8, %Objptr %r433, i32 0
	%r435 = bitcast %Objptr %r434 to %Objptr*
	%r436 = load %Objptr, %Objptr* %r435
	%r437 = load %Pointer, %Pointer* %stackTop
	%r438 = getelementptr inbounds i8, %Pointer %r437, i32 32
	%r439 = bitcast %Pointer %r438 to %Objptr*
	store %Objptr %r436, %Objptr* %r439
	; switch {test = Cast (SP(32): Objptr (opt_39), Bits64), default = Some L_1285, cases = ((0x1, L_1313))}
	%r440 = load %Pointer, %Pointer* %stackTop
	%r441 = getelementptr inbounds i8, %Pointer %r440, i32 32
	%r442 = bitcast %Pointer %r441 to %Objptr*
	%r443 = load %Objptr, %Objptr* %r442
	%r444 = ptrtoint %Objptr %r443 to %Word64
	switch %Word64 %r444, label %L_1285 [
		%Word64 1, label %L_1313
	]

L_1283:
	; RP(1): Objptr (opt_37)  = OP (RP(0): Objptr (opt_37), 8): Objptr (opt_37)
	%r445 = load %Objptr, %Objptr* %regP_0
	%r446 = getelementptr inbounds i8, %Objptr %r445, i32 8
	%r447 = bitcast %Objptr %r446 to %Objptr*
	%r448 = load %Objptr, %Objptr* %r447
	store %Objptr %r448, %Objptr* %regP_1
	; RP(2): Objptr (opt_20)  = OP (RP(0): Objptr (opt_37), 0): Objptr (opt_20)
	%r449 = load %Objptr, %Objptr* %regP_0
	%r450 = getelementptr inbounds i8, %Objptr %r449, i32 0
	%r451 = bitcast %Objptr %r450 to %Objptr*
	%r452 = load %Objptr, %Objptr* %r451
	store %Objptr %r452, %Objptr* %regP_2
	; SP(8): Objptr (opt_37)  = RP(1): Objptr (opt_37)
	%r453 = load %Objptr, %Objptr* %regP_1
	%r454 = load %Pointer, %Pointer* %stackTop
	%r455 = getelementptr inbounds i8, %Pointer %r454, i32 8
	%r456 = bitcast %Pointer %r455 to %Objptr*
	store %Objptr %r453, %Objptr* %r456
	; RP(0): Objptr (opt_20)  = RP(2): Objptr (opt_20)
	%r457 = load %Objptr, %Objptr* %regP_2
	store %Objptr %r457, %Objptr* %regP_0
	; Goto L_1284
	br label %L_1284

L_1282:
	; RP(0): Objptr (opt_37)  = OP (RP(1): Objptr (opt_26), 0): Objptr (opt_37)
	%r458 = load %Objptr, %Objptr* %regP_1
	%r459 = getelementptr inbounds i8, %Objptr %r458, i32 0
	%r460 = bitcast %Objptr %r459 to %Objptr*
	%r461 = load %Objptr, %Objptr* %r460
	store %Objptr %r461, %Objptr* %regP_0
	; switch {test = Cast (RP(0): Objptr (opt_37), Bits64), default = Some L_1283, cases = ((0x1, L_1314))}
	%r462 = load %Objptr, %Objptr* %regP_0
	%r463 = ptrtoint %Objptr %r462 to %Word64
	switch %Word64 %r463, label %L_1283 [
		%Word64 1, label %L_1314
	]

L_1281:
	; Raise
	%r464 = bitcast %struct.GC_state* @gcState to %Pointer
	%r465 = getelementptr inbounds i8, %Pointer %r464, i32 1616
	%r466 = bitcast %Pointer %r465 to %Pointer*
	%r467 = load %Pointer, %Pointer* %r466
	%r468 = bitcast %struct.GC_state* @gcState to %Pointer
	%r469 = getelementptr inbounds i8, %Pointer %r468, i32 32
	%r470 = bitcast %Pointer %r469 to i32*
	%r471 = load i32, i32* %r470
	%r472 = getelementptr inbounds i8, %Pointer %r467, i32 %r471
	store %Pointer %r472, %Pointer* %stackTop
	%r473 = load %Pointer, %Pointer* %stackTop
	%r474 = getelementptr inbounds i8, %Pointer %r473, i32 -8
	%r475 = bitcast %Pointer %r474 to %uintptr_t*
	%r476 = load %uintptr_t, %uintptr_t* %r475
	store %uintptr_t %r476, %uintptr_t* %l_nextFun
	br label %top

L_1280:
	; XW8 (RP(0): Objptr (opt_11), RW64(0): Word64, 1, 0): Word8  = 0x0
	%r477 = load %Objptr, %Objptr* %regP_0
	%r478 = load %Word64, %Word64* %regW64_0
	%r479 = mul nsw %Word64 %r478, 1
	%r480 = add nsw %Word64 %r479, 0
	%r481 = getelementptr inbounds i8, %Objptr %r477, %Word64 %r480
	%r482 = bitcast %Objptr %r481 to %Word8*
	store %Word8 0, %Word8* %r482
	; RW64(1): Word64  = Word64_add (RW64(0): Word64, 0x1)
	%r483 = load %Word64, %Word64* %regW64_0
	%r484 = add %Word64 %r483, 1
	store %Word64 %r484, %Word64* %regW64_1
	; RW64(0): Word64  = RW64(1): Word64
	%r485 = load %Word64, %Word64* %regW64_1
	store %Word64 %r485, %Word64* %regW64_0
	; Goto loop_58
	br label %loop_58

L_1279:
	; RW32(0): Word32  = 0x20
	store %Word32 32, %Word32* %regW32_0
	; RW32(1): Word32  = SW32(0): Word32
	%r486 = load %Pointer, %Pointer* %stackTop
	%r487 = getelementptr inbounds i8, %Pointer %r486, i32 0
	%r488 = bitcast %Pointer %r487 to %Word32*
	%r489 = load %Word32, %Word32* %r488
	store %Word32 %r489, %Word32* %regW32_1
	; SP(40): Objptr (opt_11)  = RP(0): Objptr (opt_11)
	%r490 = load %Objptr, %Objptr* %regP_0
	%r491 = load %Pointer, %Pointer* %stackTop
	%r492 = getelementptr inbounds i8, %Pointer %r491, i32 40
	%r493 = bitcast %Pointer %r492 to %Objptr*
	store %Objptr %r490, %Objptr* %r493
	; Goto loop_56
	br label %loop_56

L_1278:
	; Goto L_1233
	br label %L_1233

L_1277:
	; switch {test = SW32(4): Word32, default = None, cases = ((0x0, L_1278), (0x1, L_1279))}
	%r494 = load %Pointer, %Pointer* %stackTop
	%r495 = getelementptr inbounds i8, %Pointer %r494, i32 4
	%r496 = bitcast %Pointer %r495 to %Word32*
	%r497 = load %Word32, %Word32* %r496
	%r498 = trunc %Word32 %r497 to i1
	br i1 %r498, label %L_1279, label %L_1278

loop_58:
	; RW32(0): Word32  = WordS64_lt (RW64(0): Word64, 0x21)
	%r499 = load %Word64, %Word64* %regW64_0
	%r501 = icmp slt %Word64 %r499, 33
	%r500 = zext i1 %r501 to %Word32
	store %Word32 %r500, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_1277), (0x1, L_1280))}
	%r502 = load %Word32, %Word32* %regW32_0
	%r503 = trunc %Word32 %r502 to i1
	br i1 %r503, label %L_1280, label %L_1277

L_1276:
	; Push(-48)
	%r504 = load %Pointer, %Pointer* %stackTop
	%r505 = getelementptr inbounds i8, %Pointer %r504, i32 -48
	store %Pointer %r505, %Pointer* %stackTop
	%r506 = load %Objptr, %Objptr* @CReturnP
	store %Objptr %r506, %Objptr* %regP_0
	; RW64(0): Word64  = 0x0
	store %Word64 0, %Word64* %regW64_0
	; Goto loop_58
	br label %loop_58

L_1275:
	; RW32(0): Word32  = Word32_add (OW32 (<GCState>, 68): Word32, 0xFFFFFFFF)
	%r507 = bitcast %struct.GC_state* @gcState to %Pointer
	%r508 = getelementptr inbounds i8, %Pointer %r507, i32 68
	%r509 = bitcast %Pointer %r508 to %Word32*
	%r510 = load %Word32, %Word32* %r509
	%r511 = add %Word32 %r510, 4294967295
	store %Word32 %r511, %Word32* %regW32_0
	; OW32 (<GCState>, 68): Word32  = RW32(0): Word32
	%r512 = load %Word32, %Word32* %regW32_0
	%r513 = bitcast %struct.GC_state* @gcState to %Pointer
	%r514 = getelementptr inbounds i8, %Pointer %r513, i32 68
	%r515 = bitcast %Pointer %r514 to %Word32*
	store %Word32 %r512, %Word32* %r515
	; CCall {args = (<GCState>, 0x0, 0x21, 0x17), frameInfo = Some {frameLayoutsIndex = 177}, func = {args = (GCState, Word64, Word64, Word64), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int64, Word64), res = Some Objptr}, return = Objptr (opt_11), symbolScope = private, target = GC_arrayAllocate}, return = Some L_1276}
	; GetOperands
	%r516 = bitcast %struct.GC_state* @gcState to %Pointer
	%r517 = load %Pointer, %Pointer* %stackTop
	%r518 = getelementptr inbounds i8, %Pointer %r517, i32 40
	%r519 = bitcast %Pointer %r518 to %uintptr_t*
	store %uintptr_t 177, %uintptr_t* %r519
	; Push(48)
	%r520 = load %Pointer, %Pointer* %stackTop
	%r521 = getelementptr inbounds i8, %Pointer %r520, i32 48
	store %Pointer %r521, %Pointer* %stackTop
	; FlushFrontier
	%r522 = bitcast %struct.GC_state* @gcState to %Pointer
	%r523 = getelementptr inbounds i8, %Pointer %r522, i32 0
	%r524 = bitcast %Pointer %r523 to %Pointer*
	%r525 = load %Pointer, %Pointer* %frontier
	store %Pointer %r525, %Pointer* %r524
	; FlushStackTop
	%r526 = bitcast %struct.GC_state* @gcState to %Pointer
	%r527 = getelementptr inbounds i8, %Pointer %r526, i32 16
	%r528 = bitcast %Pointer %r527 to %Pointer*
	%r529 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r529, %Pointer* %r528
	; Call
	%r530 = call %Objptr @GC_arrayAllocate(%Pointer %r516, %Word64 0, %Word64 33, %Word64 23)
	store %Objptr %r530, %Objptr* @CReturnP
	; CacheFrontier
	%r531 = bitcast %struct.GC_state* @gcState to %Pointer
	%r532 = getelementptr inbounds i8, %Pointer %r531, i32 0
	%r533 = bitcast %Pointer %r532 to %Pointer*
	%r534 = load %Pointer, %Pointer* %r533
	store %Pointer %r534, %Pointer* %frontier
	; CacheStackTop
	%r535 = bitcast %struct.GC_state* @gcState to %Pointer
	%r536 = getelementptr inbounds i8, %Pointer %r535, i32 16
	%r537 = bitcast %Pointer %r536 to %Pointer*
	%r538 = load %Pointer, %Pointer* %r537
	store %Pointer %r538, %Pointer* %stackTop
	br label %L_1276

L_1274:
	; RW32(0): Word32  = OW32 (<GCState>, 68): Word32
	%r539 = bitcast %struct.GC_state* @gcState to %Pointer
	%r540 = getelementptr inbounds i8, %Pointer %r539, i32 68
	%r541 = bitcast %Pointer %r540 to %Word32*
	%r542 = load %Word32, %Word32* %r541
	store %Word32 %r542, %Word32* %regW32_0
	; RW32(1): Word32  = Word32_equal (RW32(0): Word32, 0x0)
	%r543 = load %Word32, %Word32* %regW32_0
	%r545 = icmp eq %Word32 %r543, 0
	%r544 = zext i1 %r545 to %Word32
	store %Word32 %r544, %Word32* %regW32_1
	; switch {test = RW32(1): Word32, default = None, cases = ((0x0, L_1275), (0x1, L_1281))}
	%r546 = load %Word32, %Word32* %regW32_1
	%r547 = trunc %Word32 %r546 to i1
	br i1 %r547, label %L_1281, label %L_1275

L_1273:
	; Raise
	%r548 = bitcast %struct.GC_state* @gcState to %Pointer
	%r549 = getelementptr inbounds i8, %Pointer %r548, i32 1616
	%r550 = bitcast %Pointer %r549 to %Pointer*
	%r551 = load %Pointer, %Pointer* %r550
	%r552 = bitcast %struct.GC_state* @gcState to %Pointer
	%r553 = getelementptr inbounds i8, %Pointer %r552, i32 32
	%r554 = bitcast %Pointer %r553 to i32*
	%r555 = load i32, i32* %r554
	%r556 = getelementptr inbounds i8, %Pointer %r551, i32 %r555
	store %Pointer %r556, %Pointer* %stackTop
	%r557 = load %Pointer, %Pointer* %stackTop
	%r558 = getelementptr inbounds i8, %Pointer %r557, i32 -8
	%r559 = bitcast %Pointer %r558 to %uintptr_t*
	%r560 = load %uintptr_t, %uintptr_t* %r559
	store %uintptr_t %r560, %uintptr_t* %l_nextFun
	br label %top

L_1272:
	; RW32(0): Word32  = 0x20
	store %Word32 32, %Word32* %regW32_0
	; RW32(1): Word32  = SW32(0): Word32
	%r561 = load %Pointer, %Pointer* %stackTop
	%r562 = getelementptr inbounds i8, %Pointer %r561, i32 0
	%r563 = bitcast %Pointer %r562 to %Word32*
	%r564 = load %Word32, %Word32* %r563
	store %Word32 %r564, %Word32* %regW32_1
	; SP(40): Objptr (opt_11)  = RP(0): Objptr (opt_11)
	%r565 = load %Objptr, %Objptr* %regP_0
	%r566 = load %Pointer, %Pointer* %stackTop
	%r567 = getelementptr inbounds i8, %Pointer %r566, i32 40
	%r568 = bitcast %Pointer %r567 to %Objptr*
	store %Objptr %r565, %Objptr* %r568
	; Goto loop_56
	br label %loop_56

L_1271:
	; XW8 (SP(40): Objptr (opt_11), RW64(0): Word64, 1, 0): Word8  = 0x7E
	%r569 = load %Pointer, %Pointer* %stackTop
	%r570 = getelementptr inbounds i8, %Pointer %r569, i32 40
	%r571 = bitcast %Pointer %r570 to %Objptr*
	%r572 = load %Objptr, %Objptr* %r571
	%r573 = load %Word64, %Word64* %regW64_0
	%r574 = mul nsw %Word64 %r573, 1
	%r575 = add nsw %Word64 %r574, 0
	%r576 = getelementptr inbounds i8, %Objptr %r572, %Word64 %r575
	%r577 = bitcast %Objptr %r576 to %Word8*
	store %Word8 126, %Word8* %r577
	; RW32(0): Word32  = RW32(1): Word32
	%r578 = load %Word32, %Word32* %regW32_1
	store %Word32 %r578, %Word32* %regW32_0
	; Goto L_1245
	br label %L_1245

L_1270:
	; Goto L_1235
	br label %L_1235

L_1269:
	; RW64(0): Word64  = WordS32_extdToWord64 (RW32(1): Word32)
	%r579 = load %Word32, %Word32* %regW32_1
	%r580 = sext %Word32 %r579 to %Word64
	store %Word64 %r580, %Word64* %regW64_0
	; RW32(0): Word32  = WordU64_lt (RW64(0): Word64, RW64(1): Word64)
	%r581 = load %Word64, %Word64* %regW64_0
	%r582 = load %Word64, %Word64* %regW64_1
	%r584 = icmp ult %Word64 %r581, %r582
	%r583 = zext i1 %r584 to %Word32
	store %Word32 %r583, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_1270), (0x1, L_1271))}
	%r585 = load %Word32, %Word32* %regW32_0
	%r586 = trunc %Word32 %r585 to i1
	br i1 %r586, label %L_1271, label %L_1270

L_1268:
	; Arith {prim = WordS32_subCheck, args = (RW32(0): Word32, 0x1), dst = RW32(1): Word32, overflow = L_1235, success = L_1269}
	%r587 = load %Word32, %Word32* %regW32_0
	%r588 = call {%Word32, i1} @llvm.ssub.with.overflow.i32(%Word32 %r587, %Word32 1)
	%r589 = extractvalue {%Word32, i1} %r588, 0
	%r590 = extractvalue {%Word32, i1} %r588, 1
	store %Word32 %r589, %Word32* %regW32_1
	br i1 %r590, label %L_1235, label %L_1269

L_1267:
	; Goto L_1235
	br label %L_1235

L_1266:
	; SP(56): Objptr (opt_11)  = glob {index = 22, isRoot = true, ty = Objptr (opt_11)}
	%r591 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 22
	%r592 = load %Objptr, %Objptr* %r591
	%r593 = load %Pointer, %Pointer* %stackTop
	%r594 = getelementptr inbounds i8, %Pointer %r593, i32 56
	%r595 = bitcast %Pointer %r594 to %Objptr*
	store %Objptr %r592, %Objptr* %r595
	; Goto L_join_19
	br label %L_join_19

L_1265:
	; Push(-72)
	%r596 = load %Pointer, %Pointer* %stackTop
	%r597 = getelementptr inbounds i8, %Pointer %r596, i32 -72
	store %Pointer %r597, %Pointer* %stackTop
	; Goto L_1263
	br label %L_1263

L_1264:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 176}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_1265}
	; GetOperands
	%r598 = bitcast %struct.GC_state* @gcState to %Pointer
	%r599 = load %Pointer, %Pointer* %stackTop
	%r600 = getelementptr inbounds i8, %Pointer %r599, i32 64
	%r601 = bitcast %Pointer %r600 to %uintptr_t*
	store %uintptr_t 176, %uintptr_t* %r601
	; Push(72)
	%r602 = load %Pointer, %Pointer* %stackTop
	%r603 = getelementptr inbounds i8, %Pointer %r602, i32 72
	store %Pointer %r603, %Pointer* %stackTop
	; FlushFrontier
	%r604 = bitcast %struct.GC_state* @gcState to %Pointer
	%r605 = getelementptr inbounds i8, %Pointer %r604, i32 0
	%r606 = bitcast %Pointer %r605 to %Pointer*
	%r607 = load %Pointer, %Pointer* %frontier
	store %Pointer %r607, %Pointer* %r606
	; FlushStackTop
	%r608 = bitcast %struct.GC_state* @gcState to %Pointer
	%r609 = getelementptr inbounds i8, %Pointer %r608, i32 16
	%r610 = bitcast %Pointer %r609 to %Pointer*
	%r611 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r611, %Pointer* %r610
	; Call
	call void @GC_collect(%Pointer %r598, %Word64 0, %Word32 0)
	; CacheFrontier
	%r612 = bitcast %struct.GC_state* @gcState to %Pointer
	%r613 = getelementptr inbounds i8, %Pointer %r612, i32 0
	%r614 = bitcast %Pointer %r613 to %Pointer*
	%r615 = load %Pointer, %Pointer* %r614
	store %Pointer %r615, %Pointer* %frontier
	; CacheStackTop
	%r616 = bitcast %struct.GC_state* @gcState to %Pointer
	%r617 = getelementptr inbounds i8, %Pointer %r616, i32 16
	%r618 = bitcast %Pointer %r617 to %Pointer*
	%r619 = load %Pointer, %Pointer* %r618
	store %Pointer %r619, %Pointer* %stackTop
	br label %L_1265

L_1263:
	; Goto L_1252
	br label %L_1252

L_1262:
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r620 = bitcast %struct.GC_state* @gcState to %Pointer
	%r621 = getelementptr inbounds i8, %Pointer %r620, i32 8
	%r622 = bitcast %Pointer %r621 to %CPointer*
	%r623 = load %CPointer, %CPointer* %r622
	%r624 = load %Pointer, %Pointer* %frontier
	%r626 = icmp ult %Pointer %r623, %r624
	%r625 = zext i1 %r626 to %Word32
	store %Word32 %r625, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_1263), (0x1, L_1264))}
	%r627 = load %Word32, %Word32* %regW32_0
	%r628 = trunc %Word32 %r627 to i1
	br i1 %r628, label %L_1264, label %L_1263

L_1261:
	; RW64(2): Word64  = Word64_add (RW64(1): Word64, SW64(0): Word64)
	%r629 = load %Word64, %Word64* %regW64_1
	%r630 = load %Pointer, %Pointer* %stackTop
	%r631 = getelementptr inbounds i8, %Pointer %r630, i32 0
	%r632 = bitcast %Pointer %r631 to %Word64*
	%r633 = load %Word64, %Word64* %r632
	%r634 = add %Word64 %r629, %r633
	store %Word64 %r634, %Word64* %regW64_2
	; RW8(0): Word8  = XW8 (SP(40): Objptr (opt_11), RW64(2): Word64, 1, 0): Word8
	%r635 = load %Pointer, %Pointer* %stackTop
	%r636 = getelementptr inbounds i8, %Pointer %r635, i32 40
	%r637 = bitcast %Pointer %r636 to %Objptr*
	%r638 = load %Objptr, %Objptr* %r637
	%r639 = load %Word64, %Word64* %regW64_2
	%r640 = mul nsw %Word64 %r639, 1
	%r641 = add nsw %Word64 %r640, 0
	%r642 = getelementptr inbounds i8, %Objptr %r638, %Word64 %r641
	%r643 = bitcast %Objptr %r642 to %Word8*
	%r644 = load %Word8, %Word8* %r643
	store %Word8 %r644, %Word8* %regW8_0
	; XW8 (SP(56): Objptr (opt_11), RW64(1): Word64, 1, 0): Word8  = RW8(0): Word8
	%r645 = load %Word8, %Word8* %regW8_0
	%r646 = load %Pointer, %Pointer* %stackTop
	%r647 = getelementptr inbounds i8, %Pointer %r646, i32 56
	%r648 = bitcast %Pointer %r647 to %Objptr*
	%r649 = load %Objptr, %Objptr* %r648
	%r650 = load %Word64, %Word64* %regW64_1
	%r651 = mul nsw %Word64 %r650, 1
	%r652 = add nsw %Word64 %r651, 0
	%r653 = getelementptr inbounds i8, %Objptr %r649, %Word64 %r652
	%r654 = bitcast %Objptr %r653 to %Word8*
	store %Word8 %r645, %Word8* %r654
	; RW64(3): Word64  = Word64_add (RW64(1): Word64, 0x1)
	%r655 = load %Word64, %Word64* %regW64_1
	%r656 = add %Word64 %r655, 1
	store %Word64 %r656, %Word64* %regW64_3
	; RW64(1): Word64  = RW64(3): Word64
	%r657 = load %Word64, %Word64* %regW64_3
	store %Word64 %r657, %Word64* %regW64_1
	; Goto loop_57
	br label %loop_57

loop_57:
	; RW32(0): Word32  = WordS64_lt (RW64(0): Word64, RW64(1): Word64)
	%r658 = load %Word64, %Word64* %regW64_0
	%r659 = load %Word64, %Word64* %regW64_1
	%r661 = icmp slt %Word64 %r658, %r659
	%r660 = zext i1 %r661 to %Word32
	store %Word32 %r660, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_1261), (0x1, L_1262))}
	%r662 = load %Word32, %Word32* %regW32_0
	%r663 = trunc %Word32 %r662 to i1
	br i1 %r663, label %L_1262, label %L_1261

L_1260:
	; RW64(0): Word64  = Word64_sub (SW64(48): Word64, 0x1)
	%r664 = load %Pointer, %Pointer* %stackTop
	%r665 = getelementptr inbounds i8, %Pointer %r664, i32 48
	%r666 = bitcast %Pointer %r665 to %Word64*
	%r667 = load %Word64, %Word64* %r666
	%r668 = sub %Word64 %r667, 1
	store %Word64 %r668, %Word64* %regW64_0
	; RW64(1): Word64  = 0x0
	store %Word64 0, %Word64* %regW64_1
	; Goto loop_57
	br label %loop_57

L_1259:
	; Push(-72)
	%r669 = load %Pointer, %Pointer* %stackTop
	%r670 = getelementptr inbounds i8, %Pointer %r669, i32 -72
	store %Pointer %r670, %Pointer* %stackTop
	; Goto L_1250
	br label %L_1250

L_1258:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 175}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_1259}
	; GetOperands
	%r671 = bitcast %struct.GC_state* @gcState to %Pointer
	%r672 = load %Pointer, %Pointer* %stackTop
	%r673 = getelementptr inbounds i8, %Pointer %r672, i32 64
	%r674 = bitcast %Pointer %r673 to %uintptr_t*
	store %uintptr_t 175, %uintptr_t* %r674
	; Push(72)
	%r675 = load %Pointer, %Pointer* %stackTop
	%r676 = getelementptr inbounds i8, %Pointer %r675, i32 72
	store %Pointer %r676, %Pointer* %stackTop
	; FlushFrontier
	%r677 = bitcast %struct.GC_state* @gcState to %Pointer
	%r678 = getelementptr inbounds i8, %Pointer %r677, i32 0
	%r679 = bitcast %Pointer %r678 to %Pointer*
	%r680 = load %Pointer, %Pointer* %frontier
	store %Pointer %r680, %Pointer* %r679
	; FlushStackTop
	%r681 = bitcast %struct.GC_state* @gcState to %Pointer
	%r682 = getelementptr inbounds i8, %Pointer %r681, i32 16
	%r683 = bitcast %Pointer %r682 to %Pointer*
	%r684 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r684, %Pointer* %r683
	; Call
	call void @GC_collect(%Pointer %r671, %Word64 0, %Word32 0)
	; CacheFrontier
	%r685 = bitcast %struct.GC_state* @gcState to %Pointer
	%r686 = getelementptr inbounds i8, %Pointer %r685, i32 0
	%r687 = bitcast %Pointer %r686 to %Pointer*
	%r688 = load %Pointer, %Pointer* %r687
	store %Pointer %r688, %Pointer* %frontier
	; CacheStackTop
	%r689 = bitcast %struct.GC_state* @gcState to %Pointer
	%r690 = getelementptr inbounds i8, %Pointer %r689, i32 16
	%r691 = bitcast %Pointer %r690 to %Pointer*
	%r692 = load %Pointer, %Pointer* %r691
	store %Pointer %r692, %Pointer* %stackTop
	br label %L_1259

L_1257:
	; Goto L_1254
	br label %L_1254

L_1256:
	; Push(-24)
	%r693 = load %Pointer, %Pointer* %stackTop
	%r694 = getelementptr inbounds i8, %Pointer %r693, i32 -24
	store %Pointer %r694, %Pointer* %stackTop
	; RP(0): Objptr (opt_34, opt_33, opt_32, opt_31)  = glob {index = 0, isRoot = false, ty = Objptr (opt_34, opt_33, opt_32, opt_31)}
	%r695 = getelementptr inbounds [1 x %Objptr], [1 x %Objptr]* @globalObjptrNonRoot, i32 0, i32 0
	%r696 = load %Objptr, %Objptr* %r695
	store %Objptr %r696, %Objptr* %regP_0
	; OW64 (<GCState>, 32): ExnStack  = SW64(24): ExnStack
	%r697 = load %Pointer, %Pointer* %stackTop
	%r698 = getelementptr inbounds i8, %Pointer %r697, i32 24
	%r699 = bitcast %Pointer %r698 to %Word64*
	%r700 = load %Word64, %Word64* %r699
	%r701 = bitcast %struct.GC_state* @gcState to %Pointer
	%r702 = getelementptr inbounds i8, %Pointer %r701, i32 32
	%r703 = bitcast %Pointer %r702 to %Word64*
	store %Word64 %r700, %Word64* %r703
	; Raise
	%r704 = bitcast %struct.GC_state* @gcState to %Pointer
	%r705 = getelementptr inbounds i8, %Pointer %r704, i32 1616
	%r706 = bitcast %Pointer %r705 to %Pointer*
	%r707 = load %Pointer, %Pointer* %r706
	%r708 = bitcast %struct.GC_state* @gcState to %Pointer
	%r709 = getelementptr inbounds i8, %Pointer %r708, i32 32
	%r710 = bitcast %Pointer %r709 to i32*
	%r711 = load i32, i32* %r710
	%r712 = getelementptr inbounds i8, %Pointer %r707, i32 %r711
	store %Pointer %r712, %Pointer* %stackTop
	%r713 = load %Pointer, %Pointer* %stackTop
	%r714 = getelementptr inbounds i8, %Pointer %r713, i32 -8
	%r715 = bitcast %Pointer %r714 to %uintptr_t*
	%r716 = load %uintptr_t, %uintptr_t* %r715
	store %uintptr_t %r716, %uintptr_t* %l_nextFun
	br label %top

L_1255:
	; Push(-40)
	%r717 = load %Pointer, %Pointer* %stackTop
	%r718 = getelementptr inbounds i8, %Pointer %r717, i32 -40
	store %Pointer %r718, %Pointer* %stackTop
	; RP(0): Objptr (opt_3)  = SP(40): Objptr (opt_3)
	%r719 = load %Pointer, %Pointer* %stackTop
	%r720 = getelementptr inbounds i8, %Pointer %r719, i32 40
	%r721 = bitcast %Pointer %r720 to %Objptr*
	%r722 = load %Objptr, %Objptr* %r721
	store %Objptr %r722, %Objptr* %regP_0
	; OW64 (<GCState>, 32): ExnStack  = SW64(24): ExnStack
	%r723 = load %Pointer, %Pointer* %stackTop
	%r724 = getelementptr inbounds i8, %Pointer %r723, i32 24
	%r725 = bitcast %Pointer %r724 to %Word64*
	%r726 = load %Word64, %Word64* %r725
	%r727 = bitcast %struct.GC_state* @gcState to %Pointer
	%r728 = getelementptr inbounds i8, %Pointer %r727, i32 32
	%r729 = bitcast %Pointer %r728 to %Word64*
	store %Word64 %r726, %Word64* %r729
	; Raise
	%r730 = bitcast %struct.GC_state* @gcState to %Pointer
	%r731 = getelementptr inbounds i8, %Pointer %r730, i32 1616
	%r732 = bitcast %Pointer %r731 to %Pointer*
	%r733 = load %Pointer, %Pointer* %r732
	%r734 = bitcast %struct.GC_state* @gcState to %Pointer
	%r735 = getelementptr inbounds i8, %Pointer %r734, i32 32
	%r736 = bitcast %Pointer %r735 to i32*
	%r737 = load i32, i32* %r736
	%r738 = getelementptr inbounds i8, %Pointer %r733, i32 %r737
	store %Pointer %r738, %Pointer* %stackTop
	%r739 = load %Pointer, %Pointer* %stackTop
	%r740 = getelementptr inbounds i8, %Pointer %r739, i32 -8
	%r741 = bitcast %Pointer %r740 to %uintptr_t*
	%r742 = load %uintptr_t, %uintptr_t* %r741
	store %uintptr_t %r742, %uintptr_t* %l_nextFun
	br label %top

L_1254:
	; CW64 (<Frontier>)  = 0x57
	%r743 = load %Pointer, %Pointer* %frontier
	%r744 = bitcast %Pointer %r743 to %Word64*
	store %Word64 87, %Word64* %r744
	; RQ(106): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r745 = load %Pointer, %Pointer* %frontier
	%r747 = ptrtoint %Pointer %r745 to %uintptr_t
	%r748 = add %uintptr_t %r747, 8
	%r746 = inttoptr %uintptr_t %r748 to %Pointer
	store %CPointer %r746, %CPointer* %regQ_106
	; RP(0): Objptr (opt_43)  = Cast (RQ(106): CPointer, Objptr (opt_43))
	%r749 = load %CPointer, %CPointer* %regQ_106
	%r750 = bitcast %CPointer %r749 to %Objptr
	store %Objptr %r750, %Objptr* %regP_0
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r751 = load %Pointer, %Pointer* %frontier
	%r753 = ptrtoint %Pointer %r751 to %uintptr_t
	%r754 = add %uintptr_t %r753, 24
	%r752 = inttoptr %uintptr_t %r754 to %Pointer
	store %Pointer %r752, %Pointer* %frontier
	; OP (RP(0): Objptr (opt_43), 0): Objptr (opt_3)  = Cast (SP(56): Objptr (opt_11), Objptr (opt_3))
	%r755 = load %Pointer, %Pointer* %stackTop
	%r756 = getelementptr inbounds i8, %Pointer %r755, i32 56
	%r757 = bitcast %Pointer %r756 to %Objptr*
	%r758 = load %Objptr, %Objptr* %r757
	%r759 = bitcast %Objptr %r758 to %Objptr
	%r760 = load %Objptr, %Objptr* %regP_0
	%r761 = getelementptr inbounds i8, %Objptr %r760, i32 0
	%r762 = bitcast %Objptr %r761 to %Objptr*
	store %Objptr %r759, %Objptr* %r762
	; OP (RP(0): Objptr (opt_43), 8): Objptr (opt_43)  = glob {index = 15, isRoot = true, ty = Objptr (opt_43)}
	%r763 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 15
	%r764 = load %Objptr, %Objptr* %r763
	%r765 = load %Objptr, %Objptr* %regP_0
	%r766 = getelementptr inbounds i8, %Objptr %r765, i32 8
	%r767 = bitcast %Objptr %r766 to %Objptr*
	store %Objptr %r764, %Objptr* %r767
	; CW64 (<Frontier>)  = 0x57
	%r768 = load %Pointer, %Pointer* %frontier
	%r769 = bitcast %Pointer %r768 to %Word64*
	store %Word64 87, %Word64* %r769
	; RQ(105): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r770 = load %Pointer, %Pointer* %frontier
	%r772 = ptrtoint %Pointer %r770 to %uintptr_t
	%r773 = add %uintptr_t %r772, 8
	%r771 = inttoptr %uintptr_t %r773 to %Pointer
	store %CPointer %r771, %CPointer* %regQ_105
	; RP(1): Objptr (opt_43)  = Cast (RQ(105): CPointer, Objptr (opt_43))
	%r774 = load %CPointer, %CPointer* %regQ_105
	%r775 = bitcast %CPointer %r774 to %Objptr
	store %Objptr %r775, %Objptr* %regP_1
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r776 = load %Pointer, %Pointer* %frontier
	%r778 = ptrtoint %Pointer %r776 to %uintptr_t
	%r779 = add %uintptr_t %r778, 24
	%r777 = inttoptr %uintptr_t %r779 to %Pointer
	store %Pointer %r777, %Pointer* %frontier
	; OP (RP(1): Objptr (opt_43), 0): Objptr (opt_3)  = glob {index = 152, isRoot = true, ty = Objptr (opt_3)}
	%r780 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 152
	%r781 = load %Objptr, %Objptr* %r780
	%r782 = load %Objptr, %Objptr* %regP_1
	%r783 = getelementptr inbounds i8, %Objptr %r782, i32 0
	%r784 = bitcast %Objptr %r783 to %Objptr*
	store %Objptr %r781, %Objptr* %r784
	; OP (RP(1): Objptr (opt_43), 8): Objptr (opt_43)  = RP(0): Objptr (opt_43)
	%r785 = load %Objptr, %Objptr* %regP_0
	%r786 = load %Objptr, %Objptr* %regP_1
	%r787 = getelementptr inbounds i8, %Objptr %r786, i32 8
	%r788 = bitcast %Objptr %r787 to %Objptr*
	store %Objptr %r785, %Objptr* %r788
	; SQ(16): Label L_1256  = L_1256
	%r789 = inttoptr %Word32 174 to %CPointer
	%r790 = load %Pointer, %Pointer* %stackTop
	%r791 = getelementptr inbounds i8, %Pointer %r790, i32 16
	%r792 = bitcast %Pointer %r791 to %CPointer*
	store %CPointer %r789, %CPointer* %r792
	; RQ(104): CPointer  = CPointer_add (<StackTop>, 0x18)
	%r793 = load %Pointer, %Pointer* %stackTop
	%r795 = ptrtoint %Pointer %r793 to %uintptr_t
	%r796 = add %uintptr_t %r795, 24
	%r794 = inttoptr %uintptr_t %r796 to %Pointer
	store %CPointer %r794, %CPointer* %regQ_104
	; RW64(15): Word64  = CPointer_diff (RQ(104): CPointer, OQ (<GCState>, 1616): CPointer)
	%r797 = load %CPointer, %CPointer* %regQ_104
	%r798 = bitcast %struct.GC_state* @gcState to %Pointer
	%r799 = getelementptr inbounds i8, %Pointer %r798, i32 1616
	%r800 = bitcast %Pointer %r799 to %CPointer*
	%r801 = load %CPointer, %CPointer* %r800
	%r803 = ptrtoint %Pointer %r797 to %uintptr_t
	%r804 = ptrtoint %Pointer %r801 to %uintptr_t
	%r802 = sub %uintptr_t %r803, %r804
	store %Word64 %r802, %Word64* %regW64_15
	; OW64 (<GCState>, 32): ExnStack  = Cast (RW64(15): Word64, ExnStack)
	%r805 = load %Word64, %Word64* %regW64_15
	%r806 = bitcast %Word64 %r805 to %Word64
	%r807 = bitcast %struct.GC_state* @gcState to %Pointer
	%r808 = getelementptr inbounds i8, %Pointer %r807, i32 32
	%r809 = bitcast %Pointer %r808 to %Word64*
	store %Word64 %r806, %Word64* %r809
	; SP(40): Objptr (opt_43)  = RP(1): Objptr (opt_43)
	%r810 = load %Objptr, %Objptr* %regP_1
	%r811 = load %Pointer, %Pointer* %stackTop
	%r812 = getelementptr inbounds i8, %Pointer %r811, i32 40
	%r813 = bitcast %Pointer %r812 to %Objptr*
	store %Objptr %r810, %Objptr* %r813
	%r814 = load %Pointer, %Pointer* %stackTop
	%r815 = getelementptr inbounds i8, %Pointer %r814, i32 32
	%r816 = bitcast %Pointer %r815 to %uintptr_t*
	store %uintptr_t 173, %uintptr_t* %r816
	; Push(40)
	%r817 = load %Pointer, %Pointer* %stackTop
	%r818 = getelementptr inbounds i8, %Pointer %r817, i32 40
	store %Pointer %r818, %Pointer* %stackTop
	br label %concat_0

L_1253:
	; OW32 (SP(8): Objptr (opt_13), 0): Word32  = 0x0
	%r819 = load %Pointer, %Pointer* %stackTop
	%r820 = getelementptr inbounds i8, %Pointer %r819, i32 8
	%r821 = bitcast %Pointer %r820 to %Objptr*
	%r822 = load %Objptr, %Objptr* %r821
	%r823 = getelementptr inbounds i8, %Objptr %r822, i32 0
	%r824 = bitcast %Objptr %r823 to %Word32*
	store %Word32 0, %Word32* %r824
	; Goto L_1254
	br label %L_1254

L_1252:
	; OW64 (SP(56): Objptr (opt_11), ~8): Word64  = 0x7
	%r825 = load %Pointer, %Pointer* %stackTop
	%r826 = getelementptr inbounds i8, %Pointer %r825, i32 56
	%r827 = bitcast %Pointer %r826 to %Objptr*
	%r828 = load %Objptr, %Objptr* %r827
	%r829 = getelementptr inbounds i8, %Objptr %r828, i32 -8
	%r830 = bitcast %Objptr %r829 to %Word64*
	store %Word64 7, %Word64* %r830
	; switch {test = SW32(32): Word32, default = None, cases = ((0x0, L_1253), (0x1, L_1257))}
	%r831 = load %Pointer, %Pointer* %stackTop
	%r832 = getelementptr inbounds i8, %Pointer %r831, i32 32
	%r833 = bitcast %Pointer %r832 to %Word32*
	%r834 = load %Word32, %Word32* %r833
	%r835 = trunc %Word32 %r834 to i1
	br i1 %r835, label %L_1257, label %L_1253

L_1251:
	; Push(-72)
	%r836 = load %Pointer, %Pointer* %stackTop
	%r837 = getelementptr inbounds i8, %Pointer %r836, i32 -72
	store %Pointer %r837, %Pointer* %stackTop
	; Goto L_1252
	br label %L_1252

L_1250:
	; CCall {args = (<GCState>, SP(56): Objptr (opt_11), 0x0, SP(40): Objptr (opt_11), SW64(0): Word64, SW64(48): Word64), frameInfo = Some {frameLayoutsIndex = 172}, func = {args = (GCState, Objptr (opt_11), Word64, Objptr (opt_11), Word64, Word64), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Objptr, Int64, Objptr, Int64, Int64), res = None}, return = Bits0, symbolScope = private, target = GC_arrayCopy}, return = Some L_1251}
	; GetOperands
	%r838 = bitcast %struct.GC_state* @gcState to %Pointer
	%r839 = load %Pointer, %Pointer* %stackTop
	%r840 = getelementptr inbounds i8, %Pointer %r839, i32 56
	%r841 = bitcast %Pointer %r840 to %Objptr*
	%r842 = load %Objptr, %Objptr* %r841
	%r843 = load %Pointer, %Pointer* %stackTop
	%r844 = getelementptr inbounds i8, %Pointer %r843, i32 40
	%r845 = bitcast %Pointer %r844 to %Objptr*
	%r846 = load %Objptr, %Objptr* %r845
	%r847 = load %Pointer, %Pointer* %stackTop
	%r848 = getelementptr inbounds i8, %Pointer %r847, i32 0
	%r849 = bitcast %Pointer %r848 to %Word64*
	%r850 = load %Word64, %Word64* %r849
	%r851 = load %Pointer, %Pointer* %stackTop
	%r852 = getelementptr inbounds i8, %Pointer %r851, i32 48
	%r853 = bitcast %Pointer %r852 to %Word64*
	%r854 = load %Word64, %Word64* %r853
	%r855 = load %Pointer, %Pointer* %stackTop
	%r856 = getelementptr inbounds i8, %Pointer %r855, i32 64
	%r857 = bitcast %Pointer %r856 to %uintptr_t*
	store %uintptr_t 172, %uintptr_t* %r857
	; Push(72)
	%r858 = load %Pointer, %Pointer* %stackTop
	%r859 = getelementptr inbounds i8, %Pointer %r858, i32 72
	store %Pointer %r859, %Pointer* %stackTop
	; FlushFrontier
	%r860 = bitcast %struct.GC_state* @gcState to %Pointer
	%r861 = getelementptr inbounds i8, %Pointer %r860, i32 0
	%r862 = bitcast %Pointer %r861 to %Pointer*
	%r863 = load %Pointer, %Pointer* %frontier
	store %Pointer %r863, %Pointer* %r862
	; FlushStackTop
	%r864 = bitcast %struct.GC_state* @gcState to %Pointer
	%r865 = getelementptr inbounds i8, %Pointer %r864, i32 16
	%r866 = bitcast %Pointer %r865 to %Pointer*
	%r867 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r867, %Pointer* %r866
	; Call
	call void @GC_arrayCopy(%Pointer %r838, %Objptr %r842, %Word64 0, %Objptr %r846, %Word64 %r850, %Word64 %r854)
	; CacheFrontier
	%r868 = bitcast %struct.GC_state* @gcState to %Pointer
	%r869 = getelementptr inbounds i8, %Pointer %r868, i32 0
	%r870 = bitcast %Pointer %r869 to %Pointer*
	%r871 = load %Pointer, %Pointer* %r870
	store %Pointer %r871, %Pointer* %frontier
	; CacheStackTop
	%r872 = bitcast %struct.GC_state* @gcState to %Pointer
	%r873 = getelementptr inbounds i8, %Pointer %r872, i32 16
	%r874 = bitcast %Pointer %r873 to %Pointer*
	%r875 = load %Pointer, %Pointer* %r874
	store %Pointer %r875, %Pointer* %stackTop
	br label %L_1251

L_1249:
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r876 = bitcast %struct.GC_state* @gcState to %Pointer
	%r877 = getelementptr inbounds i8, %Pointer %r876, i32 8
	%r878 = bitcast %Pointer %r877 to %CPointer*
	%r879 = load %CPointer, %CPointer* %r878
	%r880 = load %Pointer, %Pointer* %frontier
	%r882 = icmp ult %Pointer %r879, %r880
	%r881 = zext i1 %r882 to %Word32
	store %Word32 %r881, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_1250), (0x1, L_1258))}
	%r883 = load %Word32, %Word32* %regW32_0
	%r884 = trunc %Word32 %r883 to i1
	br i1 %r884, label %L_1258, label %L_1250

L_join_19:
	; RW32(0): Word32  = WordS64_lt (SW64(48): Word64, 0x5)
	%r885 = load %Pointer, %Pointer* %stackTop
	%r886 = getelementptr inbounds i8, %Pointer %r885, i32 48
	%r887 = bitcast %Pointer %r886 to %Word64*
	%r888 = load %Word64, %Word64* %r887
	%r890 = icmp slt %Word64 %r888, 5
	%r889 = zext i1 %r890 to %Word32
	store %Word32 %r889, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_1249), (0x1, L_1260))}
	%r891 = load %Word32, %Word32* %regW32_0
	%r892 = trunc %Word32 %r891 to i1
	br i1 %r892, label %L_1260, label %L_1249

L_1248:
	; Push(-64)
	%r893 = load %Pointer, %Pointer* %stackTop
	%r894 = getelementptr inbounds i8, %Pointer %r893, i32 -64
	store %Pointer %r894, %Pointer* %stackTop
	%r895 = load %Objptr, %Objptr* @CReturnP
	store %Objptr %r895, %Objptr* %regP_0
	; SP(56): Objptr (opt_11)  = RP(0): Objptr (opt_11)
	%r896 = load %Objptr, %Objptr* %regP_0
	%r897 = load %Pointer, %Pointer* %stackTop
	%r898 = getelementptr inbounds i8, %Pointer %r897, i32 56
	%r899 = bitcast %Pointer %r898 to %Objptr*
	store %Objptr %r896, %Objptr* %r899
	; Goto L_join_19
	br label %L_join_19

L_1247:
	; CCall {args = (<GCState>, 0x0, SW64(48): Word64, 0x17), frameInfo = Some {frameLayoutsIndex = 171}, func = {args = (GCState, Word64, Word64, Word64), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int64, Word64), res = Some Objptr}, return = Objptr (opt_11), symbolScope = private, target = GC_arrayAllocate}, return = Some L_1248}
	; GetOperands
	%r900 = bitcast %struct.GC_state* @gcState to %Pointer
	%r901 = load %Pointer, %Pointer* %stackTop
	%r902 = getelementptr inbounds i8, %Pointer %r901, i32 48
	%r903 = bitcast %Pointer %r902 to %Word64*
	%r904 = load %Word64, %Word64* %r903
	%r905 = load %Pointer, %Pointer* %stackTop
	%r906 = getelementptr inbounds i8, %Pointer %r905, i32 56
	%r907 = bitcast %Pointer %r906 to %uintptr_t*
	store %uintptr_t 171, %uintptr_t* %r907
	; Push(64)
	%r908 = load %Pointer, %Pointer* %stackTop
	%r909 = getelementptr inbounds i8, %Pointer %r908, i32 64
	store %Pointer %r909, %Pointer* %stackTop
	; FlushFrontier
	%r910 = bitcast %struct.GC_state* @gcState to %Pointer
	%r911 = getelementptr inbounds i8, %Pointer %r910, i32 0
	%r912 = bitcast %Pointer %r911 to %Pointer*
	%r913 = load %Pointer, %Pointer* %frontier
	store %Pointer %r913, %Pointer* %r912
	; FlushStackTop
	%r914 = bitcast %struct.GC_state* @gcState to %Pointer
	%r915 = getelementptr inbounds i8, %Pointer %r914, i32 16
	%r916 = bitcast %Pointer %r915 to %Pointer*
	%r917 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r917, %Pointer* %r916
	; Call
	%r918 = call %Objptr @GC_arrayAllocate(%Pointer %r900, %Word64 0, %Word64 %r904, %Word64 23)
	store %Objptr %r918, %Objptr* @CReturnP
	; CacheFrontier
	%r919 = bitcast %struct.GC_state* @gcState to %Pointer
	%r920 = getelementptr inbounds i8, %Pointer %r919, i32 0
	%r921 = bitcast %Pointer %r920 to %Pointer*
	%r922 = load %Pointer, %Pointer* %r921
	store %Pointer %r922, %Pointer* %frontier
	; CacheStackTop
	%r923 = bitcast %struct.GC_state* @gcState to %Pointer
	%r924 = getelementptr inbounds i8, %Pointer %r923, i32 16
	%r925 = bitcast %Pointer %r924 to %Pointer*
	%r926 = load %Pointer, %Pointer* %r925
	store %Pointer %r926, %Pointer* %stackTop
	br label %L_1248

L_1246:
	; SW64(48): Word64  = Word64_sub (RW64(1): Word64, SW64(0): Word64)
	%r927 = load %Word64, %Word64* %regW64_1
	%r928 = load %Pointer, %Pointer* %stackTop
	%r929 = getelementptr inbounds i8, %Pointer %r928, i32 0
	%r930 = bitcast %Pointer %r929 to %Word64*
	%r931 = load %Word64, %Word64* %r930
	%r932 = sub %Word64 %r927, %r931
	%r933 = load %Pointer, %Pointer* %stackTop
	%r934 = getelementptr inbounds i8, %Pointer %r933, i32 48
	%r935 = bitcast %Pointer %r934 to %Word64*
	store %Word64 %r932, %Word64* %r935
	; RW32(0): Word32  = Word64_equal (0x0, SW64(48): Word64)
	%r936 = load %Pointer, %Pointer* %stackTop
	%r937 = getelementptr inbounds i8, %Pointer %r936, i32 48
	%r938 = bitcast %Pointer %r937 to %Word64*
	%r939 = load %Word64, %Word64* %r938
	%r941 = icmp eq %Word64 0, %r939
	%r940 = zext i1 %r941 to %Word32
	store %Word32 %r940, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_1247), (0x1, L_1266))}
	%r942 = load %Word32, %Word32* %regW32_0
	%r943 = trunc %Word32 %r942 to i1
	br i1 %r943, label %L_1266, label %L_1247

L_1245:
	; SW64(0): Word64  = WordS32_extdToWord64 (RW32(0): Word32)
	%r944 = load %Word32, %Word32* %regW32_0
	%r945 = sext %Word32 %r944 to %Word64
	%r946 = load %Pointer, %Pointer* %stackTop
	%r947 = getelementptr inbounds i8, %Pointer %r946, i32 0
	%r948 = bitcast %Pointer %r947 to %Word64*
	store %Word64 %r945, %Word64* %r948
	; RW32(1): Word32  = WordU64_lt (RW64(1): Word64, SW64(0): Word64)
	%r949 = load %Word64, %Word64* %regW64_1
	%r950 = load %Pointer, %Pointer* %stackTop
	%r951 = getelementptr inbounds i8, %Pointer %r950, i32 0
	%r952 = bitcast %Pointer %r951 to %Word64*
	%r953 = load %Word64, %Word64* %r952
	%r955 = icmp ult %Word64 %r949, %r953
	%r954 = zext i1 %r955 to %Word32
	store %Word32 %r954, %Word32* %regW32_1
	; switch {test = RW32(1): Word32, default = None, cases = ((0x0, L_1246), (0x1, L_1267))}
	%r956 = load %Word32, %Word32* %regW32_1
	%r957 = trunc %Word32 %r956 to i1
	br i1 %r957, label %L_1267, label %L_1246

L_1244:
	; Goto L_1245
	br label %L_1245

L_1243:
	; switch {test = SW32(4): Word32, default = None, cases = ((0x0, L_1244), (0x1, L_1268))}
	%r958 = load %Pointer, %Pointer* %stackTop
	%r959 = getelementptr inbounds i8, %Pointer %r958, i32 4
	%r960 = bitcast %Pointer %r959 to %Word32*
	%r961 = load %Word32, %Word32* %r960
	%r962 = trunc %Word32 %r961 to i1
	br i1 %r962, label %L_1268, label %L_1244

L_1242:
	; RW32(0): Word32  = RW32(1): Word32
	%r963 = load %Word32, %Word32* %regW32_1
	store %Word32 %r963, %Word32* %regW32_0
	; RW32(1): Word32  = RW32(2): Word32
	%r964 = load %Word32, %Word32* %regW32_2
	store %Word32 %r964, %Word32* %regW32_1
	; Goto loop_56
	br label %loop_56

L_1241:
	; Arith {prim = WordS32_subCheck, args = (RW32(0): Word32, 0x1), dst = RW32(1): Word32, overflow = L_1235, success = L_1242}
	%r965 = load %Word32, %Word32* %regW32_0
	%r966 = call {%Word32, i1} @llvm.ssub.with.overflow.i32(%Word32 %r965, %Word32 1)
	%r967 = extractvalue {%Word32, i1} %r966, 0
	%r968 = extractvalue {%Word32, i1} %r966, 1
	store %Word32 %r967, %Word32* %regW32_1
	br i1 %r968, label %L_1235, label %L_1242

L_1240:
	; XW8 (SP(40): Objptr (opt_11), RW64(2): Word64, 1, 0): Word8  = RW8(0): Word8
	%r969 = load %Word8, %Word8* %regW8_0
	%r970 = load %Pointer, %Pointer* %stackTop
	%r971 = getelementptr inbounds i8, %Pointer %r970, i32 40
	%r972 = bitcast %Pointer %r971 to %Objptr*
	%r973 = load %Objptr, %Objptr* %r972
	%r974 = load %Word64, %Word64* %regW64_2
	%r975 = mul nsw %Word64 %r974, 1
	%r976 = add nsw %Word64 %r975, 0
	%r977 = getelementptr inbounds i8, %Objptr %r973, %Word64 %r976
	%r978 = bitcast %Objptr %r977 to %Word8*
	store %Word8 %r969, %Word8* %r978
	; RW32(2): Word32  = WordS32_quot (RW32(1): Word32, 0xA)
	%r979 = load %Word32, %Word32* %regW32_1
	%r980 = sdiv %Word32 %r979, 10
	store %Word32 %r980, %Word32* %regW32_2
	; RW32(3): Word32  = Word32_equal (RW32(2): Word32, 0x0)
	%r981 = load %Word32, %Word32* %regW32_2
	%r983 = icmp eq %Word32 %r981, 0
	%r982 = zext i1 %r983 to %Word32
	store %Word32 %r982, %Word32* %regW32_3
	; switch {test = RW32(3): Word32, default = None, cases = ((0x0, L_1241), (0x1, L_1243))}
	%r984 = load %Word32, %Word32* %regW32_3
	%r985 = trunc %Word32 %r984 to i1
	br i1 %r985, label %L_1243, label %L_1241

L_1239:
	; Goto L_1235
	br label %L_1235

L_1238:
	; RW8(0): Word8  = XW8 (glob {index = 137, isRoot = true, ty = Objptr (opt_3)}, RW64(0): Word64, 1, 0): Word8
	%r986 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 137
	%r987 = load %Objptr, %Objptr* %r986
	%r988 = load %Word64, %Word64* %regW64_0
	%r989 = mul nsw %Word64 %r988, 1
	%r990 = add nsw %Word64 %r989, 0
	%r991 = getelementptr inbounds i8, %Objptr %r987, %Word64 %r990
	%r992 = bitcast %Objptr %r991 to %Word8*
	%r993 = load %Word8, %Word8* %r992
	store %Word8 %r993, %Word8* %regW8_0
	; RW64(1): Word64  = OW64 (SP(40): Objptr (opt_11), ~16): Word64
	%r994 = load %Pointer, %Pointer* %stackTop
	%r995 = getelementptr inbounds i8, %Pointer %r994, i32 40
	%r996 = bitcast %Pointer %r995 to %Objptr*
	%r997 = load %Objptr, %Objptr* %r996
	%r998 = getelementptr inbounds i8, %Objptr %r997, i32 -16
	%r999 = bitcast %Objptr %r998 to %Word64*
	%r1000 = load %Word64, %Word64* %r999
	store %Word64 %r1000, %Word64* %regW64_1
	; RW64(2): Word64  = WordS32_extdToWord64 (RW32(0): Word32)
	%r1001 = load %Word32, %Word32* %regW32_0
	%r1002 = sext %Word32 %r1001 to %Word64
	store %Word64 %r1002, %Word64* %regW64_2
	; RW32(2): Word32  = WordU64_lt (RW64(2): Word64, RW64(1): Word64)
	%r1003 = load %Word64, %Word64* %regW64_2
	%r1004 = load %Word64, %Word64* %regW64_1
	%r1006 = icmp ult %Word64 %r1003, %r1004
	%r1005 = zext i1 %r1006 to %Word32
	store %Word32 %r1005, %Word32* %regW32_2
	; switch {test = RW32(2): Word32, default = None, cases = ((0x0, L_1239), (0x1, L_1240))}
	%r1007 = load %Word32, %Word32* %regW32_2
	%r1008 = trunc %Word32 %r1007 to i1
	br i1 %r1008, label %L_1240, label %L_1239

L_1237:
	; Raise
	%r1009 = bitcast %struct.GC_state* @gcState to %Pointer
	%r1010 = getelementptr inbounds i8, %Pointer %r1009, i32 1616
	%r1011 = bitcast %Pointer %r1010 to %Pointer*
	%r1012 = load %Pointer, %Pointer* %r1011
	%r1013 = bitcast %struct.GC_state* @gcState to %Pointer
	%r1014 = getelementptr inbounds i8, %Pointer %r1013, i32 32
	%r1015 = bitcast %Pointer %r1014 to i32*
	%r1016 = load i32, i32* %r1015
	%r1017 = getelementptr inbounds i8, %Pointer %r1012, i32 %r1016
	store %Pointer %r1017, %Pointer* %stackTop
	%r1018 = load %Pointer, %Pointer* %stackTop
	%r1019 = getelementptr inbounds i8, %Pointer %r1018, i32 -8
	%r1020 = bitcast %Pointer %r1019 to %uintptr_t*
	%r1021 = load %uintptr_t, %uintptr_t* %r1020
	store %uintptr_t %r1021, %uintptr_t* %l_nextFun
	br label %top

L_1236:
	; OW32 (SP(8): Objptr (opt_13), 0): Word32  = 0x0
	%r1022 = load %Pointer, %Pointer* %stackTop
	%r1023 = getelementptr inbounds i8, %Pointer %r1022, i32 8
	%r1024 = bitcast %Pointer %r1023 to %Objptr*
	%r1025 = load %Objptr, %Objptr* %r1024
	%r1026 = getelementptr inbounds i8, %Objptr %r1025, i32 0
	%r1027 = bitcast %Objptr %r1026 to %Word32*
	store %Word32 0, %Word32* %r1027
	; Raise
	%r1028 = bitcast %struct.GC_state* @gcState to %Pointer
	%r1029 = getelementptr inbounds i8, %Pointer %r1028, i32 1616
	%r1030 = bitcast %Pointer %r1029 to %Pointer*
	%r1031 = load %Pointer, %Pointer* %r1030
	%r1032 = bitcast %struct.GC_state* @gcState to %Pointer
	%r1033 = getelementptr inbounds i8, %Pointer %r1032, i32 32
	%r1034 = bitcast %Pointer %r1033 to i32*
	%r1035 = load i32, i32* %r1034
	%r1036 = getelementptr inbounds i8, %Pointer %r1031, i32 %r1035
	store %Pointer %r1036, %Pointer* %stackTop
	%r1037 = load %Pointer, %Pointer* %stackTop
	%r1038 = getelementptr inbounds i8, %Pointer %r1037, i32 -8
	%r1039 = bitcast %Pointer %r1038 to %uintptr_t*
	%r1040 = load %uintptr_t, %uintptr_t* %r1039
	store %uintptr_t %r1040, %uintptr_t* %l_nextFun
	br label %top

L_1235:
	; switch {test = SW32(32): Word32, default = None, cases = ((0x0, L_1236), (0x1, L_1237))}
	%r1041 = load %Pointer, %Pointer* %stackTop
	%r1042 = getelementptr inbounds i8, %Pointer %r1041, i32 32
	%r1043 = bitcast %Pointer %r1042 to %Word32*
	%r1044 = load %Word32, %Word32* %r1043
	%r1045 = trunc %Word32 %r1044 to i1
	br i1 %r1045, label %L_1237, label %L_1236

L_1234:
	; Goto L_1235
	br label %L_1235

loop_56:
	; RW32(2): Word32  = WordS32_rem (RW32(1): Word32, 0xA)
	%r1046 = load %Word32, %Word32* %regW32_1
	%r1047 = srem %Word32 %r1046, 10
	store %Word32 %r1047, %Word32* %regW32_2
	; RW32(3): Word32  = Word32_neg (RW32(2): Word32)
	%r1048 = load %Word32, %Word32* %regW32_2
	%r1049 = sub %Word32 0, %r1048
	store %Word32 %r1049, %Word32* %regW32_3
	; RW64(0): Word64  = WordS32_extdToWord64 (RW32(3): Word32)
	%r1050 = load %Word32, %Word32* %regW32_3
	%r1051 = sext %Word32 %r1050 to %Word64
	store %Word64 %r1051, %Word64* %regW64_0
	; RW32(4): Word32  = WordU64_lt (RW64(0): Word64, 0x10)
	%r1052 = load %Word64, %Word64* %regW64_0
	%r1054 = icmp ult %Word64 %r1052, 16
	%r1053 = zext i1 %r1054 to %Word32
	store %Word32 %r1053, %Word32* %regW32_4
	; switch {test = RW32(4): Word32, default = None, cases = ((0x0, L_1234), (0x1, L_1238))}
	%r1055 = load %Word32, %Word32* %regW32_4
	%r1056 = trunc %Word32 %r1055 to i1
	br i1 %r1056, label %L_1238, label %L_1234

L_1233:
	; RW32(0): Word32  = Word32_neg (SW32(0): Word32)
	%r1057 = load %Pointer, %Pointer* %stackTop
	%r1058 = getelementptr inbounds i8, %Pointer %r1057, i32 0
	%r1059 = bitcast %Pointer %r1058 to %Word32*
	%r1060 = load %Word32, %Word32* %r1059
	%r1061 = sub %Word32 0, %r1060
	store %Word32 %r1061, %Word32* %regW32_0
	; RW32(1): Word32  = RW32(0): Word32
	%r1062 = load %Word32, %Word32* %regW32_0
	store %Word32 %r1062, %Word32* %regW32_1
	; SP(40): Objptr (opt_11)  = RP(0): Objptr (opt_11)
	%r1063 = load %Objptr, %Objptr* %regP_0
	%r1064 = load %Pointer, %Pointer* %stackTop
	%r1065 = getelementptr inbounds i8, %Pointer %r1064, i32 40
	%r1066 = bitcast %Pointer %r1065 to %Objptr*
	store %Objptr %r1063, %Objptr* %r1066
	; RW32(0): Word32  = 0x20
	store %Word32 32, %Word32* %regW32_0
	; Goto loop_56
	br label %loop_56

L_1232:
	; Goto L_1233
	br label %L_1233

L_1231:
	; RW32(0): Word32  = Word32_add (OW32 (<GCState>, 68): Word32, 0xFFFFFFFF)
	%r1067 = bitcast %struct.GC_state* @gcState to %Pointer
	%r1068 = getelementptr inbounds i8, %Pointer %r1067, i32 68
	%r1069 = bitcast %Pointer %r1068 to %Word32*
	%r1070 = load %Word32, %Word32* %r1069
	%r1071 = add %Word32 %r1070, 4294967295
	store %Word32 %r1071, %Word32* %regW32_0
	; OW32 (<GCState>, 68): Word32  = RW32(0): Word32
	%r1072 = load %Word32, %Word32* %regW32_0
	%r1073 = bitcast %struct.GC_state* @gcState to %Pointer
	%r1074 = getelementptr inbounds i8, %Pointer %r1073, i32 68
	%r1075 = bitcast %Pointer %r1074 to %Word32*
	store %Word32 %r1072, %Word32* %r1075
	; switch {test = SW32(4): Word32, default = None, cases = ((0x0, L_1232), (0x1, L_1272))}
	%r1076 = load %Pointer, %Pointer* %stackTop
	%r1077 = getelementptr inbounds i8, %Pointer %r1076, i32 4
	%r1078 = bitcast %Pointer %r1077 to %Word32*
	%r1079 = load %Word32, %Word32* %r1078
	%r1080 = trunc %Word32 %r1079 to i1
	br i1 %r1080, label %L_1272, label %L_1232

L_1230:
	; OW32 (SP(8): Objptr (opt_13), 0): Word32  = 0x1
	%r1081 = load %Pointer, %Pointer* %stackTop
	%r1082 = getelementptr inbounds i8, %Pointer %r1081, i32 8
	%r1083 = bitcast %Pointer %r1082 to %Objptr*
	%r1084 = load %Objptr, %Objptr* %r1083
	%r1085 = getelementptr inbounds i8, %Objptr %r1084, i32 0
	%r1086 = bitcast %Objptr %r1085 to %Word32*
	store %Word32 1, %Word32* %r1086
	; RW32(0): Word32  = OW32 (<GCState>, 68): Word32
	%r1087 = bitcast %struct.GC_state* @gcState to %Pointer
	%r1088 = getelementptr inbounds i8, %Pointer %r1087, i32 68
	%r1089 = bitcast %Pointer %r1088 to %Word32*
	%r1090 = load %Word32, %Word32* %r1089
	store %Word32 %r1090, %Word32* %regW32_0
	; RW32(1): Word32  = Word32_equal (RW32(0): Word32, 0x0)
	%r1091 = load %Word32, %Word32* %regW32_0
	%r1093 = icmp eq %Word32 %r1091, 0
	%r1092 = zext i1 %r1093 to %Word32
	store %Word32 %r1092, %Word32* %regW32_1
	; switch {test = RW32(1): Word32, default = None, cases = ((0x0, L_1231), (0x1, L_1273))}
	%r1094 = load %Word32, %Word32* %regW32_1
	%r1095 = trunc %Word32 %r1094 to i1
	br i1 %r1095, label %L_1273, label %L_1231

L_1229:
	; RP(0): Objptr (opt_11)  = OP (RP(2): Objptr (opt_25), 8): Objptr (opt_11)
	%r1096 = load %Objptr, %Objptr* %regP_2
	%r1097 = getelementptr inbounds i8, %Objptr %r1096, i32 8
	%r1098 = bitcast %Objptr %r1097 to %Objptr*
	%r1099 = load %Objptr, %Objptr* %r1098
	store %Objptr %r1099, %Objptr* %regP_0
	; SP(8): Objptr (opt_13)  = OP (RP(2): Objptr (opt_25), 0): Objptr (opt_13)
	%r1100 = load %Objptr, %Objptr* %regP_2
	%r1101 = getelementptr inbounds i8, %Objptr %r1100, i32 0
	%r1102 = bitcast %Objptr %r1101 to %Objptr*
	%r1103 = load %Objptr, %Objptr* %r1102
	%r1104 = load %Pointer, %Pointer* %stackTop
	%r1105 = getelementptr inbounds i8, %Pointer %r1104, i32 8
	%r1106 = bitcast %Pointer %r1105 to %Objptr*
	store %Objptr %r1103, %Objptr* %r1106
	; RW32(0): Word32  = Word32_add (OW32 (<GCState>, 68): Word32, 0x1)
	%r1107 = bitcast %struct.GC_state* @gcState to %Pointer
	%r1108 = getelementptr inbounds i8, %Pointer %r1107, i32 68
	%r1109 = bitcast %Pointer %r1108 to %Word32*
	%r1110 = load %Word32, %Word32* %r1109
	%r1111 = add %Word32 %r1110, 1
	store %Word32 %r1111, %Word32* %regW32_0
	; OW32 (<GCState>, 68): Word32  = RW32(0): Word32
	%r1112 = load %Word32, %Word32* %regW32_0
	%r1113 = bitcast %struct.GC_state* @gcState to %Pointer
	%r1114 = getelementptr inbounds i8, %Pointer %r1113, i32 68
	%r1115 = bitcast %Pointer %r1114 to %Word32*
	store %Word32 %r1112, %Word32* %r1115
	; SW32(32): Word32  = OW32 (SP(8): Objptr (opt_13), 0): Word32
	%r1116 = load %Pointer, %Pointer* %stackTop
	%r1117 = getelementptr inbounds i8, %Pointer %r1116, i32 8
	%r1118 = bitcast %Pointer %r1117 to %Objptr*
	%r1119 = load %Objptr, %Objptr* %r1118
	%r1120 = getelementptr inbounds i8, %Objptr %r1119, i32 0
	%r1121 = bitcast %Objptr %r1120 to %Word32*
	%r1122 = load %Word32, %Word32* %r1121
	%r1123 = load %Pointer, %Pointer* %stackTop
	%r1124 = getelementptr inbounds i8, %Pointer %r1123, i32 32
	%r1125 = bitcast %Pointer %r1124 to %Word32*
	store %Word32 %r1122, %Word32* %r1125
	; switch {test = SW32(32): Word32, default = None, cases = ((0x0, L_1230), (0x1, L_1274))}
	%r1126 = load %Pointer, %Pointer* %stackTop
	%r1127 = getelementptr inbounds i8, %Pointer %r1126, i32 32
	%r1128 = bitcast %Pointer %r1127 to %Word32*
	%r1129 = load %Word32, %Word32* %r1128
	%r1130 = trunc %Word32 %r1129 to i1
	br i1 %r1130, label %L_1274, label %L_1230

L_1228:
	; Goto L_1229
	br label %L_1229

L_1227:
	; RW32(0): Word32  = WordS32_lt (SW32(0): Word32, 0x100)
	%r1131 = load %Pointer, %Pointer* %stackTop
	%r1132 = getelementptr inbounds i8, %Pointer %r1131, i32 0
	%r1133 = bitcast %Pointer %r1132 to %Word32*
	%r1134 = load %Word32, %Word32* %r1133
	%r1136 = icmp slt %Word32 %r1134, 256
	%r1135 = zext i1 %r1136 to %Word32
	store %Word32 %r1135, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_1228), (0x1, L_1282))}
	%r1137 = load %Word32, %Word32* %regW32_0
	%r1138 = trunc %Word32 %r1137 to i1
	br i1 %r1138, label %L_1282, label %L_1228

L_1226:
	; OW32 (RP(0): Objptr (opt_13), 0): Word32  = 0x1
	%r1139 = load %Objptr, %Objptr* %regP_0
	%r1140 = getelementptr inbounds i8, %Objptr %r1139, i32 0
	%r1141 = bitcast %Objptr %r1140 to %Word32*
	store %Word32 1, %Word32* %r1141
	; SW32(4): Word32  = WordS32_lt (SW32(0): Word32, 0x0)
	%r1142 = load %Pointer, %Pointer* %stackTop
	%r1143 = getelementptr inbounds i8, %Pointer %r1142, i32 0
	%r1144 = bitcast %Pointer %r1143 to %Word32*
	%r1145 = load %Word32, %Word32* %r1144
	%r1147 = icmp slt %Word32 %r1145, 0
	%r1146 = zext i1 %r1147 to %Word32
	%r1148 = load %Pointer, %Pointer* %stackTop
	%r1149 = getelementptr inbounds i8, %Pointer %r1148, i32 4
	%r1150 = bitcast %Pointer %r1149 to %Word32*
	store %Word32 %r1146, %Word32* %r1150
	; switch {test = SW32(4): Word32, default = None, cases = ((0x0, L_1227), (0x1, L_1315))}
	%r1151 = load %Pointer, %Pointer* %stackTop
	%r1152 = getelementptr inbounds i8, %Pointer %r1151, i32 4
	%r1153 = bitcast %Pointer %r1152 to %Word32*
	%r1154 = load %Word32, %Word32* %r1153
	%r1155 = trunc %Word32 %r1154 to i1
	br i1 %r1155, label %L_1315, label %L_1227

L_1225:
	; RP(0): Objptr (opt_13)  = OP (SP(8): Objptr (opt_28), 16): Objptr (opt_13)
	%r1156 = load %Pointer, %Pointer* %stackTop
	%r1157 = getelementptr inbounds i8, %Pointer %r1156, i32 8
	%r1158 = bitcast %Pointer %r1157 to %Objptr*
	%r1159 = load %Objptr, %Objptr* %r1158
	%r1160 = getelementptr inbounds i8, %Objptr %r1159, i32 16
	%r1161 = bitcast %Objptr %r1160 to %Objptr*
	%r1162 = load %Objptr, %Objptr* %r1161
	store %Objptr %r1162, %Objptr* %regP_0
	; RP(1): Objptr (opt_26)  = OP (SP(8): Objptr (opt_28), 8): Objptr (opt_26)
	%r1163 = load %Pointer, %Pointer* %stackTop
	%r1164 = getelementptr inbounds i8, %Pointer %r1163, i32 8
	%r1165 = bitcast %Pointer %r1164 to %Objptr*
	%r1166 = load %Objptr, %Objptr* %r1165
	%r1167 = getelementptr inbounds i8, %Objptr %r1166, i32 8
	%r1168 = bitcast %Objptr %r1167 to %Objptr*
	%r1169 = load %Objptr, %Objptr* %r1168
	store %Objptr %r1169, %Objptr* %regP_1
	; RP(2): Objptr (opt_25)  = OP (SP(8): Objptr (opt_28), 0): Objptr (opt_25)
	%r1170 = load %Pointer, %Pointer* %stackTop
	%r1171 = getelementptr inbounds i8, %Pointer %r1170, i32 8
	%r1172 = bitcast %Pointer %r1171 to %Objptr*
	%r1173 = load %Objptr, %Objptr* %r1172
	%r1174 = getelementptr inbounds i8, %Objptr %r1173, i32 0
	%r1175 = bitcast %Objptr %r1174 to %Objptr*
	%r1176 = load %Objptr, %Objptr* %r1175
	store %Objptr %r1176, %Objptr* %regP_2
	; RW32(0): Word32  = OW32 (RP(0): Objptr (opt_13), 0): Word32
	%r1177 = load %Objptr, %Objptr* %regP_0
	%r1178 = getelementptr inbounds i8, %Objptr %r1177, i32 0
	%r1179 = bitcast %Objptr %r1178 to %Word32*
	%r1180 = load %Word32, %Word32* %r1179
	store %Word32 %r1180, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_1226), (0x1, L_1316))}
	%r1181 = load %Word32, %Word32* %regW32_0
	%r1182 = trunc %Word32 %r1181 to i1
	br i1 %r1182, label %L_1316, label %L_1226

L_1224:
	; SW64(24): ExnStack  = OW64 (<GCState>, 32): ExnStack
	%r1183 = bitcast %struct.GC_state* @gcState to %Pointer
	%r1184 = getelementptr inbounds i8, %Pointer %r1183, i32 32
	%r1185 = bitcast %Pointer %r1184 to %Word64*
	%r1186 = load %Word64, %Word64* %r1185
	%r1187 = load %Pointer, %Pointer* %stackTop
	%r1188 = getelementptr inbounds i8, %Pointer %r1187, i32 24
	%r1189 = bitcast %Pointer %r1188 to %Word64*
	store %Word64 %r1186, %Word64* %r1189
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 24): CPointer, <StackTop>)
	%r1190 = bitcast %struct.GC_state* @gcState to %Pointer
	%r1191 = getelementptr inbounds i8, %Pointer %r1190, i32 24
	%r1192 = bitcast %Pointer %r1191 to %CPointer*
	%r1193 = load %CPointer, %CPointer* %r1192
	%r1194 = load %Pointer, %Pointer* %stackTop
	%r1196 = icmp ult %Pointer %r1193, %r1194
	%r1195 = zext i1 %r1196 to %Word32
	store %Word32 %r1195, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_1225), (0x1, L_1317))}
	%r1197 = load %Word32, %Word32* %regW32_0
	%r1198 = trunc %Word32 %r1197 to i1
	br i1 %r1198, label %L_1317, label %L_1225

exit_0:
	; Goto L_1224
	br label %L_1224

L_1223:
	; Push(-40)
	%r1199 = load %Pointer, %Pointer* %stackTop
	%r1200 = getelementptr inbounds i8, %Pointer %r1199, i32 -40
	store %Pointer %r1200, %Pointer* %stackTop
	; Goto L_1151
	br label %L_1151

L_1222:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 170}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_1223}
	; GetOperands
	%r1201 = bitcast %struct.GC_state* @gcState to %Pointer
	%r1202 = load %Pointer, %Pointer* %stackTop
	%r1203 = getelementptr inbounds i8, %Pointer %r1202, i32 32
	%r1204 = bitcast %Pointer %r1203 to %uintptr_t*
	store %uintptr_t 170, %uintptr_t* %r1204
	; Push(40)
	%r1205 = load %Pointer, %Pointer* %stackTop
	%r1206 = getelementptr inbounds i8, %Pointer %r1205, i32 40
	store %Pointer %r1206, %Pointer* %stackTop
	; FlushFrontier
	%r1207 = bitcast %struct.GC_state* @gcState to %Pointer
	%r1208 = getelementptr inbounds i8, %Pointer %r1207, i32 0
	%r1209 = bitcast %Pointer %r1208 to %Pointer*
	%r1210 = load %Pointer, %Pointer* %frontier
	store %Pointer %r1210, %Pointer* %r1209
	; FlushStackTop
	%r1211 = bitcast %struct.GC_state* @gcState to %Pointer
	%r1212 = getelementptr inbounds i8, %Pointer %r1211, i32 16
	%r1213 = bitcast %Pointer %r1212 to %Pointer*
	%r1214 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r1214, %Pointer* %r1213
	; Call
	call void @GC_collect(%Pointer %r1201, %Word64 0, %Word32 0)
	; CacheFrontier
	%r1215 = bitcast %struct.GC_state* @gcState to %Pointer
	%r1216 = getelementptr inbounds i8, %Pointer %r1215, i32 0
	%r1217 = bitcast %Pointer %r1216 to %Pointer*
	%r1218 = load %Pointer, %Pointer* %r1217
	store %Pointer %r1218, %Pointer* %frontier
	; CacheStackTop
	%r1219 = bitcast %struct.GC_state* @gcState to %Pointer
	%r1220 = getelementptr inbounds i8, %Pointer %r1219, i32 16
	%r1221 = bitcast %Pointer %r1220 to %Pointer*
	%r1222 = load %Pointer, %Pointer* %r1221
	store %Pointer %r1222, %Pointer* %stackTop
	br label %L_1223

L_1221:
	; Goto L_1159
	br label %L_1159

L_1220:
	; Push(-40)
	%r1223 = load %Pointer, %Pointer* %stackTop
	%r1224 = getelementptr inbounds i8, %Pointer %r1223, i32 -40
	store %Pointer %r1224, %Pointer* %stackTop
	; Goto L_1197
	br label %L_1197

L_1219:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 169}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_1220}
	; GetOperands
	%r1225 = bitcast %struct.GC_state* @gcState to %Pointer
	%r1226 = load %Pointer, %Pointer* %stackTop
	%r1227 = getelementptr inbounds i8, %Pointer %r1226, i32 32
	%r1228 = bitcast %Pointer %r1227 to %uintptr_t*
	store %uintptr_t 169, %uintptr_t* %r1228
	; Push(40)
	%r1229 = load %Pointer, %Pointer* %stackTop
	%r1230 = getelementptr inbounds i8, %Pointer %r1229, i32 40
	store %Pointer %r1230, %Pointer* %stackTop
	; FlushFrontier
	%r1231 = bitcast %struct.GC_state* @gcState to %Pointer
	%r1232 = getelementptr inbounds i8, %Pointer %r1231, i32 0
	%r1233 = bitcast %Pointer %r1232 to %Pointer*
	%r1234 = load %Pointer, %Pointer* %frontier
	store %Pointer %r1234, %Pointer* %r1233
	; FlushStackTop
	%r1235 = bitcast %struct.GC_state* @gcState to %Pointer
	%r1236 = getelementptr inbounds i8, %Pointer %r1235, i32 16
	%r1237 = bitcast %Pointer %r1236 to %Pointer*
	%r1238 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r1238, %Pointer* %r1237
	; Call
	call void @GC_collect(%Pointer %r1225, %Word64 0, %Word32 0)
	; CacheFrontier
	%r1239 = bitcast %struct.GC_state* @gcState to %Pointer
	%r1240 = getelementptr inbounds i8, %Pointer %r1239, i32 0
	%r1241 = bitcast %Pointer %r1240 to %Pointer*
	%r1242 = load %Pointer, %Pointer* %r1241
	store %Pointer %r1242, %Pointer* %frontier
	; CacheStackTop
	%r1243 = bitcast %struct.GC_state* @gcState to %Pointer
	%r1244 = getelementptr inbounds i8, %Pointer %r1243, i32 16
	%r1245 = bitcast %Pointer %r1244 to %Pointer*
	%r1246 = load %Pointer, %Pointer* %r1245
	store %Pointer %r1246, %Pointer* %stackTop
	br label %L_1220

L_1218:
	; Push(-40)
	%r1247 = load %Pointer, %Pointer* %stackTop
	%r1248 = getelementptr inbounds i8, %Pointer %r1247, i32 -40
	store %Pointer %r1248, %Pointer* %stackTop
	; Goto L_1216
	br label %L_1216

L_1217:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 168}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_1218}
	; GetOperands
	%r1249 = bitcast %struct.GC_state* @gcState to %Pointer
	%r1250 = load %Pointer, %Pointer* %stackTop
	%r1251 = getelementptr inbounds i8, %Pointer %r1250, i32 32
	%r1252 = bitcast %Pointer %r1251 to %uintptr_t*
	store %uintptr_t 168, %uintptr_t* %r1252
	; Push(40)
	%r1253 = load %Pointer, %Pointer* %stackTop
	%r1254 = getelementptr inbounds i8, %Pointer %r1253, i32 40
	store %Pointer %r1254, %Pointer* %stackTop
	; FlushFrontier
	%r1255 = bitcast %struct.GC_state* @gcState to %Pointer
	%r1256 = getelementptr inbounds i8, %Pointer %r1255, i32 0
	%r1257 = bitcast %Pointer %r1256 to %Pointer*
	%r1258 = load %Pointer, %Pointer* %frontier
	store %Pointer %r1258, %Pointer* %r1257
	; FlushStackTop
	%r1259 = bitcast %struct.GC_state* @gcState to %Pointer
	%r1260 = getelementptr inbounds i8, %Pointer %r1259, i32 16
	%r1261 = bitcast %Pointer %r1260 to %Pointer*
	%r1262 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r1262, %Pointer* %r1261
	; Call
	call void @GC_collect(%Pointer %r1249, %Word64 0, %Word32 0)
	; CacheFrontier
	%r1263 = bitcast %struct.GC_state* @gcState to %Pointer
	%r1264 = getelementptr inbounds i8, %Pointer %r1263, i32 0
	%r1265 = bitcast %Pointer %r1264 to %Pointer*
	%r1266 = load %Pointer, %Pointer* %r1265
	store %Pointer %r1266, %Pointer* %frontier
	; CacheStackTop
	%r1267 = bitcast %struct.GC_state* @gcState to %Pointer
	%r1268 = getelementptr inbounds i8, %Pointer %r1267, i32 16
	%r1269 = bitcast %Pointer %r1268 to %Pointer*
	%r1270 = load %Pointer, %Pointer* %r1269
	store %Pointer %r1270, %Pointer* %stackTop
	br label %L_1218

L_1216:
	; RP(0): Objptr (opt_3)  = OP (SP(0): Objptr (opt_19), 8): Objptr (opt_3)
	%r1271 = load %Pointer, %Pointer* %stackTop
	%r1272 = getelementptr inbounds i8, %Pointer %r1271, i32 0
	%r1273 = bitcast %Pointer %r1272 to %Objptr*
	%r1274 = load %Objptr, %Objptr* %r1273
	%r1275 = getelementptr inbounds i8, %Objptr %r1274, i32 8
	%r1276 = bitcast %Objptr %r1275 to %Objptr*
	%r1277 = load %Objptr, %Objptr* %r1276
	store %Objptr %r1277, %Objptr* %regP_0
	; Goto L_1208
	br label %L_1208

L_1215:
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r1278 = bitcast %struct.GC_state* @gcState to %Pointer
	%r1279 = getelementptr inbounds i8, %Pointer %r1278, i32 8
	%r1280 = bitcast %Pointer %r1279 to %CPointer*
	%r1281 = load %CPointer, %CPointer* %r1280
	%r1282 = load %Pointer, %Pointer* %frontier
	%r1284 = icmp ult %Pointer %r1281, %r1282
	%r1283 = zext i1 %r1284 to %Word32
	store %Word32 %r1283, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_1216), (0x1, L_1217))}
	%r1285 = load %Word32, %Word32* %regW32_0
	%r1286 = trunc %Word32 %r1285 to i1
	br i1 %r1286, label %L_1217, label %L_1216

L_1214:
	; Push(-40)
	%r1287 = load %Pointer, %Pointer* %stackTop
	%r1288 = getelementptr inbounds i8, %Pointer %r1287, i32 -40
	store %Pointer %r1288, %Pointer* %stackTop
	; Goto L_1207
	br label %L_1207

L_1213:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 167}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_1214}
	; GetOperands
	%r1289 = bitcast %struct.GC_state* @gcState to %Pointer
	%r1290 = load %Pointer, %Pointer* %stackTop
	%r1291 = getelementptr inbounds i8, %Pointer %r1290, i32 32
	%r1292 = bitcast %Pointer %r1291 to %uintptr_t*
	store %uintptr_t 167, %uintptr_t* %r1292
	; Push(40)
	%r1293 = load %Pointer, %Pointer* %stackTop
	%r1294 = getelementptr inbounds i8, %Pointer %r1293, i32 40
	store %Pointer %r1294, %Pointer* %stackTop
	; FlushFrontier
	%r1295 = bitcast %struct.GC_state* @gcState to %Pointer
	%r1296 = getelementptr inbounds i8, %Pointer %r1295, i32 0
	%r1297 = bitcast %Pointer %r1296 to %Pointer*
	%r1298 = load %Pointer, %Pointer* %frontier
	store %Pointer %r1298, %Pointer* %r1297
	; FlushStackTop
	%r1299 = bitcast %struct.GC_state* @gcState to %Pointer
	%r1300 = getelementptr inbounds i8, %Pointer %r1299, i32 16
	%r1301 = bitcast %Pointer %r1300 to %Pointer*
	%r1302 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r1302, %Pointer* %r1301
	; Call
	call void @GC_collect(%Pointer %r1289, %Word64 0, %Word32 0)
	; CacheFrontier
	%r1303 = bitcast %struct.GC_state* @gcState to %Pointer
	%r1304 = getelementptr inbounds i8, %Pointer %r1303, i32 0
	%r1305 = bitcast %Pointer %r1304 to %Pointer*
	%r1306 = load %Pointer, %Pointer* %r1305
	store %Pointer %r1306, %Pointer* %frontier
	; CacheStackTop
	%r1307 = bitcast %struct.GC_state* @gcState to %Pointer
	%r1308 = getelementptr inbounds i8, %Pointer %r1307, i32 16
	%r1309 = bitcast %Pointer %r1308 to %Pointer*
	%r1310 = load %Pointer, %Pointer* %r1309
	store %Pointer %r1310, %Pointer* %stackTop
	br label %L_1214

L_1212:
	; Push(-40)
	%r1311 = load %Pointer, %Pointer* %stackTop
	%r1312 = getelementptr inbounds i8, %Pointer %r1311, i32 -40
	store %Pointer %r1312, %Pointer* %stackTop
	; Goto L_1210
	br label %L_1210

L_1211:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 166}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_1212}
	; GetOperands
	%r1313 = bitcast %struct.GC_state* @gcState to %Pointer
	%r1314 = load %Pointer, %Pointer* %stackTop
	%r1315 = getelementptr inbounds i8, %Pointer %r1314, i32 32
	%r1316 = bitcast %Pointer %r1315 to %uintptr_t*
	store %uintptr_t 166, %uintptr_t* %r1316
	; Push(40)
	%r1317 = load %Pointer, %Pointer* %stackTop
	%r1318 = getelementptr inbounds i8, %Pointer %r1317, i32 40
	store %Pointer %r1318, %Pointer* %stackTop
	; FlushFrontier
	%r1319 = bitcast %struct.GC_state* @gcState to %Pointer
	%r1320 = getelementptr inbounds i8, %Pointer %r1319, i32 0
	%r1321 = bitcast %Pointer %r1320 to %Pointer*
	%r1322 = load %Pointer, %Pointer* %frontier
	store %Pointer %r1322, %Pointer* %r1321
	; FlushStackTop
	%r1323 = bitcast %struct.GC_state* @gcState to %Pointer
	%r1324 = getelementptr inbounds i8, %Pointer %r1323, i32 16
	%r1325 = bitcast %Pointer %r1324 to %Pointer*
	%r1326 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r1326, %Pointer* %r1325
	; Call
	call void @GC_collect(%Pointer %r1313, %Word64 0, %Word32 0)
	; CacheFrontier
	%r1327 = bitcast %struct.GC_state* @gcState to %Pointer
	%r1328 = getelementptr inbounds i8, %Pointer %r1327, i32 0
	%r1329 = bitcast %Pointer %r1328 to %Pointer*
	%r1330 = load %Pointer, %Pointer* %r1329
	store %Pointer %r1330, %Pointer* %frontier
	; CacheStackTop
	%r1331 = bitcast %struct.GC_state* @gcState to %Pointer
	%r1332 = getelementptr inbounds i8, %Pointer %r1331, i32 16
	%r1333 = bitcast %Pointer %r1332 to %Pointer*
	%r1334 = load %Pointer, %Pointer* %r1333
	store %Pointer %r1334, %Pointer* %stackTop
	br label %L_1212

L_1210:
	; RP(0): Objptr (opt_3)  = SP(0): Objptr (opt_3)
	%r1335 = load %Pointer, %Pointer* %stackTop
	%r1336 = getelementptr inbounds i8, %Pointer %r1335, i32 0
	%r1337 = bitcast %Pointer %r1336 to %Objptr*
	%r1338 = load %Objptr, %Objptr* %r1337
	store %Objptr %r1338, %Objptr* %regP_0
	; Goto L_1199
	br label %L_1199

L_1209:
	; Push(-40)
	%r1339 = load %Pointer, %Pointer* %stackTop
	%r1340 = getelementptr inbounds i8, %Pointer %r1339, i32 -40
	store %Pointer %r1340, %Pointer* %stackTop
	; SP(0): Objptr (opt_3)  = SP(40): Objptr (opt_3)
	%r1341 = load %Pointer, %Pointer* %stackTop
	%r1342 = getelementptr inbounds i8, %Pointer %r1341, i32 40
	%r1343 = bitcast %Pointer %r1342 to %Objptr*
	%r1344 = load %Objptr, %Objptr* %r1343
	%r1345 = load %Pointer, %Pointer* %stackTop
	%r1346 = getelementptr inbounds i8, %Pointer %r1345, i32 0
	%r1347 = bitcast %Pointer %r1346 to %Objptr*
	store %Objptr %r1344, %Objptr* %r1347
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r1348 = bitcast %struct.GC_state* @gcState to %Pointer
	%r1349 = getelementptr inbounds i8, %Pointer %r1348, i32 8
	%r1350 = bitcast %Pointer %r1349 to %CPointer*
	%r1351 = load %CPointer, %CPointer* %r1350
	%r1352 = load %Pointer, %Pointer* %frontier
	%r1354 = icmp ult %Pointer %r1351, %r1352
	%r1353 = zext i1 %r1354 to %Word32
	store %Word32 %r1353, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_1210), (0x1, L_1211))}
	%r1355 = load %Word32, %Word32* %regW32_0
	%r1356 = trunc %Word32 %r1355 to i1
	br i1 %r1356, label %L_1211, label %L_1210

L_1208:
	; CW64 (<Frontier>)  = 0x57
	%r1357 = load %Pointer, %Pointer* %frontier
	%r1358 = bitcast %Pointer %r1357 to %Word64*
	store %Word64 87, %Word64* %r1358
	; RQ(103): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r1359 = load %Pointer, %Pointer* %frontier
	%r1361 = ptrtoint %Pointer %r1359 to %uintptr_t
	%r1362 = add %uintptr_t %r1361, 8
	%r1360 = inttoptr %uintptr_t %r1362 to %Pointer
	store %CPointer %r1360, %CPointer* %regQ_103
	; RP(1): Objptr (opt_43)  = Cast (RQ(103): CPointer, Objptr (opt_43))
	%r1363 = load %CPointer, %CPointer* %regQ_103
	%r1364 = bitcast %CPointer %r1363 to %Objptr
	store %Objptr %r1364, %Objptr* %regP_1
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r1365 = load %Pointer, %Pointer* %frontier
	%r1367 = ptrtoint %Pointer %r1365 to %uintptr_t
	%r1368 = add %uintptr_t %r1367, 24
	%r1366 = inttoptr %uintptr_t %r1368 to %Pointer
	store %Pointer %r1366, %Pointer* %frontier
	; OP (RP(1): Objptr (opt_43), 0): Objptr (opt_3)  = RP(0): Objptr (opt_3)
	%r1369 = load %Objptr, %Objptr* %regP_0
	%r1370 = load %Objptr, %Objptr* %regP_1
	%r1371 = getelementptr inbounds i8, %Objptr %r1370, i32 0
	%r1372 = bitcast %Objptr %r1371 to %Objptr*
	store %Objptr %r1369, %Objptr* %r1372
	; OP (RP(1): Objptr (opt_43), 8): Objptr (opt_43)  = glob {index = 4, isRoot = true, ty = Objptr (opt_43)}
	%r1373 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 4
	%r1374 = load %Objptr, %Objptr* %r1373
	%r1375 = load %Objptr, %Objptr* %regP_1
	%r1376 = getelementptr inbounds i8, %Objptr %r1375, i32 8
	%r1377 = bitcast %Objptr %r1376 to %Objptr*
	store %Objptr %r1374, %Objptr* %r1377
	; CW64 (<Frontier>)  = 0x57
	%r1378 = load %Pointer, %Pointer* %frontier
	%r1379 = bitcast %Pointer %r1378 to %Word64*
	store %Word64 87, %Word64* %r1379
	; RQ(102): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r1380 = load %Pointer, %Pointer* %frontier
	%r1382 = ptrtoint %Pointer %r1380 to %uintptr_t
	%r1383 = add %uintptr_t %r1382, 8
	%r1381 = inttoptr %uintptr_t %r1383 to %Pointer
	store %CPointer %r1381, %CPointer* %regQ_102
	; RP(2): Objptr (opt_43)  = Cast (RQ(102): CPointer, Objptr (opt_43))
	%r1384 = load %CPointer, %CPointer* %regQ_102
	%r1385 = bitcast %CPointer %r1384 to %Objptr
	store %Objptr %r1385, %Objptr* %regP_2
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r1386 = load %Pointer, %Pointer* %frontier
	%r1388 = ptrtoint %Pointer %r1386 to %uintptr_t
	%r1389 = add %uintptr_t %r1388, 24
	%r1387 = inttoptr %uintptr_t %r1389 to %Pointer
	store %Pointer %r1387, %Pointer* %frontier
	; OP (RP(2): Objptr (opt_43), 0): Objptr (opt_3)  = glob {index = 151, isRoot = true, ty = Objptr (opt_3)}
	%r1390 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 151
	%r1391 = load %Objptr, %Objptr* %r1390
	%r1392 = load %Objptr, %Objptr* %regP_2
	%r1393 = getelementptr inbounds i8, %Objptr %r1392, i32 0
	%r1394 = bitcast %Objptr %r1393 to %Objptr*
	store %Objptr %r1391, %Objptr* %r1394
	; OP (RP(2): Objptr (opt_43), 8): Objptr (opt_43)  = RP(1): Objptr (opt_43)
	%r1395 = load %Objptr, %Objptr* %regP_1
	%r1396 = load %Objptr, %Objptr* %regP_2
	%r1397 = getelementptr inbounds i8, %Objptr %r1396, i32 8
	%r1398 = bitcast %Objptr %r1397 to %Objptr*
	store %Objptr %r1395, %Objptr* %r1398
	; SQ(16): Label L_1201  = L_1201
	%r1399 = inttoptr %Word32 164 to %CPointer
	%r1400 = load %Pointer, %Pointer* %stackTop
	%r1401 = getelementptr inbounds i8, %Pointer %r1400, i32 16
	%r1402 = bitcast %Pointer %r1401 to %CPointer*
	store %CPointer %r1399, %CPointer* %r1402
	; RQ(101): CPointer  = CPointer_add (<StackTop>, 0x18)
	%r1403 = load %Pointer, %Pointer* %stackTop
	%r1405 = ptrtoint %Pointer %r1403 to %uintptr_t
	%r1406 = add %uintptr_t %r1405, 24
	%r1404 = inttoptr %uintptr_t %r1406 to %Pointer
	store %CPointer %r1404, %CPointer* %regQ_101
	; RW64(14): Word64  = CPointer_diff (RQ(101): CPointer, OQ (<GCState>, 1616): CPointer)
	%r1407 = load %CPointer, %CPointer* %regQ_101
	%r1408 = bitcast %struct.GC_state* @gcState to %Pointer
	%r1409 = getelementptr inbounds i8, %Pointer %r1408, i32 1616
	%r1410 = bitcast %Pointer %r1409 to %CPointer*
	%r1411 = load %CPointer, %CPointer* %r1410
	%r1413 = ptrtoint %Pointer %r1407 to %uintptr_t
	%r1414 = ptrtoint %Pointer %r1411 to %uintptr_t
	%r1412 = sub %uintptr_t %r1413, %r1414
	store %Word64 %r1412, %Word64* %regW64_14
	; OW64 (<GCState>, 32): ExnStack  = Cast (RW64(14): Word64, ExnStack)
	%r1415 = load %Word64, %Word64* %regW64_14
	%r1416 = bitcast %Word64 %r1415 to %Word64
	%r1417 = bitcast %struct.GC_state* @gcState to %Pointer
	%r1418 = getelementptr inbounds i8, %Pointer %r1417, i32 32
	%r1419 = bitcast %Pointer %r1418 to %Word64*
	store %Word64 %r1416, %Word64* %r1419
	; SP(40): Objptr (opt_43)  = RP(2): Objptr (opt_43)
	%r1420 = load %Objptr, %Objptr* %regP_2
	%r1421 = load %Pointer, %Pointer* %stackTop
	%r1422 = getelementptr inbounds i8, %Pointer %r1421, i32 40
	%r1423 = bitcast %Pointer %r1422 to %Objptr*
	store %Objptr %r1420, %Objptr* %r1423
	%r1424 = load %Pointer, %Pointer* %stackTop
	%r1425 = getelementptr inbounds i8, %Pointer %r1424, i32 32
	%r1426 = bitcast %Pointer %r1425 to %uintptr_t*
	store %uintptr_t 165, %uintptr_t* %r1426
	; Push(40)
	%r1427 = load %Pointer, %Pointer* %stackTop
	%r1428 = getelementptr inbounds i8, %Pointer %r1427, i32 40
	store %Pointer %r1428, %Pointer* %stackTop
	br label %concat_0

L_1207:
	; RP(0): Objptr (opt_3)  = glob {index = 150, isRoot = true, ty = Objptr (opt_3)}
	%r1429 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 150
	%r1430 = load %Objptr, %Objptr* %r1429
	store %Objptr %r1430, %Objptr* %regP_0
	; Goto L_1208
	br label %L_1208

L_1206:
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r1431 = bitcast %struct.GC_state* @gcState to %Pointer
	%r1432 = getelementptr inbounds i8, %Pointer %r1431, i32 8
	%r1433 = bitcast %Pointer %r1432 to %CPointer*
	%r1434 = load %CPointer, %CPointer* %r1433
	%r1435 = load %Pointer, %Pointer* %frontier
	%r1437 = icmp ult %Pointer %r1434, %r1435
	%r1436 = zext i1 %r1437 to %Word32
	store %Word32 %r1436, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_1207), (0x1, L_1213))}
	%r1438 = load %Word32, %Word32* %regW32_0
	%r1439 = trunc %Word32 %r1438 to i1
	br i1 %r1439, label %L_1213, label %L_1207

L_1205:
	; RP(1): Objptr (opt_38)  = OP (RP(0): Objptr (opt_38), 8): Objptr (opt_38)
	%r1440 = load %Objptr, %Objptr* %regP_0
	%r1441 = getelementptr inbounds i8, %Objptr %r1440, i32 8
	%r1442 = bitcast %Objptr %r1441 to %Objptr*
	%r1443 = load %Objptr, %Objptr* %r1442
	store %Objptr %r1443, %Objptr* %regP_1
	; RP(2): Objptr (opt_19)  = OP (RP(0): Objptr (opt_38), 0): Objptr (opt_19)
	%r1444 = load %Objptr, %Objptr* %regP_0
	%r1445 = getelementptr inbounds i8, %Objptr %r1444, i32 0
	%r1446 = bitcast %Objptr %r1445 to %Objptr*
	%r1447 = load %Objptr, %Objptr* %r1446
	store %Objptr %r1447, %Objptr* %regP_2
	; RP(0): Objptr (opt_38)  = RP(1): Objptr (opt_38)
	%r1448 = load %Objptr, %Objptr* %regP_1
	store %Objptr %r1448, %Objptr* %regP_0
	; SP(0): Objptr (opt_19)  = RP(2): Objptr (opt_19)
	%r1449 = load %Objptr, %Objptr* %regP_2
	%r1450 = load %Pointer, %Pointer* %stackTop
	%r1451 = getelementptr inbounds i8, %Pointer %r1450, i32 0
	%r1452 = bitcast %Pointer %r1451 to %Objptr*
	store %Objptr %r1449, %Objptr* %r1452
	; Goto L_1203
	br label %L_1203

L_1204:
	; switch {test = Cast (RP(0): Objptr (opt_38), Bits64), default = Some L_1205, cases = ((0x1, L_1206))}
	%r1453 = load %Objptr, %Objptr* %regP_0
	%r1454 = ptrtoint %Objptr %r1453 to %Word64
	switch %Word64 %r1454, label %L_1205 [
		%Word64 1, label %L_1206
	]

L_1203:
	; RW32(1): Word32  = OW32 (SP(0): Objptr (opt_19), 0): Word32
	%r1455 = load %Pointer, %Pointer* %stackTop
	%r1456 = getelementptr inbounds i8, %Pointer %r1455, i32 0
	%r1457 = bitcast %Pointer %r1456 to %Objptr*
	%r1458 = load %Objptr, %Objptr* %r1457
	%r1459 = getelementptr inbounds i8, %Objptr %r1458, i32 0
	%r1460 = bitcast %Objptr %r1459 to %Word32*
	%r1461 = load %Word32, %Word32* %r1460
	store %Word32 %r1461, %Word32* %regW32_1
	; RW32(2): Word32  = Word32_equal (RW32(1): Word32, RW32(0): Word32)
	%r1462 = load %Word32, %Word32* %regW32_1
	%r1463 = load %Word32, %Word32* %regW32_0
	%r1465 = icmp eq %Word32 %r1462, %r1463
	%r1464 = zext i1 %r1465 to %Word32
	store %Word32 %r1464, %Word32* %regW32_2
	; switch {test = RW32(2): Word32, default = None, cases = ((0x0, L_1204), (0x1, L_1215))}
	%r1466 = load %Word32, %Word32* %regW32_2
	%r1467 = trunc %Word32 %r1466 to i1
	br i1 %r1467, label %L_1215, label %L_1204

L_1202:
	; RW64(1): [Word1, Word32, Bits31]  = WordU64_rshift (Cast (RW64(0): [Word1, Bits63], [Word1, Word32, Bits31]), 0x1)
	%r1468 = load %Word64, %Word64* %regW64_0
	%r1469 = bitcast %Word64 %r1468 to %Word64
	%r1470 = zext %Word32 1 to %Word64
	%r1471 = lshr %Word64 %r1469, %r1470
	store %Word64 %r1471, %Word64* %regW64_1
	; RW32(0): Word32  = WordU64_extdToWord32 (RW64(1): [Word1, Word32, Bits31])
	%r1472 = load %Word64, %Word64* %regW64_1
	%r1473 = trunc %Word64 %r1472 to %Word32
	store %Word32 %r1473, %Word32* %regW32_0
	; RP(0): Objptr (opt_38)  = glob {index = 3, isRoot = true, ty = Objptr (opt_38)}
	%r1474 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 3
	%r1475 = load %Objptr, %Objptr* %r1474
	store %Objptr %r1475, %Objptr* %regP_0
	; SP(0): Objptr (opt_19)  = glob {index = 2, isRoot = true, ty = Objptr (opt_19)}
	%r1476 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 2
	%r1477 = load %Objptr, %Objptr* %r1476
	%r1478 = load %Pointer, %Pointer* %stackTop
	%r1479 = getelementptr inbounds i8, %Pointer %r1478, i32 0
	%r1480 = bitcast %Pointer %r1479 to %Objptr*
	store %Objptr %r1477, %Objptr* %r1480
	; Goto L_1203
	br label %L_1203

L_1201:
	; Push(-24)
	%r1481 = load %Pointer, %Pointer* %stackTop
	%r1482 = getelementptr inbounds i8, %Pointer %r1481, i32 -24
	store %Pointer %r1482, %Pointer* %stackTop
	; RP(0): Objptr (opt_34, opt_33, opt_32, opt_31)  = glob {index = 0, isRoot = false, ty = Objptr (opt_34, opt_33, opt_32, opt_31)}
	%r1483 = getelementptr inbounds [1 x %Objptr], [1 x %Objptr]* @globalObjptrNonRoot, i32 0, i32 0
	%r1484 = load %Objptr, %Objptr* %r1483
	store %Objptr %r1484, %Objptr* %regP_0
	; OW64 (<GCState>, 32): ExnStack  = SW64(24): ExnStack
	%r1485 = load %Pointer, %Pointer* %stackTop
	%r1486 = getelementptr inbounds i8, %Pointer %r1485, i32 24
	%r1487 = bitcast %Pointer %r1486 to %Word64*
	%r1488 = load %Word64, %Word64* %r1487
	%r1489 = bitcast %struct.GC_state* @gcState to %Pointer
	%r1490 = getelementptr inbounds i8, %Pointer %r1489, i32 32
	%r1491 = bitcast %Pointer %r1490 to %Word64*
	store %Word64 %r1488, %Word64* %r1491
	; Raise
	%r1492 = bitcast %struct.GC_state* @gcState to %Pointer
	%r1493 = getelementptr inbounds i8, %Pointer %r1492, i32 1616
	%r1494 = bitcast %Pointer %r1493 to %Pointer*
	%r1495 = load %Pointer, %Pointer* %r1494
	%r1496 = bitcast %struct.GC_state* @gcState to %Pointer
	%r1497 = getelementptr inbounds i8, %Pointer %r1496, i32 32
	%r1498 = bitcast %Pointer %r1497 to i32*
	%r1499 = load i32, i32* %r1498
	%r1500 = getelementptr inbounds i8, %Pointer %r1495, i32 %r1499
	store %Pointer %r1500, %Pointer* %stackTop
	%r1501 = load %Pointer, %Pointer* %stackTop
	%r1502 = getelementptr inbounds i8, %Pointer %r1501, i32 -8
	%r1503 = bitcast %Pointer %r1502 to %uintptr_t*
	%r1504 = load %uintptr_t, %uintptr_t* %r1503
	store %uintptr_t %r1504, %uintptr_t* %l_nextFun
	br label %top

L_1200:
	; Push(-40)
	%r1505 = load %Pointer, %Pointer* %stackTop
	%r1506 = getelementptr inbounds i8, %Pointer %r1505, i32 -40
	store %Pointer %r1506, %Pointer* %stackTop
	; RP(0): Objptr (opt_3)  = SP(40): Objptr (opt_3)
	%r1507 = load %Pointer, %Pointer* %stackTop
	%r1508 = getelementptr inbounds i8, %Pointer %r1507, i32 40
	%r1509 = bitcast %Pointer %r1508 to %Objptr*
	%r1510 = load %Objptr, %Objptr* %r1509
	store %Objptr %r1510, %Objptr* %regP_0
	; OW64 (<GCState>, 32): ExnStack  = SW64(24): ExnStack
	%r1511 = load %Pointer, %Pointer* %stackTop
	%r1512 = getelementptr inbounds i8, %Pointer %r1511, i32 24
	%r1513 = bitcast %Pointer %r1512 to %Word64*
	%r1514 = load %Word64, %Word64* %r1513
	%r1515 = bitcast %struct.GC_state* @gcState to %Pointer
	%r1516 = getelementptr inbounds i8, %Pointer %r1515, i32 32
	%r1517 = bitcast %Pointer %r1516 to %Word64*
	store %Word64 %r1514, %Word64* %r1517
	; SP(0): Objptr (opt_3)  = RP(0): Objptr (opt_3)
	%r1518 = load %Objptr, %Objptr* %regP_0
	%r1519 = load %Pointer, %Pointer* %stackTop
	%r1520 = getelementptr inbounds i8, %Pointer %r1519, i32 0
	%r1521 = bitcast %Pointer %r1520 to %Objptr*
	store %Objptr %r1518, %Objptr* %r1521
	; Return
	%r1522 = load %Pointer, %Pointer* %stackTop
	%r1523 = getelementptr inbounds i8, %Pointer %r1522, i32 -8
	%r1524 = bitcast %Pointer %r1523 to %uintptr_t*
	%r1525 = load %uintptr_t, %uintptr_t* %r1524
	store %uintptr_t %r1525, %uintptr_t* %l_nextFun
	br label %top

L_1199:
	; CW64 (<Frontier>)  = 0x57
	%r1526 = load %Pointer, %Pointer* %frontier
	%r1527 = bitcast %Pointer %r1526 to %Word64*
	store %Word64 87, %Word64* %r1527
	; RQ(100): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r1528 = load %Pointer, %Pointer* %frontier
	%r1530 = ptrtoint %Pointer %r1528 to %uintptr_t
	%r1531 = add %uintptr_t %r1530, 8
	%r1529 = inttoptr %uintptr_t %r1531 to %Pointer
	store %CPointer %r1529, %CPointer* %regQ_100
	; RP(1): Objptr (opt_43)  = Cast (RQ(100): CPointer, Objptr (opt_43))
	%r1532 = load %CPointer, %CPointer* %regQ_100
	%r1533 = bitcast %CPointer %r1532 to %Objptr
	store %Objptr %r1533, %Objptr* %regP_1
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r1534 = load %Pointer, %Pointer* %frontier
	%r1536 = ptrtoint %Pointer %r1534 to %uintptr_t
	%r1537 = add %uintptr_t %r1536, 24
	%r1535 = inttoptr %uintptr_t %r1537 to %Pointer
	store %Pointer %r1535, %Pointer* %frontier
	; OP (RP(1): Objptr (opt_43), 0): Objptr (opt_3)  = RP(0): Objptr (opt_3)
	%r1538 = load %Objptr, %Objptr* %regP_0
	%r1539 = load %Objptr, %Objptr* %regP_1
	%r1540 = getelementptr inbounds i8, %Objptr %r1539, i32 0
	%r1541 = bitcast %Objptr %r1540 to %Objptr*
	store %Objptr %r1538, %Objptr* %r1541
	; OP (RP(1): Objptr (opt_43), 8): Objptr (opt_43)  = Cast (0x1, Objptr (opt_43))
	%r1542 = inttoptr %Word64 1 to %Objptr
	%r1543 = load %Objptr, %Objptr* %regP_1
	%r1544 = getelementptr inbounds i8, %Objptr %r1543, i32 8
	%r1545 = bitcast %Objptr %r1544 to %Objptr*
	store %Objptr %r1542, %Objptr* %r1545
	; CW64 (<Frontier>)  = 0x57
	%r1546 = load %Pointer, %Pointer* %frontier
	%r1547 = bitcast %Pointer %r1546 to %Word64*
	store %Word64 87, %Word64* %r1547
	; RQ(99): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r1548 = load %Pointer, %Pointer* %frontier
	%r1550 = ptrtoint %Pointer %r1548 to %uintptr_t
	%r1551 = add %uintptr_t %r1550, 8
	%r1549 = inttoptr %uintptr_t %r1551 to %Pointer
	store %CPointer %r1549, %CPointer* %regQ_99
	; RP(2): Objptr (opt_43)  = Cast (RQ(99): CPointer, Objptr (opt_43))
	%r1552 = load %CPointer, %CPointer* %regQ_99
	%r1553 = bitcast %CPointer %r1552 to %Objptr
	store %Objptr %r1553, %Objptr* %regP_2
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r1554 = load %Pointer, %Pointer* %frontier
	%r1556 = ptrtoint %Pointer %r1554 to %uintptr_t
	%r1557 = add %uintptr_t %r1556, 24
	%r1555 = inttoptr %uintptr_t %r1557 to %Pointer
	store %Pointer %r1555, %Pointer* %frontier
	; OP (RP(2): Objptr (opt_43), 0): Objptr (opt_3)  = SP(8): Objptr (opt_3)
	%r1558 = load %Pointer, %Pointer* %stackTop
	%r1559 = getelementptr inbounds i8, %Pointer %r1558, i32 8
	%r1560 = bitcast %Pointer %r1559 to %Objptr*
	%r1561 = load %Objptr, %Objptr* %r1560
	%r1562 = load %Objptr, %Objptr* %regP_2
	%r1563 = getelementptr inbounds i8, %Objptr %r1562, i32 0
	%r1564 = bitcast %Objptr %r1563 to %Objptr*
	store %Objptr %r1561, %Objptr* %r1564
	; OP (RP(2): Objptr (opt_43), 8): Objptr (opt_43)  = RP(1): Objptr (opt_43)
	%r1565 = load %Objptr, %Objptr* %regP_1
	%r1566 = load %Objptr, %Objptr* %regP_2
	%r1567 = getelementptr inbounds i8, %Objptr %r1566, i32 8
	%r1568 = bitcast %Objptr %r1567 to %Objptr*
	store %Objptr %r1565, %Objptr* %r1568
	; CW64 (<Frontier>)  = 0x57
	%r1569 = load %Pointer, %Pointer* %frontier
	%r1570 = bitcast %Pointer %r1569 to %Word64*
	store %Word64 87, %Word64* %r1570
	; RQ(98): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r1571 = load %Pointer, %Pointer* %frontier
	%r1573 = ptrtoint %Pointer %r1571 to %uintptr_t
	%r1574 = add %uintptr_t %r1573, 8
	%r1572 = inttoptr %uintptr_t %r1574 to %Pointer
	store %CPointer %r1572, %CPointer* %regQ_98
	; RP(3): Objptr (opt_43)  = Cast (RQ(98): CPointer, Objptr (opt_43))
	%r1575 = load %CPointer, %CPointer* %regQ_98
	%r1576 = bitcast %CPointer %r1575 to %Objptr
	store %Objptr %r1576, %Objptr* %regP_3
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r1577 = load %Pointer, %Pointer* %frontier
	%r1579 = ptrtoint %Pointer %r1577 to %uintptr_t
	%r1580 = add %uintptr_t %r1579, 24
	%r1578 = inttoptr %uintptr_t %r1580 to %Pointer
	store %Pointer %r1578, %Pointer* %frontier
	; OP (RP(3): Objptr (opt_43), 0): Objptr (opt_3)  = glob {index = 149, isRoot = true, ty = Objptr (opt_3)}
	%r1581 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 149
	%r1582 = load %Objptr, %Objptr* %r1581
	%r1583 = load %Objptr, %Objptr* %regP_3
	%r1584 = getelementptr inbounds i8, %Objptr %r1583, i32 0
	%r1585 = bitcast %Objptr %r1584 to %Objptr*
	store %Objptr %r1582, %Objptr* %r1585
	; OP (RP(3): Objptr (opt_43), 8): Objptr (opt_43)  = RP(2): Objptr (opt_43)
	%r1586 = load %Objptr, %Objptr* %regP_2
	%r1587 = load %Objptr, %Objptr* %regP_3
	%r1588 = getelementptr inbounds i8, %Objptr %r1587, i32 8
	%r1589 = bitcast %Objptr %r1588 to %Objptr*
	store %Objptr %r1586, %Objptr* %r1589
	; SQ(16): Label L_1201  = L_1201
	%r1590 = inttoptr %Word32 164 to %CPointer
	%r1591 = load %Pointer, %Pointer* %stackTop
	%r1592 = getelementptr inbounds i8, %Pointer %r1591, i32 16
	%r1593 = bitcast %Pointer %r1592 to %CPointer*
	store %CPointer %r1590, %CPointer* %r1593
	; RQ(97): CPointer  = CPointer_add (<StackTop>, 0x18)
	%r1594 = load %Pointer, %Pointer* %stackTop
	%r1596 = ptrtoint %Pointer %r1594 to %uintptr_t
	%r1597 = add %uintptr_t %r1596, 24
	%r1595 = inttoptr %uintptr_t %r1597 to %Pointer
	store %CPointer %r1595, %CPointer* %regQ_97
	; RW64(13): Word64  = CPointer_diff (RQ(97): CPointer, OQ (<GCState>, 1616): CPointer)
	%r1598 = load %CPointer, %CPointer* %regQ_97
	%r1599 = bitcast %struct.GC_state* @gcState to %Pointer
	%r1600 = getelementptr inbounds i8, %Pointer %r1599, i32 1616
	%r1601 = bitcast %Pointer %r1600 to %CPointer*
	%r1602 = load %CPointer, %CPointer* %r1601
	%r1604 = ptrtoint %Pointer %r1598 to %uintptr_t
	%r1605 = ptrtoint %Pointer %r1602 to %uintptr_t
	%r1603 = sub %uintptr_t %r1604, %r1605
	store %Word64 %r1603, %Word64* %regW64_13
	; OW64 (<GCState>, 32): ExnStack  = Cast (RW64(13): Word64, ExnStack)
	%r1606 = load %Word64, %Word64* %regW64_13
	%r1607 = bitcast %Word64 %r1606 to %Word64
	%r1608 = bitcast %struct.GC_state* @gcState to %Pointer
	%r1609 = getelementptr inbounds i8, %Pointer %r1608, i32 32
	%r1610 = bitcast %Pointer %r1609 to %Word64*
	store %Word64 %r1607, %Word64* %r1610
	; SP(40): Objptr (opt_43)  = RP(3): Objptr (opt_43)
	%r1611 = load %Objptr, %Objptr* %regP_3
	%r1612 = load %Pointer, %Pointer* %stackTop
	%r1613 = getelementptr inbounds i8, %Pointer %r1612, i32 40
	%r1614 = bitcast %Pointer %r1613 to %Objptr*
	store %Objptr %r1611, %Objptr* %r1614
	%r1615 = load %Pointer, %Pointer* %stackTop
	%r1616 = getelementptr inbounds i8, %Pointer %r1615, i32 32
	%r1617 = bitcast %Pointer %r1616 to %uintptr_t*
	store %uintptr_t 163, %uintptr_t* %r1617
	; Push(40)
	%r1618 = load %Pointer, %Pointer* %stackTop
	%r1619 = getelementptr inbounds i8, %Pointer %r1618, i32 40
	store %Pointer %r1619, %Pointer* %stackTop
	br label %concat_0

L_1198:
	; RP(0): Objptr (opt_3)  = glob {index = 135, isRoot = true, ty = Objptr (opt_3)}
	%r1620 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 135
	%r1621 = load %Objptr, %Objptr* %r1620
	store %Objptr %r1621, %Objptr* %regP_0
	; Goto L_1199
	br label %L_1199

L_1197:
	; RW64(0): [Word1, Bits63]  = OW64 (Cast (SP(0): Objptr (opt_34, opt_33, opt_32, opt_31), Objptr (opt_33)), 0): [Word1, Bits63]
	%r1622 = load %Pointer, %Pointer* %stackTop
	%r1623 = getelementptr inbounds i8, %Pointer %r1622, i32 0
	%r1624 = bitcast %Pointer %r1623 to %Objptr*
	%r1625 = load %Objptr, %Objptr* %r1624
	%r1626 = bitcast %Objptr %r1625 to %Objptr
	%r1627 = getelementptr inbounds i8, %Objptr %r1626, i32 0
	%r1628 = bitcast %Objptr %r1627 to %Word64*
	%r1629 = load %Word64, %Word64* %r1628
	store %Word64 %r1629, %Word64* %regW64_0
	; SP(8): Objptr (opt_3)  = OP (Cast (SP(0): Objptr (opt_34, opt_33, opt_32, opt_31), Objptr (opt_33)), 8): Objptr (opt_3)
	%r1630 = load %Pointer, %Pointer* %stackTop
	%r1631 = getelementptr inbounds i8, %Pointer %r1630, i32 0
	%r1632 = bitcast %Pointer %r1631 to %Objptr*
	%r1633 = load %Objptr, %Objptr* %r1632
	%r1634 = bitcast %Objptr %r1633 to %Objptr
	%r1635 = getelementptr inbounds i8, %Objptr %r1634, i32 8
	%r1636 = bitcast %Objptr %r1635 to %Objptr*
	%r1637 = load %Objptr, %Objptr* %r1636
	%r1638 = load %Pointer, %Pointer* %stackTop
	%r1639 = getelementptr inbounds i8, %Pointer %r1638, i32 8
	%r1640 = bitcast %Pointer %r1639 to %Objptr*
	store %Objptr %r1637, %Objptr* %r1640
	; RW64(1): [Word1, Bits63]  = Word64_andb (RW64(0): [Word1, Bits63], 0x1)
	%r1641 = load %Word64, %Word64* %regW64_0
	%r1642 = and %Word64 %r1641, 1
	store %Word64 %r1642, %Word64* %regW64_1
	; switch {test = RW64(1): [Word1, Bits63], default = None, cases = ((0x0, L_1198), (0x1, L_1202))}
	%r1643 = load %Word64, %Word64* %regW64_1
	%r1644 = trunc %Word64 %r1643 to i1
	br i1 %r1644, label %L_1202, label %L_1198

L_1196:
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r1645 = bitcast %struct.GC_state* @gcState to %Pointer
	%r1646 = getelementptr inbounds i8, %Pointer %r1645, i32 8
	%r1647 = bitcast %Pointer %r1646 to %CPointer*
	%r1648 = load %CPointer, %CPointer* %r1647
	%r1649 = load %Pointer, %Pointer* %frontier
	%r1651 = icmp ult %Pointer %r1648, %r1649
	%r1650 = zext i1 %r1651 to %Word32
	store %Word32 %r1650, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_1197), (0x1, L_1219))}
	%r1652 = load %Word32, %Word32* %regW32_0
	%r1653 = trunc %Word32 %r1652 to i1
	br i1 %r1653, label %L_1219, label %L_1197

L_1195:
	; RW64(0): Word64  = WordU64_rshift (OW64 (SP(0): Objptr (opt_34, opt_33, opt_32, opt_31), ~8): Word64, 0x1)
	%r1654 = load %Pointer, %Pointer* %stackTop
	%r1655 = getelementptr inbounds i8, %Pointer %r1654, i32 0
	%r1656 = bitcast %Pointer %r1655 to %Objptr*
	%r1657 = load %Objptr, %Objptr* %r1656
	%r1658 = getelementptr inbounds i8, %Objptr %r1657, i32 -8
	%r1659 = bitcast %Objptr %r1658 to %Word64*
	%r1660 = load %Word64, %Word64* %r1659
	%r1661 = zext %Word32 1 to %Word64
	%r1662 = lshr %Word64 %r1660, %r1661
	store %Word64 %r1662, %Word64* %regW64_0
	; switch {test = RW64(0): Word64, default = Some L_1192, cases = ((0x21, L_1196))}
	%r1663 = load %Word64, %Word64* %regW64_0
	switch %Word64 %r1663, label %L_1192 [
		%Word64 33, label %L_1196
	]

L_1194:
	; Goto L_1159
	br label %L_1159

L_1193:
	; RP(1): Objptr (opt_35)  = OP (RP(0): Objptr (opt_35), 8): Objptr (opt_35)
	%r1664 = load %Objptr, %Objptr* %regP_0
	%r1665 = getelementptr inbounds i8, %Objptr %r1664, i32 8
	%r1666 = bitcast %Objptr %r1665 to %Objptr*
	%r1667 = load %Objptr, %Objptr* %r1666
	store %Objptr %r1667, %Objptr* %regP_1
	; RP(2): Objptr (opt_7)  = OP (RP(0): Objptr (opt_35), 0): Objptr (opt_7)
	%r1668 = load %Objptr, %Objptr* %regP_0
	%r1669 = getelementptr inbounds i8, %Objptr %r1668, i32 0
	%r1670 = bitcast %Objptr %r1669 to %Objptr*
	%r1671 = load %Objptr, %Objptr* %r1670
	store %Objptr %r1671, %Objptr* %regP_2
	; RP(0): Objptr (opt_35)  = RP(1): Objptr (opt_35)
	%r1672 = load %Objptr, %Objptr* %regP_1
	store %Objptr %r1672, %Objptr* %regP_0
	; RP(1): Objptr (opt_7)  = RP(2): Objptr (opt_7)
	%r1673 = load %Objptr, %Objptr* %regP_2
	store %Objptr %r1673, %Objptr* %regP_1
	; Goto L_1153
	br label %L_1153

L_1192:
	; switch {test = Cast (RP(0): Objptr (opt_35), Bits64), default = Some L_1193, cases = ((0x1, L_1194))}
	%r1674 = load %Objptr, %Objptr* %regP_0
	%r1675 = ptrtoint %Objptr %r1674 to %Word64
	switch %Word64 %r1675, label %L_1193 [
		%Word64 1, label %L_1194
	]

L_1191:
	; RW64(0): Bits64  = Word64_andb (Cast (SP(0): Objptr (opt_34, opt_33, opt_32, opt_31), Bits64), 0x3)
	%r1676 = load %Pointer, %Pointer* %stackTop
	%r1677 = getelementptr inbounds i8, %Pointer %r1676, i32 0
	%r1678 = bitcast %Pointer %r1677 to %Objptr*
	%r1679 = load %Objptr, %Objptr* %r1678
	%r1680 = ptrtoint %Objptr %r1679 to %Word64
	%r1681 = and %Word64 %r1680, 3
	store %Word64 %r1681, %Word64* %regW64_0
	; switch {test = RW64(0): Bits64, default = Some L_1192, cases = ((0x0, L_1195))}
	%r1682 = load %Word64, %Word64* %regW64_0
	switch %Word64 %r1682, label %L_1192 [
		%Word64 0, label %L_1195
	]

L_1190:
	; Goto L_1191
	br label %L_1191

L_1189:
	; Push(-40)
	%r1683 = load %Pointer, %Pointer* %stackTop
	%r1684 = getelementptr inbounds i8, %Pointer %r1683, i32 -40
	store %Pointer %r1684, %Pointer* %stackTop
	; Goto L_1185
	br label %L_1185

L_1188:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 162}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_1189}
	; GetOperands
	%r1685 = bitcast %struct.GC_state* @gcState to %Pointer
	%r1686 = load %Pointer, %Pointer* %stackTop
	%r1687 = getelementptr inbounds i8, %Pointer %r1686, i32 32
	%r1688 = bitcast %Pointer %r1687 to %uintptr_t*
	store %uintptr_t 162, %uintptr_t* %r1688
	; Push(40)
	%r1689 = load %Pointer, %Pointer* %stackTop
	%r1690 = getelementptr inbounds i8, %Pointer %r1689, i32 40
	store %Pointer %r1690, %Pointer* %stackTop
	; FlushFrontier
	%r1691 = bitcast %struct.GC_state* @gcState to %Pointer
	%r1692 = getelementptr inbounds i8, %Pointer %r1691, i32 0
	%r1693 = bitcast %Pointer %r1692 to %Pointer*
	%r1694 = load %Pointer, %Pointer* %frontier
	store %Pointer %r1694, %Pointer* %r1693
	; FlushStackTop
	%r1695 = bitcast %struct.GC_state* @gcState to %Pointer
	%r1696 = getelementptr inbounds i8, %Pointer %r1695, i32 16
	%r1697 = bitcast %Pointer %r1696 to %Pointer*
	%r1698 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r1698, %Pointer* %r1697
	; Call
	call void @GC_collect(%Pointer %r1685, %Word64 0, %Word32 0)
	; CacheFrontier
	%r1699 = bitcast %struct.GC_state* @gcState to %Pointer
	%r1700 = getelementptr inbounds i8, %Pointer %r1699, i32 0
	%r1701 = bitcast %Pointer %r1700 to %Pointer*
	%r1702 = load %Pointer, %Pointer* %r1701
	store %Pointer %r1702, %Pointer* %frontier
	; CacheStackTop
	%r1703 = bitcast %struct.GC_state* @gcState to %Pointer
	%r1704 = getelementptr inbounds i8, %Pointer %r1703, i32 16
	%r1705 = bitcast %Pointer %r1704 to %Pointer*
	%r1706 = load %Pointer, %Pointer* %r1705
	store %Pointer %r1706, %Pointer* %stackTop
	br label %L_1189

L_1187:
	; Push(-24)
	%r1707 = load %Pointer, %Pointer* %stackTop
	%r1708 = getelementptr inbounds i8, %Pointer %r1707, i32 -24
	store %Pointer %r1708, %Pointer* %stackTop
	; RP(0): Objptr (opt_34, opt_33, opt_32, opt_31)  = glob {index = 0, isRoot = false, ty = Objptr (opt_34, opt_33, opt_32, opt_31)}
	%r1709 = getelementptr inbounds [1 x %Objptr], [1 x %Objptr]* @globalObjptrNonRoot, i32 0, i32 0
	%r1710 = load %Objptr, %Objptr* %r1709
	store %Objptr %r1710, %Objptr* %regP_0
	; OW64 (<GCState>, 32): ExnStack  = SW64(24): ExnStack
	%r1711 = load %Pointer, %Pointer* %stackTop
	%r1712 = getelementptr inbounds i8, %Pointer %r1711, i32 24
	%r1713 = bitcast %Pointer %r1712 to %Word64*
	%r1714 = load %Word64, %Word64* %r1713
	%r1715 = bitcast %struct.GC_state* @gcState to %Pointer
	%r1716 = getelementptr inbounds i8, %Pointer %r1715, i32 32
	%r1717 = bitcast %Pointer %r1716 to %Word64*
	store %Word64 %r1714, %Word64* %r1717
	; Raise
	%r1718 = bitcast %struct.GC_state* @gcState to %Pointer
	%r1719 = getelementptr inbounds i8, %Pointer %r1718, i32 1616
	%r1720 = bitcast %Pointer %r1719 to %Pointer*
	%r1721 = load %Pointer, %Pointer* %r1720
	%r1722 = bitcast %struct.GC_state* @gcState to %Pointer
	%r1723 = getelementptr inbounds i8, %Pointer %r1722, i32 32
	%r1724 = bitcast %Pointer %r1723 to i32*
	%r1725 = load i32, i32* %r1724
	%r1726 = getelementptr inbounds i8, %Pointer %r1721, i32 %r1725
	store %Pointer %r1726, %Pointer* %stackTop
	%r1727 = load %Pointer, %Pointer* %stackTop
	%r1728 = getelementptr inbounds i8, %Pointer %r1727, i32 -8
	%r1729 = bitcast %Pointer %r1728 to %uintptr_t*
	%r1730 = load %uintptr_t, %uintptr_t* %r1729
	store %uintptr_t %r1730, %uintptr_t* %l_nextFun
	br label %top

L_1186:
	; Push(-40)
	%r1731 = load %Pointer, %Pointer* %stackTop
	%r1732 = getelementptr inbounds i8, %Pointer %r1731, i32 -40
	store %Pointer %r1732, %Pointer* %stackTop
	; RP(0): Objptr (opt_3)  = SP(40): Objptr (opt_3)
	%r1733 = load %Pointer, %Pointer* %stackTop
	%r1734 = getelementptr inbounds i8, %Pointer %r1733, i32 40
	%r1735 = bitcast %Pointer %r1734 to %Objptr*
	%r1736 = load %Objptr, %Objptr* %r1735
	store %Objptr %r1736, %Objptr* %regP_0
	; OW64 (<GCState>, 32): ExnStack  = SW64(24): ExnStack
	%r1737 = load %Pointer, %Pointer* %stackTop
	%r1738 = getelementptr inbounds i8, %Pointer %r1737, i32 24
	%r1739 = bitcast %Pointer %r1738 to %Word64*
	%r1740 = load %Word64, %Word64* %r1739
	%r1741 = bitcast %struct.GC_state* @gcState to %Pointer
	%r1742 = getelementptr inbounds i8, %Pointer %r1741, i32 32
	%r1743 = bitcast %Pointer %r1742 to %Word64*
	store %Word64 %r1740, %Word64* %r1743
	; SP(0): Objptr (opt_3)  = RP(0): Objptr (opt_3)
	%r1744 = load %Objptr, %Objptr* %regP_0
	%r1745 = load %Pointer, %Pointer* %stackTop
	%r1746 = getelementptr inbounds i8, %Pointer %r1745, i32 0
	%r1747 = bitcast %Pointer %r1746 to %Objptr*
	store %Objptr %r1744, %Objptr* %r1747
	; Return
	%r1748 = load %Pointer, %Pointer* %stackTop
	%r1749 = getelementptr inbounds i8, %Pointer %r1748, i32 -8
	%r1750 = bitcast %Pointer %r1749 to %uintptr_t*
	%r1751 = load %uintptr_t, %uintptr_t* %r1750
	store %uintptr_t %r1751, %uintptr_t* %l_nextFun
	br label %top

L_1185:
	; RP(0): Objptr (opt_3)  = OP (Cast (SP(0): Objptr (opt_34, opt_33, opt_32, opt_31), Objptr (opt_32)), 0): Objptr (opt_3)
	%r1752 = load %Pointer, %Pointer* %stackTop
	%r1753 = getelementptr inbounds i8, %Pointer %r1752, i32 0
	%r1754 = bitcast %Pointer %r1753 to %Objptr*
	%r1755 = load %Objptr, %Objptr* %r1754
	%r1756 = bitcast %Objptr %r1755 to %Objptr
	%r1757 = getelementptr inbounds i8, %Objptr %r1756, i32 0
	%r1758 = bitcast %Objptr %r1757 to %Objptr*
	%r1759 = load %Objptr, %Objptr* %r1758
	store %Objptr %r1759, %Objptr* %regP_0
	; CW64 (<Frontier>)  = 0x57
	%r1760 = load %Pointer, %Pointer* %frontier
	%r1761 = bitcast %Pointer %r1760 to %Word64*
	store %Word64 87, %Word64* %r1761
	; RQ(96): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r1762 = load %Pointer, %Pointer* %frontier
	%r1764 = ptrtoint %Pointer %r1762 to %uintptr_t
	%r1765 = add %uintptr_t %r1764, 8
	%r1763 = inttoptr %uintptr_t %r1765 to %Pointer
	store %CPointer %r1763, %CPointer* %regQ_96
	; RP(1): Objptr (opt_43)  = Cast (RQ(96): CPointer, Objptr (opt_43))
	%r1766 = load %CPointer, %CPointer* %regQ_96
	%r1767 = bitcast %CPointer %r1766 to %Objptr
	store %Objptr %r1767, %Objptr* %regP_1
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r1768 = load %Pointer, %Pointer* %frontier
	%r1770 = ptrtoint %Pointer %r1768 to %uintptr_t
	%r1771 = add %uintptr_t %r1770, 24
	%r1769 = inttoptr %uintptr_t %r1771 to %Pointer
	store %Pointer %r1769, %Pointer* %frontier
	; OP (RP(1): Objptr (opt_43), 0): Objptr (opt_3)  = RP(0): Objptr (opt_3)
	%r1772 = load %Objptr, %Objptr* %regP_0
	%r1773 = load %Objptr, %Objptr* %regP_1
	%r1774 = getelementptr inbounds i8, %Objptr %r1773, i32 0
	%r1775 = bitcast %Objptr %r1774 to %Objptr*
	store %Objptr %r1772, %Objptr* %r1775
	; OP (RP(1): Objptr (opt_43), 8): Objptr (opt_43)  = Cast (0x1, Objptr (opt_43))
	%r1776 = inttoptr %Word64 1 to %Objptr
	%r1777 = load %Objptr, %Objptr* %regP_1
	%r1778 = getelementptr inbounds i8, %Objptr %r1777, i32 8
	%r1779 = bitcast %Objptr %r1778 to %Objptr*
	store %Objptr %r1776, %Objptr* %r1779
	; CW64 (<Frontier>)  = 0x57
	%r1780 = load %Pointer, %Pointer* %frontier
	%r1781 = bitcast %Pointer %r1780 to %Word64*
	store %Word64 87, %Word64* %r1781
	; RQ(95): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r1782 = load %Pointer, %Pointer* %frontier
	%r1784 = ptrtoint %Pointer %r1782 to %uintptr_t
	%r1785 = add %uintptr_t %r1784, 8
	%r1783 = inttoptr %uintptr_t %r1785 to %Pointer
	store %CPointer %r1783, %CPointer* %regQ_95
	; RP(2): Objptr (opt_43)  = Cast (RQ(95): CPointer, Objptr (opt_43))
	%r1786 = load %CPointer, %CPointer* %regQ_95
	%r1787 = bitcast %CPointer %r1786 to %Objptr
	store %Objptr %r1787, %Objptr* %regP_2
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r1788 = load %Pointer, %Pointer* %frontier
	%r1790 = ptrtoint %Pointer %r1788 to %uintptr_t
	%r1791 = add %uintptr_t %r1790, 24
	%r1789 = inttoptr %uintptr_t %r1791 to %Pointer
	store %Pointer %r1789, %Pointer* %frontier
	; OP (RP(2): Objptr (opt_43), 0): Objptr (opt_3)  = glob {index = 148, isRoot = true, ty = Objptr (opt_3)}
	%r1792 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 148
	%r1793 = load %Objptr, %Objptr* %r1792
	%r1794 = load %Objptr, %Objptr* %regP_2
	%r1795 = getelementptr inbounds i8, %Objptr %r1794, i32 0
	%r1796 = bitcast %Objptr %r1795 to %Objptr*
	store %Objptr %r1793, %Objptr* %r1796
	; OP (RP(2): Objptr (opt_43), 8): Objptr (opt_43)  = RP(1): Objptr (opt_43)
	%r1797 = load %Objptr, %Objptr* %regP_1
	%r1798 = load %Objptr, %Objptr* %regP_2
	%r1799 = getelementptr inbounds i8, %Objptr %r1798, i32 8
	%r1800 = bitcast %Objptr %r1799 to %Objptr*
	store %Objptr %r1797, %Objptr* %r1800
	; SQ(16): Label L_1187  = L_1187
	%r1801 = inttoptr %Word32 161 to %CPointer
	%r1802 = load %Pointer, %Pointer* %stackTop
	%r1803 = getelementptr inbounds i8, %Pointer %r1802, i32 16
	%r1804 = bitcast %Pointer %r1803 to %CPointer*
	store %CPointer %r1801, %CPointer* %r1804
	; RQ(94): CPointer  = CPointer_add (<StackTop>, 0x18)
	%r1805 = load %Pointer, %Pointer* %stackTop
	%r1807 = ptrtoint %Pointer %r1805 to %uintptr_t
	%r1808 = add %uintptr_t %r1807, 24
	%r1806 = inttoptr %uintptr_t %r1808 to %Pointer
	store %CPointer %r1806, %CPointer* %regQ_94
	; RW64(12): Word64  = CPointer_diff (RQ(94): CPointer, OQ (<GCState>, 1616): CPointer)
	%r1809 = load %CPointer, %CPointer* %regQ_94
	%r1810 = bitcast %struct.GC_state* @gcState to %Pointer
	%r1811 = getelementptr inbounds i8, %Pointer %r1810, i32 1616
	%r1812 = bitcast %Pointer %r1811 to %CPointer*
	%r1813 = load %CPointer, %CPointer* %r1812
	%r1815 = ptrtoint %Pointer %r1809 to %uintptr_t
	%r1816 = ptrtoint %Pointer %r1813 to %uintptr_t
	%r1814 = sub %uintptr_t %r1815, %r1816
	store %Word64 %r1814, %Word64* %regW64_12
	; OW64 (<GCState>, 32): ExnStack  = Cast (RW64(12): Word64, ExnStack)
	%r1817 = load %Word64, %Word64* %regW64_12
	%r1818 = bitcast %Word64 %r1817 to %Word64
	%r1819 = bitcast %struct.GC_state* @gcState to %Pointer
	%r1820 = getelementptr inbounds i8, %Pointer %r1819, i32 32
	%r1821 = bitcast %Pointer %r1820 to %Word64*
	store %Word64 %r1818, %Word64* %r1821
	; SP(40): Objptr (opt_43)  = RP(2): Objptr (opt_43)
	%r1822 = load %Objptr, %Objptr* %regP_2
	%r1823 = load %Pointer, %Pointer* %stackTop
	%r1824 = getelementptr inbounds i8, %Pointer %r1823, i32 40
	%r1825 = bitcast %Pointer %r1824 to %Objptr*
	store %Objptr %r1822, %Objptr* %r1825
	%r1826 = load %Pointer, %Pointer* %stackTop
	%r1827 = getelementptr inbounds i8, %Pointer %r1826, i32 32
	%r1828 = bitcast %Pointer %r1827 to %uintptr_t*
	store %uintptr_t 160, %uintptr_t* %r1828
	; Push(40)
	%r1829 = load %Pointer, %Pointer* %stackTop
	%r1830 = getelementptr inbounds i8, %Pointer %r1829, i32 40
	store %Pointer %r1830, %Pointer* %stackTop
	br label %concat_0

L_1184:
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r1831 = bitcast %struct.GC_state* @gcState to %Pointer
	%r1832 = getelementptr inbounds i8, %Pointer %r1831, i32 8
	%r1833 = bitcast %Pointer %r1832 to %CPointer*
	%r1834 = load %CPointer, %CPointer* %r1833
	%r1835 = load %Pointer, %Pointer* %frontier
	%r1837 = icmp ult %Pointer %r1834, %r1835
	%r1836 = zext i1 %r1837 to %Word32
	store %Word32 %r1836, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_1185), (0x1, L_1188))}
	%r1838 = load %Word32, %Word32* %regW32_0
	%r1839 = trunc %Word32 %r1838 to i1
	br i1 %r1839, label %L_1188, label %L_1185

L_1183:
	; RW64(0): Word64  = WordU64_rshift (OW64 (SP(0): Objptr (opt_34, opt_33, opt_32, opt_31), ~8): Word64, 0x1)
	%r1840 = load %Pointer, %Pointer* %stackTop
	%r1841 = getelementptr inbounds i8, %Pointer %r1840, i32 0
	%r1842 = bitcast %Pointer %r1841 to %Objptr*
	%r1843 = load %Objptr, %Objptr* %r1842
	%r1844 = getelementptr inbounds i8, %Objptr %r1843, i32 -8
	%r1845 = bitcast %Objptr %r1844 to %Word64*
	%r1846 = load %Word64, %Word64* %r1845
	%r1847 = zext %Word32 1 to %Word64
	%r1848 = lshr %Word64 %r1846, %r1847
	store %Word64 %r1848, %Word64* %regW64_0
	; switch {test = RW64(0): Word64, default = Some L_1180, cases = ((0x20, L_1184))}
	%r1849 = load %Word64, %Word64* %regW64_0
	switch %Word64 %r1849, label %L_1180 [
		%Word64 32, label %L_1184
	]

L_1182:
	; Goto L_1159
	br label %L_1159

L_1181:
	; RP(1): Objptr (opt_35)  = OP (RP(0): Objptr (opt_35), 8): Objptr (opt_35)
	%r1850 = load %Objptr, %Objptr* %regP_0
	%r1851 = getelementptr inbounds i8, %Objptr %r1850, i32 8
	%r1852 = bitcast %Objptr %r1851 to %Objptr*
	%r1853 = load %Objptr, %Objptr* %r1852
	store %Objptr %r1853, %Objptr* %regP_1
	; RP(2): Objptr (opt_7)  = OP (RP(0): Objptr (opt_35), 0): Objptr (opt_7)
	%r1854 = load %Objptr, %Objptr* %regP_0
	%r1855 = getelementptr inbounds i8, %Objptr %r1854, i32 0
	%r1856 = bitcast %Objptr %r1855 to %Objptr*
	%r1857 = load %Objptr, %Objptr* %r1856
	store %Objptr %r1857, %Objptr* %regP_2
	; RP(0): Objptr (opt_35)  = RP(1): Objptr (opt_35)
	%r1858 = load %Objptr, %Objptr* %regP_1
	store %Objptr %r1858, %Objptr* %regP_0
	; RP(1): Objptr (opt_7)  = RP(2): Objptr (opt_7)
	%r1859 = load %Objptr, %Objptr* %regP_2
	store %Objptr %r1859, %Objptr* %regP_1
	; Goto L_1153
	br label %L_1153

L_1180:
	; switch {test = Cast (RP(0): Objptr (opt_35), Bits64), default = Some L_1181, cases = ((0x1, L_1182))}
	%r1860 = load %Objptr, %Objptr* %regP_0
	%r1861 = ptrtoint %Objptr %r1860 to %Word64
	switch %Word64 %r1861, label %L_1181 [
		%Word64 1, label %L_1182
	]

L_1179:
	; RW64(0): Bits64  = Word64_andb (Cast (SP(0): Objptr (opt_34, opt_33, opt_32, opt_31), Bits64), 0x3)
	%r1862 = load %Pointer, %Pointer* %stackTop
	%r1863 = getelementptr inbounds i8, %Pointer %r1862, i32 0
	%r1864 = bitcast %Pointer %r1863 to %Objptr*
	%r1865 = load %Objptr, %Objptr* %r1864
	%r1866 = ptrtoint %Objptr %r1865 to %Word64
	%r1867 = and %Word64 %r1866, 3
	store %Word64 %r1867, %Word64* %regW64_0
	; switch {test = RW64(0): Bits64, default = Some L_1180, cases = ((0x0, L_1183))}
	%r1868 = load %Word64, %Word64* %regW64_0
	switch %Word64 %r1868, label %L_1180 [
		%Word64 0, label %L_1183
	]

L_1178:
	; Goto L_1179
	br label %L_1179

L_1177:
	; Push(-48)
	%r1869 = load %Pointer, %Pointer* %stackTop
	%r1870 = getelementptr inbounds i8, %Pointer %r1869, i32 -48
	store %Pointer %r1870, %Pointer* %stackTop
	; Goto L_1173
	br label %L_1173

L_1176:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 159}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_1177}
	; GetOperands
	%r1871 = bitcast %struct.GC_state* @gcState to %Pointer
	%r1872 = load %Pointer, %Pointer* %stackTop
	%r1873 = getelementptr inbounds i8, %Pointer %r1872, i32 40
	%r1874 = bitcast %Pointer %r1873 to %uintptr_t*
	store %uintptr_t 159, %uintptr_t* %r1874
	; Push(48)
	%r1875 = load %Pointer, %Pointer* %stackTop
	%r1876 = getelementptr inbounds i8, %Pointer %r1875, i32 48
	store %Pointer %r1876, %Pointer* %stackTop
	; FlushFrontier
	%r1877 = bitcast %struct.GC_state* @gcState to %Pointer
	%r1878 = getelementptr inbounds i8, %Pointer %r1877, i32 0
	%r1879 = bitcast %Pointer %r1878 to %Pointer*
	%r1880 = load %Pointer, %Pointer* %frontier
	store %Pointer %r1880, %Pointer* %r1879
	; FlushStackTop
	%r1881 = bitcast %struct.GC_state* @gcState to %Pointer
	%r1882 = getelementptr inbounds i8, %Pointer %r1881, i32 16
	%r1883 = bitcast %Pointer %r1882 to %Pointer*
	%r1884 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r1884, %Pointer* %r1883
	; Call
	call void @GC_collect(%Pointer %r1871, %Word64 0, %Word32 0)
	; CacheFrontier
	%r1885 = bitcast %struct.GC_state* @gcState to %Pointer
	%r1886 = getelementptr inbounds i8, %Pointer %r1885, i32 0
	%r1887 = bitcast %Pointer %r1886 to %Pointer*
	%r1888 = load %Pointer, %Pointer* %r1887
	store %Pointer %r1888, %Pointer* %frontier
	; CacheStackTop
	%r1889 = bitcast %struct.GC_state* @gcState to %Pointer
	%r1890 = getelementptr inbounds i8, %Pointer %r1889, i32 16
	%r1891 = bitcast %Pointer %r1890 to %Pointer*
	%r1892 = load %Pointer, %Pointer* %r1891
	store %Pointer %r1892, %Pointer* %stackTop
	br label %L_1177

L_1175:
	; Push(-24)
	%r1893 = load %Pointer, %Pointer* %stackTop
	%r1894 = getelementptr inbounds i8, %Pointer %r1893, i32 -24
	store %Pointer %r1894, %Pointer* %stackTop
	; RP(0): Objptr (opt_34, opt_33, opt_32, opt_31)  = glob {index = 0, isRoot = false, ty = Objptr (opt_34, opt_33, opt_32, opt_31)}
	%r1895 = getelementptr inbounds [1 x %Objptr], [1 x %Objptr]* @globalObjptrNonRoot, i32 0, i32 0
	%r1896 = load %Objptr, %Objptr* %r1895
	store %Objptr %r1896, %Objptr* %regP_0
	; OW64 (<GCState>, 32): ExnStack  = SW64(24): ExnStack
	%r1897 = load %Pointer, %Pointer* %stackTop
	%r1898 = getelementptr inbounds i8, %Pointer %r1897, i32 24
	%r1899 = bitcast %Pointer %r1898 to %Word64*
	%r1900 = load %Word64, %Word64* %r1899
	%r1901 = bitcast %struct.GC_state* @gcState to %Pointer
	%r1902 = getelementptr inbounds i8, %Pointer %r1901, i32 32
	%r1903 = bitcast %Pointer %r1902 to %Word64*
	store %Word64 %r1900, %Word64* %r1903
	; Raise
	%r1904 = bitcast %struct.GC_state* @gcState to %Pointer
	%r1905 = getelementptr inbounds i8, %Pointer %r1904, i32 1616
	%r1906 = bitcast %Pointer %r1905 to %Pointer*
	%r1907 = load %Pointer, %Pointer* %r1906
	%r1908 = bitcast %struct.GC_state* @gcState to %Pointer
	%r1909 = getelementptr inbounds i8, %Pointer %r1908, i32 32
	%r1910 = bitcast %Pointer %r1909 to i32*
	%r1911 = load i32, i32* %r1910
	%r1912 = getelementptr inbounds i8, %Pointer %r1907, i32 %r1911
	store %Pointer %r1912, %Pointer* %stackTop
	%r1913 = load %Pointer, %Pointer* %stackTop
	%r1914 = getelementptr inbounds i8, %Pointer %r1913, i32 -8
	%r1915 = bitcast %Pointer %r1914 to %uintptr_t*
	%r1916 = load %uintptr_t, %uintptr_t* %r1915
	store %uintptr_t %r1916, %uintptr_t* %l_nextFun
	br label %top

L_1174:
	; Push(-40)
	%r1917 = load %Pointer, %Pointer* %stackTop
	%r1918 = getelementptr inbounds i8, %Pointer %r1917, i32 -40
	store %Pointer %r1918, %Pointer* %stackTop
	; RP(0): Objptr (opt_3)  = SP(40): Objptr (opt_3)
	%r1919 = load %Pointer, %Pointer* %stackTop
	%r1920 = getelementptr inbounds i8, %Pointer %r1919, i32 40
	%r1921 = bitcast %Pointer %r1920 to %Objptr*
	%r1922 = load %Objptr, %Objptr* %r1921
	store %Objptr %r1922, %Objptr* %regP_0
	; OW64 (<GCState>, 32): ExnStack  = SW64(24): ExnStack
	%r1923 = load %Pointer, %Pointer* %stackTop
	%r1924 = getelementptr inbounds i8, %Pointer %r1923, i32 24
	%r1925 = bitcast %Pointer %r1924 to %Word64*
	%r1926 = load %Word64, %Word64* %r1925
	%r1927 = bitcast %struct.GC_state* @gcState to %Pointer
	%r1928 = getelementptr inbounds i8, %Pointer %r1927, i32 32
	%r1929 = bitcast %Pointer %r1928 to %Word64*
	store %Word64 %r1926, %Word64* %r1929
	; SP(0): Objptr (opt_3)  = RP(0): Objptr (opt_3)
	%r1930 = load %Objptr, %Objptr* %regP_0
	%r1931 = load %Pointer, %Pointer* %stackTop
	%r1932 = getelementptr inbounds i8, %Pointer %r1931, i32 0
	%r1933 = bitcast %Pointer %r1932 to %Objptr*
	store %Objptr %r1930, %Objptr* %r1933
	; Return
	%r1934 = load %Pointer, %Pointer* %stackTop
	%r1935 = getelementptr inbounds i8, %Pointer %r1934, i32 -8
	%r1936 = bitcast %Pointer %r1935 to %uintptr_t*
	%r1937 = load %uintptr_t, %uintptr_t* %r1936
	store %uintptr_t %r1937, %uintptr_t* %l_nextFun
	br label %top

L_1173:
	; CW64 (<Frontier>)  = 0x57
	%r1938 = load %Pointer, %Pointer* %frontier
	%r1939 = bitcast %Pointer %r1938 to %Word64*
	store %Word64 87, %Word64* %r1939
	; RQ(93): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r1940 = load %Pointer, %Pointer* %frontier
	%r1942 = ptrtoint %Pointer %r1940 to %uintptr_t
	%r1943 = add %uintptr_t %r1942, 8
	%r1941 = inttoptr %uintptr_t %r1943 to %Pointer
	store %CPointer %r1941, %CPointer* %regQ_93
	; RP(0): Objptr (opt_43)  = Cast (RQ(93): CPointer, Objptr (opt_43))
	%r1944 = load %CPointer, %CPointer* %regQ_93
	%r1945 = bitcast %CPointer %r1944 to %Objptr
	store %Objptr %r1945, %Objptr* %regP_0
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r1946 = load %Pointer, %Pointer* %frontier
	%r1948 = ptrtoint %Pointer %r1946 to %uintptr_t
	%r1949 = add %uintptr_t %r1948, 24
	%r1947 = inttoptr %uintptr_t %r1949 to %Pointer
	store %Pointer %r1947, %Pointer* %frontier
	; OP (RP(0): Objptr (opt_43), 0): Objptr (opt_3)  = SP(0): Objptr (opt_3)
	%r1950 = load %Pointer, %Pointer* %stackTop
	%r1951 = getelementptr inbounds i8, %Pointer %r1950, i32 0
	%r1952 = bitcast %Pointer %r1951 to %Objptr*
	%r1953 = load %Objptr, %Objptr* %r1952
	%r1954 = load %Objptr, %Objptr* %regP_0
	%r1955 = getelementptr inbounds i8, %Objptr %r1954, i32 0
	%r1956 = bitcast %Objptr %r1955 to %Objptr*
	store %Objptr %r1953, %Objptr* %r1956
	; OP (RP(0): Objptr (opt_43), 8): Objptr (opt_43)  = Cast (0x1, Objptr (opt_43))
	%r1957 = inttoptr %Word64 1 to %Objptr
	%r1958 = load %Objptr, %Objptr* %regP_0
	%r1959 = getelementptr inbounds i8, %Objptr %r1958, i32 8
	%r1960 = bitcast %Objptr %r1959 to %Objptr*
	store %Objptr %r1957, %Objptr* %r1960
	; CW64 (<Frontier>)  = 0x57
	%r1961 = load %Pointer, %Pointer* %frontier
	%r1962 = bitcast %Pointer %r1961 to %Word64*
	store %Word64 87, %Word64* %r1962
	; RQ(92): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r1963 = load %Pointer, %Pointer* %frontier
	%r1965 = ptrtoint %Pointer %r1963 to %uintptr_t
	%r1966 = add %uintptr_t %r1965, 8
	%r1964 = inttoptr %uintptr_t %r1966 to %Pointer
	store %CPointer %r1964, %CPointer* %regQ_92
	; RP(1): Objptr (opt_43)  = Cast (RQ(92): CPointer, Objptr (opt_43))
	%r1967 = load %CPointer, %CPointer* %regQ_92
	%r1968 = bitcast %CPointer %r1967 to %Objptr
	store %Objptr %r1968, %Objptr* %regP_1
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r1969 = load %Pointer, %Pointer* %frontier
	%r1971 = ptrtoint %Pointer %r1969 to %uintptr_t
	%r1972 = add %uintptr_t %r1971, 24
	%r1970 = inttoptr %uintptr_t %r1972 to %Pointer
	store %Pointer %r1970, %Pointer* %frontier
	; OP (RP(1): Objptr (opt_43), 0): Objptr (opt_3)  = glob {index = 145, isRoot = true, ty = Objptr (opt_3)}
	%r1973 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 145
	%r1974 = load %Objptr, %Objptr* %r1973
	%r1975 = load %Objptr, %Objptr* %regP_1
	%r1976 = getelementptr inbounds i8, %Objptr %r1975, i32 0
	%r1977 = bitcast %Objptr %r1976 to %Objptr*
	store %Objptr %r1974, %Objptr* %r1977
	; OP (RP(1): Objptr (opt_43), 8): Objptr (opt_43)  = RP(0): Objptr (opt_43)
	%r1978 = load %Objptr, %Objptr* %regP_0
	%r1979 = load %Objptr, %Objptr* %regP_1
	%r1980 = getelementptr inbounds i8, %Objptr %r1979, i32 8
	%r1981 = bitcast %Objptr %r1980 to %Objptr*
	store %Objptr %r1978, %Objptr* %r1981
	; CW64 (<Frontier>)  = 0x57
	%r1982 = load %Pointer, %Pointer* %frontier
	%r1983 = bitcast %Pointer %r1982 to %Word64*
	store %Word64 87, %Word64* %r1983
	; RQ(91): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r1984 = load %Pointer, %Pointer* %frontier
	%r1986 = ptrtoint %Pointer %r1984 to %uintptr_t
	%r1987 = add %uintptr_t %r1986, 8
	%r1985 = inttoptr %uintptr_t %r1987 to %Pointer
	store %CPointer %r1985, %CPointer* %regQ_91
	; RP(2): Objptr (opt_43)  = Cast (RQ(91): CPointer, Objptr (opt_43))
	%r1988 = load %CPointer, %CPointer* %regQ_91
	%r1989 = bitcast %CPointer %r1988 to %Objptr
	store %Objptr %r1989, %Objptr* %regP_2
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r1990 = load %Pointer, %Pointer* %frontier
	%r1992 = ptrtoint %Pointer %r1990 to %uintptr_t
	%r1993 = add %uintptr_t %r1992, 24
	%r1991 = inttoptr %uintptr_t %r1993 to %Pointer
	store %Pointer %r1991, %Pointer* %frontier
	; OP (RP(2): Objptr (opt_43), 0): Objptr (opt_3)  = SP(8): Objptr (opt_3)
	%r1994 = load %Pointer, %Pointer* %stackTop
	%r1995 = getelementptr inbounds i8, %Pointer %r1994, i32 8
	%r1996 = bitcast %Pointer %r1995 to %Objptr*
	%r1997 = load %Objptr, %Objptr* %r1996
	%r1998 = load %Objptr, %Objptr* %regP_2
	%r1999 = getelementptr inbounds i8, %Objptr %r1998, i32 0
	%r2000 = bitcast %Objptr %r1999 to %Objptr*
	store %Objptr %r1997, %Objptr* %r2000
	; OP (RP(2): Objptr (opt_43), 8): Objptr (opt_43)  = RP(1): Objptr (opt_43)
	%r2001 = load %Objptr, %Objptr* %regP_1
	%r2002 = load %Objptr, %Objptr* %regP_2
	%r2003 = getelementptr inbounds i8, %Objptr %r2002, i32 8
	%r2004 = bitcast %Objptr %r2003 to %Objptr*
	store %Objptr %r2001, %Objptr* %r2004
	; CW64 (<Frontier>)  = 0x57
	%r2005 = load %Pointer, %Pointer* %frontier
	%r2006 = bitcast %Pointer %r2005 to %Word64*
	store %Word64 87, %Word64* %r2006
	; RQ(90): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r2007 = load %Pointer, %Pointer* %frontier
	%r2009 = ptrtoint %Pointer %r2007 to %uintptr_t
	%r2010 = add %uintptr_t %r2009, 8
	%r2008 = inttoptr %uintptr_t %r2010 to %Pointer
	store %CPointer %r2008, %CPointer* %regQ_90
	; RP(3): Objptr (opt_43)  = Cast (RQ(90): CPointer, Objptr (opt_43))
	%r2011 = load %CPointer, %CPointer* %regQ_90
	%r2012 = bitcast %CPointer %r2011 to %Objptr
	store %Objptr %r2012, %Objptr* %regP_3
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r2013 = load %Pointer, %Pointer* %frontier
	%r2015 = ptrtoint %Pointer %r2013 to %uintptr_t
	%r2016 = add %uintptr_t %r2015, 24
	%r2014 = inttoptr %uintptr_t %r2016 to %Pointer
	store %Pointer %r2014, %Pointer* %frontier
	; OP (RP(3): Objptr (opt_43), 0): Objptr (opt_3)  = glob {index = 146, isRoot = true, ty = Objptr (opt_3)}
	%r2017 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 146
	%r2018 = load %Objptr, %Objptr* %r2017
	%r2019 = load %Objptr, %Objptr* %regP_3
	%r2020 = getelementptr inbounds i8, %Objptr %r2019, i32 0
	%r2021 = bitcast %Objptr %r2020 to %Objptr*
	store %Objptr %r2018, %Objptr* %r2021
	; OP (RP(3): Objptr (opt_43), 8): Objptr (opt_43)  = RP(2): Objptr (opt_43)
	%r2022 = load %Objptr, %Objptr* %regP_2
	%r2023 = load %Objptr, %Objptr* %regP_3
	%r2024 = getelementptr inbounds i8, %Objptr %r2023, i32 8
	%r2025 = bitcast %Objptr %r2024 to %Objptr*
	store %Objptr %r2022, %Objptr* %r2025
	; CW64 (<Frontier>)  = 0x57
	%r2026 = load %Pointer, %Pointer* %frontier
	%r2027 = bitcast %Pointer %r2026 to %Word64*
	store %Word64 87, %Word64* %r2027
	; RQ(89): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r2028 = load %Pointer, %Pointer* %frontier
	%r2030 = ptrtoint %Pointer %r2028 to %uintptr_t
	%r2031 = add %uintptr_t %r2030, 8
	%r2029 = inttoptr %uintptr_t %r2031 to %Pointer
	store %CPointer %r2029, %CPointer* %regQ_89
	; RP(4): Objptr (opt_43)  = Cast (RQ(89): CPointer, Objptr (opt_43))
	%r2032 = load %CPointer, %CPointer* %regQ_89
	%r2033 = bitcast %CPointer %r2032 to %Objptr
	store %Objptr %r2033, %Objptr* %regP_4
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r2034 = load %Pointer, %Pointer* %frontier
	%r2036 = ptrtoint %Pointer %r2034 to %uintptr_t
	%r2037 = add %uintptr_t %r2036, 24
	%r2035 = inttoptr %uintptr_t %r2037 to %Pointer
	store %Pointer %r2035, %Pointer* %frontier
	; OP (RP(4): Objptr (opt_43), 0): Objptr (opt_3)  = SP(32): Objptr (opt_3)
	%r2038 = load %Pointer, %Pointer* %stackTop
	%r2039 = getelementptr inbounds i8, %Pointer %r2038, i32 32
	%r2040 = bitcast %Pointer %r2039 to %Objptr*
	%r2041 = load %Objptr, %Objptr* %r2040
	%r2042 = load %Objptr, %Objptr* %regP_4
	%r2043 = getelementptr inbounds i8, %Objptr %r2042, i32 0
	%r2044 = bitcast %Objptr %r2043 to %Objptr*
	store %Objptr %r2041, %Objptr* %r2044
	; OP (RP(4): Objptr (opt_43), 8): Objptr (opt_43)  = RP(3): Objptr (opt_43)
	%r2045 = load %Objptr, %Objptr* %regP_3
	%r2046 = load %Objptr, %Objptr* %regP_4
	%r2047 = getelementptr inbounds i8, %Objptr %r2046, i32 8
	%r2048 = bitcast %Objptr %r2047 to %Objptr*
	store %Objptr %r2045, %Objptr* %r2048
	; CW64 (<Frontier>)  = 0x57
	%r2049 = load %Pointer, %Pointer* %frontier
	%r2050 = bitcast %Pointer %r2049 to %Word64*
	store %Word64 87, %Word64* %r2050
	; RQ(88): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r2051 = load %Pointer, %Pointer* %frontier
	%r2053 = ptrtoint %Pointer %r2051 to %uintptr_t
	%r2054 = add %uintptr_t %r2053, 8
	%r2052 = inttoptr %uintptr_t %r2054 to %Pointer
	store %CPointer %r2052, %CPointer* %regQ_88
	; RP(5): Objptr (opt_43)  = Cast (RQ(88): CPointer, Objptr (opt_43))
	%r2055 = load %CPointer, %CPointer* %regQ_88
	%r2056 = bitcast %CPointer %r2055 to %Objptr
	store %Objptr %r2056, %Objptr* %regP_5
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r2057 = load %Pointer, %Pointer* %frontier
	%r2059 = ptrtoint %Pointer %r2057 to %uintptr_t
	%r2060 = add %uintptr_t %r2059, 24
	%r2058 = inttoptr %uintptr_t %r2060 to %Pointer
	store %Pointer %r2058, %Pointer* %frontier
	; OP (RP(5): Objptr (opt_43), 0): Objptr (opt_3)  = glob {index = 147, isRoot = true, ty = Objptr (opt_3)}
	%r2061 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 147
	%r2062 = load %Objptr, %Objptr* %r2061
	%r2063 = load %Objptr, %Objptr* %regP_5
	%r2064 = getelementptr inbounds i8, %Objptr %r2063, i32 0
	%r2065 = bitcast %Objptr %r2064 to %Objptr*
	store %Objptr %r2062, %Objptr* %r2065
	; OP (RP(5): Objptr (opt_43), 8): Objptr (opt_43)  = RP(4): Objptr (opt_43)
	%r2066 = load %Objptr, %Objptr* %regP_4
	%r2067 = load %Objptr, %Objptr* %regP_5
	%r2068 = getelementptr inbounds i8, %Objptr %r2067, i32 8
	%r2069 = bitcast %Objptr %r2068 to %Objptr*
	store %Objptr %r2066, %Objptr* %r2069
	; SQ(16): Label L_1175  = L_1175
	%r2070 = inttoptr %Word32 158 to %CPointer
	%r2071 = load %Pointer, %Pointer* %stackTop
	%r2072 = getelementptr inbounds i8, %Pointer %r2071, i32 16
	%r2073 = bitcast %Pointer %r2072 to %CPointer*
	store %CPointer %r2070, %CPointer* %r2073
	; RQ(87): CPointer  = CPointer_add (<StackTop>, 0x18)
	%r2074 = load %Pointer, %Pointer* %stackTop
	%r2076 = ptrtoint %Pointer %r2074 to %uintptr_t
	%r2077 = add %uintptr_t %r2076, 24
	%r2075 = inttoptr %uintptr_t %r2077 to %Pointer
	store %CPointer %r2075, %CPointer* %regQ_87
	; RW64(11): Word64  = CPointer_diff (RQ(87): CPointer, OQ (<GCState>, 1616): CPointer)
	%r2078 = load %CPointer, %CPointer* %regQ_87
	%r2079 = bitcast %struct.GC_state* @gcState to %Pointer
	%r2080 = getelementptr inbounds i8, %Pointer %r2079, i32 1616
	%r2081 = bitcast %Pointer %r2080 to %CPointer*
	%r2082 = load %CPointer, %CPointer* %r2081
	%r2084 = ptrtoint %Pointer %r2078 to %uintptr_t
	%r2085 = ptrtoint %Pointer %r2082 to %uintptr_t
	%r2083 = sub %uintptr_t %r2084, %r2085
	store %Word64 %r2083, %Word64* %regW64_11
	; OW64 (<GCState>, 32): ExnStack  = Cast (RW64(11): Word64, ExnStack)
	%r2086 = load %Word64, %Word64* %regW64_11
	%r2087 = bitcast %Word64 %r2086 to %Word64
	%r2088 = bitcast %struct.GC_state* @gcState to %Pointer
	%r2089 = getelementptr inbounds i8, %Pointer %r2088, i32 32
	%r2090 = bitcast %Pointer %r2089 to %Word64*
	store %Word64 %r2087, %Word64* %r2090
	; SP(40): Objptr (opt_43)  = RP(5): Objptr (opt_43)
	%r2091 = load %Objptr, %Objptr* %regP_5
	%r2092 = load %Pointer, %Pointer* %stackTop
	%r2093 = getelementptr inbounds i8, %Pointer %r2092, i32 40
	%r2094 = bitcast %Pointer %r2093 to %Objptr*
	store %Objptr %r2091, %Objptr* %r2094
	%r2095 = load %Pointer, %Pointer* %stackTop
	%r2096 = getelementptr inbounds i8, %Pointer %r2095, i32 32
	%r2097 = bitcast %Pointer %r2096 to %uintptr_t*
	store %uintptr_t 157, %uintptr_t* %r2097
	; Push(40)
	%r2098 = load %Pointer, %Pointer* %stackTop
	%r2099 = getelementptr inbounds i8, %Pointer %r2098, i32 40
	store %Pointer %r2099, %Pointer* %stackTop
	br label %concat_0

L_1172:
	; Push(-48)
	%r2100 = load %Pointer, %Pointer* %stackTop
	%r2101 = getelementptr inbounds i8, %Pointer %r2100, i32 -48
	store %Pointer %r2101, %Pointer* %stackTop
	; SP(0): Objptr (opt_3)  = SP(48): Objptr (opt_3)
	%r2102 = load %Pointer, %Pointer* %stackTop
	%r2103 = getelementptr inbounds i8, %Pointer %r2102, i32 48
	%r2104 = bitcast %Pointer %r2103 to %Objptr*
	%r2105 = load %Objptr, %Objptr* %r2104
	%r2106 = load %Pointer, %Pointer* %stackTop
	%r2107 = getelementptr inbounds i8, %Pointer %r2106, i32 0
	%r2108 = bitcast %Pointer %r2107 to %Objptr*
	store %Objptr %r2105, %Objptr* %r2108
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r2109 = bitcast %struct.GC_state* @gcState to %Pointer
	%r2110 = getelementptr inbounds i8, %Pointer %r2109, i32 8
	%r2111 = bitcast %Pointer %r2110 to %CPointer*
	%r2112 = load %CPointer, %CPointer* %r2111
	%r2113 = load %Pointer, %Pointer* %frontier
	%r2115 = icmp ult %Pointer %r2112, %r2113
	%r2114 = zext i1 %r2115 to %Word32
	store %Word32 %r2114, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_1173), (0x1, L_1176))}
	%r2116 = load %Word32, %Word32* %regW32_0
	%r2117 = trunc %Word32 %r2116 to i1
	br i1 %r2117, label %L_1176, label %L_1173

L_1171:
	; SP(8): Objptr (opt_3)  = OP (Cast (SP(0): Objptr (opt_34, opt_33, opt_32, opt_31), Objptr (opt_34)), 16): Objptr (opt_3)
	%r2118 = load %Pointer, %Pointer* %stackTop
	%r2119 = getelementptr inbounds i8, %Pointer %r2118, i32 0
	%r2120 = bitcast %Pointer %r2119 to %Objptr*
	%r2121 = load %Objptr, %Objptr* %r2120
	%r2122 = bitcast %Objptr %r2121 to %Objptr
	%r2123 = getelementptr inbounds i8, %Objptr %r2122, i32 16
	%r2124 = bitcast %Objptr %r2123 to %Objptr*
	%r2125 = load %Objptr, %Objptr* %r2124
	%r2126 = load %Pointer, %Pointer* %stackTop
	%r2127 = getelementptr inbounds i8, %Pointer %r2126, i32 8
	%r2128 = bitcast %Pointer %r2127 to %Objptr*
	store %Objptr %r2125, %Objptr* %r2128
	; SP(32): Objptr (opt_3)  = OP (Cast (SP(0): Objptr (opt_34, opt_33, opt_32, opt_31), Objptr (opt_34)), 8): Objptr (opt_3)
	%r2129 = load %Pointer, %Pointer* %stackTop
	%r2130 = getelementptr inbounds i8, %Pointer %r2129, i32 0
	%r2131 = bitcast %Pointer %r2130 to %Objptr*
	%r2132 = load %Objptr, %Objptr* %r2131
	%r2133 = bitcast %Objptr %r2132 to %Objptr
	%r2134 = getelementptr inbounds i8, %Objptr %r2133, i32 8
	%r2135 = bitcast %Objptr %r2134 to %Objptr*
	%r2136 = load %Objptr, %Objptr* %r2135
	%r2137 = load %Pointer, %Pointer* %stackTop
	%r2138 = getelementptr inbounds i8, %Pointer %r2137, i32 32
	%r2139 = bitcast %Pointer %r2138 to %Objptr*
	store %Objptr %r2136, %Objptr* %r2139
	; RP(0): Objptr (opt_34, opt_33, opt_32, opt_31)  = OP (Cast (SP(0): Objptr (opt_34, opt_33, opt_32, opt_31), Objptr (opt_34)), 0): Objptr (opt_34, opt_33, opt_32, opt_31)
	%r2140 = load %Pointer, %Pointer* %stackTop
	%r2141 = getelementptr inbounds i8, %Pointer %r2140, i32 0
	%r2142 = bitcast %Pointer %r2141 to %Objptr*
	%r2143 = load %Objptr, %Objptr* %r2142
	%r2144 = bitcast %Objptr %r2143 to %Objptr
	%r2145 = getelementptr inbounds i8, %Objptr %r2144, i32 0
	%r2146 = bitcast %Objptr %r2145 to %Objptr*
	%r2147 = load %Objptr, %Objptr* %r2146
	store %Objptr %r2147, %Objptr* %regP_0
	; SP(48): Objptr (opt_34, opt_33, opt_32, opt_31)  = RP(0): Objptr (opt_34, opt_33, opt_32, opt_31)
	%r2148 = load %Objptr, %Objptr* %regP_0
	%r2149 = load %Pointer, %Pointer* %stackTop
	%r2150 = getelementptr inbounds i8, %Pointer %r2149, i32 48
	%r2151 = bitcast %Pointer %r2150 to %Objptr*
	store %Objptr %r2148, %Objptr* %r2151
	; SP(56): Objptr (opt_7)  = RP(1): Objptr (opt_7)
	%r2152 = load %Objptr, %Objptr* %regP_1
	%r2153 = load %Pointer, %Pointer* %stackTop
	%r2154 = getelementptr inbounds i8, %Pointer %r2153, i32 56
	%r2155 = bitcast %Pointer %r2154 to %Objptr*
	store %Objptr %r2152, %Objptr* %r2155
	%r2156 = load %Pointer, %Pointer* %stackTop
	%r2157 = getelementptr inbounds i8, %Pointer %r2156, i32 40
	%r2158 = bitcast %Pointer %r2157 to %uintptr_t*
	store %uintptr_t 156, %uintptr_t* %r2158
	; Push(48)
	%r2159 = load %Pointer, %Pointer* %stackTop
	%r2160 = getelementptr inbounds i8, %Pointer %r2159, i32 48
	store %Pointer %r2160, %Pointer* %stackTop
	br label %exnMessage_0

L_1170:
	; RW64(0): Word64  = WordU64_rshift (OW64 (SP(0): Objptr (opt_34, opt_33, opt_32, opt_31), ~8): Word64, 0x1)
	%r2161 = load %Pointer, %Pointer* %stackTop
	%r2162 = getelementptr inbounds i8, %Pointer %r2161, i32 0
	%r2163 = bitcast %Pointer %r2162 to %Objptr*
	%r2164 = load %Objptr, %Objptr* %r2163
	%r2165 = getelementptr inbounds i8, %Objptr %r2164, i32 -8
	%r2166 = bitcast %Objptr %r2165 to %Word64*
	%r2167 = load %Word64, %Word64* %r2166
	%r2168 = zext %Word32 1 to %Word64
	%r2169 = lshr %Word64 %r2167, %r2168
	store %Word64 %r2169, %Word64* %regW64_0
	; switch {test = RW64(0): Word64, default = Some L_1156, cases = ((0x22, L_1171))}
	%r2170 = load %Word64, %Word64* %regW64_0
	switch %Word64 %r2170, label %L_1156 [
		%Word64 34, label %L_1171
	]

L_1169:
	; SP(0): Objptr (opt_3)  = glob {index = 124, isRoot = true, ty = Objptr (opt_3)}
	%r2171 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 124
	%r2172 = load %Objptr, %Objptr* %r2171
	%r2173 = load %Pointer, %Pointer* %stackTop
	%r2174 = getelementptr inbounds i8, %Pointer %r2173, i32 0
	%r2175 = bitcast %Pointer %r2174 to %Objptr*
	store %Objptr %r2172, %Objptr* %r2175
	; Return
	%r2176 = load %Pointer, %Pointer* %stackTop
	%r2177 = getelementptr inbounds i8, %Pointer %r2176, i32 -8
	%r2178 = bitcast %Pointer %r2177 to %uintptr_t*
	%r2179 = load %uintptr_t, %uintptr_t* %r2178
	store %uintptr_t %r2179, %uintptr_t* %l_nextFun
	br label %top

L_1168:
	; SP(0): Objptr (opt_3)  = glob {index = 123, isRoot = true, ty = Objptr (opt_3)}
	%r2180 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 123
	%r2181 = load %Objptr, %Objptr* %r2180
	%r2182 = load %Pointer, %Pointer* %stackTop
	%r2183 = getelementptr inbounds i8, %Pointer %r2182, i32 0
	%r2184 = bitcast %Pointer %r2183 to %Objptr*
	store %Objptr %r2181, %Objptr* %r2184
	; Return
	%r2185 = load %Pointer, %Pointer* %stackTop
	%r2186 = getelementptr inbounds i8, %Pointer %r2185, i32 -8
	%r2187 = bitcast %Pointer %r2186 to %uintptr_t*
	%r2188 = load %uintptr_t, %uintptr_t* %r2187
	store %uintptr_t %r2188, %uintptr_t* %l_nextFun
	br label %top

L_1167:
	; SP(0): Objptr (opt_3)  = glob {index = 122, isRoot = true, ty = Objptr (opt_3)}
	%r2189 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 122
	%r2190 = load %Objptr, %Objptr* %r2189
	%r2191 = load %Pointer, %Pointer* %stackTop
	%r2192 = getelementptr inbounds i8, %Pointer %r2191, i32 0
	%r2193 = bitcast %Pointer %r2192 to %Objptr*
	store %Objptr %r2190, %Objptr* %r2193
	; Return
	%r2194 = load %Pointer, %Pointer* %stackTop
	%r2195 = getelementptr inbounds i8, %Pointer %r2194, i32 -8
	%r2196 = bitcast %Pointer %r2195 to %uintptr_t*
	%r2197 = load %uintptr_t, %uintptr_t* %r2196
	store %uintptr_t %r2197, %uintptr_t* %l_nextFun
	br label %top

L_1166:
	; SP(0): Objptr (opt_3)  = glob {index = 121, isRoot = true, ty = Objptr (opt_3)}
	%r2198 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 121
	%r2199 = load %Objptr, %Objptr* %r2198
	%r2200 = load %Pointer, %Pointer* %stackTop
	%r2201 = getelementptr inbounds i8, %Pointer %r2200, i32 0
	%r2202 = bitcast %Pointer %r2201 to %Objptr*
	store %Objptr %r2199, %Objptr* %r2202
	; Return
	%r2203 = load %Pointer, %Pointer* %stackTop
	%r2204 = getelementptr inbounds i8, %Pointer %r2203, i32 -8
	%r2205 = bitcast %Pointer %r2204 to %uintptr_t*
	%r2206 = load %uintptr_t, %uintptr_t* %r2205
	store %uintptr_t %r2206, %uintptr_t* %l_nextFun
	br label %top

L_1165:
	; SP(0): Objptr (opt_3)  = glob {index = 120, isRoot = true, ty = Objptr (opt_3)}
	%r2207 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 120
	%r2208 = load %Objptr, %Objptr* %r2207
	%r2209 = load %Pointer, %Pointer* %stackTop
	%r2210 = getelementptr inbounds i8, %Pointer %r2209, i32 0
	%r2211 = bitcast %Pointer %r2210 to %Objptr*
	store %Objptr %r2208, %Objptr* %r2211
	; Return
	%r2212 = load %Pointer, %Pointer* %stackTop
	%r2213 = getelementptr inbounds i8, %Pointer %r2212, i32 -8
	%r2214 = bitcast %Pointer %r2213 to %uintptr_t*
	%r2215 = load %uintptr_t, %uintptr_t* %r2214
	store %uintptr_t %r2215, %uintptr_t* %l_nextFun
	br label %top

L_1164:
	; SP(0): Objptr (opt_3)  = glob {index = 119, isRoot = true, ty = Objptr (opt_3)}
	%r2216 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 119
	%r2217 = load %Objptr, %Objptr* %r2216
	%r2218 = load %Pointer, %Pointer* %stackTop
	%r2219 = getelementptr inbounds i8, %Pointer %r2218, i32 0
	%r2220 = bitcast %Pointer %r2219 to %Objptr*
	store %Objptr %r2217, %Objptr* %r2220
	; Return
	%r2221 = load %Pointer, %Pointer* %stackTop
	%r2222 = getelementptr inbounds i8, %Pointer %r2221, i32 -8
	%r2223 = bitcast %Pointer %r2222 to %uintptr_t*
	%r2224 = load %uintptr_t, %uintptr_t* %r2223
	store %uintptr_t %r2224, %uintptr_t* %l_nextFun
	br label %top

L_1163:
	; SP(0): Objptr (opt_3)  = glob {index = 118, isRoot = true, ty = Objptr (opt_3)}
	%r2225 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 118
	%r2226 = load %Objptr, %Objptr* %r2225
	%r2227 = load %Pointer, %Pointer* %stackTop
	%r2228 = getelementptr inbounds i8, %Pointer %r2227, i32 0
	%r2229 = bitcast %Pointer %r2228 to %Objptr*
	store %Objptr %r2226, %Objptr* %r2229
	; Return
	%r2230 = load %Pointer, %Pointer* %stackTop
	%r2231 = getelementptr inbounds i8, %Pointer %r2230, i32 -8
	%r2232 = bitcast %Pointer %r2231 to %uintptr_t*
	%r2233 = load %uintptr_t, %uintptr_t* %r2232
	store %uintptr_t %r2233, %uintptr_t* %l_nextFun
	br label %top

L_1162:
	; SP(0): Objptr (opt_3)  = glob {index = 117, isRoot = true, ty = Objptr (opt_3)}
	%r2234 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 117
	%r2235 = load %Objptr, %Objptr* %r2234
	%r2236 = load %Pointer, %Pointer* %stackTop
	%r2237 = getelementptr inbounds i8, %Pointer %r2236, i32 0
	%r2238 = bitcast %Pointer %r2237 to %Objptr*
	store %Objptr %r2235, %Objptr* %r2238
	; Return
	%r2239 = load %Pointer, %Pointer* %stackTop
	%r2240 = getelementptr inbounds i8, %Pointer %r2239, i32 -8
	%r2241 = bitcast %Pointer %r2240 to %uintptr_t*
	%r2242 = load %uintptr_t, %uintptr_t* %r2241
	store %uintptr_t %r2242, %uintptr_t* %l_nextFun
	br label %top

L_1161:
	; SP(0): Objptr (opt_3)  = glob {index = 144, isRoot = true, ty = Objptr (opt_3)}
	%r2243 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 144
	%r2244 = load %Objptr, %Objptr* %r2243
	%r2245 = load %Pointer, %Pointer* %stackTop
	%r2246 = getelementptr inbounds i8, %Pointer %r2245, i32 0
	%r2247 = bitcast %Pointer %r2246 to %Objptr*
	store %Objptr %r2244, %Objptr* %r2247
	; Return
	%r2248 = load %Pointer, %Pointer* %stackTop
	%r2249 = getelementptr inbounds i8, %Pointer %r2248, i32 -8
	%r2250 = bitcast %Pointer %r2249 to %uintptr_t*
	%r2251 = load %uintptr_t, %uintptr_t* %r2250
	store %uintptr_t %r2251, %uintptr_t* %l_nextFun
	br label %top

L_1160:
	; RW64(0): Word64  = WordU64_rshift (OW64 (SP(0): Objptr (opt_34, opt_33, opt_32, opt_31), ~8): Word64, 0x1)
	%r2252 = load %Pointer, %Pointer* %stackTop
	%r2253 = getelementptr inbounds i8, %Pointer %r2252, i32 0
	%r2254 = bitcast %Pointer %r2253 to %Objptr*
	%r2255 = load %Objptr, %Objptr* %r2254
	%r2256 = getelementptr inbounds i8, %Objptr %r2255, i32 -8
	%r2257 = bitcast %Objptr %r2256 to %Word64*
	%r2258 = load %Word64, %Word64* %r2257
	%r2259 = zext %Word32 1 to %Word64
	%r2260 = lshr %Word64 %r2258, %r2259
	store %Word64 %r2260, %Word64* %regW64_0
	; switch {test = RW64(0): Word64, default = None, cases = ((0x1F, L_1161), (0x20, L_1162), (0x21, L_1163), (0x22, L_1164))}
	%r2261 = load %Word64, %Word64* %regW64_0
	switch %Word64 %r2261, label %L_1161 [
		%Word64 32, label %L_1162
		%Word64 33, label %L_1163
		%Word64 34, label %L_1164
	]

L_1159:
	; switch {test = Cast (SP(0): Objptr (opt_34, opt_33, opt_32, opt_31), Bits64), default = Some L_1160, cases = ((0x1, L_1165), (0x2, L_1166), (0x3, L_1167), (0x5, L_1168), (0x6, L_1169))}
	%r2262 = load %Pointer, %Pointer* %stackTop
	%r2263 = getelementptr inbounds i8, %Pointer %r2262, i32 0
	%r2264 = bitcast %Pointer %r2263 to %Objptr*
	%r2265 = load %Objptr, %Objptr* %r2264
	%r2266 = ptrtoint %Objptr %r2265 to %Word64
	switch %Word64 %r2266, label %L_1160 [
		%Word64 1, label %L_1165
		%Word64 2, label %L_1166
		%Word64 3, label %L_1167
		%Word64 5, label %L_1168
		%Word64 6, label %L_1169
	]

L_1158:
	; Goto L_1159
	br label %L_1159

L_1157:
	; RP(1): Objptr (opt_35)  = OP (RP(0): Objptr (opt_35), 8): Objptr (opt_35)
	%r2267 = load %Objptr, %Objptr* %regP_0
	%r2268 = getelementptr inbounds i8, %Objptr %r2267, i32 8
	%r2269 = bitcast %Objptr %r2268 to %Objptr*
	%r2270 = load %Objptr, %Objptr* %r2269
	store %Objptr %r2270, %Objptr* %regP_1
	; RP(2): Objptr (opt_7)  = OP (RP(0): Objptr (opt_35), 0): Objptr (opt_7)
	%r2271 = load %Objptr, %Objptr* %regP_0
	%r2272 = getelementptr inbounds i8, %Objptr %r2271, i32 0
	%r2273 = bitcast %Objptr %r2272 to %Objptr*
	%r2274 = load %Objptr, %Objptr* %r2273
	store %Objptr %r2274, %Objptr* %regP_2
	; RP(0): Objptr (opt_35)  = RP(1): Objptr (opt_35)
	%r2275 = load %Objptr, %Objptr* %regP_1
	store %Objptr %r2275, %Objptr* %regP_0
	; RP(1): Objptr (opt_7)  = RP(2): Objptr (opt_7)
	%r2276 = load %Objptr, %Objptr* %regP_2
	store %Objptr %r2276, %Objptr* %regP_1
	; Goto L_1153
	br label %L_1153

L_1156:
	; switch {test = Cast (RP(0): Objptr (opt_35), Bits64), default = Some L_1157, cases = ((0x1, L_1158))}
	%r2277 = load %Objptr, %Objptr* %regP_0
	%r2278 = ptrtoint %Objptr %r2277 to %Word64
	switch %Word64 %r2278, label %L_1157 [
		%Word64 1, label %L_1158
	]

L_1155:
	; RW64(0): Bits64  = Word64_andb (Cast (SP(0): Objptr (opt_34, opt_33, opt_32, opt_31), Bits64), 0x3)
	%r2279 = load %Pointer, %Pointer* %stackTop
	%r2280 = getelementptr inbounds i8, %Pointer %r2279, i32 0
	%r2281 = bitcast %Pointer %r2280 to %Objptr*
	%r2282 = load %Objptr, %Objptr* %r2281
	%r2283 = ptrtoint %Objptr %r2282 to %Word64
	%r2284 = and %Word64 %r2283, 3
	store %Word64 %r2284, %Word64* %regW64_0
	; switch {test = RW64(0): Bits64, default = Some L_1156, cases = ((0x0, L_1170))}
	%r2285 = load %Word64, %Word64* %regW64_0
	switch %Word64 %r2285, label %L_1156 [
		%Word64 0, label %L_1170
	]

L_1154:
	; Goto L_1155
	br label %L_1155

L_1153:
	; switch {test = Cast (RP(1): Objptr (opt_7), Bits64), default = Some L_1154, cases = ((0x1, L_1178), (0x2, L_1190))}
	%r2286 = load %Objptr, %Objptr* %regP_1
	%r2287 = ptrtoint %Objptr %r2286 to %Word64
	switch %Word64 %r2287, label %L_1154 [
		%Word64 1, label %L_1178
		%Word64 2, label %L_1190
	]

L_1152:
	; RP(1): Objptr (opt_35)  = OP (RP(0): Objptr (opt_35), 8): Objptr (opt_35)
	%r2288 = load %Objptr, %Objptr* %regP_0
	%r2289 = getelementptr inbounds i8, %Objptr %r2288, i32 8
	%r2290 = bitcast %Objptr %r2289 to %Objptr*
	%r2291 = load %Objptr, %Objptr* %r2290
	store %Objptr %r2291, %Objptr* %regP_1
	; RP(2): Objptr (opt_7)  = OP (RP(0): Objptr (opt_35), 0): Objptr (opt_7)
	%r2292 = load %Objptr, %Objptr* %regP_0
	%r2293 = getelementptr inbounds i8, %Objptr %r2292, i32 0
	%r2294 = bitcast %Objptr %r2293 to %Objptr*
	%r2295 = load %Objptr, %Objptr* %r2294
	store %Objptr %r2295, %Objptr* %regP_2
	; RP(0): Objptr (opt_35)  = RP(1): Objptr (opt_35)
	%r2296 = load %Objptr, %Objptr* %regP_1
	store %Objptr %r2296, %Objptr* %regP_0
	; RP(1): Objptr (opt_7)  = RP(2): Objptr (opt_7)
	%r2297 = load %Objptr, %Objptr* %regP_2
	store %Objptr %r2297, %Objptr* %regP_1
	; Goto L_1153
	br label %L_1153

L_1151:
	; RP(0): Objptr (opt_35)  = OP (SP(8): Objptr (opt_7), 0): Objptr (opt_35)
	%r2298 = load %Pointer, %Pointer* %stackTop
	%r2299 = getelementptr inbounds i8, %Pointer %r2298, i32 8
	%r2300 = bitcast %Pointer %r2299 to %Objptr*
	%r2301 = load %Objptr, %Objptr* %r2300
	%r2302 = getelementptr inbounds i8, %Objptr %r2301, i32 0
	%r2303 = bitcast %Objptr %r2302 to %Objptr*
	%r2304 = load %Objptr, %Objptr* %r2303
	store %Objptr %r2304, %Objptr* %regP_0
	; switch {test = Cast (RP(0): Objptr (opt_35), Bits64), default = Some L_1152, cases = ((0x1, L_1221))}
	%r2305 = load %Objptr, %Objptr* %regP_0
	%r2306 = ptrtoint %Objptr %r2305 to %Word64
	switch %Word64 %r2306, label %L_1152 [
		%Word64 1, label %L_1221
	]

L_1150:
	; SW64(24): ExnStack  = OW64 (<GCState>, 32): ExnStack
	%r2307 = bitcast %struct.GC_state* @gcState to %Pointer
	%r2308 = getelementptr inbounds i8, %Pointer %r2307, i32 32
	%r2309 = bitcast %Pointer %r2308 to %Word64*
	%r2310 = load %Word64, %Word64* %r2309
	%r2311 = load %Pointer, %Pointer* %stackTop
	%r2312 = getelementptr inbounds i8, %Pointer %r2311, i32 24
	%r2313 = bitcast %Pointer %r2312 to %Word64*
	store %Word64 %r2310, %Word64* %r2313
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 24): CPointer, <StackTop>)
	%r2314 = bitcast %struct.GC_state* @gcState to %Pointer
	%r2315 = getelementptr inbounds i8, %Pointer %r2314, i32 24
	%r2316 = bitcast %Pointer %r2315 to %CPointer*
	%r2317 = load %CPointer, %CPointer* %r2316
	%r2318 = load %Pointer, %Pointer* %stackTop
	%r2320 = icmp ult %Pointer %r2317, %r2318
	%r2319 = zext i1 %r2320 to %Word32
	store %Word32 %r2319, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_1151), (0x1, L_1222))}
	%r2321 = load %Word32, %Word32* %regW32_0
	%r2322 = trunc %Word32 %r2321 to i1
	br i1 %r2322, label %L_1222, label %L_1151

exnMessage_0:
	; Goto L_1150
	br label %L_1150

L_1149:
	; Push(-16)
	%r2323 = load %Pointer, %Pointer* %stackTop
	%r2324 = getelementptr inbounds i8, %Pointer %r2323, i32 -16
	store %Pointer %r2324, %Pointer* %stackTop
	; Goto L_1124
	br label %L_1124

L_1148:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 155}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_1149}
	; GetOperands
	%r2325 = bitcast %struct.GC_state* @gcState to %Pointer
	%r2326 = load %Pointer, %Pointer* %stackTop
	%r2327 = getelementptr inbounds i8, %Pointer %r2326, i32 8
	%r2328 = bitcast %Pointer %r2327 to %uintptr_t*
	store %uintptr_t 155, %uintptr_t* %r2328
	; Push(16)
	%r2329 = load %Pointer, %Pointer* %stackTop
	%r2330 = getelementptr inbounds i8, %Pointer %r2329, i32 16
	store %Pointer %r2330, %Pointer* %stackTop
	; FlushFrontier
	%r2331 = bitcast %struct.GC_state* @gcState to %Pointer
	%r2332 = getelementptr inbounds i8, %Pointer %r2331, i32 0
	%r2333 = bitcast %Pointer %r2332 to %Pointer*
	%r2334 = load %Pointer, %Pointer* %frontier
	store %Pointer %r2334, %Pointer* %r2333
	; FlushStackTop
	%r2335 = bitcast %struct.GC_state* @gcState to %Pointer
	%r2336 = getelementptr inbounds i8, %Pointer %r2335, i32 16
	%r2337 = bitcast %Pointer %r2336 to %Pointer*
	%r2338 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r2338, %Pointer* %r2337
	; Call
	call void @GC_collect(%Pointer %r2325, %Word64 0, %Word32 0)
	; CacheFrontier
	%r2339 = bitcast %struct.GC_state* @gcState to %Pointer
	%r2340 = getelementptr inbounds i8, %Pointer %r2339, i32 0
	%r2341 = bitcast %Pointer %r2340 to %Pointer*
	%r2342 = load %Pointer, %Pointer* %r2341
	store %Pointer %r2342, %Pointer* %frontier
	; CacheStackTop
	%r2343 = bitcast %struct.GC_state* @gcState to %Pointer
	%r2344 = getelementptr inbounds i8, %Pointer %r2343, i32 16
	%r2345 = bitcast %Pointer %r2344 to %Pointer*
	%r2346 = load %Pointer, %Pointer* %r2345
	store %Pointer %r2346, %Pointer* %stackTop
	br label %L_1149

L_1147:
	; SP(0): Objptr (opt_3)  = glob {index = 135, isRoot = true, ty = Objptr (opt_3)}
	%r2347 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 135
	%r2348 = load %Objptr, %Objptr* %r2347
	%r2349 = load %Pointer, %Pointer* %stackTop
	%r2350 = getelementptr inbounds i8, %Pointer %r2349, i32 0
	%r2351 = bitcast %Pointer %r2350 to %Objptr*
	store %Objptr %r2348, %Objptr* %r2351
	; Return
	%r2352 = load %Pointer, %Pointer* %stackTop
	%r2353 = getelementptr inbounds i8, %Pointer %r2352, i32 -8
	%r2354 = bitcast %Pointer %r2353 to %uintptr_t*
	%r2355 = load %uintptr_t, %uintptr_t* %r2354
	store %uintptr_t %r2355, %uintptr_t* %l_nextFun
	br label %top

L_1146:
	; SP(0): Objptr (opt_3)  = SP(16): Objptr (opt_3)
	%r2356 = load %Pointer, %Pointer* %stackTop
	%r2357 = getelementptr inbounds i8, %Pointer %r2356, i32 16
	%r2358 = bitcast %Pointer %r2357 to %Objptr*
	%r2359 = load %Objptr, %Objptr* %r2358
	%r2360 = load %Pointer, %Pointer* %stackTop
	%r2361 = getelementptr inbounds i8, %Pointer %r2360, i32 0
	%r2362 = bitcast %Pointer %r2361 to %Objptr*
	store %Objptr %r2359, %Objptr* %r2362
	; Return
	%r2363 = load %Pointer, %Pointer* %stackTop
	%r2364 = getelementptr inbounds i8, %Pointer %r2363, i32 -8
	%r2365 = bitcast %Pointer %r2364 to %uintptr_t*
	%r2366 = load %uintptr_t, %uintptr_t* %r2365
	store %uintptr_t %r2366, %uintptr_t* %l_nextFun
	br label %top

L_1145:
	; Goto L_1128
	br label %L_1128

L_1144:
	; SP(0): Objptr (opt_43)  = SP(8): Objptr (opt_43)
	%r2367 = load %Pointer, %Pointer* %stackTop
	%r2368 = getelementptr inbounds i8, %Pointer %r2367, i32 8
	%r2369 = bitcast %Pointer %r2368 to %Objptr*
	%r2370 = load %Objptr, %Objptr* %r2369
	%r2371 = load %Pointer, %Pointer* %stackTop
	%r2372 = getelementptr inbounds i8, %Pointer %r2371, i32 0
	%r2373 = bitcast %Pointer %r2372 to %Objptr*
	store %Objptr %r2370, %Objptr* %r2373
	; RP(0): Objptr (opt_3)  = SP(16): Objptr (opt_3)
	%r2374 = load %Pointer, %Pointer* %stackTop
	%r2375 = getelementptr inbounds i8, %Pointer %r2374, i32 16
	%r2376 = bitcast %Pointer %r2375 to %Objptr*
	%r2377 = load %Objptr, %Objptr* %r2376
	store %Objptr %r2377, %Objptr* %regP_0
	; SP(8): Objptr (opt_11)  = glob {index = 22, isRoot = true, ty = Objptr (opt_11)}
	%r2378 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 22
	%r2379 = load %Objptr, %Objptr* %r2378
	%r2380 = load %Pointer, %Pointer* %stackTop
	%r2381 = getelementptr inbounds i8, %Pointer %r2380, i32 8
	%r2382 = bitcast %Pointer %r2381 to %Objptr*
	store %Objptr %r2379, %Objptr* %r2382
	; SW64(16): Word64  = 0x0
	%r2383 = load %Pointer, %Pointer* %stackTop
	%r2384 = getelementptr inbounds i8, %Pointer %r2383, i32 16
	%r2385 = bitcast %Pointer %r2384 to %Word64*
	store %Word64 0, %Word64* %r2385
	; Goto L_1135
	br label %L_1135

L_1143:
	; Goto L_1138
	br label %L_1138

L_1142:
	; RW64(2): Word64  = Word64_add (RW64(1): Word64, SW64(16): Word64)
	%r2386 = load %Word64, %Word64* %regW64_1
	%r2387 = load %Pointer, %Pointer* %stackTop
	%r2388 = getelementptr inbounds i8, %Pointer %r2387, i32 16
	%r2389 = bitcast %Pointer %r2388 to %Word64*
	%r2390 = load %Word64, %Word64* %r2389
	%r2391 = add %Word64 %r2386, %r2390
	store %Word64 %r2391, %Word64* %regW64_2
	; RW8(0): Word8  = XW8 (RP(0): Objptr (opt_3), RW64(1): Word64, 1, 0): Word8
	%r2392 = load %Objptr, %Objptr* %regP_0
	%r2393 = load %Word64, %Word64* %regW64_1
	%r2394 = mul nsw %Word64 %r2393, 1
	%r2395 = add nsw %Word64 %r2394, 0
	%r2396 = getelementptr inbounds i8, %Objptr %r2392, %Word64 %r2395
	%r2397 = bitcast %Objptr %r2396 to %Word8*
	%r2398 = load %Word8, %Word8* %r2397
	store %Word8 %r2398, %Word8* %regW8_0
	; XW8 (SP(8): Objptr (opt_11), RW64(2): Word64, 1, 0): Word8  = RW8(0): Word8
	%r2399 = load %Word8, %Word8* %regW8_0
	%r2400 = load %Pointer, %Pointer* %stackTop
	%r2401 = getelementptr inbounds i8, %Pointer %r2400, i32 8
	%r2402 = bitcast %Pointer %r2401 to %Objptr*
	%r2403 = load %Objptr, %Objptr* %r2402
	%r2404 = load %Word64, %Word64* %regW64_2
	%r2405 = mul nsw %Word64 %r2404, 1
	%r2406 = add nsw %Word64 %r2405, 0
	%r2407 = getelementptr inbounds i8, %Objptr %r2403, %Word64 %r2406
	%r2408 = bitcast %Objptr %r2407 to %Word8*
	store %Word8 %r2399, %Word8* %r2408
	; RW64(3): Word64  = Word64_add (RW64(1): Word64, 0x1)
	%r2409 = load %Word64, %Word64* %regW64_1
	%r2410 = add %Word64 %r2409, 1
	store %Word64 %r2410, %Word64* %regW64_3
	; RW64(1): Word64  = RW64(3): Word64
	%r2411 = load %Word64, %Word64* %regW64_3
	store %Word64 %r2411, %Word64* %regW64_1
	; Goto loop_55
	br label %loop_55

loop_55:
	; RW32(0): Word32  = WordS64_lt (RW64(0): Word64, RW64(1): Word64)
	%r2412 = load %Word64, %Word64* %regW64_0
	%r2413 = load %Word64, %Word64* %regW64_1
	%r2415 = icmp slt %Word64 %r2412, %r2413
	%r2414 = zext i1 %r2415 to %Word32
	store %Word32 %r2414, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_1142), (0x1, L_1143))}
	%r2416 = load %Word32, %Word32* %regW32_0
	%r2417 = trunc %Word32 %r2416 to i1
	br i1 %r2417, label %L_1143, label %L_1142

L_1141:
	; RW64(0): Word64  = Word64_sub (SW64(24): Word64, 0x1)
	%r2418 = load %Pointer, %Pointer* %stackTop
	%r2419 = getelementptr inbounds i8, %Pointer %r2418, i32 24
	%r2420 = bitcast %Pointer %r2419 to %Word64*
	%r2421 = load %Word64, %Word64* %r2420
	%r2422 = sub %Word64 %r2421, 1
	store %Word64 %r2422, %Word64* %regW64_0
	; RW64(1): Word64  = 0x0
	store %Word64 0, %Word64* %regW64_1
	; Goto loop_55
	br label %loop_55

L_1140:
	; OW64 (SP(8): Objptr (opt_11), ~8): Word64  = 0x7
	%r2423 = load %Pointer, %Pointer* %stackTop
	%r2424 = getelementptr inbounds i8, %Pointer %r2423, i32 8
	%r2425 = bitcast %Pointer %r2424 to %Objptr*
	%r2426 = load %Objptr, %Objptr* %r2425
	%r2427 = getelementptr inbounds i8, %Objptr %r2426, i32 -8
	%r2428 = bitcast %Objptr %r2427 to %Word64*
	store %Word64 7, %Word64* %r2428
	; SP(0): Objptr (opt_3)  = Cast (SP(8): Objptr (opt_11), Objptr (opt_3))
	%r2429 = load %Pointer, %Pointer* %stackTop
	%r2430 = getelementptr inbounds i8, %Pointer %r2429, i32 8
	%r2431 = bitcast %Pointer %r2430 to %Objptr*
	%r2432 = load %Objptr, %Objptr* %r2431
	%r2433 = bitcast %Objptr %r2432 to %Objptr
	%r2434 = load %Pointer, %Pointer* %stackTop
	%r2435 = getelementptr inbounds i8, %Pointer %r2434, i32 0
	%r2436 = bitcast %Pointer %r2435 to %Objptr*
	store %Objptr %r2433, %Objptr* %r2436
	; Return
	%r2437 = load %Pointer, %Pointer* %stackTop
	%r2438 = getelementptr inbounds i8, %Pointer %r2437, i32 -8
	%r2439 = bitcast %Pointer %r2438 to %uintptr_t*
	%r2440 = load %uintptr_t, %uintptr_t* %r2439
	store %uintptr_t %r2440, %uintptr_t* %l_nextFun
	br label %top

L_1139:
	; RP(0): Objptr (opt_43)  = OP (SP(0): Objptr (opt_43), 8): Objptr (opt_43)
	%r2441 = load %Pointer, %Pointer* %stackTop
	%r2442 = getelementptr inbounds i8, %Pointer %r2441, i32 0
	%r2443 = bitcast %Pointer %r2442 to %Objptr*
	%r2444 = load %Objptr, %Objptr* %r2443
	%r2445 = getelementptr inbounds i8, %Objptr %r2444, i32 8
	%r2446 = bitcast %Objptr %r2445 to %Objptr*
	%r2447 = load %Objptr, %Objptr* %r2446
	store %Objptr %r2447, %Objptr* %regP_0
	; RP(1): Objptr (opt_3)  = OP (SP(0): Objptr (opt_43), 0): Objptr (opt_3)
	%r2448 = load %Pointer, %Pointer* %stackTop
	%r2449 = getelementptr inbounds i8, %Pointer %r2448, i32 0
	%r2450 = bitcast %Pointer %r2449 to %Objptr*
	%r2451 = load %Objptr, %Objptr* %r2450
	%r2452 = getelementptr inbounds i8, %Objptr %r2451, i32 0
	%r2453 = bitcast %Objptr %r2452 to %Objptr*
	%r2454 = load %Objptr, %Objptr* %r2453
	store %Objptr %r2454, %Objptr* %regP_1
	; SP(0): Objptr (opt_43)  = RP(0): Objptr (opt_43)
	%r2455 = load %Objptr, %Objptr* %regP_0
	%r2456 = load %Pointer, %Pointer* %stackTop
	%r2457 = getelementptr inbounds i8, %Pointer %r2456, i32 0
	%r2458 = bitcast %Pointer %r2457 to %Objptr*
	store %Objptr %r2455, %Objptr* %r2458
	; RP(0): Objptr (opt_3)  = RP(1): Objptr (opt_3)
	%r2459 = load %Objptr, %Objptr* %regP_1
	store %Objptr %r2459, %Objptr* %regP_0
	; SW64(16): Word64  = RW64(0): Word64
	%r2460 = load %Word64, %Word64* %regW64_0
	%r2461 = load %Pointer, %Pointer* %stackTop
	%r2462 = getelementptr inbounds i8, %Pointer %r2461, i32 16
	%r2463 = bitcast %Pointer %r2462 to %Word64*
	store %Word64 %r2460, %Word64* %r2463
	; Goto L_1135
	br label %L_1135

L_1138:
	; RW64(0): Word64  = Word64_add (SW64(24): Word64, SW64(16): Word64)
	%r2464 = load %Pointer, %Pointer* %stackTop
	%r2465 = getelementptr inbounds i8, %Pointer %r2464, i32 24
	%r2466 = bitcast %Pointer %r2465 to %Word64*
	%r2467 = load %Word64, %Word64* %r2466
	%r2468 = load %Pointer, %Pointer* %stackTop
	%r2469 = getelementptr inbounds i8, %Pointer %r2468, i32 16
	%r2470 = bitcast %Pointer %r2469 to %Word64*
	%r2471 = load %Word64, %Word64* %r2470
	%r2472 = add %Word64 %r2467, %r2471
	store %Word64 %r2472, %Word64* %regW64_0
	; switch {test = Cast (SP(0): Objptr (opt_43), Bits64), default = Some L_1139, cases = ((0x1, L_1140))}
	%r2473 = load %Pointer, %Pointer* %stackTop
	%r2474 = getelementptr inbounds i8, %Pointer %r2473, i32 0
	%r2475 = bitcast %Pointer %r2474 to %Objptr*
	%r2476 = load %Objptr, %Objptr* %r2475
	%r2477 = ptrtoint %Objptr %r2476 to %Word64
	switch %Word64 %r2477, label %L_1139 [
		%Word64 1, label %L_1140
	]

L_1137:
	; Push(-40)
	%r2478 = load %Pointer, %Pointer* %stackTop
	%r2479 = getelementptr inbounds i8, %Pointer %r2478, i32 -40
	store %Pointer %r2479, %Pointer* %stackTop
	; Goto L_1138
	br label %L_1138

L_1136:
	; CCall {args = (<GCState>, SP(8): Objptr (opt_11), SW64(16): Word64, RP(0): Objptr (opt_3), 0x0, SW64(24): Word64), frameInfo = Some {frameLayoutsIndex = 154}, func = {args = (GCState, Objptr (opt_11), Word64, Objptr (opt_3), Word64, Word64), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Objptr, Int64, Objptr, Int64, Int64), res = None}, return = Bits0, symbolScope = private, target = GC_arrayCopy}, return = Some L_1137}
	; GetOperands
	%r2480 = bitcast %struct.GC_state* @gcState to %Pointer
	%r2481 = load %Pointer, %Pointer* %stackTop
	%r2482 = getelementptr inbounds i8, %Pointer %r2481, i32 8
	%r2483 = bitcast %Pointer %r2482 to %Objptr*
	%r2484 = load %Objptr, %Objptr* %r2483
	%r2485 = load %Pointer, %Pointer* %stackTop
	%r2486 = getelementptr inbounds i8, %Pointer %r2485, i32 16
	%r2487 = bitcast %Pointer %r2486 to %Word64*
	%r2488 = load %Word64, %Word64* %r2487
	%r2489 = load %Objptr, %Objptr* %regP_0
	%r2490 = load %Pointer, %Pointer* %stackTop
	%r2491 = getelementptr inbounds i8, %Pointer %r2490, i32 24
	%r2492 = bitcast %Pointer %r2491 to %Word64*
	%r2493 = load %Word64, %Word64* %r2492
	%r2494 = load %Pointer, %Pointer* %stackTop
	%r2495 = getelementptr inbounds i8, %Pointer %r2494, i32 32
	%r2496 = bitcast %Pointer %r2495 to %uintptr_t*
	store %uintptr_t 154, %uintptr_t* %r2496
	; Push(40)
	%r2497 = load %Pointer, %Pointer* %stackTop
	%r2498 = getelementptr inbounds i8, %Pointer %r2497, i32 40
	store %Pointer %r2498, %Pointer* %stackTop
	; FlushFrontier
	%r2499 = bitcast %struct.GC_state* @gcState to %Pointer
	%r2500 = getelementptr inbounds i8, %Pointer %r2499, i32 0
	%r2501 = bitcast %Pointer %r2500 to %Pointer*
	%r2502 = load %Pointer, %Pointer* %frontier
	store %Pointer %r2502, %Pointer* %r2501
	; FlushStackTop
	%r2503 = bitcast %struct.GC_state* @gcState to %Pointer
	%r2504 = getelementptr inbounds i8, %Pointer %r2503, i32 16
	%r2505 = bitcast %Pointer %r2504 to %Pointer*
	%r2506 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r2506, %Pointer* %r2505
	; Call
	call void @GC_arrayCopy(%Pointer %r2480, %Objptr %r2484, %Word64 %r2488, %Objptr %r2489, %Word64 0, %Word64 %r2493)
	; CacheFrontier
	%r2507 = bitcast %struct.GC_state* @gcState to %Pointer
	%r2508 = getelementptr inbounds i8, %Pointer %r2507, i32 0
	%r2509 = bitcast %Pointer %r2508 to %Pointer*
	%r2510 = load %Pointer, %Pointer* %r2509
	store %Pointer %r2510, %Pointer* %frontier
	; CacheStackTop
	%r2511 = bitcast %struct.GC_state* @gcState to %Pointer
	%r2512 = getelementptr inbounds i8, %Pointer %r2511, i32 16
	%r2513 = bitcast %Pointer %r2512 to %Pointer*
	%r2514 = load %Pointer, %Pointer* %r2513
	store %Pointer %r2514, %Pointer* %stackTop
	br label %L_1137

L_1135:
	; SW64(24): Word64  = OW64 (RP(0): Objptr (opt_3), ~16): Word64
	%r2515 = load %Objptr, %Objptr* %regP_0
	%r2516 = getelementptr inbounds i8, %Objptr %r2515, i32 -16
	%r2517 = bitcast %Objptr %r2516 to %Word64*
	%r2518 = load %Word64, %Word64* %r2517
	%r2519 = load %Pointer, %Pointer* %stackTop
	%r2520 = getelementptr inbounds i8, %Pointer %r2519, i32 24
	%r2521 = bitcast %Pointer %r2520 to %Word64*
	store %Word64 %r2518, %Word64* %r2521
	; RW32(0): Word32  = WordS64_lt (SW64(24): Word64, 0x5)
	%r2522 = load %Pointer, %Pointer* %stackTop
	%r2523 = getelementptr inbounds i8, %Pointer %r2522, i32 24
	%r2524 = bitcast %Pointer %r2523 to %Word64*
	%r2525 = load %Word64, %Word64* %r2524
	%r2527 = icmp slt %Word64 %r2525, 5
	%r2526 = zext i1 %r2527 to %Word32
	store %Word32 %r2526, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_1136), (0x1, L_1141))}
	%r2528 = load %Word32, %Word32* %regW32_0
	%r2529 = trunc %Word32 %r2528 to i1
	br i1 %r2529, label %L_1141, label %L_1136

L_1134:
	; Push(-32)
	%r2530 = load %Pointer, %Pointer* %stackTop
	%r2531 = getelementptr inbounds i8, %Pointer %r2530, i32 -32
	store %Pointer %r2531, %Pointer* %stackTop
	%r2532 = load %Objptr, %Objptr* @CReturnP
	store %Objptr %r2532, %Objptr* %regP_0
	; SP(0): Objptr (opt_43)  = SP(8): Objptr (opt_43)
	%r2533 = load %Pointer, %Pointer* %stackTop
	%r2534 = getelementptr inbounds i8, %Pointer %r2533, i32 8
	%r2535 = bitcast %Pointer %r2534 to %Objptr*
	%r2536 = load %Objptr, %Objptr* %r2535
	%r2537 = load %Pointer, %Pointer* %stackTop
	%r2538 = getelementptr inbounds i8, %Pointer %r2537, i32 0
	%r2539 = bitcast %Pointer %r2538 to %Objptr*
	store %Objptr %r2536, %Objptr* %r2539
	; SP(8): Objptr (opt_11)  = RP(0): Objptr (opt_11)
	%r2540 = load %Objptr, %Objptr* %regP_0
	%r2541 = load %Pointer, %Pointer* %stackTop
	%r2542 = getelementptr inbounds i8, %Pointer %r2541, i32 8
	%r2543 = bitcast %Pointer %r2542 to %Objptr*
	store %Objptr %r2540, %Objptr* %r2543
	; RP(0): Objptr (opt_3)  = SP(16): Objptr (opt_3)
	%r2544 = load %Pointer, %Pointer* %stackTop
	%r2545 = getelementptr inbounds i8, %Pointer %r2544, i32 16
	%r2546 = bitcast %Pointer %r2545 to %Objptr*
	%r2547 = load %Objptr, %Objptr* %r2546
	store %Objptr %r2547, %Objptr* %regP_0
	; SW64(16): Word64  = 0x0
	%r2548 = load %Pointer, %Pointer* %stackTop
	%r2549 = getelementptr inbounds i8, %Pointer %r2548, i32 16
	%r2550 = bitcast %Pointer %r2549 to %Word64*
	store %Word64 0, %Word64* %r2550
	; Goto L_1135
	br label %L_1135

L_1133:
	; CCall {args = (<GCState>, 0x0, RW64(2): Word64, 0x17), frameInfo = Some {frameLayoutsIndex = 153}, func = {args = (GCState, Word64, Word64, Word64), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int64, Word64), res = Some Objptr}, return = Objptr (opt_11), symbolScope = private, target = GC_arrayAllocate}, return = Some L_1134}
	; GetOperands
	%r2551 = bitcast %struct.GC_state* @gcState to %Pointer
	%r2552 = load %Word64, %Word64* %regW64_2
	%r2553 = load %Pointer, %Pointer* %stackTop
	%r2554 = getelementptr inbounds i8, %Pointer %r2553, i32 24
	%r2555 = bitcast %Pointer %r2554 to %uintptr_t*
	store %uintptr_t 153, %uintptr_t* %r2555
	; Push(32)
	%r2556 = load %Pointer, %Pointer* %stackTop
	%r2557 = getelementptr inbounds i8, %Pointer %r2556, i32 32
	store %Pointer %r2557, %Pointer* %stackTop
	; FlushFrontier
	%r2558 = bitcast %struct.GC_state* @gcState to %Pointer
	%r2559 = getelementptr inbounds i8, %Pointer %r2558, i32 0
	%r2560 = bitcast %Pointer %r2559 to %Pointer*
	%r2561 = load %Pointer, %Pointer* %frontier
	store %Pointer %r2561, %Pointer* %r2560
	; FlushStackTop
	%r2562 = bitcast %struct.GC_state* @gcState to %Pointer
	%r2563 = getelementptr inbounds i8, %Pointer %r2562, i32 16
	%r2564 = bitcast %Pointer %r2563 to %Pointer*
	%r2565 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r2565, %Pointer* %r2564
	; Call
	%r2566 = call %Objptr @GC_arrayAllocate(%Pointer %r2551, %Word64 0, %Word64 %r2552, %Word64 23)
	store %Objptr %r2566, %Objptr* @CReturnP
	; CacheFrontier
	%r2567 = bitcast %struct.GC_state* @gcState to %Pointer
	%r2568 = getelementptr inbounds i8, %Pointer %r2567, i32 0
	%r2569 = bitcast %Pointer %r2568 to %Pointer*
	%r2570 = load %Pointer, %Pointer* %r2569
	store %Pointer %r2570, %Pointer* %frontier
	; CacheStackTop
	%r2571 = bitcast %struct.GC_state* @gcState to %Pointer
	%r2572 = getelementptr inbounds i8, %Pointer %r2571, i32 16
	%r2573 = bitcast %Pointer %r2572 to %Pointer*
	%r2574 = load %Pointer, %Pointer* %r2573
	store %Pointer %r2574, %Pointer* %stackTop
	br label %L_1134

L_1132:
	; RW32(0): Word32  = Word64_equal (0x0, RW64(2): Word64)
	%r2575 = load %Word64, %Word64* %regW64_2
	%r2577 = icmp eq %Word64 0, %r2575
	%r2576 = zext i1 %r2577 to %Word32
	store %Word32 %r2576, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_1133), (0x1, L_1144))}
	%r2578 = load %Word32, %Word32* %regW32_0
	%r2579 = trunc %Word32 %r2578 to i1
	br i1 %r2579, label %L_1144, label %L_1133

L_1131:
	; RW32(0): Word32  = WordU64_lt (0x7FFFFFFF, RW64(2): Word64)
	%r2580 = load %Word64, %Word64* %regW64_2
	%r2582 = icmp ult %Word64 2147483647, %r2580
	%r2581 = zext i1 %r2582 to %Word32
	store %Word32 %r2581, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_1132), (0x1, L_1145))}
	%r2583 = load %Word32, %Word32* %regW32_0
	%r2584 = trunc %Word32 %r2583 to i1
	br i1 %r2584, label %L_1145, label %L_1132

L_1130:
	; RP(1): Objptr (opt_43)  = OP (RP(0): Objptr (opt_43), 8): Objptr (opt_43)
	%r2585 = load %Objptr, %Objptr* %regP_0
	%r2586 = getelementptr inbounds i8, %Objptr %r2585, i32 8
	%r2587 = bitcast %Objptr %r2586 to %Objptr*
	%r2588 = load %Objptr, %Objptr* %r2587
	store %Objptr %r2588, %Objptr* %regP_1
	; RP(2): Objptr (opt_3)  = OP (RP(0): Objptr (opt_43), 0): Objptr (opt_3)
	%r2589 = load %Objptr, %Objptr* %regP_0
	%r2590 = getelementptr inbounds i8, %Objptr %r2589, i32 0
	%r2591 = bitcast %Objptr %r2590 to %Objptr*
	%r2592 = load %Objptr, %Objptr* %r2591
	store %Objptr %r2592, %Objptr* %regP_2
	; RP(0): Objptr (opt_43)  = RP(1): Objptr (opt_43)
	%r2593 = load %Objptr, %Objptr* %regP_1
	store %Objptr %r2593, %Objptr* %regP_0
	; RP(1): Objptr (opt_3)  = RP(2): Objptr (opt_3)
	%r2594 = load %Objptr, %Objptr* %regP_2
	store %Objptr %r2594, %Objptr* %regP_1
	; RW64(0): Word64  = RW64(2): Word64
	%r2595 = load %Word64, %Word64* %regW64_2
	store %Word64 %r2595, %Word64* %regW64_0
	; Goto L_1127
	br label %L_1127

L_1129:
	; switch {test = Cast (RP(0): Objptr (opt_43), Bits64), default = Some L_1130, cases = ((0x1, L_1131))}
	%r2596 = load %Objptr, %Objptr* %regP_0
	%r2597 = ptrtoint %Objptr %r2596 to %Word64
	switch %Word64 %r2597, label %L_1130 [
		%Word64 1, label %L_1131
	]

L_1128:
	; glob {index = 0, isRoot = false, ty = Objptr (opt_34, opt_33, opt_32, opt_31)}  = Cast (0x2, Objptr (opt_34, opt_33, opt_32, opt_31))
	%r2598 = inttoptr %Word64 2 to %Objptr
	%r2599 = getelementptr inbounds [1 x %Objptr], [1 x %Objptr]* @globalObjptrNonRoot, i32 0, i32 0
	store %Objptr %r2598, %Objptr* %r2599
	; Raise
	%r2600 = bitcast %struct.GC_state* @gcState to %Pointer
	%r2601 = getelementptr inbounds i8, %Pointer %r2600, i32 1616
	%r2602 = bitcast %Pointer %r2601 to %Pointer*
	%r2603 = load %Pointer, %Pointer* %r2602
	%r2604 = bitcast %struct.GC_state* @gcState to %Pointer
	%r2605 = getelementptr inbounds i8, %Pointer %r2604, i32 32
	%r2606 = bitcast %Pointer %r2605 to i32*
	%r2607 = load i32, i32* %r2606
	%r2608 = getelementptr inbounds i8, %Pointer %r2603, i32 %r2607
	store %Pointer %r2608, %Pointer* %stackTop
	%r2609 = load %Pointer, %Pointer* %stackTop
	%r2610 = getelementptr inbounds i8, %Pointer %r2609, i32 -8
	%r2611 = bitcast %Pointer %r2610 to %uintptr_t*
	%r2612 = load %uintptr_t, %uintptr_t* %r2611
	store %uintptr_t %r2612, %uintptr_t* %l_nextFun
	br label %top

L_1127:
	; RW64(1): Word64  = OW64 (RP(1): Objptr (opt_3), ~16): Word64
	%r2613 = load %Objptr, %Objptr* %regP_1
	%r2614 = getelementptr inbounds i8, %Objptr %r2613, i32 -16
	%r2615 = bitcast %Objptr %r2614 to %Word64*
	%r2616 = load %Word64, %Word64* %r2615
	store %Word64 %r2616, %Word64* %regW64_1
	; Arith {prim = WordS64_addCheck, args = (RW64(0): Word64, RW64(1): Word64), dst = RW64(2): Word64, overflow = L_1128, success = L_1129}
	%r2617 = load %Word64, %Word64* %regW64_0
	%r2618 = load %Word64, %Word64* %regW64_1
	%r2619 = call {%Word64, i1} @llvm.sadd.with.overflow.i64(%Word64 %r2617, %Word64 %r2618)
	%r2620 = extractvalue {%Word64, i1} %r2619, 0
	%r2621 = extractvalue {%Word64, i1} %r2619, 1
	store %Word64 %r2620, %Word64* %regW64_2
	br i1 %r2621, label %L_1128, label %L_1129

L_1126:
	; RP(0): Objptr (opt_43)  = SP(8): Objptr (opt_43)
	%r2622 = load %Pointer, %Pointer* %stackTop
	%r2623 = getelementptr inbounds i8, %Pointer %r2622, i32 8
	%r2624 = bitcast %Pointer %r2623 to %Objptr*
	%r2625 = load %Objptr, %Objptr* %r2624
	store %Objptr %r2625, %Objptr* %regP_0
	; RP(1): Objptr (opt_3)  = SP(16): Objptr (opt_3)
	%r2626 = load %Pointer, %Pointer* %stackTop
	%r2627 = getelementptr inbounds i8, %Pointer %r2626, i32 16
	%r2628 = bitcast %Pointer %r2627 to %Objptr*
	%r2629 = load %Objptr, %Objptr* %r2628
	store %Objptr %r2629, %Objptr* %regP_1
	; RW64(0): Word64  = 0x0
	store %Word64 0, %Word64* %regW64_0
	; Goto L_1127
	br label %L_1127

L_1125:
	; SP(8): Objptr (opt_43)  = OP (SP(0): Objptr (opt_43), 8): Objptr (opt_43)
	%r2630 = load %Pointer, %Pointer* %stackTop
	%r2631 = getelementptr inbounds i8, %Pointer %r2630, i32 0
	%r2632 = bitcast %Pointer %r2631 to %Objptr*
	%r2633 = load %Objptr, %Objptr* %r2632
	%r2634 = getelementptr inbounds i8, %Objptr %r2633, i32 8
	%r2635 = bitcast %Objptr %r2634 to %Objptr*
	%r2636 = load %Objptr, %Objptr* %r2635
	%r2637 = load %Pointer, %Pointer* %stackTop
	%r2638 = getelementptr inbounds i8, %Pointer %r2637, i32 8
	%r2639 = bitcast %Pointer %r2638 to %Objptr*
	store %Objptr %r2636, %Objptr* %r2639
	; SP(16): Objptr (opt_3)  = OP (SP(0): Objptr (opt_43), 0): Objptr (opt_3)
	%r2640 = load %Pointer, %Pointer* %stackTop
	%r2641 = getelementptr inbounds i8, %Pointer %r2640, i32 0
	%r2642 = bitcast %Pointer %r2641 to %Objptr*
	%r2643 = load %Objptr, %Objptr* %r2642
	%r2644 = getelementptr inbounds i8, %Objptr %r2643, i32 0
	%r2645 = bitcast %Objptr %r2644 to %Objptr*
	%r2646 = load %Objptr, %Objptr* %r2645
	%r2647 = load %Pointer, %Pointer* %stackTop
	%r2648 = getelementptr inbounds i8, %Pointer %r2647, i32 16
	%r2649 = bitcast %Pointer %r2648 to %Objptr*
	store %Objptr %r2646, %Objptr* %r2649
	; switch {test = Cast (SP(8): Objptr (opt_43), Bits64), default = Some L_1126, cases = ((0x1, L_1146))}
	%r2650 = load %Pointer, %Pointer* %stackTop
	%r2651 = getelementptr inbounds i8, %Pointer %r2650, i32 8
	%r2652 = bitcast %Pointer %r2651 to %Objptr*
	%r2653 = load %Objptr, %Objptr* %r2652
	%r2654 = ptrtoint %Objptr %r2653 to %Word64
	switch %Word64 %r2654, label %L_1126 [
		%Word64 1, label %L_1146
	]

L_1124:
	; switch {test = Cast (SP(0): Objptr (opt_43), Bits64), default = Some L_1125, cases = ((0x1, L_1147))}
	%r2655 = load %Pointer, %Pointer* %stackTop
	%r2656 = getelementptr inbounds i8, %Pointer %r2655, i32 0
	%r2657 = bitcast %Pointer %r2656 to %Objptr*
	%r2658 = load %Objptr, %Objptr* %r2657
	%r2659 = ptrtoint %Objptr %r2658 to %Word64
	switch %Word64 %r2659, label %L_1125 [
		%Word64 1, label %L_1147
	]

L_1123:
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 24): CPointer, <StackTop>)
	%r2660 = bitcast %struct.GC_state* @gcState to %Pointer
	%r2661 = getelementptr inbounds i8, %Pointer %r2660, i32 24
	%r2662 = bitcast %Pointer %r2661 to %CPointer*
	%r2663 = load %CPointer, %CPointer* %r2662
	%r2664 = load %Pointer, %Pointer* %stackTop
	%r2666 = icmp ult %Pointer %r2663, %r2664
	%r2665 = zext i1 %r2666 to %Word32
	store %Word32 %r2665, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_1124), (0x1, L_1148))}
	%r2667 = load %Word32, %Word32* %regW32_0
	%r2668 = trunc %Word32 %r2667 to i1
	br i1 %r2668, label %L_1148, label %L_1124

concat_0:
	; Goto L_1123
	br label %L_1123

L_1122:
	; Push(-48)
	%r2669 = load %Pointer, %Pointer* %stackTop
	%r2670 = getelementptr inbounds i8, %Pointer %r2669, i32 -48
	store %Pointer %r2670, %Pointer* %stackTop
	; Goto L_684
	br label %L_684

L_1121:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 152}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_1122}
	; GetOperands
	%r2671 = bitcast %struct.GC_state* @gcState to %Pointer
	%r2672 = load %Pointer, %Pointer* %stackTop
	%r2673 = getelementptr inbounds i8, %Pointer %r2672, i32 40
	%r2674 = bitcast %Pointer %r2673 to %uintptr_t*
	store %uintptr_t 152, %uintptr_t* %r2674
	; Push(48)
	%r2675 = load %Pointer, %Pointer* %stackTop
	%r2676 = getelementptr inbounds i8, %Pointer %r2675, i32 48
	store %Pointer %r2676, %Pointer* %stackTop
	; FlushFrontier
	%r2677 = bitcast %struct.GC_state* @gcState to %Pointer
	%r2678 = getelementptr inbounds i8, %Pointer %r2677, i32 0
	%r2679 = bitcast %Pointer %r2678 to %Pointer*
	%r2680 = load %Pointer, %Pointer* %frontier
	store %Pointer %r2680, %Pointer* %r2679
	; FlushStackTop
	%r2681 = bitcast %struct.GC_state* @gcState to %Pointer
	%r2682 = getelementptr inbounds i8, %Pointer %r2681, i32 16
	%r2683 = bitcast %Pointer %r2682 to %Pointer*
	%r2684 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r2684, %Pointer* %r2683
	; Call
	call void @GC_collect(%Pointer %r2671, %Word64 0, %Word32 0)
	; CacheFrontier
	%r2685 = bitcast %struct.GC_state* @gcState to %Pointer
	%r2686 = getelementptr inbounds i8, %Pointer %r2685, i32 0
	%r2687 = bitcast %Pointer %r2686 to %Pointer*
	%r2688 = load %Pointer, %Pointer* %r2687
	store %Pointer %r2688, %Pointer* %frontier
	; CacheStackTop
	%r2689 = bitcast %struct.GC_state* @gcState to %Pointer
	%r2690 = getelementptr inbounds i8, %Pointer %r2689, i32 16
	%r2691 = bitcast %Pointer %r2690 to %Pointer*
	%r2692 = load %Pointer, %Pointer* %r2691
	store %Pointer %r2692, %Pointer* %stackTop
	br label %L_1122

L_1120:
	; SP(0): Objptr (opt_3)  = glob {index = 143, isRoot = true, ty = Objptr (opt_3)}
	%r2693 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 143
	%r2694 = load %Objptr, %Objptr* %r2693
	%r2695 = load %Pointer, %Pointer* %stackTop
	%r2696 = getelementptr inbounds i8, %Pointer %r2695, i32 0
	%r2697 = bitcast %Pointer %r2696 to %Objptr*
	store %Objptr %r2694, %Objptr* %r2697
	; Return
	%r2698 = load %Pointer, %Pointer* %stackTop
	%r2699 = getelementptr inbounds i8, %Pointer %r2698, i32 -8
	%r2700 = bitcast %Pointer %r2699 to %uintptr_t*
	%r2701 = load %uintptr_t, %uintptr_t* %r2700
	store %uintptr_t %r2701, %uintptr_t* %l_nextFun
	br label %top

L_1119:
	; SP(0): Objptr (opt_3)  = glob {index = 142, isRoot = true, ty = Objptr (opt_3)}
	%r2702 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 142
	%r2703 = load %Objptr, %Objptr* %r2702
	%r2704 = load %Pointer, %Pointer* %stackTop
	%r2705 = getelementptr inbounds i8, %Pointer %r2704, i32 0
	%r2706 = bitcast %Pointer %r2705 to %Objptr*
	store %Objptr %r2703, %Objptr* %r2706
	; Return
	%r2707 = load %Pointer, %Pointer* %stackTop
	%r2708 = getelementptr inbounds i8, %Pointer %r2707, i32 -8
	%r2709 = bitcast %Pointer %r2708 to %uintptr_t*
	%r2710 = load %uintptr_t, %uintptr_t* %r2709
	store %uintptr_t %r2710, %uintptr_t* %l_nextFun
	br label %top

L_1118:
	; RW32(0): Word32  = Real64_lt (glob {index = 5, isRoot = true, ty = Real64}, SR64(0): Real64)
	%r2711 = getelementptr inbounds [6 x %Real64], [6 x %Real64]* @globalReal64, i32 0, i32 5
	%r2712 = load %Real64, %Real64* %r2711
	%r2713 = load %Pointer, %Pointer* %stackTop
	%r2714 = getelementptr inbounds i8, %Pointer %r2713, i32 0
	%r2715 = bitcast %Pointer %r2714 to %Real64*
	%r2716 = load %Real64, %Real64* %r2715
	%r2718 = fcmp olt %Real64 %r2712, %r2716
	%r2717 = zext i1 %r2718 to %Word32
	store %Word32 %r2717, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_1119), (0x1, L_1120))}
	%r2719 = load %Word32, %Word32* %regW32_0
	%r2720 = trunc %Word32 %r2719 to i1
	br i1 %r2720, label %L_1120, label %L_1119

L_1117:
	; SP(0): Objptr (opt_3)  = glob {index = 141, isRoot = true, ty = Objptr (opt_3)}
	%r2721 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 141
	%r2722 = load %Objptr, %Objptr* %r2721
	%r2723 = load %Pointer, %Pointer* %stackTop
	%r2724 = getelementptr inbounds i8, %Pointer %r2723, i32 0
	%r2725 = bitcast %Pointer %r2724 to %Objptr*
	store %Objptr %r2722, %Objptr* %r2725
	; Return
	%r2726 = load %Pointer, %Pointer* %stackTop
	%r2727 = getelementptr inbounds i8, %Pointer %r2726, i32 -8
	%r2728 = bitcast %Pointer %r2727 to %uintptr_t*
	%r2729 = load %uintptr_t, %uintptr_t* %r2728
	store %uintptr_t %r2729, %uintptr_t* %l_nextFun
	br label %top

L_1116:
	; RW64(1): Word64  = Word64_andb (RW64(0): Word64, 0xFFFFFFFFFFFFF)
	%r2730 = load %Word64, %Word64* %regW64_0
	%r2731 = and %Word64 %r2730, 4503599627370495
	store %Word64 %r2731, %Word64* %regW64_1
	; RW32(0): Word32  = Word64_equal (RW64(1): Word64, 0x0)
	%r2732 = load %Word64, %Word64* %regW64_1
	%r2734 = icmp eq %Word64 %r2732, 0
	%r2733 = zext i1 %r2734 to %Word32
	store %Word32 %r2733, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_1117), (0x1, L_1118))}
	%r2735 = load %Word32, %Word32* %regW32_0
	%r2736 = trunc %Word32 %r2735 to i1
	br i1 %r2736, label %L_1118, label %L_1117

L_1115:
	; RR64(0): Real64  = Real64_neg (SR64(0): Real64)
	%r2737 = load %Pointer, %Pointer* %stackTop
	%r2738 = getelementptr inbounds i8, %Pointer %r2737, i32 0
	%r2739 = bitcast %Pointer %r2738 to %Real64*
	%r2740 = load %Real64, %Real64* %r2739
	%r2741 = fsub %Real64 -0.0, %r2740
	store %Real64 %r2741, %Real64* %regR64_0
	; SR64(0): Real64  = RR64(0): Real64
	%r2742 = load %Real64, %Real64* %regR64_0
	%r2743 = load %Pointer, %Pointer* %stackTop
	%r2744 = getelementptr inbounds i8, %Pointer %r2743, i32 0
	%r2745 = bitcast %Pointer %r2744 to %Real64*
	store %Real64 %r2742, %Real64* %r2745
	; SP(40): Objptr (opt_3)  = glob {index = 140, isRoot = true, ty = Objptr (opt_3)}
	%r2746 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 140
	%r2747 = load %Objptr, %Objptr* %r2746
	%r2748 = load %Pointer, %Pointer* %stackTop
	%r2749 = getelementptr inbounds i8, %Pointer %r2748, i32 40
	%r2750 = bitcast %Pointer %r2749 to %Objptr*
	store %Objptr %r2747, %Objptr* %r2750
	; Goto L_687
	br label %L_687

L_1114:
	; SP(48): Objptr (opt_3)  = glob {index = 140, isRoot = true, ty = Objptr (opt_3)}
	%r2751 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 140
	%r2752 = load %Objptr, %Objptr* %r2751
	%r2753 = load %Pointer, %Pointer* %stackTop
	%r2754 = getelementptr inbounds i8, %Pointer %r2753, i32 48
	%r2755 = bitcast %Pointer %r2754 to %Objptr*
	store %Objptr %r2752, %Objptr* %r2755
	; Goto L_689
	br label %L_689

L_1113:
	; Push(-64)
	%r2756 = load %Pointer, %Pointer* %stackTop
	%r2757 = getelementptr inbounds i8, %Pointer %r2756, i32 -64
	store %Pointer %r2757, %Pointer* %stackTop
	; Goto L_690
	br label %L_690

L_1112:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 151}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_1113}
	; GetOperands
	%r2758 = bitcast %struct.GC_state* @gcState to %Pointer
	%r2759 = load %Pointer, %Pointer* %stackTop
	%r2760 = getelementptr inbounds i8, %Pointer %r2759, i32 56
	%r2761 = bitcast %Pointer %r2760 to %uintptr_t*
	store %uintptr_t 151, %uintptr_t* %r2761
	; Push(64)
	%r2762 = load %Pointer, %Pointer* %stackTop
	%r2763 = getelementptr inbounds i8, %Pointer %r2762, i32 64
	store %Pointer %r2763, %Pointer* %stackTop
	; FlushFrontier
	%r2764 = bitcast %struct.GC_state* @gcState to %Pointer
	%r2765 = getelementptr inbounds i8, %Pointer %r2764, i32 0
	%r2766 = bitcast %Pointer %r2765 to %Pointer*
	%r2767 = load %Pointer, %Pointer* %frontier
	store %Pointer %r2767, %Pointer* %r2766
	; FlushStackTop
	%r2768 = bitcast %struct.GC_state* @gcState to %Pointer
	%r2769 = getelementptr inbounds i8, %Pointer %r2768, i32 16
	%r2770 = bitcast %Pointer %r2769 to %Pointer*
	%r2771 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r2771, %Pointer* %r2770
	; Call
	call void @GC_collect(%Pointer %r2758, %Word64 0, %Word32 0)
	; CacheFrontier
	%r2772 = bitcast %struct.GC_state* @gcState to %Pointer
	%r2773 = getelementptr inbounds i8, %Pointer %r2772, i32 0
	%r2774 = bitcast %Pointer %r2773 to %Pointer*
	%r2775 = load %Pointer, %Pointer* %r2774
	store %Pointer %r2775, %Pointer* %frontier
	; CacheStackTop
	%r2776 = bitcast %struct.GC_state* @gcState to %Pointer
	%r2777 = getelementptr inbounds i8, %Pointer %r2776, i32 16
	%r2778 = bitcast %Pointer %r2777 to %Pointer*
	%r2779 = load %Pointer, %Pointer* %r2778
	store %Pointer %r2779, %Pointer* %stackTop
	br label %L_1113

L_1111:
	; RW32(0): Word32  = 0x1
	store %Word32 1, %Word32* %regW32_0
	; Goto L_697
	br label %L_697

L_1110:
	; RW32(0): Word32  = 0x3
	store %Word32 3, %Word32* %regW32_0
	; Goto L_697
	br label %L_697

L_1109:
	; RW32(0): Word32  = 0x2
	store %Word32 2, %Word32* %regW32_0
	; Goto L_697
	br label %L_697

L_1108:
	; Goto L_1087
	br label %L_1087

L_1107:
	; RW32(1): Word32  = Word32_add (OW32 (<GCState>, 68): Word32, 0xFFFFFFFF)
	%r2780 = bitcast %struct.GC_state* @gcState to %Pointer
	%r2781 = getelementptr inbounds i8, %Pointer %r2780, i32 68
	%r2782 = bitcast %Pointer %r2781 to %Word32*
	%r2783 = load %Word32, %Word32* %r2782
	%r2784 = add %Word32 %r2783, 4294967295
	store %Word32 %r2784, %Word32* %regW32_1
	; OW32 (<GCState>, 68): Word32  = RW32(1): Word32
	%r2785 = load %Word32, %Word32* %regW32_1
	%r2786 = bitcast %struct.GC_state* @gcState to %Pointer
	%r2787 = getelementptr inbounds i8, %Pointer %r2786, i32 68
	%r2788 = bitcast %Pointer %r2787 to %Word32*
	store %Word32 %r2785, %Word32* %r2788
	; CW64 (<Frontier>)  = 0x15
	%r2789 = load %Pointer, %Pointer* %frontier
	%r2790 = bitcast %Pointer %r2789 to %Word64*
	store %Word64 21, %Word64* %r2790
	; RQ(86): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r2791 = load %Pointer, %Pointer* %frontier
	%r2793 = ptrtoint %Pointer %r2791 to %uintptr_t
	%r2794 = add %uintptr_t %r2793, 8
	%r2792 = inttoptr %uintptr_t %r2794 to %Pointer
	store %CPointer %r2792, %CPointer* %regQ_86
	; RP(0): Objptr (opt_10)  = Cast (RQ(86): CPointer, Objptr (opt_10))
	%r2795 = load %CPointer, %CPointer* %regQ_86
	%r2796 = bitcast %CPointer %r2795 to %Objptr
	store %Objptr %r2796, %Objptr* %regP_0
	; <Frontier>  = CPointer_add (<Frontier>, 0x10)
	%r2797 = load %Pointer, %Pointer* %frontier
	%r2799 = ptrtoint %Pointer %r2797 to %uintptr_t
	%r2800 = add %uintptr_t %r2799, 16
	%r2798 = inttoptr %uintptr_t %r2800 to %Pointer
	store %Pointer %r2798, %Pointer* %frontier
	; OW32 (RP(0): Objptr (opt_10), 0): Word32  = 0x0
	%r2801 = load %Objptr, %Objptr* %regP_0
	%r2802 = getelementptr inbounds i8, %Objptr %r2801, i32 0
	%r2803 = bitcast %Objptr %r2802 to %Word32*
	store %Word32 0, %Word32* %r2803
	; Goto L_700
	br label %L_700

L_1106:
	; RW32(1): Word32  = OW32 (<GCState>, 68): Word32
	%r2804 = bitcast %struct.GC_state* @gcState to %Pointer
	%r2805 = getelementptr inbounds i8, %Pointer %r2804, i32 68
	%r2806 = bitcast %Pointer %r2805 to %Word32*
	%r2807 = load %Word32, %Word32* %r2806
	store %Word32 %r2807, %Word32* %regW32_1
	; RW32(3): Word32  = Word32_equal (RW32(1): Word32, 0x0)
	%r2808 = load %Word32, %Word32* %regW32_1
	%r2810 = icmp eq %Word32 %r2808, 0
	%r2809 = zext i1 %r2810 to %Word32
	store %Word32 %r2809, %Word32* %regW32_3
	; switch {test = RW32(3): Word32, default = None, cases = ((0x0, L_1107), (0x1, L_1108))}
	%r2811 = load %Word32, %Word32* %regW32_3
	%r2812 = trunc %Word32 %r2811 to i1
	br i1 %r2812, label %L_1108, label %L_1107

L_1105:
	; Goto L_1087
	br label %L_1087

L_1104:
	; Goto L_703
	br label %L_703

L_1103:
	; RW8(0): Word8  = XW8 (SQ(8): CPointer, 0x0, 1, 0): Word8
	%r2813 = load %Pointer, %Pointer* %stackTop
	%r2814 = getelementptr inbounds i8, %Pointer %r2813, i32 8
	%r2815 = bitcast %Pointer %r2814 to %CPointer*
	%r2816 = load %CPointer, %CPointer* %r2815
	%r2817 = mul nsw %Word64 0, 1
	%r2818 = add nsw %Word64 %r2817, 0
	%r2819 = getelementptr inbounds i8, %CPointer %r2816, %Word64 %r2818
	%r2820 = bitcast %CPointer %r2819 to %Word8*
	%r2821 = load %Word8, %Word8* %r2820
	store %Word8 %r2821, %Word8* %regW8_0
	; XW8 (SP(56): Objptr (opt_11), RW64(0): Word64, 1, 0): Word8  = RW8(0): Word8
	%r2822 = load %Word8, %Word8* %regW8_0
	%r2823 = load %Pointer, %Pointer* %stackTop
	%r2824 = getelementptr inbounds i8, %Pointer %r2823, i32 56
	%r2825 = bitcast %Pointer %r2824 to %Objptr*
	%r2826 = load %Objptr, %Objptr* %r2825
	%r2827 = load %Word64, %Word64* %regW64_0
	%r2828 = mul nsw %Word64 %r2827, 1
	%r2829 = add nsw %Word64 %r2828, 0
	%r2830 = getelementptr inbounds i8, %Objptr %r2826, %Word64 %r2829
	%r2831 = bitcast %Objptr %r2830 to %Word8*
	store %Word8 %r2822, %Word8* %r2831
	; RW64(1): Word64  = Word64_add (RW64(0): Word64, 0x1)
	%r2832 = load %Word64, %Word64* %regW64_0
	%r2833 = add %Word64 %r2832, 1
	store %Word64 %r2833, %Word64* %regW64_1
	; RW64(0): Word64  = RW64(1): Word64
	%r2834 = load %Word64, %Word64* %regW64_1
	store %Word64 %r2834, %Word64* %regW64_0
	; Goto loop_39
	br label %loop_39

L_1102:
	; RW64(1): Word64  = WordS32_extdToWord64 (RW32(1): Word32)
	%r2835 = load %Word32, %Word32* %regW32_1
	%r2836 = sext %Word32 %r2835 to %Word64
	store %Word64 %r2836, %Word64* %regW64_1
	; RW8(0): Word8  = XW8 (SQ(8): CPointer, RW64(1): Word64, 1, 0): Word8
	%r2837 = load %Pointer, %Pointer* %stackTop
	%r2838 = getelementptr inbounds i8, %Pointer %r2837, i32 8
	%r2839 = bitcast %Pointer %r2838 to %CPointer*
	%r2840 = load %CPointer, %CPointer* %r2839
	%r2841 = load %Word64, %Word64* %regW64_1
	%r2842 = mul nsw %Word64 %r2841, 1
	%r2843 = add nsw %Word64 %r2842, 0
	%r2844 = getelementptr inbounds i8, %CPointer %r2840, %Word64 %r2843
	%r2845 = bitcast %CPointer %r2844 to %Word8*
	%r2846 = load %Word8, %Word8* %r2845
	store %Word8 %r2846, %Word8* %regW8_0
	; Goto L_1101
	br label %L_1101

L_1101:
	; XW8 (SP(64): Objptr (opt_11), RW64(0): Word64, 1, 0): Word8  = RW8(0): Word8
	%r2847 = load %Word8, %Word8* %regW8_0
	%r2848 = load %Pointer, %Pointer* %stackTop
	%r2849 = getelementptr inbounds i8, %Pointer %r2848, i32 64
	%r2850 = bitcast %Pointer %r2849 to %Objptr*
	%r2851 = load %Objptr, %Objptr* %r2850
	%r2852 = load %Word64, %Word64* %regW64_0
	%r2853 = mul nsw %Word64 %r2852, 1
	%r2854 = add nsw %Word64 %r2853, 0
	%r2855 = getelementptr inbounds i8, %Objptr %r2851, %Word64 %r2854
	%r2856 = bitcast %Objptr %r2855 to %Word8*
	store %Word8 %r2847, %Word8* %r2856
	; RW64(1): Word64  = Word64_add (RW64(0): Word64, 0x1)
	%r2857 = load %Word64, %Word64* %regW64_0
	%r2858 = add %Word64 %r2857, 1
	store %Word64 %r2858, %Word64* %regW64_1
	; RW64(0): Word64  = RW64(1): Word64
	%r2859 = load %Word64, %Word64* %regW64_1
	store %Word64 %r2859, %Word64* %regW64_0
	; Goto loop_40
	br label %loop_40

L_1100:
	; RW8(0): Word8  = 0x30
	store %Word8 48, %Word8* %regW8_0
	; Goto L_1101
	br label %L_1101

L_1099:
	; RW32(0): Word32  = WordS32_lt (RW32(1): Word32, SW32(4): Word32)
	%r2860 = load %Word32, %Word32* %regW32_1
	%r2861 = load %Pointer, %Pointer* %stackTop
	%r2862 = getelementptr inbounds i8, %Pointer %r2861, i32 4
	%r2863 = bitcast %Pointer %r2862 to %Word32*
	%r2864 = load %Word32, %Word32* %r2863
	%r2866 = icmp slt %Word32 %r2860, %r2864
	%r2865 = zext i1 %r2866 to %Word32
	store %Word32 %r2865, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_1100), (0x1, L_1102))}
	%r2867 = load %Word32, %Word32* %regW32_0
	%r2868 = trunc %Word32 %r2867 to i1
	br i1 %r2868, label %L_1102, label %L_1100

L_1098:
	; RW32(0): Word32  = WordU64_extdToWord32 (RW64(0): Word64)
	%r2869 = load %Word64, %Word64* %regW64_0
	%r2870 = trunc %Word64 %r2869 to %Word32
	store %Word32 %r2870, %Word32* %regW32_0
	; Arith {prim = WordS32_addCheck, args = (RW32(0): Word32, 0x1), dst = RW32(1): Word32, overflow = L_712, success = L_1099}
	%r2871 = load %Word32, %Word32* %regW32_0
	%r2872 = call {%Word32, i1} @llvm.sadd.with.overflow.i32(%Word32 %r2871, %Word32 1)
	%r2873 = extractvalue {%Word32, i1} %r2872, 0
	%r2874 = extractvalue {%Word32, i1} %r2872, 1
	store %Word32 %r2873, %Word32* %regW32_1
	br i1 %r2874, label %L_712, label %L_1099

L_1097:
	; Push(-80)
	%r2875 = load %Pointer, %Pointer* %stackTop
	%r2876 = getelementptr inbounds i8, %Pointer %r2875, i32 -80
	store %Pointer %r2876, %Pointer* %stackTop
	; Goto L_710
	br label %L_710

L_1096:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 150}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_1097}
	; GetOperands
	%r2877 = bitcast %struct.GC_state* @gcState to %Pointer
	%r2878 = load %Pointer, %Pointer* %stackTop
	%r2879 = getelementptr inbounds i8, %Pointer %r2878, i32 72
	%r2880 = bitcast %Pointer %r2879 to %uintptr_t*
	store %uintptr_t 150, %uintptr_t* %r2880
	; Push(80)
	%r2881 = load %Pointer, %Pointer* %stackTop
	%r2882 = getelementptr inbounds i8, %Pointer %r2881, i32 80
	store %Pointer %r2882, %Pointer* %stackTop
	; FlushFrontier
	%r2883 = bitcast %struct.GC_state* @gcState to %Pointer
	%r2884 = getelementptr inbounds i8, %Pointer %r2883, i32 0
	%r2885 = bitcast %Pointer %r2884 to %Pointer*
	%r2886 = load %Pointer, %Pointer* %frontier
	store %Pointer %r2886, %Pointer* %r2885
	; FlushStackTop
	%r2887 = bitcast %struct.GC_state* @gcState to %Pointer
	%r2888 = getelementptr inbounds i8, %Pointer %r2887, i32 16
	%r2889 = bitcast %Pointer %r2888 to %Pointer*
	%r2890 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r2890, %Pointer* %r2889
	; Call
	call void @GC_collect(%Pointer %r2877, %Word64 0, %Word32 0)
	; CacheFrontier
	%r2891 = bitcast %struct.GC_state* @gcState to %Pointer
	%r2892 = getelementptr inbounds i8, %Pointer %r2891, i32 0
	%r2893 = bitcast %Pointer %r2892 to %Pointer*
	%r2894 = load %Pointer, %Pointer* %r2893
	store %Pointer %r2894, %Pointer* %frontier
	; CacheStackTop
	%r2895 = bitcast %struct.GC_state* @gcState to %Pointer
	%r2896 = getelementptr inbounds i8, %Pointer %r2895, i32 16
	%r2897 = bitcast %Pointer %r2896 to %Pointer*
	%r2898 = load %Pointer, %Pointer* %r2897
	store %Pointer %r2898, %Pointer* %stackTop
	br label %L_1097

L_1095:
	; SP(0): Objptr (opt_3)  = glob {index = 140, isRoot = true, ty = Objptr (opt_3)}
	%r2899 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 140
	%r2900 = load %Objptr, %Objptr* %r2899
	%r2901 = load %Pointer, %Pointer* %stackTop
	%r2902 = getelementptr inbounds i8, %Pointer %r2901, i32 0
	%r2903 = bitcast %Pointer %r2902 to %Objptr*
	store %Objptr %r2900, %Objptr* %r2903
	; SW32(64): Word32  = RW32(1): Word32
	%r2904 = load %Word32, %Word32* %regW32_1
	%r2905 = load %Pointer, %Pointer* %stackTop
	%r2906 = getelementptr inbounds i8, %Pointer %r2905, i32 64
	%r2907 = bitcast %Pointer %r2906 to %Word32*
	store %Word32 %r2904, %Word32* %r2907
	; Goto L_715
	br label %L_715

L_1094:
	; Arith {prim = Word32_negCheck, args = (RW32(0): Word32), dst = RW32(1): Word32, overflow = L_712, success = L_1095}
	%r2908 = load %Word32, %Word32* %regW32_0
	%r2909 = call {%Word32, i1} @llvm.ssub.with.overflow.i32(%Word32 0, %Word32 %r2908)
	%r2910 = extractvalue {%Word32, i1} %r2909, 0
	%r2911 = extractvalue {%Word32, i1} %r2909, 1
	store %Word32 %r2910, %Word32* %regW32_1
	br i1 %r2911, label %L_712, label %L_1095

L_1093:
	; Goto L_1087
	br label %L_1087

L_1092:
	; XW8 (RP(0): Objptr (opt_11), RW64(0): Word64, 1, 0): Word8  = 0x0
	%r2912 = load %Objptr, %Objptr* %regP_0
	%r2913 = load %Word64, %Word64* %regW64_0
	%r2914 = mul nsw %Word64 %r2913, 1
	%r2915 = add nsw %Word64 %r2914, 0
	%r2916 = getelementptr inbounds i8, %Objptr %r2912, %Word64 %r2915
	%r2917 = bitcast %Objptr %r2916 to %Word8*
	store %Word8 0, %Word8* %r2917
	; RW64(1): Word64  = Word64_add (RW64(0): Word64, 0x1)
	%r2918 = load %Word64, %Word64* %regW64_0
	%r2919 = add %Word64 %r2918, 1
	store %Word64 %r2919, %Word64* %regW64_1
	; RW64(0): Word64  = RW64(1): Word64
	%r2920 = load %Word64, %Word64* %regW64_1
	store %Word64 %r2920, %Word64* %regW64_0
	; Goto loop_54
	br label %loop_54

L_1091:
	; SP(16): Objptr (opt_11)  = RP(0): Objptr (opt_11)
	%r2921 = load %Objptr, %Objptr* %regP_0
	%r2922 = load %Pointer, %Pointer* %stackTop
	%r2923 = getelementptr inbounds i8, %Pointer %r2922, i32 16
	%r2924 = bitcast %Pointer %r2923 to %Objptr*
	store %Objptr %r2921, %Objptr* %r2924
	; Goto L_718
	br label %L_718

loop_54:
	; RW32(0): Word32  = WordS64_lt (RW64(0): Word64, 0x21)
	%r2925 = load %Word64, %Word64* %regW64_0
	%r2927 = icmp slt %Word64 %r2925, 33
	%r2926 = zext i1 %r2927 to %Word32
	store %Word32 %r2926, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_1091), (0x1, L_1092))}
	%r2928 = load %Word32, %Word32* %regW32_0
	%r2929 = trunc %Word32 %r2928 to i1
	br i1 %r2929, label %L_1092, label %L_1091

L_1090:
	; Push(-88)
	%r2930 = load %Pointer, %Pointer* %stackTop
	%r2931 = getelementptr inbounds i8, %Pointer %r2930, i32 -88
	store %Pointer %r2931, %Pointer* %stackTop
	%r2932 = load %Objptr, %Objptr* @CReturnP
	store %Objptr %r2932, %Objptr* %regP_0
	; RW64(0): Word64  = 0x0
	store %Word64 0, %Word64* %regW64_0
	; Goto loop_54
	br label %loop_54

L_1089:
	; RW32(0): Word32  = Word32_add (OW32 (<GCState>, 68): Word32, 0xFFFFFFFF)
	%r2933 = bitcast %struct.GC_state* @gcState to %Pointer
	%r2934 = getelementptr inbounds i8, %Pointer %r2933, i32 68
	%r2935 = bitcast %Pointer %r2934 to %Word32*
	%r2936 = load %Word32, %Word32* %r2935
	%r2937 = add %Word32 %r2936, 4294967295
	store %Word32 %r2937, %Word32* %regW32_0
	; OW32 (<GCState>, 68): Word32  = RW32(0): Word32
	%r2938 = load %Word32, %Word32* %regW32_0
	%r2939 = bitcast %struct.GC_state* @gcState to %Pointer
	%r2940 = getelementptr inbounds i8, %Pointer %r2939, i32 68
	%r2941 = bitcast %Pointer %r2940 to %Word32*
	store %Word32 %r2938, %Word32* %r2941
	; CCall {args = (<GCState>, 0x0, 0x21, 0x17), frameInfo = Some {frameLayoutsIndex = 149}, func = {args = (GCState, Word64, Word64, Word64), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int64, Word64), res = Some Objptr}, return = Objptr (opt_11), symbolScope = private, target = GC_arrayAllocate}, return = Some L_1090}
	; GetOperands
	%r2942 = bitcast %struct.GC_state* @gcState to %Pointer
	%r2943 = load %Pointer, %Pointer* %stackTop
	%r2944 = getelementptr inbounds i8, %Pointer %r2943, i32 80
	%r2945 = bitcast %Pointer %r2944 to %uintptr_t*
	store %uintptr_t 149, %uintptr_t* %r2945
	; Push(88)
	%r2946 = load %Pointer, %Pointer* %stackTop
	%r2947 = getelementptr inbounds i8, %Pointer %r2946, i32 88
	store %Pointer %r2947, %Pointer* %stackTop
	; FlushFrontier
	%r2948 = bitcast %struct.GC_state* @gcState to %Pointer
	%r2949 = getelementptr inbounds i8, %Pointer %r2948, i32 0
	%r2950 = bitcast %Pointer %r2949 to %Pointer*
	%r2951 = load %Pointer, %Pointer* %frontier
	store %Pointer %r2951, %Pointer* %r2950
	; FlushStackTop
	%r2952 = bitcast %struct.GC_state* @gcState to %Pointer
	%r2953 = getelementptr inbounds i8, %Pointer %r2952, i32 16
	%r2954 = bitcast %Pointer %r2953 to %Pointer*
	%r2955 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r2955, %Pointer* %r2954
	; Call
	%r2956 = call %Objptr @GC_arrayAllocate(%Pointer %r2942, %Word64 0, %Word64 33, %Word64 23)
	store %Objptr %r2956, %Objptr* @CReturnP
	; CacheFrontier
	%r2957 = bitcast %struct.GC_state* @gcState to %Pointer
	%r2958 = getelementptr inbounds i8, %Pointer %r2957, i32 0
	%r2959 = bitcast %Pointer %r2958 to %Pointer*
	%r2960 = load %Pointer, %Pointer* %r2959
	store %Pointer %r2960, %Pointer* %frontier
	; CacheStackTop
	%r2961 = bitcast %struct.GC_state* @gcState to %Pointer
	%r2962 = getelementptr inbounds i8, %Pointer %r2961, i32 16
	%r2963 = bitcast %Pointer %r2962 to %Pointer*
	%r2964 = load %Pointer, %Pointer* %r2963
	store %Pointer %r2964, %Pointer* %stackTop
	br label %L_1090

L_1088:
	; RW32(0): Word32  = OW32 (<GCState>, 68): Word32
	%r2965 = bitcast %struct.GC_state* @gcState to %Pointer
	%r2966 = getelementptr inbounds i8, %Pointer %r2965, i32 68
	%r2967 = bitcast %Pointer %r2966 to %Word32*
	%r2968 = load %Word32, %Word32* %r2967
	store %Word32 %r2968, %Word32* %regW32_0
	; RW32(1): Word32  = Word32_equal (RW32(0): Word32, 0x0)
	%r2969 = load %Word32, %Word32* %regW32_0
	%r2971 = icmp eq %Word32 %r2969, 0
	%r2970 = zext i1 %r2971 to %Word32
	store %Word32 %r2970, %Word32* %regW32_1
	; switch {test = RW32(1): Word32, default = None, cases = ((0x0, L_1089), (0x1, L_1093))}
	%r2972 = load %Word32, %Word32* %regW32_1
	%r2973 = trunc %Word32 %r2972 to i1
	br i1 %r2973, label %L_1093, label %L_1089

L_1087:
	; glob {index = 0, isRoot = false, ty = Objptr (opt_34, opt_33, opt_32, opt_31)}  = Cast (glob {index = 9, isRoot = true, ty = Objptr (opt_31)}, Objptr (opt_34, opt_33, opt_32, opt_31))
	%r2974 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 9
	%r2975 = load %Objptr, %Objptr* %r2974
	%r2976 = bitcast %Objptr %r2975 to %Objptr
	%r2977 = getelementptr inbounds [1 x %Objptr], [1 x %Objptr]* @globalObjptrNonRoot, i32 0, i32 0
	store %Objptr %r2976, %Objptr* %r2977
	; Raise
	%r2978 = bitcast %struct.GC_state* @gcState to %Pointer
	%r2979 = getelementptr inbounds i8, %Pointer %r2978, i32 1616
	%r2980 = bitcast %Pointer %r2979 to %Pointer*
	%r2981 = load %Pointer, %Pointer* %r2980
	%r2982 = bitcast %struct.GC_state* @gcState to %Pointer
	%r2983 = getelementptr inbounds i8, %Pointer %r2982, i32 32
	%r2984 = bitcast %Pointer %r2983 to i32*
	%r2985 = load i32, i32* %r2984
	%r2986 = getelementptr inbounds i8, %Pointer %r2981, i32 %r2985
	store %Pointer %r2986, %Pointer* %stackTop
	%r2987 = load %Pointer, %Pointer* %stackTop
	%r2988 = getelementptr inbounds i8, %Pointer %r2987, i32 -8
	%r2989 = bitcast %Pointer %r2988 to %uintptr_t*
	%r2990 = load %uintptr_t, %uintptr_t* %r2989
	store %uintptr_t %r2990, %uintptr_t* %l_nextFun
	br label %top

L_1086:
	; Goto L_1087
	br label %L_1087

L_1085:
	; RW32(1): Word32  = 0x20
	store %Word32 32, %Word32* %regW32_1
	; RW32(2): Word32  = SW32(64): Word32
	%r2991 = load %Pointer, %Pointer* %stackTop
	%r2992 = getelementptr inbounds i8, %Pointer %r2991, i32 64
	%r2993 = bitcast %Pointer %r2992 to %Word32*
	%r2994 = load %Word32, %Word32* %r2993
	store %Word32 %r2994, %Word32* %regW32_2
	; Goto loop_41
	br label %loop_41

L_1084:
	; XW8 (SP(16): Objptr (opt_11), RW64(0): Word64, 1, 0): Word8  = 0x7E
	%r2995 = load %Pointer, %Pointer* %stackTop
	%r2996 = getelementptr inbounds i8, %Pointer %r2995, i32 16
	%r2997 = bitcast %Pointer %r2996 to %Objptr*
	%r2998 = load %Objptr, %Objptr* %r2997
	%r2999 = load %Word64, %Word64* %regW64_0
	%r3000 = mul nsw %Word64 %r2999, 1
	%r3001 = add nsw %Word64 %r3000, 0
	%r3002 = getelementptr inbounds i8, %Objptr %r2998, %Word64 %r3001
	%r3003 = bitcast %Objptr %r3002 to %Word8*
	store %Word8 126, %Word8* %r3003
	; Goto L_735
	br label %L_735

L_1083:
	; Goto L_721
	br label %L_721

L_1082:
	; RW64(0): Word64  = WordS32_extdToWord64 (RW32(0): Word32)
	%r3004 = load %Word32, %Word32* %regW32_0
	%r3005 = sext %Word32 %r3004 to %Word64
	store %Word64 %r3005, %Word64* %regW64_0
	; RW32(1): Word32  = WordU64_lt (RW64(0): Word64, RW64(1): Word64)
	%r3006 = load %Word64, %Word64* %regW64_0
	%r3007 = load %Word64, %Word64* %regW64_1
	%r3009 = icmp ult %Word64 %r3006, %r3007
	%r3008 = zext i1 %r3009 to %Word32
	store %Word32 %r3008, %Word32* %regW32_1
	; switch {test = RW32(1): Word32, default = None, cases = ((0x0, L_1083), (0x1, L_1084))}
	%r3010 = load %Word32, %Word32* %regW32_1
	%r3011 = trunc %Word32 %r3010 to i1
	br i1 %r3011, label %L_1084, label %L_1083

L_1081:
	; Arith {prim = WordS32_subCheck, args = (RW32(1): Word32, 0x1), dst = RW32(0): Word32, overflow = L_729, success = L_1082}
	%r3012 = load %Word32, %Word32* %regW32_1
	%r3013 = call {%Word32, i1} @llvm.ssub.with.overflow.i32(%Word32 %r3012, %Word32 1)
	%r3014 = extractvalue {%Word32, i1} %r3013, 0
	%r3015 = extractvalue {%Word32, i1} %r3013, 1
	store %Word32 %r3014, %Word32* %regW32_0
	br i1 %r3015, label %L_729, label %L_1082

L_1080:
	; Goto L_721
	br label %L_721

L_1079:
	; SP(96): Objptr (opt_11)  = glob {index = 22, isRoot = true, ty = Objptr (opt_11)}
	%r3016 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 22
	%r3017 = load %Objptr, %Objptr* %r3016
	%r3018 = load %Pointer, %Pointer* %stackTop
	%r3019 = getelementptr inbounds i8, %Pointer %r3018, i32 96
	%r3020 = bitcast %Pointer %r3019 to %Objptr*
	store %Objptr %r3017, %Objptr* %r3020
	; Goto L_join_10
	br label %L_join_10

L_1078:
	; Push(-112)
	%r3021 = load %Pointer, %Pointer* %stackTop
	%r3022 = getelementptr inbounds i8, %Pointer %r3021, i32 -112
	store %Pointer %r3022, %Pointer* %stackTop
	; Goto L_1076
	br label %L_1076

L_1077:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 148}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_1078}
	; GetOperands
	%r3023 = bitcast %struct.GC_state* @gcState to %Pointer
	%r3024 = load %Pointer, %Pointer* %stackTop
	%r3025 = getelementptr inbounds i8, %Pointer %r3024, i32 104
	%r3026 = bitcast %Pointer %r3025 to %uintptr_t*
	store %uintptr_t 148, %uintptr_t* %r3026
	; Push(112)
	%r3027 = load %Pointer, %Pointer* %stackTop
	%r3028 = getelementptr inbounds i8, %Pointer %r3027, i32 112
	store %Pointer %r3028, %Pointer* %stackTop
	; FlushFrontier
	%r3029 = bitcast %struct.GC_state* @gcState to %Pointer
	%r3030 = getelementptr inbounds i8, %Pointer %r3029, i32 0
	%r3031 = bitcast %Pointer %r3030 to %Pointer*
	%r3032 = load %Pointer, %Pointer* %frontier
	store %Pointer %r3032, %Pointer* %r3031
	; FlushStackTop
	%r3033 = bitcast %struct.GC_state* @gcState to %Pointer
	%r3034 = getelementptr inbounds i8, %Pointer %r3033, i32 16
	%r3035 = bitcast %Pointer %r3034 to %Pointer*
	%r3036 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r3036, %Pointer* %r3035
	; Call
	call void @GC_collect(%Pointer %r3023, %Word64 0, %Word32 0)
	; CacheFrontier
	%r3037 = bitcast %struct.GC_state* @gcState to %Pointer
	%r3038 = getelementptr inbounds i8, %Pointer %r3037, i32 0
	%r3039 = bitcast %Pointer %r3038 to %Pointer*
	%r3040 = load %Pointer, %Pointer* %r3039
	store %Pointer %r3040, %Pointer* %frontier
	; CacheStackTop
	%r3041 = bitcast %struct.GC_state* @gcState to %Pointer
	%r3042 = getelementptr inbounds i8, %Pointer %r3041, i32 16
	%r3043 = bitcast %Pointer %r3042 to %Pointer*
	%r3044 = load %Pointer, %Pointer* %r3043
	store %Pointer %r3044, %Pointer* %stackTop
	br label %L_1078

L_1076:
	; Goto L_742
	br label %L_742

L_1075:
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r3045 = bitcast %struct.GC_state* @gcState to %Pointer
	%r3046 = getelementptr inbounds i8, %Pointer %r3045, i32 8
	%r3047 = bitcast %Pointer %r3046 to %CPointer*
	%r3048 = load %CPointer, %CPointer* %r3047
	%r3049 = load %Pointer, %Pointer* %frontier
	%r3051 = icmp ult %Pointer %r3048, %r3049
	%r3050 = zext i1 %r3051 to %Word32
	store %Word32 %r3050, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_1076), (0x1, L_1077))}
	%r3052 = load %Word32, %Word32* %regW32_0
	%r3053 = trunc %Word32 %r3052 to i1
	br i1 %r3053, label %L_1077, label %L_1076

L_1074:
	; RW64(2): Word64  = Word64_add (RW64(1): Word64, SW64(80): Word64)
	%r3054 = load %Word64, %Word64* %regW64_1
	%r3055 = load %Pointer, %Pointer* %stackTop
	%r3056 = getelementptr inbounds i8, %Pointer %r3055, i32 80
	%r3057 = bitcast %Pointer %r3056 to %Word64*
	%r3058 = load %Word64, %Word64* %r3057
	%r3059 = add %Word64 %r3054, %r3058
	store %Word64 %r3059, %Word64* %regW64_2
	; RW8(0): Word8  = XW8 (SP(16): Objptr (opt_11), RW64(2): Word64, 1, 0): Word8
	%r3060 = load %Pointer, %Pointer* %stackTop
	%r3061 = getelementptr inbounds i8, %Pointer %r3060, i32 16
	%r3062 = bitcast %Pointer %r3061 to %Objptr*
	%r3063 = load %Objptr, %Objptr* %r3062
	%r3064 = load %Word64, %Word64* %regW64_2
	%r3065 = mul nsw %Word64 %r3064, 1
	%r3066 = add nsw %Word64 %r3065, 0
	%r3067 = getelementptr inbounds i8, %Objptr %r3063, %Word64 %r3066
	%r3068 = bitcast %Objptr %r3067 to %Word8*
	%r3069 = load %Word8, %Word8* %r3068
	store %Word8 %r3069, %Word8* %regW8_0
	; XW8 (SP(96): Objptr (opt_11), RW64(1): Word64, 1, 0): Word8  = RW8(0): Word8
	%r3070 = load %Word8, %Word8* %regW8_0
	%r3071 = load %Pointer, %Pointer* %stackTop
	%r3072 = getelementptr inbounds i8, %Pointer %r3071, i32 96
	%r3073 = bitcast %Pointer %r3072 to %Objptr*
	%r3074 = load %Objptr, %Objptr* %r3073
	%r3075 = load %Word64, %Word64* %regW64_1
	%r3076 = mul nsw %Word64 %r3075, 1
	%r3077 = add nsw %Word64 %r3076, 0
	%r3078 = getelementptr inbounds i8, %Objptr %r3074, %Word64 %r3077
	%r3079 = bitcast %Objptr %r3078 to %Word8*
	store %Word8 %r3070, %Word8* %r3079
	; RW64(3): Word64  = Word64_add (RW64(1): Word64, 0x1)
	%r3080 = load %Word64, %Word64* %regW64_1
	%r3081 = add %Word64 %r3080, 1
	store %Word64 %r3081, %Word64* %regW64_3
	; RW64(1): Word64  = RW64(3): Word64
	%r3082 = load %Word64, %Word64* %regW64_3
	store %Word64 %r3082, %Word64* %regW64_1
	; Goto loop_53
	br label %loop_53

loop_53:
	; RW32(0): Word32  = WordS64_lt (RW64(0): Word64, RW64(1): Word64)
	%r3083 = load %Word64, %Word64* %regW64_0
	%r3084 = load %Word64, %Word64* %regW64_1
	%r3086 = icmp slt %Word64 %r3083, %r3084
	%r3085 = zext i1 %r3086 to %Word32
	store %Word32 %r3085, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_1074), (0x1, L_1075))}
	%r3087 = load %Word32, %Word32* %regW32_0
	%r3088 = trunc %Word32 %r3087 to i1
	br i1 %r3088, label %L_1075, label %L_1074

L_1073:
	; RW64(0): Word64  = Word64_sub (SW64(88): Word64, 0x1)
	%r3089 = load %Pointer, %Pointer* %stackTop
	%r3090 = getelementptr inbounds i8, %Pointer %r3089, i32 88
	%r3091 = bitcast %Pointer %r3090 to %Word64*
	%r3092 = load %Word64, %Word64* %r3091
	%r3093 = sub %Word64 %r3092, 1
	store %Word64 %r3093, %Word64* %regW64_0
	; RW64(1): Word64  = 0x0
	store %Word64 0, %Word64* %regW64_1
	; Goto loop_53
	br label %loop_53

L_1072:
	; Push(-112)
	%r3094 = load %Pointer, %Pointer* %stackTop
	%r3095 = getelementptr inbounds i8, %Pointer %r3094, i32 -112
	store %Pointer %r3095, %Pointer* %stackTop
	; Goto L_740
	br label %L_740

L_1071:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 147}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_1072}
	; GetOperands
	%r3096 = bitcast %struct.GC_state* @gcState to %Pointer
	%r3097 = load %Pointer, %Pointer* %stackTop
	%r3098 = getelementptr inbounds i8, %Pointer %r3097, i32 104
	%r3099 = bitcast %Pointer %r3098 to %uintptr_t*
	store %uintptr_t 147, %uintptr_t* %r3099
	; Push(112)
	%r3100 = load %Pointer, %Pointer* %stackTop
	%r3101 = getelementptr inbounds i8, %Pointer %r3100, i32 112
	store %Pointer %r3101, %Pointer* %stackTop
	; FlushFrontier
	%r3102 = bitcast %struct.GC_state* @gcState to %Pointer
	%r3103 = getelementptr inbounds i8, %Pointer %r3102, i32 0
	%r3104 = bitcast %Pointer %r3103 to %Pointer*
	%r3105 = load %Pointer, %Pointer* %frontier
	store %Pointer %r3105, %Pointer* %r3104
	; FlushStackTop
	%r3106 = bitcast %struct.GC_state* @gcState to %Pointer
	%r3107 = getelementptr inbounds i8, %Pointer %r3106, i32 16
	%r3108 = bitcast %Pointer %r3107 to %Pointer*
	%r3109 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r3109, %Pointer* %r3108
	; Call
	call void @GC_collect(%Pointer %r3096, %Word64 0, %Word32 0)
	; CacheFrontier
	%r3110 = bitcast %struct.GC_state* @gcState to %Pointer
	%r3111 = getelementptr inbounds i8, %Pointer %r3110, i32 0
	%r3112 = bitcast %Pointer %r3111 to %Pointer*
	%r3113 = load %Pointer, %Pointer* %r3112
	store %Pointer %r3113, %Pointer* %frontier
	; CacheStackTop
	%r3114 = bitcast %struct.GC_state* @gcState to %Pointer
	%r3115 = getelementptr inbounds i8, %Pointer %r3114, i32 16
	%r3116 = bitcast %Pointer %r3115 to %Pointer*
	%r3117 = load %Pointer, %Pointer* %r3116
	store %Pointer %r3117, %Pointer* %stackTop
	br label %L_1072

L_1070:
	; Goto L_744
	br label %L_744

L_1069:
	; Push(-72)
	%r3118 = load %Pointer, %Pointer* %stackTop
	%r3119 = getelementptr inbounds i8, %Pointer %r3118, i32 -72
	store %Pointer %r3119, %Pointer* %stackTop
	; Goto L_746
	br label %L_746

L_1068:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 146}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_1069}
	; GetOperands
	%r3120 = bitcast %struct.GC_state* @gcState to %Pointer
	%r3121 = load %Pointer, %Pointer* %stackTop
	%r3122 = getelementptr inbounds i8, %Pointer %r3121, i32 64
	%r3123 = bitcast %Pointer %r3122 to %uintptr_t*
	store %uintptr_t 146, %uintptr_t* %r3123
	; Push(72)
	%r3124 = load %Pointer, %Pointer* %stackTop
	%r3125 = getelementptr inbounds i8, %Pointer %r3124, i32 72
	store %Pointer %r3125, %Pointer* %stackTop
	; FlushFrontier
	%r3126 = bitcast %struct.GC_state* @gcState to %Pointer
	%r3127 = getelementptr inbounds i8, %Pointer %r3126, i32 0
	%r3128 = bitcast %Pointer %r3127 to %Pointer*
	%r3129 = load %Pointer, %Pointer* %frontier
	store %Pointer %r3129, %Pointer* %r3128
	; FlushStackTop
	%r3130 = bitcast %struct.GC_state* @gcState to %Pointer
	%r3131 = getelementptr inbounds i8, %Pointer %r3130, i32 16
	%r3132 = bitcast %Pointer %r3131 to %Pointer*
	%r3133 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r3133, %Pointer* %r3132
	; Call
	call void @GC_collect(%Pointer %r3120, %Word64 0, %Word32 0)
	; CacheFrontier
	%r3134 = bitcast %struct.GC_state* @gcState to %Pointer
	%r3135 = getelementptr inbounds i8, %Pointer %r3134, i32 0
	%r3136 = bitcast %Pointer %r3135 to %Pointer*
	%r3137 = load %Pointer, %Pointer* %r3136
	store %Pointer %r3137, %Pointer* %frontier
	; CacheStackTop
	%r3138 = bitcast %struct.GC_state* @gcState to %Pointer
	%r3139 = getelementptr inbounds i8, %Pointer %r3138, i32 16
	%r3140 = bitcast %Pointer %r3139 to %Pointer*
	%r3141 = load %Pointer, %Pointer* %r3140
	store %Pointer %r3141, %Pointer* %stackTop
	br label %L_1069

L_1067:
	; SW64(16): Word64  = 0x0
	%r3142 = load %Pointer, %Pointer* %stackTop
	%r3143 = getelementptr inbounds i8, %Pointer %r3142, i32 16
	%r3144 = bitcast %Pointer %r3143 to %Word64*
	store %Word64 0, %Word64* %r3144
	; Goto L_750
	br label %L_750

L_1066:
	; SP(16): Objptr (opt_3)  = SP(0): Objptr (opt_3)
	%r3145 = load %Pointer, %Pointer* %stackTop
	%r3146 = getelementptr inbounds i8, %Pointer %r3145, i32 0
	%r3147 = bitcast %Pointer %r3146 to %Objptr*
	%r3148 = load %Objptr, %Objptr* %r3147
	%r3149 = load %Pointer, %Pointer* %stackTop
	%r3150 = getelementptr inbounds i8, %Pointer %r3149, i32 16
	%r3151 = bitcast %Pointer %r3150 to %Objptr*
	store %Objptr %r3148, %Objptr* %r3151
	; Goto L_757
	br label %L_757

L_1065:
	; Goto L_752
	br label %L_752

L_1064:
	; RW32(0): Word32  = Word64_equal (SW64(48): Word64, SW64(8): Word64)
	%r3152 = load %Pointer, %Pointer* %stackTop
	%r3153 = getelementptr inbounds i8, %Pointer %r3152, i32 48
	%r3154 = bitcast %Pointer %r3153 to %Word64*
	%r3155 = load %Word64, %Word64* %r3154
	%r3156 = load %Pointer, %Pointer* %stackTop
	%r3157 = getelementptr inbounds i8, %Pointer %r3156, i32 8
	%r3158 = bitcast %Pointer %r3157 to %Word64*
	%r3159 = load %Word64, %Word64* %r3158
	%r3161 = icmp eq %Word64 %r3155, %r3159
	%r3160 = zext i1 %r3161 to %Word32
	store %Word32 %r3160, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_1065), (0x1, L_1066))}
	%r3162 = load %Word32, %Word32* %regW32_0
	%r3163 = trunc %Word32 %r3162 to i1
	br i1 %r3163, label %L_1066, label %L_1065

L_1063:
	; Goto L_826
	br label %L_826

L_1062:
	; SP(56): Objptr (opt_11)  = glob {index = 22, isRoot = true, ty = Objptr (opt_11)}
	%r3164 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 22
	%r3165 = load %Objptr, %Objptr* %r3164
	%r3166 = load %Pointer, %Pointer* %stackTop
	%r3167 = getelementptr inbounds i8, %Pointer %r3166, i32 56
	%r3168 = bitcast %Pointer %r3167 to %Objptr*
	store %Objptr %r3165, %Objptr* %r3168
	; Goto L_join_11
	br label %L_join_11

L_1061:
	; Push(-72)
	%r3169 = load %Pointer, %Pointer* %stackTop
	%r3170 = getelementptr inbounds i8, %Pointer %r3169, i32 -72
	store %Pointer %r3170, %Pointer* %stackTop
	; Goto L_758
	br label %L_758

L_1060:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 145}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_1061}
	; GetOperands
	%r3171 = bitcast %struct.GC_state* @gcState to %Pointer
	%r3172 = load %Pointer, %Pointer* %stackTop
	%r3173 = getelementptr inbounds i8, %Pointer %r3172, i32 64
	%r3174 = bitcast %Pointer %r3173 to %uintptr_t*
	store %uintptr_t 145, %uintptr_t* %r3174
	; Push(72)
	%r3175 = load %Pointer, %Pointer* %stackTop
	%r3176 = getelementptr inbounds i8, %Pointer %r3175, i32 72
	store %Pointer %r3176, %Pointer* %stackTop
	; FlushFrontier
	%r3177 = bitcast %struct.GC_state* @gcState to %Pointer
	%r3178 = getelementptr inbounds i8, %Pointer %r3177, i32 0
	%r3179 = bitcast %Pointer %r3178 to %Pointer*
	%r3180 = load %Pointer, %Pointer* %frontier
	store %Pointer %r3180, %Pointer* %r3179
	; FlushStackTop
	%r3181 = bitcast %struct.GC_state* @gcState to %Pointer
	%r3182 = getelementptr inbounds i8, %Pointer %r3181, i32 16
	%r3183 = bitcast %Pointer %r3182 to %Pointer*
	%r3184 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r3184, %Pointer* %r3183
	; Call
	call void @GC_collect(%Pointer %r3171, %Word64 0, %Word32 0)
	; CacheFrontier
	%r3185 = bitcast %struct.GC_state* @gcState to %Pointer
	%r3186 = getelementptr inbounds i8, %Pointer %r3185, i32 0
	%r3187 = bitcast %Pointer %r3186 to %Pointer*
	%r3188 = load %Pointer, %Pointer* %r3187
	store %Pointer %r3188, %Pointer* %frontier
	; CacheStackTop
	%r3189 = bitcast %struct.GC_state* @gcState to %Pointer
	%r3190 = getelementptr inbounds i8, %Pointer %r3189, i32 16
	%r3191 = bitcast %Pointer %r3190 to %Pointer*
	%r3192 = load %Pointer, %Pointer* %r3191
	store %Pointer %r3192, %Pointer* %stackTop
	br label %L_1061

L_1059:
	; CW64 (<Frontier>)  = 0x59
	%r3193 = load %Pointer, %Pointer* %frontier
	%r3194 = bitcast %Pointer %r3193 to %Word64*
	store %Word64 89, %Word64* %r3194
	; RQ(85): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r3195 = load %Pointer, %Pointer* %frontier
	%r3197 = ptrtoint %Pointer %r3195 to %uintptr_t
	%r3198 = add %uintptr_t %r3197, 8
	%r3196 = inttoptr %uintptr_t %r3198 to %Pointer
	store %CPointer %r3196, %CPointer* %regQ_85
	; RP(0): Objptr (opt_44)  = Cast (RQ(85): CPointer, Objptr (opt_44))
	%r3199 = load %CPointer, %CPointer* %regQ_85
	%r3200 = bitcast %CPointer %r3199 to %Objptr
	store %Objptr %r3200, %Objptr* %regP_0
	; <Frontier>  = CPointer_add (<Frontier>, 0x10)
	%r3201 = load %Pointer, %Pointer* %frontier
	%r3203 = ptrtoint %Pointer %r3201 to %uintptr_t
	%r3204 = add %uintptr_t %r3203, 16
	%r3202 = inttoptr %uintptr_t %r3204 to %Pointer
	store %Pointer %r3202, %Pointer* %frontier
	; OP (RP(0): Objptr (opt_44), 0): Objptr (opt_44)  = SP(48): Objptr (opt_44)
	%r3205 = load %Pointer, %Pointer* %stackTop
	%r3206 = getelementptr inbounds i8, %Pointer %r3205, i32 48
	%r3207 = bitcast %Pointer %r3206 to %Objptr*
	%r3208 = load %Objptr, %Objptr* %r3207
	%r3209 = load %Objptr, %Objptr* %regP_0
	%r3210 = getelementptr inbounds i8, %Objptr %r3209, i32 0
	%r3211 = bitcast %Objptr %r3210 to %Objptr*
	store %Objptr %r3208, %Objptr* %r3211
	; SP(48): Objptr (opt_44)  = RP(0): Objptr (opt_44)
	%r3212 = load %Objptr, %Objptr* %regP_0
	%r3213 = load %Pointer, %Pointer* %stackTop
	%r3214 = getelementptr inbounds i8, %Pointer %r3213, i32 48
	%r3215 = bitcast %Pointer %r3214 to %Objptr*
	store %Objptr %r3212, %Objptr* %r3215
	; SW32(56): Word32  = RW32(0): Word32
	%r3216 = load %Word32, %Word32* %regW32_0
	%r3217 = load %Pointer, %Pointer* %stackTop
	%r3218 = getelementptr inbounds i8, %Pointer %r3217, i32 56
	%r3219 = bitcast %Pointer %r3218 to %Word32*
	store %Word32 %r3216, %Word32* %r3219
	; Goto loop_43
	br label %loop_43

L_1058:
	; RP(0): Objptr (opt_44)  = Cast (0x1, Objptr (opt_44))
	%r3220 = inttoptr %Word64 1 to %Objptr
	store %Objptr %r3220, %Objptr* %regP_0
	; Goto L_1043
	br label %L_1043

L_1057:
	; Push(-88)
	%r3221 = load %Pointer, %Pointer* %stackTop
	%r3222 = getelementptr inbounds i8, %Pointer %r3221, i32 -88
	store %Pointer %r3222, %Pointer* %stackTop
	; Goto L_1040
	br label %L_1040

L_1056:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 144}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_1057}
	; GetOperands
	%r3223 = bitcast %struct.GC_state* @gcState to %Pointer
	%r3224 = load %Pointer, %Pointer* %stackTop
	%r3225 = getelementptr inbounds i8, %Pointer %r3224, i32 80
	%r3226 = bitcast %Pointer %r3225 to %uintptr_t*
	store %uintptr_t 144, %uintptr_t* %r3226
	; Push(88)
	%r3227 = load %Pointer, %Pointer* %stackTop
	%r3228 = getelementptr inbounds i8, %Pointer %r3227, i32 88
	store %Pointer %r3228, %Pointer* %stackTop
	; FlushFrontier
	%r3229 = bitcast %struct.GC_state* @gcState to %Pointer
	%r3230 = getelementptr inbounds i8, %Pointer %r3229, i32 0
	%r3231 = bitcast %Pointer %r3230 to %Pointer*
	%r3232 = load %Pointer, %Pointer* %frontier
	store %Pointer %r3232, %Pointer* %r3231
	; FlushStackTop
	%r3233 = bitcast %struct.GC_state* @gcState to %Pointer
	%r3234 = getelementptr inbounds i8, %Pointer %r3233, i32 16
	%r3235 = bitcast %Pointer %r3234 to %Pointer*
	%r3236 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r3236, %Pointer* %r3235
	; Call
	call void @GC_collect(%Pointer %r3223, %Word64 0, %Word32 0)
	; CacheFrontier
	%r3237 = bitcast %struct.GC_state* @gcState to %Pointer
	%r3238 = getelementptr inbounds i8, %Pointer %r3237, i32 0
	%r3239 = bitcast %Pointer %r3238 to %Pointer*
	%r3240 = load %Pointer, %Pointer* %r3239
	store %Pointer %r3240, %Pointer* %frontier
	; CacheStackTop
	%r3241 = bitcast %struct.GC_state* @gcState to %Pointer
	%r3242 = getelementptr inbounds i8, %Pointer %r3241, i32 16
	%r3243 = bitcast %Pointer %r3242 to %Pointer*
	%r3244 = load %Pointer, %Pointer* %r3243
	store %Pointer %r3244, %Pointer* %stackTop
	br label %L_1057

L_1055:
	; RW32(0): Word32  = 0x0
	store %Word32 0, %Word32* %regW32_0
	; Goto L_1048
	br label %L_1048

L_1054:
	; Goto L_826
	br label %L_826

L_1053:
	; Goto L_1026
	br label %L_1026

L_1052:
	; RP(1): Objptr (opt_44)  = OP (RP(0): Objptr (opt_44), 0): Objptr (opt_44)
	%r3245 = load %Objptr, %Objptr* %regP_0
	%r3246 = getelementptr inbounds i8, %Objptr %r3245, i32 0
	%r3247 = bitcast %Objptr %r3246 to %Objptr*
	%r3248 = load %Objptr, %Objptr* %r3247
	store %Objptr %r3248, %Objptr* %regP_1
	; RW64(2): Word64  = Word64_add (RW64(1): Word64, 0x1)
	%r3249 = load %Word64, %Word64* %regW64_1
	%r3250 = add %Word64 %r3249, 1
	store %Word64 %r3250, %Word64* %regW64_2
	; RP(0): Objptr (opt_44)  = RP(1): Objptr (opt_44)
	%r3251 = load %Objptr, %Objptr* %regP_1
	store %Objptr %r3251, %Objptr* %regP_0
	; RW64(1): Word64  = RW64(2): Word64
	%r3252 = load %Word64, %Word64* %regW64_2
	store %Word64 %r3252, %Word64* %regW64_1
	; Goto loop_52
	br label %loop_52

L_1051:
	; switch {test = Cast (RP(0): Objptr (opt_44), Bits64), default = Some L_1052, cases = ((0x1, L_1053))}
	%r3253 = load %Objptr, %Objptr* %regP_0
	%r3254 = ptrtoint %Objptr %r3253 to %Word64
	switch %Word64 %r3254, label %L_1052 [
		%Word64 1, label %L_1053
	]

L_1050:
	; Goto L_776
	br label %L_776

loop_52:
	; RW32(0): Word32  = WordS64_lt (RW64(1): Word64, RW64(0): Word64)
	%r3255 = load %Word64, %Word64* %regW64_1
	%r3256 = load %Word64, %Word64* %regW64_0
	%r3258 = icmp slt %Word64 %r3255, %r3256
	%r3257 = zext i1 %r3258 to %Word32
	store %Word32 %r3257, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_1050), (0x1, L_1051))}
	%r3259 = load %Word32, %Word32* %regW32_0
	%r3260 = trunc %Word32 %r3259 to i1
	br i1 %r3260, label %L_1051, label %L_1050

L_1049:
	; RW64(1): Word64  = 0x0
	store %Word64 0, %Word64* %regW64_1
	; Goto loop_52
	br label %loop_52

L_1048:
	; RW64(0): Word64  = WordS32_extdToWord64 (RW32(0): Word32)
	%r3261 = load %Word32, %Word32* %regW32_0
	%r3262 = sext %Word32 %r3261 to %Word64
	store %Word64 %r3262, %Word64* %regW64_0
	; RW32(1): Word32  = WordU64_lt (0x7FFFFFFF, RW64(0): Word64)
	%r3263 = load %Word64, %Word64* %regW64_0
	%r3265 = icmp ult %Word64 2147483647, %r3263
	%r3264 = zext i1 %r3265 to %Word32
	store %Word32 %r3264, %Word32* %regW32_1
	; switch {test = RW32(1): Word32, default = None, cases = ((0x0, L_1049), (0x1, L_1054))}
	%r3266 = load %Word32, %Word32* %regW32_1
	%r3267 = trunc %Word32 %r3266 to i1
	br i1 %r3267, label %L_1054, label %L_1049

L_1047:
	; RW32(0): Word32  = RW32(1): Word32
	%r3268 = load %Word32, %Word32* %regW32_1
	store %Word32 %r3268, %Word32* %regW32_0
	; Goto L_1048
	br label %L_1048

L_1046:
	; RP(2): Objptr (opt_44)  = OP (RP(1): Objptr (opt_44), 0): Objptr (opt_44)
	%r3269 = load %Objptr, %Objptr* %regP_1
	%r3270 = getelementptr inbounds i8, %Objptr %r3269, i32 0
	%r3271 = bitcast %Objptr %r3270 to %Objptr*
	%r3272 = load %Objptr, %Objptr* %r3271
	store %Objptr %r3272, %Objptr* %regP_2
	; RP(1): Objptr (opt_44)  = RP(2): Objptr (opt_44)
	%r3273 = load %Objptr, %Objptr* %regP_2
	store %Objptr %r3273, %Objptr* %regP_1
	; RW32(0): Word32  = RW32(1): Word32
	%r3274 = load %Word32, %Word32* %regW32_1
	store %Word32 %r3274, %Word32* %regW32_0
	; Goto L_1045
	br label %L_1045

L_1045:
	; RW32(1): Word32  = Word32_add (RW32(0): Word32, 0x1)
	%r3275 = load %Word32, %Word32* %regW32_0
	%r3276 = add %Word32 %r3275, 1
	store %Word32 %r3276, %Word32* %regW32_1
	; switch {test = Cast (RP(1): Objptr (opt_44), Bits64), default = Some L_1046, cases = ((0x1, L_1047))}
	%r3277 = load %Objptr, %Objptr* %regP_1
	%r3278 = ptrtoint %Objptr %r3277 to %Word64
	switch %Word64 %r3278, label %L_1046 [
		%Word64 1, label %L_1047
	]

L_1044:
	; RP(1): Objptr (opt_44)  = OP (RP(0): Objptr (opt_44), 0): Objptr (opt_44)
	%r3279 = load %Objptr, %Objptr* %regP_0
	%r3280 = getelementptr inbounds i8, %Objptr %r3279, i32 0
	%r3281 = bitcast %Objptr %r3280 to %Objptr*
	%r3282 = load %Objptr, %Objptr* %r3281
	store %Objptr %r3282, %Objptr* %regP_1
	; RW32(0): Word32  = 0x0
	store %Word32 0, %Word32* %regW32_0
	; Goto L_1045
	br label %L_1045

L_1043:
	; switch {test = Cast (RP(0): Objptr (opt_44), Bits64), default = Some L_1044, cases = ((0x1, L_1055))}
	%r3283 = load %Objptr, %Objptr* %regP_0
	%r3284 = ptrtoint %Objptr %r3283 to %Word64
	switch %Word64 %r3284, label %L_1044 [
		%Word64 1, label %L_1055
	]

L_1042:
	; Goto L_1043
	br label %L_1043

L_1041:
	; RP(1): Objptr (opt_44)  = OP (SP(24): Objptr (opt_44), 0): Objptr (opt_44)
	%r3285 = load %Pointer, %Pointer* %stackTop
	%r3286 = getelementptr inbounds i8, %Pointer %r3285, i32 24
	%r3287 = bitcast %Pointer %r3286 to %Objptr*
	%r3288 = load %Objptr, %Objptr* %r3287
	%r3289 = getelementptr inbounds i8, %Objptr %r3288, i32 0
	%r3290 = bitcast %Objptr %r3289 to %Objptr*
	%r3291 = load %Objptr, %Objptr* %r3290
	store %Objptr %r3291, %Objptr* %regP_1
	; SP(24): Objptr (opt_44)  = RP(1): Objptr (opt_44)
	%r3292 = load %Objptr, %Objptr* %regP_1
	%r3293 = load %Pointer, %Pointer* %stackTop
	%r3294 = getelementptr inbounds i8, %Pointer %r3293, i32 24
	%r3295 = bitcast %Pointer %r3294 to %Objptr*
	store %Objptr %r3292, %Objptr* %r3295
	; SP(48): Objptr (opt_44)  = RP(0): Objptr (opt_44)
	%r3296 = load %Objptr, %Objptr* %regP_0
	%r3297 = load %Pointer, %Pointer* %stackTop
	%r3298 = getelementptr inbounds i8, %Pointer %r3297, i32 48
	%r3299 = bitcast %Pointer %r3298 to %Objptr*
	store %Objptr %r3296, %Objptr* %r3299
	; Goto L_1039
	br label %L_1039

L_1040:
	; CW64 (<Frontier>)  = 0x59
	%r3300 = load %Pointer, %Pointer* %frontier
	%r3301 = bitcast %Pointer %r3300 to %Word64*
	store %Word64 89, %Word64* %r3301
	; RQ(84): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r3302 = load %Pointer, %Pointer* %frontier
	%r3304 = ptrtoint %Pointer %r3302 to %uintptr_t
	%r3305 = add %uintptr_t %r3304, 8
	%r3303 = inttoptr %uintptr_t %r3305 to %Pointer
	store %CPointer %r3303, %CPointer* %regQ_84
	; RP(0): Objptr (opt_44)  = Cast (RQ(84): CPointer, Objptr (opt_44))
	%r3306 = load %CPointer, %CPointer* %regQ_84
	%r3307 = bitcast %CPointer %r3306 to %Objptr
	store %Objptr %r3307, %Objptr* %regP_0
	; <Frontier>  = CPointer_add (<Frontier>, 0x10)
	%r3308 = load %Pointer, %Pointer* %frontier
	%r3310 = ptrtoint %Pointer %r3308 to %uintptr_t
	%r3311 = add %uintptr_t %r3310, 16
	%r3309 = inttoptr %uintptr_t %r3311 to %Pointer
	store %Pointer %r3309, %Pointer* %frontier
	; OP (RP(0): Objptr (opt_44), 0): Objptr (opt_44)  = SP(48): Objptr (opt_44)
	%r3312 = load %Pointer, %Pointer* %stackTop
	%r3313 = getelementptr inbounds i8, %Pointer %r3312, i32 48
	%r3314 = bitcast %Pointer %r3313 to %Objptr*
	%r3315 = load %Objptr, %Objptr* %r3314
	%r3316 = load %Objptr, %Objptr* %regP_0
	%r3317 = getelementptr inbounds i8, %Objptr %r3316, i32 0
	%r3318 = bitcast %Objptr %r3317 to %Objptr*
	store %Objptr %r3315, %Objptr* %r3318
	; switch {test = Cast (SP(24): Objptr (opt_44), Bits64), default = Some L_1041, cases = ((0x1, L_1042))}
	%r3319 = load %Pointer, %Pointer* %stackTop
	%r3320 = getelementptr inbounds i8, %Pointer %r3319, i32 24
	%r3321 = bitcast %Pointer %r3320 to %Objptr*
	%r3322 = load %Objptr, %Objptr* %r3321
	%r3323 = ptrtoint %Objptr %r3322 to %Word64
	switch %Word64 %r3323, label %L_1041 [
		%Word64 1, label %L_1042
	]

L_1039:
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r3324 = bitcast %struct.GC_state* @gcState to %Pointer
	%r3325 = getelementptr inbounds i8, %Pointer %r3324, i32 8
	%r3326 = bitcast %Pointer %r3325 to %CPointer*
	%r3327 = load %CPointer, %CPointer* %r3326
	%r3328 = load %Pointer, %Pointer* %frontier
	%r3330 = icmp ult %Pointer %r3327, %r3328
	%r3329 = zext i1 %r3330 to %Word32
	store %Word32 %r3329, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_1040), (0x1, L_1056))}
	%r3331 = load %Word32, %Word32* %regW32_0
	%r3332 = trunc %Word32 %r3331 to i1
	br i1 %r3332, label %L_1056, label %L_1040

L_1038:
	; RP(0): Objptr (opt_44)  = OP (SP(48): Objptr (opt_44), 0): Objptr (opt_44)
	%r3333 = load %Pointer, %Pointer* %stackTop
	%r3334 = getelementptr inbounds i8, %Pointer %r3333, i32 48
	%r3335 = bitcast %Pointer %r3334 to %Objptr*
	%r3336 = load %Objptr, %Objptr* %r3335
	%r3337 = getelementptr inbounds i8, %Objptr %r3336, i32 0
	%r3338 = bitcast %Objptr %r3337 to %Objptr*
	%r3339 = load %Objptr, %Objptr* %r3338
	store %Objptr %r3339, %Objptr* %regP_0
	; SP(24): Objptr (opt_44)  = RP(0): Objptr (opt_44)
	%r3340 = load %Objptr, %Objptr* %regP_0
	%r3341 = load %Pointer, %Pointer* %stackTop
	%r3342 = getelementptr inbounds i8, %Pointer %r3341, i32 24
	%r3343 = bitcast %Pointer %r3342 to %Objptr*
	store %Objptr %r3340, %Objptr* %r3343
	; SP(48): Objptr (opt_44)  = Cast (0x1, Objptr (opt_44))
	%r3344 = inttoptr %Word64 1 to %Objptr
	%r3345 = load %Pointer, %Pointer* %stackTop
	%r3346 = getelementptr inbounds i8, %Pointer %r3345, i32 48
	%r3347 = bitcast %Pointer %r3346 to %Objptr*
	store %Objptr %r3344, %Objptr* %r3347
	; Goto L_1039
	br label %L_1039

L_1037:
	; switch {test = Cast (SP(48): Objptr (opt_44), Bits64), default = Some L_1038, cases = ((0x1, L_1058))}
	%r3348 = load %Pointer, %Pointer* %stackTop
	%r3349 = getelementptr inbounds i8, %Pointer %r3348, i32 48
	%r3350 = bitcast %Pointer %r3349 to %Objptr*
	%r3351 = load %Objptr, %Objptr* %r3350
	%r3352 = ptrtoint %Objptr %r3351 to %Word64
	switch %Word64 %r3352, label %L_1038 [
		%Word64 1, label %L_1058
	]

L_1036:
	; RW32(1): Word32  = XW32 (SP(24): Objptr (opt_24), RW64(1): Word64, 4, 0): Word32
	%r3353 = load %Pointer, %Pointer* %stackTop
	%r3354 = getelementptr inbounds i8, %Pointer %r3353, i32 24
	%r3355 = bitcast %Pointer %r3354 to %Objptr*
	%r3356 = load %Objptr, %Objptr* %r3355
	%r3357 = load %Word64, %Word64* %regW64_1
	%r3358 = mul nsw %Word64 %r3357, 4
	%r3359 = add nsw %Word64 %r3358, 0
	%r3360 = getelementptr inbounds i8, %Objptr %r3356, %Word64 %r3359
	%r3361 = bitcast %Objptr %r3360 to %Word32*
	%r3362 = load %Word32, %Word32* %r3361
	store %Word32 %r3362, %Word32* %regW32_1
	; switch {test = RW32(1): Word32, default = None, cases = ((0x0, L_1037), (0x1, L_1059))}
	%r3363 = load %Word32, %Word32* %regW32_1
	%r3364 = trunc %Word32 %r3363 to i1
	br i1 %r3364, label %L_1059, label %L_1037

L_1035:
	; Goto L_781
	br label %L_781

L_1034:
	; RW8(0): Word8  = XW8 (SP(16): Objptr (opt_3), RW64(0): Word64, 1, 0): Word8
	%r3365 = load %Pointer, %Pointer* %stackTop
	%r3366 = getelementptr inbounds i8, %Pointer %r3365, i32 16
	%r3367 = bitcast %Pointer %r3366 to %Objptr*
	%r3368 = load %Objptr, %Objptr* %r3367
	%r3369 = load %Word64, %Word64* %regW64_0
	%r3370 = mul nsw %Word64 %r3369, 1
	%r3371 = add nsw %Word64 %r3370, 0
	%r3372 = getelementptr inbounds i8, %Objptr %r3368, %Word64 %r3371
	%r3373 = bitcast %Objptr %r3372 to %Word8*
	%r3374 = load %Word8, %Word8* %r3373
	store %Word8 %r3374, %Word8* %regW8_0
	; RW32(0): Word32  = Word32_add (SW32(56): Word32, 0x1)
	%r3375 = load %Pointer, %Pointer* %stackTop
	%r3376 = getelementptr inbounds i8, %Pointer %r3375, i32 56
	%r3377 = bitcast %Pointer %r3376 to %Word32*
	%r3378 = load %Word32, %Word32* %r3377
	%r3379 = add %Word32 %r3378, 1
	store %Word32 %r3379, %Word32* %regW32_0
	; RW64(1): Word64  = WordU8_extdToWord64 (RW8(0): Word8)
	%r3380 = load %Word8, %Word8* %regW8_0
	%r3381 = zext %Word8 %r3380 to %Word64
	store %Word64 %r3381, %Word64* %regW64_1
	; RW32(1): Word32  = WordU64_lt (RW64(1): Word64, 0x100)
	%r3382 = load %Word64, %Word64* %regW64_1
	%r3384 = icmp ult %Word64 %r3382, 256
	%r3383 = zext i1 %r3384 to %Word32
	store %Word32 %r3383, %Word32* %regW32_1
	; switch {test = RW32(1): Word32, default = None, cases = ((0x0, L_1035), (0x1, L_1036))}
	%r3385 = load %Word32, %Word32* %regW32_1
	%r3386 = trunc %Word32 %r3385 to i1
	br i1 %r3386, label %L_1036, label %L_1035

L_1033:
	; Goto L_781
	br label %L_781

L_1032:
	; RW64(0): Word64  = WordS32_extdToWord64 (SW32(56): Word32)
	%r3387 = load %Pointer, %Pointer* %stackTop
	%r3388 = getelementptr inbounds i8, %Pointer %r3387, i32 56
	%r3389 = bitcast %Pointer %r3388 to %Word32*
	%r3390 = load %Word32, %Word32* %r3389
	%r3391 = sext %Word32 %r3390 to %Word64
	store %Word64 %r3391, %Word64* %regW64_0
	; RW32(0): Word32  = WordU64_lt (RW64(0): Word64, SW64(64): Word64)
	%r3392 = load %Word64, %Word64* %regW64_0
	%r3393 = load %Pointer, %Pointer* %stackTop
	%r3394 = getelementptr inbounds i8, %Pointer %r3393, i32 64
	%r3395 = bitcast %Pointer %r3394 to %Word64*
	%r3396 = load %Word64, %Word64* %r3395
	%r3398 = icmp ult %Word64 %r3392, %r3396
	%r3397 = zext i1 %r3398 to %Word32
	store %Word32 %r3397, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_1033), (0x1, L_1034))}
	%r3399 = load %Word32, %Word32* %regW32_0
	%r3400 = trunc %Word32 %r3399 to i1
	br i1 %r3400, label %L_1034, label %L_1033

L_1031:
	; RP(0): Objptr (opt_44)  = Cast (0x1, Objptr (opt_44))
	%r3401 = inttoptr %Word64 1 to %Objptr
	store %Objptr %r3401, %Objptr* %regP_0
	; Goto L_768
	br label %L_768

L_1030:
	; Push(-88)
	%r3402 = load %Pointer, %Pointer* %stackTop
	%r3403 = getelementptr inbounds i8, %Pointer %r3402, i32 -88
	store %Pointer %r3403, %Pointer* %stackTop
	; Goto L_765
	br label %L_765

L_1029:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 143}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_1030}
	; GetOperands
	%r3404 = bitcast %struct.GC_state* @gcState to %Pointer
	%r3405 = load %Pointer, %Pointer* %stackTop
	%r3406 = getelementptr inbounds i8, %Pointer %r3405, i32 80
	%r3407 = bitcast %Pointer %r3406 to %uintptr_t*
	store %uintptr_t 143, %uintptr_t* %r3407
	; Push(88)
	%r3408 = load %Pointer, %Pointer* %stackTop
	%r3409 = getelementptr inbounds i8, %Pointer %r3408, i32 88
	store %Pointer %r3409, %Pointer* %stackTop
	; FlushFrontier
	%r3410 = bitcast %struct.GC_state* @gcState to %Pointer
	%r3411 = getelementptr inbounds i8, %Pointer %r3410, i32 0
	%r3412 = bitcast %Pointer %r3411 to %Pointer*
	%r3413 = load %Pointer, %Pointer* %frontier
	store %Pointer %r3413, %Pointer* %r3412
	; FlushStackTop
	%r3414 = bitcast %struct.GC_state* @gcState to %Pointer
	%r3415 = getelementptr inbounds i8, %Pointer %r3414, i32 16
	%r3416 = bitcast %Pointer %r3415 to %Pointer*
	%r3417 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r3417, %Pointer* %r3416
	; Call
	call void @GC_collect(%Pointer %r3404, %Word64 0, %Word32 0)
	; CacheFrontier
	%r3418 = bitcast %struct.GC_state* @gcState to %Pointer
	%r3419 = getelementptr inbounds i8, %Pointer %r3418, i32 0
	%r3420 = bitcast %Pointer %r3419 to %Pointer*
	%r3421 = load %Pointer, %Pointer* %r3420
	store %Pointer %r3421, %Pointer* %frontier
	; CacheStackTop
	%r3422 = bitcast %struct.GC_state* @gcState to %Pointer
	%r3423 = getelementptr inbounds i8, %Pointer %r3422, i32 16
	%r3424 = bitcast %Pointer %r3423 to %Pointer*
	%r3425 = load %Pointer, %Pointer* %r3424
	store %Pointer %r3425, %Pointer* %stackTop
	br label %L_1030

L_1028:
	; RW32(0): Word32  = 0x0
	store %Word32 0, %Word32* %regW32_0
	; Goto L_773
	br label %L_773

L_1027:
	; Goto L_826
	br label %L_826

L_1026:
	; glob {index = 0, isRoot = false, ty = Objptr (opt_34, opt_33, opt_32, opt_31)}  = Cast (glob {index = 6, isRoot = true, ty = Objptr (opt_32)}, Objptr (opt_34, opt_33, opt_32, opt_31))
	%r3426 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 6
	%r3427 = load %Objptr, %Objptr* %r3426
	%r3428 = bitcast %Objptr %r3427 to %Objptr
	%r3429 = getelementptr inbounds [1 x %Objptr], [1 x %Objptr]* @globalObjptrNonRoot, i32 0, i32 0
	store %Objptr %r3428, %Objptr* %r3429
	; Raise
	%r3430 = bitcast %struct.GC_state* @gcState to %Pointer
	%r3431 = getelementptr inbounds i8, %Pointer %r3430, i32 1616
	%r3432 = bitcast %Pointer %r3431 to %Pointer*
	%r3433 = load %Pointer, %Pointer* %r3432
	%r3434 = bitcast %struct.GC_state* @gcState to %Pointer
	%r3435 = getelementptr inbounds i8, %Pointer %r3434, i32 32
	%r3436 = bitcast %Pointer %r3435 to i32*
	%r3437 = load i32, i32* %r3436
	%r3438 = getelementptr inbounds i8, %Pointer %r3433, i32 %r3437
	store %Pointer %r3438, %Pointer* %stackTop
	%r3439 = load %Pointer, %Pointer* %stackTop
	%r3440 = getelementptr inbounds i8, %Pointer %r3439, i32 -8
	%r3441 = bitcast %Pointer %r3440 to %uintptr_t*
	%r3442 = load %uintptr_t, %uintptr_t* %r3441
	store %uintptr_t %r3442, %uintptr_t* %l_nextFun
	br label %top

L_1025:
	; Goto L_1026
	br label %L_1026

L_1024:
	; RP(1): Objptr (opt_44)  = OP (RP(0): Objptr (opt_44), 0): Objptr (opt_44)
	%r3443 = load %Objptr, %Objptr* %regP_0
	%r3444 = getelementptr inbounds i8, %Objptr %r3443, i32 0
	%r3445 = bitcast %Objptr %r3444 to %Objptr*
	%r3446 = load %Objptr, %Objptr* %r3445
	store %Objptr %r3446, %Objptr* %regP_1
	; RW64(2): Word64  = Word64_add (RW64(1): Word64, 0x1)
	%r3447 = load %Word64, %Word64* %regW64_1
	%r3448 = add %Word64 %r3447, 1
	store %Word64 %r3448, %Word64* %regW64_2
	; RP(0): Objptr (opt_44)  = RP(1): Objptr (opt_44)
	%r3449 = load %Objptr, %Objptr* %regP_1
	store %Objptr %r3449, %Objptr* %regP_0
	; RW64(1): Word64  = RW64(2): Word64
	%r3450 = load %Word64, %Word64* %regW64_2
	store %Word64 %r3450, %Word64* %regW64_1
	; Goto loop_44
	br label %loop_44

L_1023:
	; switch {test = Cast (RP(0): Objptr (opt_44), Bits64), default = Some L_1024, cases = ((0x1, L_1025))}
	%r3451 = load %Objptr, %Objptr* %regP_0
	%r3452 = ptrtoint %Objptr %r3451 to %Word64
	switch %Word64 %r3452, label %L_1024 [
		%Word64 1, label %L_1025
	]

L_1022:
	; RW32(1): Word32  = RW32(2): Word32
	%r3453 = load %Word32, %Word32* %regW32_2
	store %Word32 %r3453, %Word32* %regW32_1
	; Goto L_1012
	br label %L_1012

L_1021:
	; Arith {prim = WordS32_subCheck, args = (RW32(3): Word32, RW32(1): Word32), dst = RW32(0): Word32, overflow = L_712, success = L_1022}
	%r3454 = load %Word32, %Word32* %regW32_3
	%r3455 = load %Word32, %Word32* %regW32_1
	%r3456 = call {%Word32, i1} @llvm.ssub.with.overflow.i32(%Word32 %r3454, %Word32 %r3455)
	%r3457 = extractvalue {%Word32, i1} %r3456, 0
	%r3458 = extractvalue {%Word32, i1} %r3456, 1
	store %Word32 %r3457, %Word32* %regW32_0
	br i1 %r3458, label %L_712, label %L_1022

L_1020:
	; RW64(1): [Word1, Word32, Bits31]  = WordU64_rshift (Cast (RW64(0): [Word1, Bits63], [Word1, Word32, Bits31]), 0x1)
	%r3459 = load %Word64, %Word64* %regW64_0
	%r3460 = bitcast %Word64 %r3459 to %Word64
	%r3461 = zext %Word32 1 to %Word64
	%r3462 = lshr %Word64 %r3460, %r3461
	store %Word64 %r3462, %Word64* %regW64_1
	; RW32(1): Word32  = WordU64_extdToWord32 (RW64(1): [Word1, Word32, Bits31])
	%r3463 = load %Word64, %Word64* %regW64_1
	%r3464 = trunc %Word64 %r3463 to %Word32
	store %Word32 %r3464, %Word32* %regW32_1
	; Arith {prim = WordS32_mulCheck, args = (RW32(0): Word32, 0xA), dst = RW32(3): Word32, overflow = L_712, success = L_1021}
	%r3465 = load %Word32, %Word32* %regW32_0
	%r3466 = call {%Word32, i1} @llvm.smul.with.overflow.i32(%Word32 %r3465, %Word32 10)
	%r3467 = extractvalue {%Word32, i1} %r3466, 0
	%r3468 = extractvalue {%Word32, i1} %r3466, 1
	store %Word32 %r3467, %Word32* %regW32_3
	br i1 %r3468, label %L_712, label %L_1021

L_1019:
	; SW32(24): Word32  = RW32(0): Word32
	%r3469 = load %Word32, %Word32* %regW32_0
	%r3470 = load %Pointer, %Pointer* %stackTop
	%r3471 = getelementptr inbounds i8, %Pointer %r3470, i32 24
	%r3472 = bitcast %Pointer %r3471 to %Word32*
	store %Word32 %r3469, %Word32* %r3472
	; Goto L_797
	br label %L_797

L_1018:
	; RW64(0): [Word1, Bits63]  = XW64 (SP(32): Objptr (opt_23), RW64(1): Word64, 8, 0): [Word1, Bits63]
	%r3473 = load %Pointer, %Pointer* %stackTop
	%r3474 = getelementptr inbounds i8, %Pointer %r3473, i32 32
	%r3475 = bitcast %Pointer %r3474 to %Objptr*
	%r3476 = load %Objptr, %Objptr* %r3475
	%r3477 = load %Word64, %Word64* %regW64_1
	%r3478 = mul nsw %Word64 %r3477, 8
	%r3479 = add nsw %Word64 %r3478, 0
	%r3480 = getelementptr inbounds i8, %Objptr %r3476, %Word64 %r3479
	%r3481 = bitcast %Objptr %r3480 to %Word64*
	%r3482 = load %Word64, %Word64* %r3481
	store %Word64 %r3482, %Word64* %regW64_0
	; RW64(2): [Word1, Bits63]  = Word64_andb (RW64(0): [Word1, Bits63], 0x1)
	%r3483 = load %Word64, %Word64* %regW64_0
	%r3484 = and %Word64 %r3483, 1
	store %Word64 %r3484, %Word64* %regW64_2
	; switch {test = RW64(2): [Word1, Bits63], default = None, cases = ((0x0, L_1019), (0x1, L_1020))}
	%r3485 = load %Word64, %Word64* %regW64_2
	%r3486 = trunc %Word64 %r3485 to i1
	br i1 %r3486, label %L_1020, label %L_1019

L_1017:
	; Goto L_781
	br label %L_781

L_1016:
	; RW8(0): Word8  = XW8 (SP(16): Objptr (opt_3), RW64(0): Word64, 1, 0): Word8
	%r3487 = load %Pointer, %Pointer* %stackTop
	%r3488 = getelementptr inbounds i8, %Pointer %r3487, i32 16
	%r3489 = bitcast %Pointer %r3488 to %Objptr*
	%r3490 = load %Objptr, %Objptr* %r3489
	%r3491 = load %Word64, %Word64* %regW64_0
	%r3492 = mul nsw %Word64 %r3491, 1
	%r3493 = add nsw %Word64 %r3492, 0
	%r3494 = getelementptr inbounds i8, %Objptr %r3490, %Word64 %r3493
	%r3495 = bitcast %Objptr %r3494 to %Word8*
	%r3496 = load %Word8, %Word8* %r3495
	store %Word8 %r3496, %Word8* %regW8_0
	; RW32(2): Word32  = Word32_add (RW32(1): Word32, 0x1)
	%r3497 = load %Word32, %Word32* %regW32_1
	%r3498 = add %Word32 %r3497, 1
	store %Word32 %r3498, %Word32* %regW32_2
	; RW64(1): Word64  = WordU8_extdToWord64 (RW8(0): Word8)
	%r3499 = load %Word8, %Word8* %regW8_0
	%r3500 = zext %Word8 %r3499 to %Word64
	store %Word64 %r3500, %Word64* %regW64_1
	; RW32(3): Word32  = WordU64_lt (RW64(1): Word64, 0x100)
	%r3501 = load %Word64, %Word64* %regW64_1
	%r3503 = icmp ult %Word64 %r3501, 256
	%r3502 = zext i1 %r3503 to %Word32
	store %Word32 %r3502, %Word32* %regW32_3
	; switch {test = RW32(3): Word32, default = None, cases = ((0x0, L_1017), (0x1, L_1018))}
	%r3504 = load %Word32, %Word32* %regW32_3
	%r3505 = trunc %Word32 %r3504 to i1
	br i1 %r3505, label %L_1018, label %L_1017

L_1015:
	; Goto L_781
	br label %L_781

L_1014:
	; RW64(0): Word64  = WordS32_extdToWord64 (RW32(1): Word32)
	%r3506 = load %Word32, %Word32* %regW32_1
	%r3507 = sext %Word32 %r3506 to %Word64
	store %Word64 %r3507, %Word64* %regW64_0
	; RW32(2): Word32  = WordU64_lt (RW64(0): Word64, SW64(64): Word64)
	%r3508 = load %Word64, %Word64* %regW64_0
	%r3509 = load %Pointer, %Pointer* %stackTop
	%r3510 = getelementptr inbounds i8, %Pointer %r3509, i32 64
	%r3511 = bitcast %Pointer %r3510 to %Word64*
	%r3512 = load %Word64, %Word64* %r3511
	%r3514 = icmp ult %Word64 %r3508, %r3512
	%r3513 = zext i1 %r3514 to %Word32
	store %Word32 %r3513, %Word32* %regW32_2
	; switch {test = RW32(2): Word32, default = None, cases = ((0x0, L_1015), (0x1, L_1016))}
	%r3515 = load %Word32, %Word32* %regW32_2
	%r3516 = trunc %Word32 %r3515 to i1
	br i1 %r3516, label %L_1016, label %L_1015

L_1013:
	; SW32(24): Word32  = RW32(0): Word32
	%r3517 = load %Word32, %Word32* %regW32_0
	%r3518 = load %Pointer, %Pointer* %stackTop
	%r3519 = getelementptr inbounds i8, %Pointer %r3518, i32 24
	%r3520 = bitcast %Pointer %r3519 to %Word32*
	store %Word32 %r3517, %Word32* %r3520
	; Goto L_797
	br label %L_797

L_1012:
	; RW32(2): Word32  = WordS32_lt (RW32(1): Word32, SW32(60): Word32)
	%r3521 = load %Word32, %Word32* %regW32_1
	%r3522 = load %Pointer, %Pointer* %stackTop
	%r3523 = getelementptr inbounds i8, %Pointer %r3522, i32 60
	%r3524 = bitcast %Pointer %r3523 to %Word32*
	%r3525 = load %Word32, %Word32* %r3524
	%r3527 = icmp slt %Word32 %r3521, %r3525
	%r3526 = zext i1 %r3527 to %Word32
	store %Word32 %r3526, %Word32* %regW32_2
	; switch {test = RW32(2): Word32, default = None, cases = ((0x0, L_1013), (0x1, L_1014))}
	%r3528 = load %Word32, %Word32* %regW32_2
	%r3529 = trunc %Word32 %r3528 to i1
	br i1 %r3529, label %L_1014, label %L_1013

L_1011:
	; RW64(1): [Word1, Word32, Bits31]  = WordU64_rshift (Cast (RW64(0): [Word1, Bits63], [Word1, Word32, Bits31]), 0x1)
	%r3530 = load %Word64, %Word64* %regW64_0
	%r3531 = bitcast %Word64 %r3530 to %Word64
	%r3532 = zext %Word32 1 to %Word64
	%r3533 = lshr %Word64 %r3531, %r3532
	store %Word64 %r3533, %Word64* %regW64_1
	; RW32(0): Word32  = WordU64_extdToWord32 (RW64(1): [Word1, Word32, Bits31])
	%r3534 = load %Word64, %Word64* %regW64_1
	%r3535 = trunc %Word64 %r3534 to %Word32
	store %Word32 %r3535, %Word32* %regW32_0
	; RW32(2): Word32  = Word32_neg (RW32(0): Word32)
	%r3536 = load %Word32, %Word32* %regW32_0
	%r3537 = sub %Word32 0, %r3536
	store %Word32 %r3537, %Word32* %regW32_2
	; RW32(0): Word32  = RW32(2): Word32
	%r3538 = load %Word32, %Word32* %regW32_2
	store %Word32 %r3538, %Word32* %regW32_0
	; Goto L_1012
	br label %L_1012

L_1010:
	; Goto L_778
	br label %L_778

L_1009:
	; RW64(0): [Word1, Bits63]  = XW64 (SP(32): Objptr (opt_23), RW64(1): Word64, 8, 0): [Word1, Bits63]
	%r3539 = load %Pointer, %Pointer* %stackTop
	%r3540 = getelementptr inbounds i8, %Pointer %r3539, i32 32
	%r3541 = bitcast %Pointer %r3540 to %Objptr*
	%r3542 = load %Objptr, %Objptr* %r3541
	%r3543 = load %Word64, %Word64* %regW64_1
	%r3544 = mul nsw %Word64 %r3543, 8
	%r3545 = add nsw %Word64 %r3544, 0
	%r3546 = getelementptr inbounds i8, %Objptr %r3542, %Word64 %r3545
	%r3547 = bitcast %Objptr %r3546 to %Word64*
	%r3548 = load %Word64, %Word64* %r3547
	store %Word64 %r3548, %Word64* %regW64_0
	; RW64(2): [Word1, Bits63]  = Word64_andb (RW64(0): [Word1, Bits63], 0x1)
	%r3549 = load %Word64, %Word64* %regW64_0
	%r3550 = and %Word64 %r3549, 1
	store %Word64 %r3550, %Word64* %regW64_2
	; switch {test = RW64(2): [Word1, Bits63], default = None, cases = ((0x0, L_1010), (0x1, L_1011))}
	%r3551 = load %Word64, %Word64* %regW64_2
	%r3552 = trunc %Word64 %r3551 to i1
	br i1 %r3552, label %L_1011, label %L_1010

L_1008:
	; Goto L_781
	br label %L_781

L_1007:
	; RW8(0): Word8  = XW8 (SP(16): Objptr (opt_3), RW64(0): Word64, 1, 0): Word8
	%r3553 = load %Pointer, %Pointer* %stackTop
	%r3554 = getelementptr inbounds i8, %Pointer %r3553, i32 16
	%r3555 = bitcast %Pointer %r3554 to %Objptr*
	%r3556 = load %Objptr, %Objptr* %r3555
	%r3557 = load %Word64, %Word64* %regW64_0
	%r3558 = mul nsw %Word64 %r3557, 1
	%r3559 = add nsw %Word64 %r3558, 0
	%r3560 = getelementptr inbounds i8, %Objptr %r3556, %Word64 %r3559
	%r3561 = bitcast %Objptr %r3560 to %Word8*
	%r3562 = load %Word8, %Word8* %r3561
	store %Word8 %r3562, %Word8* %regW8_0
	; RW32(1): Word32  = Word32_add (RW32(0): Word32, 0x1)
	%r3563 = load %Word32, %Word32* %regW32_0
	%r3564 = add %Word32 %r3563, 1
	store %Word32 %r3564, %Word32* %regW32_1
	; RW64(1): Word64  = WordU8_extdToWord64 (RW8(0): Word8)
	%r3565 = load %Word8, %Word8* %regW8_0
	%r3566 = zext %Word8 %r3565 to %Word64
	store %Word64 %r3566, %Word64* %regW64_1
	; RW32(2): Word32  = WordU64_lt (RW64(1): Word64, 0x100)
	%r3567 = load %Word64, %Word64* %regW64_1
	%r3569 = icmp ult %Word64 %r3567, 256
	%r3568 = zext i1 %r3569 to %Word32
	store %Word32 %r3568, %Word32* %regW32_2
	; switch {test = RW32(2): Word32, default = None, cases = ((0x0, L_1008), (0x1, L_1009))}
	%r3570 = load %Word32, %Word32* %regW32_2
	%r3571 = trunc %Word32 %r3570 to i1
	br i1 %r3571, label %L_1009, label %L_1008

L_1006:
	; Goto L_781
	br label %L_781

L_1005:
	; RW64(0): Word64  = WordS32_extdToWord64 (RW32(0): Word32)
	%r3572 = load %Word32, %Word32* %regW32_0
	%r3573 = sext %Word32 %r3572 to %Word64
	store %Word64 %r3573, %Word64* %regW64_0
	; RW32(1): Word32  = WordU64_lt (RW64(0): Word64, SW64(64): Word64)
	%r3574 = load %Word64, %Word64* %regW64_0
	%r3575 = load %Pointer, %Pointer* %stackTop
	%r3576 = getelementptr inbounds i8, %Pointer %r3575, i32 64
	%r3577 = bitcast %Pointer %r3576 to %Word64*
	%r3578 = load %Word64, %Word64* %r3577
	%r3580 = icmp ult %Word64 %r3574, %r3578
	%r3579 = zext i1 %r3580 to %Word32
	store %Word32 %r3579, %Word32* %regW32_1
	; switch {test = RW32(1): Word32, default = None, cases = ((0x0, L_1006), (0x1, L_1007))}
	%r3581 = load %Word32, %Word32* %regW32_1
	%r3582 = trunc %Word32 %r3581 to i1
	br i1 %r3582, label %L_1007, label %L_1006

L_1004:
	; Goto L_778
	br label %L_778

L_1003:
	; RW32(1): Word32  = WordS32_lt (RW32(0): Word32, SW32(60): Word32)
	%r3583 = load %Word32, %Word32* %regW32_0
	%r3584 = load %Pointer, %Pointer* %stackTop
	%r3585 = getelementptr inbounds i8, %Pointer %r3584, i32 60
	%r3586 = bitcast %Pointer %r3585 to %Word32*
	%r3587 = load %Word32, %Word32* %r3586
	%r3589 = icmp slt %Word32 %r3583, %r3587
	%r3588 = zext i1 %r3589 to %Word32
	store %Word32 %r3588, %Word32* %regW32_1
	; switch {test = RW32(1): Word32, default = None, cases = ((0x0, L_1004), (0x1, L_1005))}
	%r3590 = load %Word32, %Word32* %regW32_1
	%r3591 = trunc %Word32 %r3590 to i1
	br i1 %r3591, label %L_1005, label %L_1004

L_1002:
	; RW32(1): Word32  = RW32(2): Word32
	%r3592 = load %Word32, %Word32* %regW32_2
	store %Word32 %r3592, %Word32* %regW32_1
	; Goto L_992
	br label %L_992

L_1001:
	; Arith {prim = WordS32_subCheck, args = (RW32(3): Word32, RW32(1): Word32), dst = RW32(0): Word32, overflow = L_712, success = L_1002}
	%r3593 = load %Word32, %Word32* %regW32_3
	%r3594 = load %Word32, %Word32* %regW32_1
	%r3595 = call {%Word32, i1} @llvm.ssub.with.overflow.i32(%Word32 %r3593, %Word32 %r3594)
	%r3596 = extractvalue {%Word32, i1} %r3595, 0
	%r3597 = extractvalue {%Word32, i1} %r3595, 1
	store %Word32 %r3596, %Word32* %regW32_0
	br i1 %r3597, label %L_712, label %L_1002

L_1000:
	; RW64(1): [Word1, Word32, Bits31]  = WordU64_rshift (Cast (RW64(0): [Word1, Bits63], [Word1, Word32, Bits31]), 0x1)
	%r3598 = load %Word64, %Word64* %regW64_0
	%r3599 = bitcast %Word64 %r3598 to %Word64
	%r3600 = zext %Word32 1 to %Word64
	%r3601 = lshr %Word64 %r3599, %r3600
	store %Word64 %r3601, %Word64* %regW64_1
	; RW32(1): Word32  = WordU64_extdToWord32 (RW64(1): [Word1, Word32, Bits31])
	%r3602 = load %Word64, %Word64* %regW64_1
	%r3603 = trunc %Word64 %r3602 to %Word32
	store %Word32 %r3603, %Word32* %regW32_1
	; Arith {prim = WordS32_mulCheck, args = (RW32(0): Word32, 0xA), dst = RW32(3): Word32, overflow = L_712, success = L_1001}
	%r3604 = load %Word32, %Word32* %regW32_0
	%r3605 = call {%Word32, i1} @llvm.smul.with.overflow.i32(%Word32 %r3604, %Word32 10)
	%r3606 = extractvalue {%Word32, i1} %r3605, 0
	%r3607 = extractvalue {%Word32, i1} %r3605, 1
	store %Word32 %r3606, %Word32* %regW32_3
	br i1 %r3607, label %L_712, label %L_1001

L_999:
	; SW32(24): Word32  = RW32(0): Word32
	%r3608 = load %Word32, %Word32* %regW32_0
	%r3609 = load %Pointer, %Pointer* %stackTop
	%r3610 = getelementptr inbounds i8, %Pointer %r3609, i32 24
	%r3611 = bitcast %Pointer %r3610 to %Word32*
	store %Word32 %r3608, %Word32* %r3611
	; Goto L_797
	br label %L_797

L_998:
	; RW64(0): [Word1, Bits63]  = XW64 (SP(32): Objptr (opt_23), RW64(1): Word64, 8, 0): [Word1, Bits63]
	%r3612 = load %Pointer, %Pointer* %stackTop
	%r3613 = getelementptr inbounds i8, %Pointer %r3612, i32 32
	%r3614 = bitcast %Pointer %r3613 to %Objptr*
	%r3615 = load %Objptr, %Objptr* %r3614
	%r3616 = load %Word64, %Word64* %regW64_1
	%r3617 = mul nsw %Word64 %r3616, 8
	%r3618 = add nsw %Word64 %r3617, 0
	%r3619 = getelementptr inbounds i8, %Objptr %r3615, %Word64 %r3618
	%r3620 = bitcast %Objptr %r3619 to %Word64*
	%r3621 = load %Word64, %Word64* %r3620
	store %Word64 %r3621, %Word64* %regW64_0
	; RW64(2): [Word1, Bits63]  = Word64_andb (RW64(0): [Word1, Bits63], 0x1)
	%r3622 = load %Word64, %Word64* %regW64_0
	%r3623 = and %Word64 %r3622, 1
	store %Word64 %r3623, %Word64* %regW64_2
	; switch {test = RW64(2): [Word1, Bits63], default = None, cases = ((0x0, L_999), (0x1, L_1000))}
	%r3624 = load %Word64, %Word64* %regW64_2
	%r3625 = trunc %Word64 %r3624 to i1
	br i1 %r3625, label %L_1000, label %L_999

L_997:
	; Goto L_781
	br label %L_781

L_996:
	; RW8(0): Word8  = XW8 (SP(16): Objptr (opt_3), RW64(0): Word64, 1, 0): Word8
	%r3626 = load %Pointer, %Pointer* %stackTop
	%r3627 = getelementptr inbounds i8, %Pointer %r3626, i32 16
	%r3628 = bitcast %Pointer %r3627 to %Objptr*
	%r3629 = load %Objptr, %Objptr* %r3628
	%r3630 = load %Word64, %Word64* %regW64_0
	%r3631 = mul nsw %Word64 %r3630, 1
	%r3632 = add nsw %Word64 %r3631, 0
	%r3633 = getelementptr inbounds i8, %Objptr %r3629, %Word64 %r3632
	%r3634 = bitcast %Objptr %r3633 to %Word8*
	%r3635 = load %Word8, %Word8* %r3634
	store %Word8 %r3635, %Word8* %regW8_0
	; RW32(2): Word32  = Word32_add (RW32(1): Word32, 0x1)
	%r3636 = load %Word32, %Word32* %regW32_1
	%r3637 = add %Word32 %r3636, 1
	store %Word32 %r3637, %Word32* %regW32_2
	; RW64(1): Word64  = WordU8_extdToWord64 (RW8(0): Word8)
	%r3638 = load %Word8, %Word8* %regW8_0
	%r3639 = zext %Word8 %r3638 to %Word64
	store %Word64 %r3639, %Word64* %regW64_1
	; RW32(3): Word32  = WordU64_lt (RW64(1): Word64, 0x100)
	%r3640 = load %Word64, %Word64* %regW64_1
	%r3642 = icmp ult %Word64 %r3640, 256
	%r3641 = zext i1 %r3642 to %Word32
	store %Word32 %r3641, %Word32* %regW32_3
	; switch {test = RW32(3): Word32, default = None, cases = ((0x0, L_997), (0x1, L_998))}
	%r3643 = load %Word32, %Word32* %regW32_3
	%r3644 = trunc %Word32 %r3643 to i1
	br i1 %r3644, label %L_998, label %L_997

L_995:
	; Goto L_781
	br label %L_781

L_994:
	; RW64(0): Word64  = WordS32_extdToWord64 (RW32(1): Word32)
	%r3645 = load %Word32, %Word32* %regW32_1
	%r3646 = sext %Word32 %r3645 to %Word64
	store %Word64 %r3646, %Word64* %regW64_0
	; RW32(2): Word32  = WordU64_lt (RW64(0): Word64, SW64(64): Word64)
	%r3647 = load %Word64, %Word64* %regW64_0
	%r3648 = load %Pointer, %Pointer* %stackTop
	%r3649 = getelementptr inbounds i8, %Pointer %r3648, i32 64
	%r3650 = bitcast %Pointer %r3649 to %Word64*
	%r3651 = load %Word64, %Word64* %r3650
	%r3653 = icmp ult %Word64 %r3647, %r3651
	%r3652 = zext i1 %r3653 to %Word32
	store %Word32 %r3652, %Word32* %regW32_2
	; switch {test = RW32(2): Word32, default = None, cases = ((0x0, L_995), (0x1, L_996))}
	%r3654 = load %Word32, %Word32* %regW32_2
	%r3655 = trunc %Word32 %r3654 to i1
	br i1 %r3655, label %L_996, label %L_995

L_993:
	; SW32(24): Word32  = RW32(0): Word32
	%r3656 = load %Word32, %Word32* %regW32_0
	%r3657 = load %Pointer, %Pointer* %stackTop
	%r3658 = getelementptr inbounds i8, %Pointer %r3657, i32 24
	%r3659 = bitcast %Pointer %r3658 to %Word32*
	store %Word32 %r3656, %Word32* %r3659
	; Goto L_797
	br label %L_797

L_992:
	; RW32(2): Word32  = WordS32_lt (RW32(1): Word32, SW32(60): Word32)
	%r3660 = load %Word32, %Word32* %regW32_1
	%r3661 = load %Pointer, %Pointer* %stackTop
	%r3662 = getelementptr inbounds i8, %Pointer %r3661, i32 60
	%r3663 = bitcast %Pointer %r3662 to %Word32*
	%r3664 = load %Word32, %Word32* %r3663
	%r3666 = icmp slt %Word32 %r3660, %r3664
	%r3665 = zext i1 %r3666 to %Word32
	store %Word32 %r3665, %Word32* %regW32_2
	; switch {test = RW32(2): Word32, default = None, cases = ((0x0, L_993), (0x1, L_994))}
	%r3667 = load %Word32, %Word32* %regW32_2
	%r3668 = trunc %Word32 %r3667 to i1
	br i1 %r3668, label %L_994, label %L_993

L_991:
	; RW64(1): [Word1, Word32, Bits31]  = WordU64_rshift (Cast (RW64(0): [Word1, Bits63], [Word1, Word32, Bits31]), 0x1)
	%r3669 = load %Word64, %Word64* %regW64_0
	%r3670 = bitcast %Word64 %r3669 to %Word64
	%r3671 = zext %Word32 1 to %Word64
	%r3672 = lshr %Word64 %r3670, %r3671
	store %Word64 %r3672, %Word64* %regW64_1
	; RW32(0): Word32  = WordU64_extdToWord32 (RW64(1): [Word1, Word32, Bits31])
	%r3673 = load %Word64, %Word64* %regW64_1
	%r3674 = trunc %Word64 %r3673 to %Word32
	store %Word32 %r3674, %Word32* %regW32_0
	; RW32(2): Word32  = Word32_neg (RW32(0): Word32)
	%r3675 = load %Word32, %Word32* %regW32_0
	%r3676 = sub %Word32 0, %r3675
	store %Word32 %r3676, %Word32* %regW32_2
	; RW32(0): Word32  = RW32(2): Word32
	%r3677 = load %Word32, %Word32* %regW32_2
	store %Word32 %r3677, %Word32* %regW32_0
	; Goto L_992
	br label %L_992

L_990:
	; Goto L_778
	br label %L_778

L_989:
	; RW64(0): [Word1, Bits63]  = XW64 (SP(32): Objptr (opt_23), RW64(1): Word64, 8, 0): [Word1, Bits63]
	%r3678 = load %Pointer, %Pointer* %stackTop
	%r3679 = getelementptr inbounds i8, %Pointer %r3678, i32 32
	%r3680 = bitcast %Pointer %r3679 to %Objptr*
	%r3681 = load %Objptr, %Objptr* %r3680
	%r3682 = load %Word64, %Word64* %regW64_1
	%r3683 = mul nsw %Word64 %r3682, 8
	%r3684 = add nsw %Word64 %r3683, 0
	%r3685 = getelementptr inbounds i8, %Objptr %r3681, %Word64 %r3684
	%r3686 = bitcast %Objptr %r3685 to %Word64*
	%r3687 = load %Word64, %Word64* %r3686
	store %Word64 %r3687, %Word64* %regW64_0
	; RW64(2): [Word1, Bits63]  = Word64_andb (RW64(0): [Word1, Bits63], 0x1)
	%r3688 = load %Word64, %Word64* %regW64_0
	%r3689 = and %Word64 %r3688, 1
	store %Word64 %r3689, %Word64* %regW64_2
	; switch {test = RW64(2): [Word1, Bits63], default = None, cases = ((0x0, L_990), (0x1, L_991))}
	%r3690 = load %Word64, %Word64* %regW64_2
	%r3691 = trunc %Word64 %r3690 to i1
	br i1 %r3691, label %L_991, label %L_990

L_988:
	; Goto L_781
	br label %L_781

L_987:
	; RW8(0): Word8  = XW8 (SP(16): Objptr (opt_3), RW64(0): Word64, 1, 0): Word8
	%r3692 = load %Pointer, %Pointer* %stackTop
	%r3693 = getelementptr inbounds i8, %Pointer %r3692, i32 16
	%r3694 = bitcast %Pointer %r3693 to %Objptr*
	%r3695 = load %Objptr, %Objptr* %r3694
	%r3696 = load %Word64, %Word64* %regW64_0
	%r3697 = mul nsw %Word64 %r3696, 1
	%r3698 = add nsw %Word64 %r3697, 0
	%r3699 = getelementptr inbounds i8, %Objptr %r3695, %Word64 %r3698
	%r3700 = bitcast %Objptr %r3699 to %Word8*
	%r3701 = load %Word8, %Word8* %r3700
	store %Word8 %r3701, %Word8* %regW8_0
	; RW32(1): Word32  = Word32_add (RW32(0): Word32, 0x1)
	%r3702 = load %Word32, %Word32* %regW32_0
	%r3703 = add %Word32 %r3702, 1
	store %Word32 %r3703, %Word32* %regW32_1
	; RW64(1): Word64  = WordU8_extdToWord64 (RW8(0): Word8)
	%r3704 = load %Word8, %Word8* %regW8_0
	%r3705 = zext %Word8 %r3704 to %Word64
	store %Word64 %r3705, %Word64* %regW64_1
	; RW32(2): Word32  = WordU64_lt (RW64(1): Word64, 0x100)
	%r3706 = load %Word64, %Word64* %regW64_1
	%r3708 = icmp ult %Word64 %r3706, 256
	%r3707 = zext i1 %r3708 to %Word32
	store %Word32 %r3707, %Word32* %regW32_2
	; switch {test = RW32(2): Word32, default = None, cases = ((0x0, L_988), (0x1, L_989))}
	%r3709 = load %Word32, %Word32* %regW32_2
	%r3710 = trunc %Word32 %r3709 to i1
	br i1 %r3710, label %L_989, label %L_988

L_986:
	; Goto L_781
	br label %L_781

L_985:
	; RW64(0): Word64  = WordS32_extdToWord64 (RW32(0): Word32)
	%r3711 = load %Word32, %Word32* %regW32_0
	%r3712 = sext %Word32 %r3711 to %Word64
	store %Word64 %r3712, %Word64* %regW64_0
	; RW32(1): Word32  = WordU64_lt (RW64(0): Word64, SW64(64): Word64)
	%r3713 = load %Word64, %Word64* %regW64_0
	%r3714 = load %Pointer, %Pointer* %stackTop
	%r3715 = getelementptr inbounds i8, %Pointer %r3714, i32 64
	%r3716 = bitcast %Pointer %r3715 to %Word64*
	%r3717 = load %Word64, %Word64* %r3716
	%r3719 = icmp ult %Word64 %r3713, %r3717
	%r3718 = zext i1 %r3719 to %Word32
	store %Word32 %r3718, %Word32* %regW32_1
	; switch {test = RW32(1): Word32, default = None, cases = ((0x0, L_986), (0x1, L_987))}
	%r3720 = load %Word32, %Word32* %regW32_1
	%r3721 = trunc %Word32 %r3720 to i1
	br i1 %r3721, label %L_987, label %L_986

L_984:
	; Goto L_778
	br label %L_778

L_983:
	; RW32(1): Word32  = WordS32_lt (RW32(0): Word32, SW32(60): Word32)
	%r3722 = load %Word32, %Word32* %regW32_0
	%r3723 = load %Pointer, %Pointer* %stackTop
	%r3724 = getelementptr inbounds i8, %Pointer %r3723, i32 60
	%r3725 = bitcast %Pointer %r3724 to %Word32*
	%r3726 = load %Word32, %Word32* %r3725
	%r3728 = icmp slt %Word32 %r3722, %r3726
	%r3727 = zext i1 %r3728 to %Word32
	store %Word32 %r3727, %Word32* %regW32_1
	; switch {test = RW32(1): Word32, default = None, cases = ((0x0, L_984), (0x1, L_985))}
	%r3729 = load %Word32, %Word32* %regW32_1
	%r3730 = trunc %Word32 %r3729 to i1
	br i1 %r3730, label %L_985, label %L_984

L_982:
	; Goto L_784
	br label %L_784

L_981:
	; RW32(1): Word32  = RW32(2): Word32
	%r3731 = load %Word32, %Word32* %regW32_2
	store %Word32 %r3731, %Word32* %regW32_1
	; Goto L_793
	br label %L_793

L_980:
	; Arith {prim = WordS32_subCheck, args = (RW32(3): Word32, RW32(1): Word32), dst = RW32(0): Word32, overflow = L_712, success = L_981}
	%r3732 = load %Word32, %Word32* %regW32_3
	%r3733 = load %Word32, %Word32* %regW32_1
	%r3734 = call {%Word32, i1} @llvm.ssub.with.overflow.i32(%Word32 %r3732, %Word32 %r3733)
	%r3735 = extractvalue {%Word32, i1} %r3734, 0
	%r3736 = extractvalue {%Word32, i1} %r3734, 1
	store %Word32 %r3735, %Word32* %regW32_0
	br i1 %r3736, label %L_712, label %L_981

L_979:
	; RW64(1): [Word1, Word32, Bits31]  = WordU64_rshift (Cast (RW64(0): [Word1, Bits63], [Word1, Word32, Bits31]), 0x1)
	%r3737 = load %Word64, %Word64* %regW64_0
	%r3738 = bitcast %Word64 %r3737 to %Word64
	%r3739 = zext %Word32 1 to %Word64
	%r3740 = lshr %Word64 %r3738, %r3739
	store %Word64 %r3740, %Word64* %regW64_1
	; RW32(1): Word32  = WordU64_extdToWord32 (RW64(1): [Word1, Word32, Bits31])
	%r3741 = load %Word64, %Word64* %regW64_1
	%r3742 = trunc %Word64 %r3741 to %Word32
	store %Word32 %r3742, %Word32* %regW32_1
	; Arith {prim = WordS32_mulCheck, args = (RW32(0): Word32, 0xA), dst = RW32(3): Word32, overflow = L_712, success = L_980}
	%r3743 = load %Word32, %Word32* %regW32_0
	%r3744 = call {%Word32, i1} @llvm.smul.with.overflow.i32(%Word32 %r3743, %Word32 10)
	%r3745 = extractvalue {%Word32, i1} %r3744, 0
	%r3746 = extractvalue {%Word32, i1} %r3744, 1
	store %Word32 %r3745, %Word32* %regW32_3
	br i1 %r3746, label %L_712, label %L_980

L_978:
	; Goto L_795
	br label %L_795

L_977:
	; RW64(0): [Word1, Bits63]  = XW64 (SP(32): Objptr (opt_23), RW64(1): Word64, 8, 0): [Word1, Bits63]
	%r3747 = load %Pointer, %Pointer* %stackTop
	%r3748 = getelementptr inbounds i8, %Pointer %r3747, i32 32
	%r3749 = bitcast %Pointer %r3748 to %Objptr*
	%r3750 = load %Objptr, %Objptr* %r3749
	%r3751 = load %Word64, %Word64* %regW64_1
	%r3752 = mul nsw %Word64 %r3751, 8
	%r3753 = add nsw %Word64 %r3752, 0
	%r3754 = getelementptr inbounds i8, %Objptr %r3750, %Word64 %r3753
	%r3755 = bitcast %Objptr %r3754 to %Word64*
	%r3756 = load %Word64, %Word64* %r3755
	store %Word64 %r3756, %Word64* %regW64_0
	; RW64(2): [Word1, Bits63]  = Word64_andb (RW64(0): [Word1, Bits63], 0x1)
	%r3757 = load %Word64, %Word64* %regW64_0
	%r3758 = and %Word64 %r3757, 1
	store %Word64 %r3758, %Word64* %regW64_2
	; switch {test = RW64(2): [Word1, Bits63], default = None, cases = ((0x0, L_978), (0x1, L_979))}
	%r3759 = load %Word64, %Word64* %regW64_2
	%r3760 = trunc %Word64 %r3759 to i1
	br i1 %r3760, label %L_979, label %L_978

L_976:
	; Goto L_781
	br label %L_781

L_975:
	; RW8(0): Word8  = XW8 (SP(16): Objptr (opt_3), RW64(0): Word64, 1, 0): Word8
	%r3761 = load %Pointer, %Pointer* %stackTop
	%r3762 = getelementptr inbounds i8, %Pointer %r3761, i32 16
	%r3763 = bitcast %Pointer %r3762 to %Objptr*
	%r3764 = load %Objptr, %Objptr* %r3763
	%r3765 = load %Word64, %Word64* %regW64_0
	%r3766 = mul nsw %Word64 %r3765, 1
	%r3767 = add nsw %Word64 %r3766, 0
	%r3768 = getelementptr inbounds i8, %Objptr %r3764, %Word64 %r3767
	%r3769 = bitcast %Objptr %r3768 to %Word8*
	%r3770 = load %Word8, %Word8* %r3769
	store %Word8 %r3770, %Word8* %regW8_0
	; RW32(2): Word32  = Word32_add (RW32(1): Word32, 0x1)
	%r3771 = load %Word32, %Word32* %regW32_1
	%r3772 = add %Word32 %r3771, 1
	store %Word32 %r3772, %Word32* %regW32_2
	; RW64(1): Word64  = WordU8_extdToWord64 (RW8(0): Word8)
	%r3773 = load %Word8, %Word8* %regW8_0
	%r3774 = zext %Word8 %r3773 to %Word64
	store %Word64 %r3774, %Word64* %regW64_1
	; RW32(3): Word32  = WordU64_lt (RW64(1): Word64, 0x100)
	%r3775 = load %Word64, %Word64* %regW64_1
	%r3777 = icmp ult %Word64 %r3775, 256
	%r3776 = zext i1 %r3777 to %Word32
	store %Word32 %r3776, %Word32* %regW32_3
	; switch {test = RW32(3): Word32, default = None, cases = ((0x0, L_976), (0x1, L_977))}
	%r3778 = load %Word32, %Word32* %regW32_3
	%r3779 = trunc %Word32 %r3778 to i1
	br i1 %r3779, label %L_977, label %L_976

L_974:
	; Goto L_781
	br label %L_781

L_973:
	; RW64(0): Word64  = WordS32_extdToWord64 (RW32(1): Word32)
	%r3780 = load %Word32, %Word32* %regW32_1
	%r3781 = sext %Word32 %r3780 to %Word64
	store %Word64 %r3781, %Word64* %regW64_0
	; RW32(2): Word32  = WordU64_lt (RW64(0): Word64, SW64(64): Word64)
	%r3782 = load %Word64, %Word64* %regW64_0
	%r3783 = load %Pointer, %Pointer* %stackTop
	%r3784 = getelementptr inbounds i8, %Pointer %r3783, i32 64
	%r3785 = bitcast %Pointer %r3784 to %Word64*
	%r3786 = load %Word64, %Word64* %r3785
	%r3788 = icmp ult %Word64 %r3782, %r3786
	%r3787 = zext i1 %r3788 to %Word32
	store %Word32 %r3787, %Word32* %regW32_2
	; switch {test = RW32(2): Word32, default = None, cases = ((0x0, L_974), (0x1, L_975))}
	%r3789 = load %Word32, %Word32* %regW32_2
	%r3790 = trunc %Word32 %r3789 to i1
	br i1 %r3790, label %L_975, label %L_974

L_972:
	; Goto L_799
	br label %L_799

L_971:
	; RW64(1): Word64  = Word64_add (RW64(0): Word64, 0x1)
	%r3791 = load %Word64, %Word64* %regW64_0
	%r3792 = add %Word64 %r3791, 1
	store %Word64 %r3792, %Word64* %regW64_1
	; RW64(0): Word64  = RW64(1): Word64
	%r3793 = load %Word64, %Word64* %regW64_1
	store %Word64 %r3793, %Word64* %regW64_0
	; Goto loop_45
	br label %loop_45

L_970:
	; RW8(0): Word8  = XW8 (SP(0): Objptr (opt_3), RW64(0): Word64, 1, 0): Word8
	%r3794 = load %Pointer, %Pointer* %stackTop
	%r3795 = getelementptr inbounds i8, %Pointer %r3794, i32 0
	%r3796 = bitcast %Pointer %r3795 to %Objptr*
	%r3797 = load %Objptr, %Objptr* %r3796
	%r3798 = load %Word64, %Word64* %regW64_0
	%r3799 = mul nsw %Word64 %r3798, 1
	%r3800 = add nsw %Word64 %r3799, 0
	%r3801 = getelementptr inbounds i8, %Objptr %r3797, %Word64 %r3800
	%r3802 = bitcast %Objptr %r3801 to %Word8*
	%r3803 = load %Word8, %Word8* %r3802
	store %Word8 %r3803, %Word8* %regW8_0
	; RW32(0): Word32  = Word8_equal (RW8(0): Word8, 0x45)
	%r3804 = load %Word8, %Word8* %regW8_0
	%r3806 = icmp eq %Word8 %r3804, 69
	%r3805 = zext i1 %r3806 to %Word32
	store %Word32 %r3805, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_971), (0x1, L_972))}
	%r3807 = load %Word32, %Word32* %regW32_0
	%r3808 = trunc %Word32 %r3807 to i1
	br i1 %r3808, label %L_972, label %L_971

L_969:
	; SW64(32): Word64  = 0x0
	%r3809 = load %Pointer, %Pointer* %stackTop
	%r3810 = getelementptr inbounds i8, %Pointer %r3809, i32 32
	%r3811 = bitcast %Pointer %r3810 to %Word64*
	store %Word64 0, %Word64* %r3811
	; Goto L_802
	br label %L_802

L_968:
	; RW64(1): Word64  = Word64_sub (RW64(0): Word64, 0x1)
	%r3812 = load %Word64, %Word64* %regW64_0
	%r3813 = sub %Word64 %r3812, 1
	store %Word64 %r3813, %Word64* %regW64_1
	; RW64(0): Word64  = RW64(1): Word64
	%r3814 = load %Word64, %Word64* %regW64_1
	store %Word64 %r3814, %Word64* %regW64_0
	; Goto loop_46
	br label %loop_46

L_967:
	; Goto full_1
	br label %full_1

L_966:
	; Goto L_826
	br label %L_826

L_965:
	; SP(8): Objptr (opt_11)  = glob {index = 22, isRoot = true, ty = Objptr (opt_11)}
	%r3815 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 22
	%r3816 = load %Objptr, %Objptr* %r3815
	%r3817 = load %Pointer, %Pointer* %stackTop
	%r3818 = getelementptr inbounds i8, %Pointer %r3817, i32 8
	%r3819 = bitcast %Pointer %r3818 to %Objptr*
	store %Objptr %r3816, %Objptr* %r3819
	; Goto L_join_12
	br label %L_join_12

L_964:
	; Push(-64)
	%r3820 = load %Pointer, %Pointer* %stackTop
	%r3821 = getelementptr inbounds i8, %Pointer %r3820, i32 -64
	store %Pointer %r3821, %Pointer* %stackTop
	; Goto L_808
	br label %L_808

L_963:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 142}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_964}
	; GetOperands
	%r3822 = bitcast %struct.GC_state* @gcState to %Pointer
	%r3823 = load %Pointer, %Pointer* %stackTop
	%r3824 = getelementptr inbounds i8, %Pointer %r3823, i32 56
	%r3825 = bitcast %Pointer %r3824 to %uintptr_t*
	store %uintptr_t 142, %uintptr_t* %r3825
	; Push(64)
	%r3826 = load %Pointer, %Pointer* %stackTop
	%r3827 = getelementptr inbounds i8, %Pointer %r3826, i32 64
	store %Pointer %r3827, %Pointer* %stackTop
	; FlushFrontier
	%r3828 = bitcast %struct.GC_state* @gcState to %Pointer
	%r3829 = getelementptr inbounds i8, %Pointer %r3828, i32 0
	%r3830 = bitcast %Pointer %r3829 to %Pointer*
	%r3831 = load %Pointer, %Pointer* %frontier
	store %Pointer %r3831, %Pointer* %r3830
	; FlushStackTop
	%r3832 = bitcast %struct.GC_state* @gcState to %Pointer
	%r3833 = getelementptr inbounds i8, %Pointer %r3832, i32 16
	%r3834 = bitcast %Pointer %r3833 to %Pointer*
	%r3835 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r3835, %Pointer* %r3834
	; Call
	call void @GC_collect(%Pointer %r3822, %Word64 0, %Word32 0)
	; CacheFrontier
	%r3836 = bitcast %struct.GC_state* @gcState to %Pointer
	%r3837 = getelementptr inbounds i8, %Pointer %r3836, i32 0
	%r3838 = bitcast %Pointer %r3837 to %Pointer*
	%r3839 = load %Pointer, %Pointer* %r3838
	store %Pointer %r3839, %Pointer* %frontier
	; CacheStackTop
	%r3840 = bitcast %struct.GC_state* @gcState to %Pointer
	%r3841 = getelementptr inbounds i8, %Pointer %r3840, i32 16
	%r3842 = bitcast %Pointer %r3841 to %Pointer*
	%r3843 = load %Pointer, %Pointer* %r3842
	store %Pointer %r3843, %Pointer* %stackTop
	br label %L_964

L_962:
	; SP(0): Objptr (opt_3)  = glob {index = 135, isRoot = true, ty = Objptr (opt_3)}
	%r3844 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 135
	%r3845 = load %Objptr, %Objptr* %r3844
	%r3846 = load %Pointer, %Pointer* %stackTop
	%r3847 = getelementptr inbounds i8, %Pointer %r3846, i32 0
	%r3848 = bitcast %Pointer %r3847 to %Objptr*
	store %Objptr %r3845, %Objptr* %r3848
	; Goto L_840
	br label %L_840

L_961:
	; Push(-56)
	%r3849 = load %Pointer, %Pointer* %stackTop
	%r3850 = getelementptr inbounds i8, %Pointer %r3849, i32 -56
	store %Pointer %r3850, %Pointer* %stackTop
	; Goto L_821
	br label %L_821

L_960:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 141}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_961}
	; GetOperands
	%r3851 = bitcast %struct.GC_state* @gcState to %Pointer
	%r3852 = load %Pointer, %Pointer* %stackTop
	%r3853 = getelementptr inbounds i8, %Pointer %r3852, i32 48
	%r3854 = bitcast %Pointer %r3853 to %uintptr_t*
	store %uintptr_t 141, %uintptr_t* %r3854
	; Push(56)
	%r3855 = load %Pointer, %Pointer* %stackTop
	%r3856 = getelementptr inbounds i8, %Pointer %r3855, i32 56
	store %Pointer %r3856, %Pointer* %stackTop
	; FlushFrontier
	%r3857 = bitcast %struct.GC_state* @gcState to %Pointer
	%r3858 = getelementptr inbounds i8, %Pointer %r3857, i32 0
	%r3859 = bitcast %Pointer %r3858 to %Pointer*
	%r3860 = load %Pointer, %Pointer* %frontier
	store %Pointer %r3860, %Pointer* %r3859
	; FlushStackTop
	%r3861 = bitcast %struct.GC_state* @gcState to %Pointer
	%r3862 = getelementptr inbounds i8, %Pointer %r3861, i32 16
	%r3863 = bitcast %Pointer %r3862 to %Pointer*
	%r3864 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r3864, %Pointer* %r3863
	; Call
	call void @GC_collect(%Pointer %r3851, %Word64 0, %Word32 0)
	; CacheFrontier
	%r3865 = bitcast %struct.GC_state* @gcState to %Pointer
	%r3866 = getelementptr inbounds i8, %Pointer %r3865, i32 0
	%r3867 = bitcast %Pointer %r3866 to %Pointer*
	%r3868 = load %Pointer, %Pointer* %r3867
	store %Pointer %r3868, %Pointer* %frontier
	; CacheStackTop
	%r3869 = bitcast %struct.GC_state* @gcState to %Pointer
	%r3870 = getelementptr inbounds i8, %Pointer %r3869, i32 16
	%r3871 = bitcast %Pointer %r3870 to %Pointer*
	%r3872 = load %Pointer, %Pointer* %r3871
	store %Pointer %r3872, %Pointer* %stackTop
	br label %L_961

L_959:
	; SP(0): Objptr (opt_3)  = SP(32): Objptr (opt_3)
	%r3873 = load %Pointer, %Pointer* %stackTop
	%r3874 = getelementptr inbounds i8, %Pointer %r3873, i32 32
	%r3875 = bitcast %Pointer %r3874 to %Objptr*
	%r3876 = load %Objptr, %Objptr* %r3875
	%r3877 = load %Pointer, %Pointer* %stackTop
	%r3878 = getelementptr inbounds i8, %Pointer %r3877, i32 0
	%r3879 = bitcast %Pointer %r3878 to %Objptr*
	store %Objptr %r3876, %Objptr* %r3879
	; Goto L_840
	br label %L_840

L_958:
	; Goto L_947
	br label %L_947

L_957:
	; RW64(0): Word64  = OW64 (SP(32): Objptr (opt_3), ~16): Word64
	%r3880 = load %Pointer, %Pointer* %stackTop
	%r3881 = getelementptr inbounds i8, %Pointer %r3880, i32 32
	%r3882 = bitcast %Pointer %r3881 to %Objptr*
	%r3883 = load %Objptr, %Objptr* %r3882
	%r3884 = getelementptr inbounds i8, %Objptr %r3883, i32 -16
	%r3885 = bitcast %Objptr %r3884 to %Word64*
	%r3886 = load %Word64, %Word64* %r3885
	store %Word64 %r3886, %Word64* %regW64_0
	; RW32(0): Word32  = Word64_equal (RW64(0): Word64, SW64(48): Word64)
	%r3887 = load %Word64, %Word64* %regW64_0
	%r3888 = load %Pointer, %Pointer* %stackTop
	%r3889 = getelementptr inbounds i8, %Pointer %r3888, i32 48
	%r3890 = bitcast %Pointer %r3889 to %Word64*
	%r3891 = load %Word64, %Word64* %r3890
	%r3893 = icmp eq %Word64 %r3887, %r3891
	%r3892 = zext i1 %r3893 to %Word32
	store %Word32 %r3892, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_958), (0x1, L_959))}
	%r3894 = load %Word32, %Word32* %regW32_0
	%r3895 = trunc %Word32 %r3894 to i1
	br i1 %r3895, label %L_959, label %L_958

L_956:
	; Goto L_826
	br label %L_826

L_955:
	; SP(8): Objptr (opt_11)  = glob {index = 22, isRoot = true, ty = Objptr (opt_11)}
	%r3896 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 22
	%r3897 = load %Objptr, %Objptr* %r3896
	%r3898 = load %Pointer, %Pointer* %stackTop
	%r3899 = getelementptr inbounds i8, %Pointer %r3898, i32 8
	%r3900 = bitcast %Pointer %r3899 to %Objptr*
	store %Objptr %r3897, %Objptr* %r3900
	; Goto L_join_18
	br label %L_join_18

L_954:
	; Push(-64)
	%r3901 = load %Pointer, %Pointer* %stackTop
	%r3902 = getelementptr inbounds i8, %Pointer %r3901, i32 -64
	store %Pointer %r3902, %Pointer* %stackTop
	; Goto L_951
	br label %L_951

L_953:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 140}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_954}
	; GetOperands
	%r3903 = bitcast %struct.GC_state* @gcState to %Pointer
	%r3904 = load %Pointer, %Pointer* %stackTop
	%r3905 = getelementptr inbounds i8, %Pointer %r3904, i32 56
	%r3906 = bitcast %Pointer %r3905 to %uintptr_t*
	store %uintptr_t 140, %uintptr_t* %r3906
	; Push(64)
	%r3907 = load %Pointer, %Pointer* %stackTop
	%r3908 = getelementptr inbounds i8, %Pointer %r3907, i32 64
	store %Pointer %r3908, %Pointer* %stackTop
	; FlushFrontier
	%r3909 = bitcast %struct.GC_state* @gcState to %Pointer
	%r3910 = getelementptr inbounds i8, %Pointer %r3909, i32 0
	%r3911 = bitcast %Pointer %r3910 to %Pointer*
	%r3912 = load %Pointer, %Pointer* %frontier
	store %Pointer %r3912, %Pointer* %r3911
	; FlushStackTop
	%r3913 = bitcast %struct.GC_state* @gcState to %Pointer
	%r3914 = getelementptr inbounds i8, %Pointer %r3913, i32 16
	%r3915 = bitcast %Pointer %r3914 to %Pointer*
	%r3916 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r3916, %Pointer* %r3915
	; Call
	call void @GC_collect(%Pointer %r3903, %Word64 0, %Word32 0)
	; CacheFrontier
	%r3917 = bitcast %struct.GC_state* @gcState to %Pointer
	%r3918 = getelementptr inbounds i8, %Pointer %r3917, i32 0
	%r3919 = bitcast %Pointer %r3918 to %Pointer*
	%r3920 = load %Pointer, %Pointer* %r3919
	store %Pointer %r3920, %Pointer* %frontier
	; CacheStackTop
	%r3921 = bitcast %struct.GC_state* @gcState to %Pointer
	%r3922 = getelementptr inbounds i8, %Pointer %r3921, i32 16
	%r3923 = bitcast %Pointer %r3922 to %Pointer*
	%r3924 = load %Pointer, %Pointer* %r3923
	store %Pointer %r3924, %Pointer* %stackTop
	br label %L_954

L_952:
	; Push(-56)
	%r3925 = load %Pointer, %Pointer* %stackTop
	%r3926 = getelementptr inbounds i8, %Pointer %r3925, i32 -56
	store %Pointer %r3926, %Pointer* %stackTop
	; OW64 (SP(8): Objptr (opt_11), ~8): Word64  = 0x7
	%r3927 = load %Pointer, %Pointer* %stackTop
	%r3928 = getelementptr inbounds i8, %Pointer %r3927, i32 8
	%r3929 = bitcast %Pointer %r3928 to %Objptr*
	%r3930 = load %Objptr, %Objptr* %r3929
	%r3931 = getelementptr inbounds i8, %Objptr %r3930, i32 -8
	%r3932 = bitcast %Objptr %r3931 to %Word64*
	store %Word64 7, %Word64* %r3932
	; SP(0): Objptr (opt_3)  = Cast (SP(8): Objptr (opt_11), Objptr (opt_3))
	%r3933 = load %Pointer, %Pointer* %stackTop
	%r3934 = getelementptr inbounds i8, %Pointer %r3933, i32 8
	%r3935 = bitcast %Pointer %r3934 to %Objptr*
	%r3936 = load %Objptr, %Objptr* %r3935
	%r3937 = bitcast %Objptr %r3936 to %Objptr
	%r3938 = load %Pointer, %Pointer* %stackTop
	%r3939 = getelementptr inbounds i8, %Pointer %r3938, i32 0
	%r3940 = bitcast %Pointer %r3939 to %Objptr*
	store %Objptr %r3937, %Objptr* %r3940
	; Goto L_840
	br label %L_840

L_951:
	; CCall {args = (<GCState>, SP(8): Objptr (opt_11), 0x0, SP(32): Objptr (opt_3), SW64(0): Word64, SW64(48): Word64), frameInfo = Some {frameLayoutsIndex = 139}, func = {args = (GCState, Objptr (opt_11), Word64, Objptr (opt_3), Word64, Word64), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Objptr, Int64, Objptr, Int64, Int64), res = None}, return = Bits0, symbolScope = private, target = GC_arrayCopy}, return = Some L_952}
	; GetOperands
	%r3941 = bitcast %struct.GC_state* @gcState to %Pointer
	%r3942 = load %Pointer, %Pointer* %stackTop
	%r3943 = getelementptr inbounds i8, %Pointer %r3942, i32 8
	%r3944 = bitcast %Pointer %r3943 to %Objptr*
	%r3945 = load %Objptr, %Objptr* %r3944
	%r3946 = load %Pointer, %Pointer* %stackTop
	%r3947 = getelementptr inbounds i8, %Pointer %r3946, i32 32
	%r3948 = bitcast %Pointer %r3947 to %Objptr*
	%r3949 = load %Objptr, %Objptr* %r3948
	%r3950 = load %Pointer, %Pointer* %stackTop
	%r3951 = getelementptr inbounds i8, %Pointer %r3950, i32 0
	%r3952 = bitcast %Pointer %r3951 to %Word64*
	%r3953 = load %Word64, %Word64* %r3952
	%r3954 = load %Pointer, %Pointer* %stackTop
	%r3955 = getelementptr inbounds i8, %Pointer %r3954, i32 48
	%r3956 = bitcast %Pointer %r3955 to %Word64*
	%r3957 = load %Word64, %Word64* %r3956
	%r3958 = load %Pointer, %Pointer* %stackTop
	%r3959 = getelementptr inbounds i8, %Pointer %r3958, i32 48
	%r3960 = bitcast %Pointer %r3959 to %uintptr_t*
	store %uintptr_t 139, %uintptr_t* %r3960
	; Push(56)
	%r3961 = load %Pointer, %Pointer* %stackTop
	%r3962 = getelementptr inbounds i8, %Pointer %r3961, i32 56
	store %Pointer %r3962, %Pointer* %stackTop
	; FlushFrontier
	%r3963 = bitcast %struct.GC_state* @gcState to %Pointer
	%r3964 = getelementptr inbounds i8, %Pointer %r3963, i32 0
	%r3965 = bitcast %Pointer %r3964 to %Pointer*
	%r3966 = load %Pointer, %Pointer* %frontier
	store %Pointer %r3966, %Pointer* %r3965
	; FlushStackTop
	%r3967 = bitcast %struct.GC_state* @gcState to %Pointer
	%r3968 = getelementptr inbounds i8, %Pointer %r3967, i32 16
	%r3969 = bitcast %Pointer %r3968 to %Pointer*
	%r3970 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r3970, %Pointer* %r3969
	; Call
	call void @GC_arrayCopy(%Pointer %r3941, %Objptr %r3945, %Word64 0, %Objptr %r3949, %Word64 %r3953, %Word64 %r3957)
	; CacheFrontier
	%r3971 = bitcast %struct.GC_state* @gcState to %Pointer
	%r3972 = getelementptr inbounds i8, %Pointer %r3971, i32 0
	%r3973 = bitcast %Pointer %r3972 to %Pointer*
	%r3974 = load %Pointer, %Pointer* %r3973
	store %Pointer %r3974, %Pointer* %frontier
	; CacheStackTop
	%r3975 = bitcast %struct.GC_state* @gcState to %Pointer
	%r3976 = getelementptr inbounds i8, %Pointer %r3975, i32 16
	%r3977 = bitcast %Pointer %r3976 to %Pointer*
	%r3978 = load %Pointer, %Pointer* %r3977
	store %Pointer %r3978, %Pointer* %stackTop
	br label %L_952

L_join_18:
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r3979 = bitcast %struct.GC_state* @gcState to %Pointer
	%r3980 = getelementptr inbounds i8, %Pointer %r3979, i32 8
	%r3981 = bitcast %Pointer %r3980 to %CPointer*
	%r3982 = load %CPointer, %CPointer* %r3981
	%r3983 = load %Pointer, %Pointer* %frontier
	%r3985 = icmp ult %Pointer %r3982, %r3983
	%r3984 = zext i1 %r3985 to %Word32
	store %Word32 %r3984, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_951), (0x1, L_953))}
	%r3986 = load %Word32, %Word32* %regW32_0
	%r3987 = trunc %Word32 %r3986 to i1
	br i1 %r3987, label %L_953, label %L_951

L_950:
	; Push(-64)
	%r3988 = load %Pointer, %Pointer* %stackTop
	%r3989 = getelementptr inbounds i8, %Pointer %r3988, i32 -64
	store %Pointer %r3989, %Pointer* %stackTop
	%r3990 = load %Objptr, %Objptr* @CReturnP
	store %Objptr %r3990, %Objptr* %regP_0
	; SP(8): Objptr (opt_11)  = RP(0): Objptr (opt_11)
	%r3991 = load %Objptr, %Objptr* %regP_0
	%r3992 = load %Pointer, %Pointer* %stackTop
	%r3993 = getelementptr inbounds i8, %Pointer %r3992, i32 8
	%r3994 = bitcast %Pointer %r3993 to %Objptr*
	store %Objptr %r3991, %Objptr* %r3994
	; Goto L_join_18
	br label %L_join_18

L_949:
	; CCall {args = (<GCState>, 0x0, SW64(48): Word64, 0x17), frameInfo = Some {frameLayoutsIndex = 138}, func = {args = (GCState, Word64, Word64, Word64), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int64, Word64), res = Some Objptr}, return = Objptr (opt_11), symbolScope = private, target = GC_arrayAllocate}, return = Some L_950}
	; GetOperands
	%r3995 = bitcast %struct.GC_state* @gcState to %Pointer
	%r3996 = load %Pointer, %Pointer* %stackTop
	%r3997 = getelementptr inbounds i8, %Pointer %r3996, i32 48
	%r3998 = bitcast %Pointer %r3997 to %Word64*
	%r3999 = load %Word64, %Word64* %r3998
	%r4000 = load %Pointer, %Pointer* %stackTop
	%r4001 = getelementptr inbounds i8, %Pointer %r4000, i32 56
	%r4002 = bitcast %Pointer %r4001 to %uintptr_t*
	store %uintptr_t 138, %uintptr_t* %r4002
	; Push(64)
	%r4003 = load %Pointer, %Pointer* %stackTop
	%r4004 = getelementptr inbounds i8, %Pointer %r4003, i32 64
	store %Pointer %r4004, %Pointer* %stackTop
	; FlushFrontier
	%r4005 = bitcast %struct.GC_state* @gcState to %Pointer
	%r4006 = getelementptr inbounds i8, %Pointer %r4005, i32 0
	%r4007 = bitcast %Pointer %r4006 to %Pointer*
	%r4008 = load %Pointer, %Pointer* %frontier
	store %Pointer %r4008, %Pointer* %r4007
	; FlushStackTop
	%r4009 = bitcast %struct.GC_state* @gcState to %Pointer
	%r4010 = getelementptr inbounds i8, %Pointer %r4009, i32 16
	%r4011 = bitcast %Pointer %r4010 to %Pointer*
	%r4012 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r4012, %Pointer* %r4011
	; Call
	%r4013 = call %Objptr @GC_arrayAllocate(%Pointer %r3995, %Word64 0, %Word64 %r3999, %Word64 23)
	store %Objptr %r4013, %Objptr* @CReturnP
	; CacheFrontier
	%r4014 = bitcast %struct.GC_state* @gcState to %Pointer
	%r4015 = getelementptr inbounds i8, %Pointer %r4014, i32 0
	%r4016 = bitcast %Pointer %r4015 to %Pointer*
	%r4017 = load %Pointer, %Pointer* %r4016
	store %Pointer %r4017, %Pointer* %frontier
	; CacheStackTop
	%r4018 = bitcast %struct.GC_state* @gcState to %Pointer
	%r4019 = getelementptr inbounds i8, %Pointer %r4018, i32 16
	%r4020 = bitcast %Pointer %r4019 to %Pointer*
	%r4021 = load %Pointer, %Pointer* %r4020
	store %Pointer %r4021, %Pointer* %stackTop
	br label %L_950

L_948:
	; RW32(0): Word32  = Word64_equal (0x0, SW64(48): Word64)
	%r4022 = load %Pointer, %Pointer* %stackTop
	%r4023 = getelementptr inbounds i8, %Pointer %r4022, i32 48
	%r4024 = bitcast %Pointer %r4023 to %Word64*
	%r4025 = load %Word64, %Word64* %r4024
	%r4027 = icmp eq %Word64 0, %r4025
	%r4026 = zext i1 %r4027 to %Word32
	store %Word32 %r4026, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_949), (0x1, L_955))}
	%r4028 = load %Word32, %Word32* %regW32_0
	%r4029 = trunc %Word32 %r4028 to i1
	br i1 %r4029, label %L_955, label %L_949

L_947:
	; RW32(0): Word32  = WordU64_lt (0x7FFFFFFF, SW64(48): Word64)
	%r4030 = load %Pointer, %Pointer* %stackTop
	%r4031 = getelementptr inbounds i8, %Pointer %r4030, i32 48
	%r4032 = bitcast %Pointer %r4031 to %Word64*
	%r4033 = load %Word64, %Word64* %r4032
	%r4035 = icmp ult %Word64 2147483647, %r4033
	%r4034 = zext i1 %r4035 to %Word32
	store %Word32 %r4034, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_948), (0x1, L_956))}
	%r4036 = load %Word32, %Word32* %regW32_0
	%r4037 = trunc %Word32 %r4036 to i1
	br i1 %r4037, label %L_956, label %L_948

L_946:
	; Goto L_947
	br label %L_947

L_945:
	; SW64(0): Word64  = OW64 (SP(8): Objptr (opt_9), 0): Word64
	%r4038 = load %Pointer, %Pointer* %stackTop
	%r4039 = getelementptr inbounds i8, %Pointer %r4038, i32 8
	%r4040 = bitcast %Pointer %r4039 to %Objptr*
	%r4041 = load %Objptr, %Objptr* %r4040
	%r4042 = getelementptr inbounds i8, %Objptr %r4041, i32 0
	%r4043 = bitcast %Objptr %r4042 to %Word64*
	%r4044 = load %Word64, %Word64* %r4043
	%r4045 = load %Pointer, %Pointer* %stackTop
	%r4046 = getelementptr inbounds i8, %Pointer %r4045, i32 0
	%r4047 = bitcast %Pointer %r4046 to %Word64*
	store %Word64 %r4044, %Word64* %r4047
	; SP(32): Objptr (opt_3)  = OP (SP(8): Objptr (opt_9), 16): Objptr (opt_3)
	%r4048 = load %Pointer, %Pointer* %stackTop
	%r4049 = getelementptr inbounds i8, %Pointer %r4048, i32 8
	%r4050 = bitcast %Pointer %r4049 to %Objptr*
	%r4051 = load %Objptr, %Objptr* %r4050
	%r4052 = getelementptr inbounds i8, %Objptr %r4051, i32 16
	%r4053 = bitcast %Objptr %r4052 to %Objptr*
	%r4054 = load %Objptr, %Objptr* %r4053
	%r4055 = load %Pointer, %Pointer* %stackTop
	%r4056 = getelementptr inbounds i8, %Pointer %r4055, i32 32
	%r4057 = bitcast %Pointer %r4056 to %Objptr*
	store %Objptr %r4054, %Objptr* %r4057
	; SW64(48): Word64  = OW64 (SP(8): Objptr (opt_9), 8): Word64
	%r4058 = load %Pointer, %Pointer* %stackTop
	%r4059 = getelementptr inbounds i8, %Pointer %r4058, i32 8
	%r4060 = bitcast %Pointer %r4059 to %Objptr*
	%r4061 = load %Objptr, %Objptr* %r4060
	%r4062 = getelementptr inbounds i8, %Objptr %r4061, i32 8
	%r4063 = bitcast %Objptr %r4062 to %Word64*
	%r4064 = load %Word64, %Word64* %r4063
	%r4065 = load %Pointer, %Pointer* %stackTop
	%r4066 = getelementptr inbounds i8, %Pointer %r4065, i32 48
	%r4067 = bitcast %Pointer %r4066 to %Word64*
	store %Word64 %r4064, %Word64* %r4067
	; RW32(0): Word32  = Word64_equal (SW64(0): Word64, 0x0)
	%r4068 = load %Pointer, %Pointer* %stackTop
	%r4069 = getelementptr inbounds i8, %Pointer %r4068, i32 0
	%r4070 = bitcast %Pointer %r4069 to %Word64*
	%r4071 = load %Word64, %Word64* %r4070
	%r4073 = icmp eq %Word64 %r4071, 0
	%r4072 = zext i1 %r4073 to %Word32
	store %Word32 %r4072, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_946), (0x1, L_957))}
	%r4074 = load %Word32, %Word32* %regW32_0
	%r4075 = trunc %Word32 %r4074 to i1
	br i1 %r4075, label %L_957, label %L_946

L_944:
	; Goto L_826
	br label %L_826

L_943:
	; SP(0): Objptr (opt_45)  = SP(32): Objptr (opt_45)
	%r4076 = load %Pointer, %Pointer* %stackTop
	%r4077 = getelementptr inbounds i8, %Pointer %r4076, i32 32
	%r4078 = bitcast %Pointer %r4077 to %Objptr*
	%r4079 = load %Objptr, %Objptr* %r4078
	%r4080 = load %Pointer, %Pointer* %stackTop
	%r4081 = getelementptr inbounds i8, %Pointer %r4080, i32 0
	%r4082 = bitcast %Pointer %r4081 to %Objptr*
	store %Objptr %r4079, %Objptr* %r4082
	; RP(0): Objptr (opt_9)  = SP(8): Objptr (opt_9)
	%r4083 = load %Pointer, %Pointer* %stackTop
	%r4084 = getelementptr inbounds i8, %Pointer %r4083, i32 8
	%r4085 = bitcast %Pointer %r4084 to %Objptr*
	%r4086 = load %Objptr, %Objptr* %r4085
	store %Objptr %r4086, %Objptr* %regP_0
	; SP(8): Objptr (opt_11)  = glob {index = 22, isRoot = true, ty = Objptr (opt_11)}
	%r4087 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 22
	%r4088 = load %Objptr, %Objptr* %r4087
	%r4089 = load %Pointer, %Pointer* %stackTop
	%r4090 = getelementptr inbounds i8, %Pointer %r4089, i32 8
	%r4091 = bitcast %Pointer %r4090 to %Objptr*
	store %Objptr %r4088, %Objptr* %r4091
	; SW64(32): Word64  = 0x0
	%r4092 = load %Pointer, %Pointer* %stackTop
	%r4093 = getelementptr inbounds i8, %Pointer %r4092, i32 32
	%r4094 = bitcast %Pointer %r4093 to %Word64*
	store %Word64 0, %Word64* %r4094
	; Goto L_833
	br label %L_833

L_942:
	; Goto L_836
	br label %L_836

L_941:
	; RW64(3): Word64  = Word64_add (RW64(2): Word64, SW64(32): Word64)
	%r4095 = load %Word64, %Word64* %regW64_2
	%r4096 = load %Pointer, %Pointer* %stackTop
	%r4097 = getelementptr inbounds i8, %Pointer %r4096, i32 32
	%r4098 = bitcast %Pointer %r4097 to %Word64*
	%r4099 = load %Word64, %Word64* %r4098
	%r4100 = add %Word64 %r4095, %r4099
	store %Word64 %r4100, %Word64* %regW64_3
	; RW64(4): Word64  = Word64_add (RW64(2): Word64, RW64(0): Word64)
	%r4101 = load %Word64, %Word64* %regW64_2
	%r4102 = load %Word64, %Word64* %regW64_0
	%r4103 = add %Word64 %r4101, %r4102
	store %Word64 %r4103, %Word64* %regW64_4
	; RW8(0): Word8  = XW8 (RP(1): Objptr (opt_3), RW64(4): Word64, 1, 0): Word8
	%r4104 = load %Objptr, %Objptr* %regP_1
	%r4105 = load %Word64, %Word64* %regW64_4
	%r4106 = mul nsw %Word64 %r4105, 1
	%r4107 = add nsw %Word64 %r4106, 0
	%r4108 = getelementptr inbounds i8, %Objptr %r4104, %Word64 %r4107
	%r4109 = bitcast %Objptr %r4108 to %Word8*
	%r4110 = load %Word8, %Word8* %r4109
	store %Word8 %r4110, %Word8* %regW8_0
	; XW8 (SP(8): Objptr (opt_11), RW64(3): Word64, 1, 0): Word8  = RW8(0): Word8
	%r4111 = load %Word8, %Word8* %regW8_0
	%r4112 = load %Pointer, %Pointer* %stackTop
	%r4113 = getelementptr inbounds i8, %Pointer %r4112, i32 8
	%r4114 = bitcast %Pointer %r4113 to %Objptr*
	%r4115 = load %Objptr, %Objptr* %r4114
	%r4116 = load %Word64, %Word64* %regW64_3
	%r4117 = mul nsw %Word64 %r4116, 1
	%r4118 = add nsw %Word64 %r4117, 0
	%r4119 = getelementptr inbounds i8, %Objptr %r4115, %Word64 %r4118
	%r4120 = bitcast %Objptr %r4119 to %Word8*
	store %Word8 %r4111, %Word8* %r4120
	; RW64(5): Word64  = Word64_add (RW64(2): Word64, 0x1)
	%r4121 = load %Word64, %Word64* %regW64_2
	%r4122 = add %Word64 %r4121, 1
	store %Word64 %r4122, %Word64* %regW64_5
	; RW64(2): Word64  = RW64(5): Word64
	%r4123 = load %Word64, %Word64* %regW64_5
	store %Word64 %r4123, %Word64* %regW64_2
	; Goto loop_51
	br label %loop_51

loop_51:
	; RW32(0): Word32  = WordS64_lt (RW64(1): Word64, RW64(2): Word64)
	%r4124 = load %Word64, %Word64* %regW64_1
	%r4125 = load %Word64, %Word64* %regW64_2
	%r4127 = icmp slt %Word64 %r4124, %r4125
	%r4126 = zext i1 %r4127 to %Word32
	store %Word32 %r4126, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_941), (0x1, L_942))}
	%r4128 = load %Word32, %Word32* %regW32_0
	%r4129 = trunc %Word32 %r4128 to i1
	br i1 %r4129, label %L_942, label %L_941

L_940:
	; RW64(1): Word64  = Word64_sub (SW64(48): Word64, 0x1)
	%r4130 = load %Pointer, %Pointer* %stackTop
	%r4131 = getelementptr inbounds i8, %Pointer %r4130, i32 48
	%r4132 = bitcast %Pointer %r4131 to %Word64*
	%r4133 = load %Word64, %Word64* %r4132
	%r4134 = sub %Word64 %r4133, 1
	store %Word64 %r4134, %Word64* %regW64_1
	; RW64(2): Word64  = 0x0
	store %Word64 0, %Word64* %regW64_2
	; Goto loop_51
	br label %loop_51

L_939:
	; Push(-56)
	%r4135 = load %Pointer, %Pointer* %stackTop
	%r4136 = getelementptr inbounds i8, %Pointer %r4135, i32 -56
	store %Pointer %r4136, %Pointer* %stackTop
	; Goto L_839
	br label %L_839

L_938:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 137}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_939}
	; GetOperands
	%r4137 = bitcast %struct.GC_state* @gcState to %Pointer
	%r4138 = load %Pointer, %Pointer* %stackTop
	%r4139 = getelementptr inbounds i8, %Pointer %r4138, i32 48
	%r4140 = bitcast %Pointer %r4139 to %uintptr_t*
	store %uintptr_t 137, %uintptr_t* %r4140
	; Push(56)
	%r4141 = load %Pointer, %Pointer* %stackTop
	%r4142 = getelementptr inbounds i8, %Pointer %r4141, i32 56
	store %Pointer %r4142, %Pointer* %stackTop
	; FlushFrontier
	%r4143 = bitcast %struct.GC_state* @gcState to %Pointer
	%r4144 = getelementptr inbounds i8, %Pointer %r4143, i32 0
	%r4145 = bitcast %Pointer %r4144 to %Pointer*
	%r4146 = load %Pointer, %Pointer* %frontier
	store %Pointer %r4146, %Pointer* %r4145
	; FlushStackTop
	%r4147 = bitcast %struct.GC_state* @gcState to %Pointer
	%r4148 = getelementptr inbounds i8, %Pointer %r4147, i32 16
	%r4149 = bitcast %Pointer %r4148 to %Pointer*
	%r4150 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r4150, %Pointer* %r4149
	; Call
	call void @GC_collect(%Pointer %r4137, %Word64 0, %Word32 0)
	; CacheFrontier
	%r4151 = bitcast %struct.GC_state* @gcState to %Pointer
	%r4152 = getelementptr inbounds i8, %Pointer %r4151, i32 0
	%r4153 = bitcast %Pointer %r4152 to %Pointer*
	%r4154 = load %Pointer, %Pointer* %r4153
	store %Pointer %r4154, %Pointer* %frontier
	; CacheStackTop
	%r4155 = bitcast %struct.GC_state* @gcState to %Pointer
	%r4156 = getelementptr inbounds i8, %Pointer %r4155, i32 16
	%r4157 = bitcast %Pointer %r4156 to %Pointer*
	%r4158 = load %Pointer, %Pointer* %r4157
	store %Pointer %r4158, %Pointer* %stackTop
	br label %L_939

L_937:
	; RW32(2): Word32  = 0x3
	store %Word32 3, %Word32* %regW32_2
	; Goto L_845
	br label %L_845

L_936:
	; RW32(0): Word32  = 0xFFFFFFFE
	store %Word32 4294967294, %Word32* %regW32_0
	; Goto L_921
	br label %L_921

L_935:
	; Goto sci_0
	br label %sci_0

L_934:
	; Goto L_826
	br label %L_826

L_933:
	; SP(16): Objptr (opt_11)  = glob {index = 22, isRoot = true, ty = Objptr (opt_11)}
	%r4159 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 22
	%r4160 = load %Objptr, %Objptr* %r4159
	%r4161 = load %Pointer, %Pointer* %stackTop
	%r4162 = getelementptr inbounds i8, %Pointer %r4161, i32 16
	%r4163 = bitcast %Pointer %r4162 to %Objptr*
	store %Objptr %r4160, %Objptr* %r4163
	; Goto L_join_17
	br label %L_join_17

L_932:
	; XW8 (SP(16): Objptr (opt_11), RW64(0): Word64, 1, 0): Word8  = 0x30
	%r4164 = load %Pointer, %Pointer* %stackTop
	%r4165 = getelementptr inbounds i8, %Pointer %r4164, i32 16
	%r4166 = bitcast %Pointer %r4165 to %Objptr*
	%r4167 = load %Objptr, %Objptr* %r4166
	%r4168 = load %Word64, %Word64* %regW64_0
	%r4169 = mul nsw %Word64 %r4168, 1
	%r4170 = add nsw %Word64 %r4169, 0
	%r4171 = getelementptr inbounds i8, %Objptr %r4167, %Word64 %r4170
	%r4172 = bitcast %Objptr %r4171 to %Word8*
	store %Word8 48, %Word8* %r4172
	; RW64(1): Word64  = Word64_add (RW64(0): Word64, 0x1)
	%r4173 = load %Word64, %Word64* %regW64_0
	%r4174 = add %Word64 %r4173, 1
	store %Word64 %r4174, %Word64* %regW64_1
	; RW64(0): Word64  = RW64(1): Word64
	%r4175 = load %Word64, %Word64* %regW64_1
	store %Word64 %r4175, %Word64* %regW64_0
	; Goto loop_50
	br label %loop_50

L_931:
	; Push(-56)
	%r4176 = load %Pointer, %Pointer* %stackTop
	%r4177 = getelementptr inbounds i8, %Pointer %r4176, i32 -56
	store %Pointer %r4177, %Pointer* %stackTop
	; Goto L_929
	br label %L_929

L_930:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 136}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_931}
	; GetOperands
	%r4178 = bitcast %struct.GC_state* @gcState to %Pointer
	%r4179 = load %Pointer, %Pointer* %stackTop
	%r4180 = getelementptr inbounds i8, %Pointer %r4179, i32 48
	%r4181 = bitcast %Pointer %r4180 to %uintptr_t*
	store %uintptr_t 136, %uintptr_t* %r4181
	; Push(56)
	%r4182 = load %Pointer, %Pointer* %stackTop
	%r4183 = getelementptr inbounds i8, %Pointer %r4182, i32 56
	store %Pointer %r4183, %Pointer* %stackTop
	; FlushFrontier
	%r4184 = bitcast %struct.GC_state* @gcState to %Pointer
	%r4185 = getelementptr inbounds i8, %Pointer %r4184, i32 0
	%r4186 = bitcast %Pointer %r4185 to %Pointer*
	%r4187 = load %Pointer, %Pointer* %frontier
	store %Pointer %r4187, %Pointer* %r4186
	; FlushStackTop
	%r4188 = bitcast %struct.GC_state* @gcState to %Pointer
	%r4189 = getelementptr inbounds i8, %Pointer %r4188, i32 16
	%r4190 = bitcast %Pointer %r4189 to %Pointer*
	%r4191 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r4191, %Pointer* %r4190
	; Call
	call void @GC_collect(%Pointer %r4178, %Word64 0, %Word32 0)
	; CacheFrontier
	%r4192 = bitcast %struct.GC_state* @gcState to %Pointer
	%r4193 = getelementptr inbounds i8, %Pointer %r4192, i32 0
	%r4194 = bitcast %Pointer %r4193 to %Pointer*
	%r4195 = load %Pointer, %Pointer* %r4194
	store %Pointer %r4195, %Pointer* %frontier
	; CacheStackTop
	%r4196 = bitcast %struct.GC_state* @gcState to %Pointer
	%r4197 = getelementptr inbounds i8, %Pointer %r4196, i32 16
	%r4198 = bitcast %Pointer %r4197 to %Pointer*
	%r4199 = load %Pointer, %Pointer* %r4198
	store %Pointer %r4199, %Pointer* %stackTop
	br label %L_931

L_929:
	; OW64 (SP(16): Objptr (opt_11), ~8): Word64  = 0x7
	%r4200 = load %Pointer, %Pointer* %stackTop
	%r4201 = getelementptr inbounds i8, %Pointer %r4200, i32 16
	%r4202 = bitcast %Pointer %r4201 to %Objptr*
	%r4203 = load %Objptr, %Objptr* %r4202
	%r4204 = getelementptr inbounds i8, %Objptr %r4203, i32 -8
	%r4205 = bitcast %Objptr %r4204 to %Word64*
	store %Word64 7, %Word64* %r4205
	; CW64 (<Frontier>)  = 0x57
	%r4206 = load %Pointer, %Pointer* %frontier
	%r4207 = bitcast %Pointer %r4206 to %Word64*
	store %Word64 87, %Word64* %r4207
	; RQ(83): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r4208 = load %Pointer, %Pointer* %frontier
	%r4210 = ptrtoint %Pointer %r4208 to %uintptr_t
	%r4211 = add %uintptr_t %r4210, 8
	%r4209 = inttoptr %uintptr_t %r4211 to %Pointer
	store %CPointer %r4209, %CPointer* %regQ_83
	; RP(0): Objptr (opt_43)  = Cast (RQ(83): CPointer, Objptr (opt_43))
	%r4212 = load %CPointer, %CPointer* %regQ_83
	%r4213 = bitcast %CPointer %r4212 to %Objptr
	store %Objptr %r4213, %Objptr* %regP_0
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r4214 = load %Pointer, %Pointer* %frontier
	%r4216 = ptrtoint %Pointer %r4214 to %uintptr_t
	%r4217 = add %uintptr_t %r4216, 24
	%r4215 = inttoptr %uintptr_t %r4217 to %Pointer
	store %Pointer %r4215, %Pointer* %frontier
	; OP (RP(0): Objptr (opt_43), 0): Objptr (opt_3)  = Cast (SP(16): Objptr (opt_11), Objptr (opt_3))
	%r4218 = load %Pointer, %Pointer* %stackTop
	%r4219 = getelementptr inbounds i8, %Pointer %r4218, i32 16
	%r4220 = bitcast %Pointer %r4219 to %Objptr*
	%r4221 = load %Objptr, %Objptr* %r4220
	%r4222 = bitcast %Objptr %r4221 to %Objptr
	%r4223 = load %Objptr, %Objptr* %regP_0
	%r4224 = getelementptr inbounds i8, %Objptr %r4223, i32 0
	%r4225 = bitcast %Objptr %r4224 to %Objptr*
	store %Objptr %r4222, %Objptr* %r4225
	; OP (RP(0): Objptr (opt_43), 8): Objptr (opt_43)  = SP(8): Objptr (opt_43)
	%r4226 = load %Pointer, %Pointer* %stackTop
	%r4227 = getelementptr inbounds i8, %Pointer %r4226, i32 8
	%r4228 = bitcast %Pointer %r4227 to %Objptr*
	%r4229 = load %Objptr, %Objptr* %r4228
	%r4230 = load %Objptr, %Objptr* %regP_0
	%r4231 = getelementptr inbounds i8, %Objptr %r4230, i32 8
	%r4232 = bitcast %Objptr %r4231 to %Objptr*
	store %Objptr %r4229, %Objptr* %r4232
	; CW64 (<Frontier>)  = 0x57
	%r4233 = load %Pointer, %Pointer* %frontier
	%r4234 = bitcast %Pointer %r4233 to %Word64*
	store %Word64 87, %Word64* %r4234
	; RQ(82): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r4235 = load %Pointer, %Pointer* %frontier
	%r4237 = ptrtoint %Pointer %r4235 to %uintptr_t
	%r4238 = add %uintptr_t %r4237, 8
	%r4236 = inttoptr %uintptr_t %r4238 to %Pointer
	store %CPointer %r4236, %CPointer* %regQ_82
	; RP(1): Objptr (opt_43)  = Cast (RQ(82): CPointer, Objptr (opt_43))
	%r4239 = load %CPointer, %CPointer* %regQ_82
	%r4240 = bitcast %CPointer %r4239 to %Objptr
	store %Objptr %r4240, %Objptr* %regP_1
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r4241 = load %Pointer, %Pointer* %frontier
	%r4243 = ptrtoint %Pointer %r4241 to %uintptr_t
	%r4244 = add %uintptr_t %r4243, 24
	%r4242 = inttoptr %uintptr_t %r4244 to %Pointer
	store %Pointer %r4242, %Pointer* %frontier
	; OP (RP(1): Objptr (opt_43), 0): Objptr (opt_3)  = glob {index = 139, isRoot = true, ty = Objptr (opt_3)}
	%r4245 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 139
	%r4246 = load %Objptr, %Objptr* %r4245
	%r4247 = load %Objptr, %Objptr* %regP_1
	%r4248 = getelementptr inbounds i8, %Objptr %r4247, i32 0
	%r4249 = bitcast %Objptr %r4248 to %Objptr*
	store %Objptr %r4246, %Objptr* %r4249
	; OP (RP(1): Objptr (opt_43), 8): Objptr (opt_43)  = RP(0): Objptr (opt_43)
	%r4250 = load %Objptr, %Objptr* %regP_0
	%r4251 = load %Objptr, %Objptr* %regP_1
	%r4252 = getelementptr inbounds i8, %Objptr %r4251, i32 8
	%r4253 = bitcast %Objptr %r4252 to %Objptr*
	store %Objptr %r4250, %Objptr* %r4253
	; CW64 (<Frontier>)  = 0x57
	%r4254 = load %Pointer, %Pointer* %frontier
	%r4255 = bitcast %Pointer %r4254 to %Word64*
	store %Word64 87, %Word64* %r4255
	; RQ(81): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r4256 = load %Pointer, %Pointer* %frontier
	%r4258 = ptrtoint %Pointer %r4256 to %uintptr_t
	%r4259 = add %uintptr_t %r4258, 8
	%r4257 = inttoptr %uintptr_t %r4259 to %Pointer
	store %CPointer %r4257, %CPointer* %regQ_81
	; RP(2): Objptr (opt_43)  = Cast (RQ(81): CPointer, Objptr (opt_43))
	%r4260 = load %CPointer, %CPointer* %regQ_81
	%r4261 = bitcast %CPointer %r4260 to %Objptr
	store %Objptr %r4261, %Objptr* %regP_2
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r4262 = load %Pointer, %Pointer* %frontier
	%r4264 = ptrtoint %Pointer %r4262 to %uintptr_t
	%r4265 = add %uintptr_t %r4264, 24
	%r4263 = inttoptr %uintptr_t %r4265 to %Pointer
	store %Pointer %r4263, %Pointer* %frontier
	; OP (RP(2): Objptr (opt_43), 0): Objptr (opt_3)  = SP(40): Objptr (opt_3)
	%r4266 = load %Pointer, %Pointer* %stackTop
	%r4267 = getelementptr inbounds i8, %Pointer %r4266, i32 40
	%r4268 = bitcast %Pointer %r4267 to %Objptr*
	%r4269 = load %Objptr, %Objptr* %r4268
	%r4270 = load %Objptr, %Objptr* %regP_2
	%r4271 = getelementptr inbounds i8, %Objptr %r4270, i32 0
	%r4272 = bitcast %Objptr %r4271 to %Objptr*
	store %Objptr %r4269, %Objptr* %r4272
	; OP (RP(2): Objptr (opt_43), 8): Objptr (opt_43)  = RP(1): Objptr (opt_43)
	%r4273 = load %Objptr, %Objptr* %regP_1
	%r4274 = load %Objptr, %Objptr* %regP_2
	%r4275 = getelementptr inbounds i8, %Objptr %r4274, i32 8
	%r4276 = bitcast %Objptr %r4275 to %Objptr*
	store %Objptr %r4273, %Objptr* %r4276
	; SP(0): Objptr (opt_43)  = RP(2): Objptr (opt_43)
	%r4277 = load %Objptr, %Objptr* %regP_2
	%r4278 = load %Pointer, %Pointer* %stackTop
	%r4279 = getelementptr inbounds i8, %Pointer %r4278, i32 0
	%r4280 = bitcast %Pointer %r4279 to %Objptr*
	store %Objptr %r4277, %Objptr* %r4280
	br label %concat_0

L_928:
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r4281 = bitcast %struct.GC_state* @gcState to %Pointer
	%r4282 = getelementptr inbounds i8, %Pointer %r4281, i32 8
	%r4283 = bitcast %Pointer %r4282 to %CPointer*
	%r4284 = load %CPointer, %CPointer* %r4283
	%r4285 = load %Pointer, %Pointer* %frontier
	%r4287 = icmp ult %Pointer %r4284, %r4285
	%r4286 = zext i1 %r4287 to %Word32
	store %Word32 %r4286, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_929), (0x1, L_930))}
	%r4288 = load %Word32, %Word32* %regW32_0
	%r4289 = trunc %Word32 %r4288 to i1
	br i1 %r4289, label %L_930, label %L_929

loop_50:
	; RW32(0): Word32  = WordS64_lt (RW64(0): Word64, SW64(0): Word64)
	%r4290 = load %Word64, %Word64* %regW64_0
	%r4291 = load %Pointer, %Pointer* %stackTop
	%r4292 = getelementptr inbounds i8, %Pointer %r4291, i32 0
	%r4293 = bitcast %Pointer %r4292 to %Word64*
	%r4294 = load %Word64, %Word64* %r4293
	%r4296 = icmp slt %Word64 %r4290, %r4294
	%r4295 = zext i1 %r4296 to %Word32
	store %Word32 %r4295, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_928), (0x1, L_932))}
	%r4297 = load %Word32, %Word32* %regW32_0
	%r4298 = trunc %Word32 %r4297 to i1
	br i1 %r4298, label %L_932, label %L_928

L_join_17:
	; RW64(0): Word64  = 0x0
	store %Word64 0, %Word64* %regW64_0
	; Goto loop_50
	br label %loop_50

L_927:
	; Push(-56)
	%r4299 = load %Pointer, %Pointer* %stackTop
	%r4300 = getelementptr inbounds i8, %Pointer %r4299, i32 -56
	store %Pointer %r4300, %Pointer* %stackTop
	%r4301 = load %Objptr, %Objptr* @CReturnP
	store %Objptr %r4301, %Objptr* %regP_0
	; SP(16): Objptr (opt_11)  = RP(0): Objptr (opt_11)
	%r4302 = load %Objptr, %Objptr* %regP_0
	%r4303 = load %Pointer, %Pointer* %stackTop
	%r4304 = getelementptr inbounds i8, %Pointer %r4303, i32 16
	%r4305 = bitcast %Pointer %r4304 to %Objptr*
	store %Objptr %r4302, %Objptr* %r4305
	; Goto L_join_17
	br label %L_join_17

L_926:
	; CCall {args = (<GCState>, 0x0, SW64(0): Word64, 0x17), frameInfo = Some {frameLayoutsIndex = 135}, func = {args = (GCState, Word64, Word64, Word64), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int64, Word64), res = Some Objptr}, return = Objptr (opt_11), symbolScope = private, target = GC_arrayAllocate}, return = Some L_927}
	; GetOperands
	%r4306 = bitcast %struct.GC_state* @gcState to %Pointer
	%r4307 = load %Pointer, %Pointer* %stackTop
	%r4308 = getelementptr inbounds i8, %Pointer %r4307, i32 0
	%r4309 = bitcast %Pointer %r4308 to %Word64*
	%r4310 = load %Word64, %Word64* %r4309
	%r4311 = load %Pointer, %Pointer* %stackTop
	%r4312 = getelementptr inbounds i8, %Pointer %r4311, i32 48
	%r4313 = bitcast %Pointer %r4312 to %uintptr_t*
	store %uintptr_t 135, %uintptr_t* %r4313
	; Push(56)
	%r4314 = load %Pointer, %Pointer* %stackTop
	%r4315 = getelementptr inbounds i8, %Pointer %r4314, i32 56
	store %Pointer %r4315, %Pointer* %stackTop
	; FlushFrontier
	%r4316 = bitcast %struct.GC_state* @gcState to %Pointer
	%r4317 = getelementptr inbounds i8, %Pointer %r4316, i32 0
	%r4318 = bitcast %Pointer %r4317 to %Pointer*
	%r4319 = load %Pointer, %Pointer* %frontier
	store %Pointer %r4319, %Pointer* %r4318
	; FlushStackTop
	%r4320 = bitcast %struct.GC_state* @gcState to %Pointer
	%r4321 = getelementptr inbounds i8, %Pointer %r4320, i32 16
	%r4322 = bitcast %Pointer %r4321 to %Pointer*
	%r4323 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r4323, %Pointer* %r4322
	; Call
	%r4324 = call %Objptr @GC_arrayAllocate(%Pointer %r4306, %Word64 0, %Word64 %r4310, %Word64 23)
	store %Objptr %r4324, %Objptr* @CReturnP
	; CacheFrontier
	%r4325 = bitcast %struct.GC_state* @gcState to %Pointer
	%r4326 = getelementptr inbounds i8, %Pointer %r4325, i32 0
	%r4327 = bitcast %Pointer %r4326 to %Pointer*
	%r4328 = load %Pointer, %Pointer* %r4327
	store %Pointer %r4328, %Pointer* %frontier
	; CacheStackTop
	%r4329 = bitcast %struct.GC_state* @gcState to %Pointer
	%r4330 = getelementptr inbounds i8, %Pointer %r4329, i32 16
	%r4331 = bitcast %Pointer %r4330 to %Pointer*
	%r4332 = load %Pointer, %Pointer* %r4331
	store %Pointer %r4332, %Pointer* %stackTop
	br label %L_927

L_925:
	; RW32(0): Word32  = Word64_equal (0x0, SW64(0): Word64)
	%r4333 = load %Pointer, %Pointer* %stackTop
	%r4334 = getelementptr inbounds i8, %Pointer %r4333, i32 0
	%r4335 = bitcast %Pointer %r4334 to %Word64*
	%r4336 = load %Word64, %Word64* %r4335
	%r4338 = icmp eq %Word64 0, %r4336
	%r4337 = zext i1 %r4338 to %Word32
	store %Word32 %r4337, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_926), (0x1, L_933))}
	%r4339 = load %Word32, %Word32* %regW32_0
	%r4340 = trunc %Word32 %r4339 to i1
	br i1 %r4340, label %L_933, label %L_926

L_924:
	; SW64(0): Word64  = WordS32_extdToWord64 (RW32(1): Word32)
	%r4341 = load %Word32, %Word32* %regW32_1
	%r4342 = sext %Word32 %r4341 to %Word64
	%r4343 = load %Pointer, %Pointer* %stackTop
	%r4344 = getelementptr inbounds i8, %Pointer %r4343, i32 0
	%r4345 = bitcast %Pointer %r4344 to %Word64*
	store %Word64 %r4342, %Word64* %r4345
	; RW32(0): Word32  = WordU64_lt (0x7FFFFFFF, SW64(0): Word64)
	%r4346 = load %Pointer, %Pointer* %stackTop
	%r4347 = getelementptr inbounds i8, %Pointer %r4346, i32 0
	%r4348 = bitcast %Pointer %r4347 to %Word64*
	%r4349 = load %Word64, %Word64* %r4348
	%r4351 = icmp ult %Word64 2147483647, %r4349
	%r4350 = zext i1 %r4351 to %Word32
	store %Word32 %r4350, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_925), (0x1, L_934))}
	%r4352 = load %Word32, %Word32* %regW32_0
	%r4353 = trunc %Word32 %r4352 to i1
	br i1 %r4353, label %L_934, label %L_925

L_923:
	; Arith {prim = WordS32_subCheck, args = (RW32(0): Word32, 0x1), dst = RW32(1): Word32, overflow = L_712, success = L_924}
	%r4354 = load %Word32, %Word32* %regW32_0
	%r4355 = call {%Word32, i1} @llvm.ssub.with.overflow.i32(%Word32 %r4354, %Word32 1)
	%r4356 = extractvalue {%Word32, i1} %r4355, 0
	%r4357 = extractvalue {%Word32, i1} %r4355, 1
	store %Word32 %r4356, %Word32* %regW32_1
	br i1 %r4357, label %L_712, label %L_924

L_922:
	; CW64 (<Frontier>)  = 0x57
	%r4358 = load %Pointer, %Pointer* %frontier
	%r4359 = bitcast %Pointer %r4358 to %Word64*
	store %Word64 87, %Word64* %r4359
	; RQ(80): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r4360 = load %Pointer, %Pointer* %frontier
	%r4362 = ptrtoint %Pointer %r4360 to %uintptr_t
	%r4363 = add %uintptr_t %r4362, 8
	%r4361 = inttoptr %uintptr_t %r4363 to %Pointer
	store %CPointer %r4361, %CPointer* %regQ_80
	; SP(8): Objptr (opt_43)  = Cast (RQ(80): CPointer, Objptr (opt_43))
	%r4364 = load %CPointer, %CPointer* %regQ_80
	%r4365 = bitcast %CPointer %r4364 to %Objptr
	%r4366 = load %Pointer, %Pointer* %stackTop
	%r4367 = getelementptr inbounds i8, %Pointer %r4366, i32 8
	%r4368 = bitcast %Pointer %r4367 to %Objptr*
	store %Objptr %r4365, %Objptr* %r4368
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r4369 = load %Pointer, %Pointer* %frontier
	%r4371 = ptrtoint %Pointer %r4369 to %uintptr_t
	%r4372 = add %uintptr_t %r4371, 24
	%r4370 = inttoptr %uintptr_t %r4372 to %Pointer
	store %Pointer %r4370, %Pointer* %frontier
	; OP (SP(8): Objptr (opt_43), 0): Objptr (opt_3)  = SP(0): Objptr (opt_3)
	%r4373 = load %Pointer, %Pointer* %stackTop
	%r4374 = getelementptr inbounds i8, %Pointer %r4373, i32 0
	%r4375 = bitcast %Pointer %r4374 to %Objptr*
	%r4376 = load %Objptr, %Objptr* %r4375
	%r4377 = load %Pointer, %Pointer* %stackTop
	%r4378 = getelementptr inbounds i8, %Pointer %r4377, i32 8
	%r4379 = bitcast %Pointer %r4378 to %Objptr*
	%r4380 = load %Objptr, %Objptr* %r4379
	%r4381 = getelementptr inbounds i8, %Objptr %r4380, i32 0
	%r4382 = bitcast %Objptr %r4381 to %Objptr*
	store %Objptr %r4376, %Objptr* %r4382
	; OP (SP(8): Objptr (opt_43), 8): Objptr (opt_43)  = Cast (0x1, Objptr (opt_43))
	%r4383 = inttoptr %Word64 1 to %Objptr
	%r4384 = load %Pointer, %Pointer* %stackTop
	%r4385 = getelementptr inbounds i8, %Pointer %r4384, i32 8
	%r4386 = bitcast %Pointer %r4385 to %Objptr*
	%r4387 = load %Objptr, %Objptr* %r4386
	%r4388 = getelementptr inbounds i8, %Objptr %r4387, i32 8
	%r4389 = bitcast %Objptr %r4388 to %Objptr*
	store %Objptr %r4383, %Objptr* %r4389
	; Arith {prim = Word32_negCheck, args = (SW32(24): Word32), dst = RW32(0): Word32, overflow = L_712, success = L_923}
	%r4390 = load %Pointer, %Pointer* %stackTop
	%r4391 = getelementptr inbounds i8, %Pointer %r4390, i32 24
	%r4392 = bitcast %Pointer %r4391 to %Word32*
	%r4393 = load %Word32, %Word32* %r4392
	%r4394 = call {%Word32, i1} @llvm.ssub.with.overflow.i32(%Word32 0, %Word32 %r4393)
	%r4395 = extractvalue {%Word32, i1} %r4394, 0
	%r4396 = extractvalue {%Word32, i1} %r4394, 1
	store %Word32 %r4395, %Word32* %regW32_0
	br i1 %r4396, label %L_712, label %L_923

L_921:
	; RW32(2): Word32  = WordS32_lt (SW32(24): Word32, RW32(0): Word32)
	%r4397 = load %Pointer, %Pointer* %stackTop
	%r4398 = getelementptr inbounds i8, %Pointer %r4397, i32 24
	%r4399 = bitcast %Pointer %r4398 to %Word32*
	%r4400 = load %Word32, %Word32* %r4399
	%r4401 = load %Word32, %Word32* %regW32_0
	%r4403 = icmp slt %Word32 %r4400, %r4401
	%r4402 = zext i1 %r4403 to %Word32
	store %Word32 %r4402, %Word32* %regW32_2
	; switch {test = RW32(2): Word32, default = None, cases = ((0x0, L_922), (0x1, L_935))}
	%r4404 = load %Word32, %Word32* %regW32_2
	%r4405 = trunc %Word32 %r4404 to i1
	br i1 %r4405, label %L_935, label %L_922

L_920:
	; RW32(0): Word32  = 0xFFFFFFFD
	store %Word32 4294967293, %Word32* %regW32_0
	; Goto L_921
	br label %L_921

L_919:
	; switch {test = RW32(1): Word32, default = None, cases = ((0x0, L_920), (0x1, L_936))}
	%r4406 = load %Word32, %Word32* %regW32_1
	%r4407 = trunc %Word32 %r4406 to i1
	br i1 %r4407, label %L_936, label %L_920

L_918:
	; Goto L_781
	br label %L_781

L_917:
	; SP(24): Objptr (opt_3)  = SP(0): Objptr (opt_3)
	%r4408 = load %Pointer, %Pointer* %stackTop
	%r4409 = getelementptr inbounds i8, %Pointer %r4408, i32 0
	%r4410 = bitcast %Pointer %r4409 to %Objptr*
	%r4411 = load %Objptr, %Objptr* %r4410
	%r4412 = load %Pointer, %Pointer* %stackTop
	%r4413 = getelementptr inbounds i8, %Pointer %r4412, i32 24
	%r4414 = bitcast %Pointer %r4413 to %Objptr*
	store %Objptr %r4411, %Objptr* %r4414
	; Goto L_893
	br label %L_893

L_916:
	; Goto L_826
	br label %L_826

L_915:
	; SP(24): Objptr (opt_11)  = glob {index = 22, isRoot = true, ty = Objptr (opt_11)}
	%r4415 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 22
	%r4416 = load %Objptr, %Objptr* %r4415
	%r4417 = load %Pointer, %Pointer* %stackTop
	%r4418 = getelementptr inbounds i8, %Pointer %r4417, i32 24
	%r4419 = bitcast %Pointer %r4418 to %Objptr*
	store %Objptr %r4416, %Objptr* %r4419
	; Goto L_join_15
	br label %L_join_15

L_914:
	; Push(-56)
	%r4420 = load %Pointer, %Pointer* %stackTop
	%r4421 = getelementptr inbounds i8, %Pointer %r4420, i32 -56
	store %Pointer %r4421, %Pointer* %stackTop
	; Goto L_891
	br label %L_891

L_913:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 134}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_914}
	; GetOperands
	%r4422 = bitcast %struct.GC_state* @gcState to %Pointer
	%r4423 = load %Pointer, %Pointer* %stackTop
	%r4424 = getelementptr inbounds i8, %Pointer %r4423, i32 48
	%r4425 = bitcast %Pointer %r4424 to %uintptr_t*
	store %uintptr_t 134, %uintptr_t* %r4425
	; Push(56)
	%r4426 = load %Pointer, %Pointer* %stackTop
	%r4427 = getelementptr inbounds i8, %Pointer %r4426, i32 56
	store %Pointer %r4427, %Pointer* %stackTop
	; FlushFrontier
	%r4428 = bitcast %struct.GC_state* @gcState to %Pointer
	%r4429 = getelementptr inbounds i8, %Pointer %r4428, i32 0
	%r4430 = bitcast %Pointer %r4429 to %Pointer*
	%r4431 = load %Pointer, %Pointer* %frontier
	store %Pointer %r4431, %Pointer* %r4430
	; FlushStackTop
	%r4432 = bitcast %struct.GC_state* @gcState to %Pointer
	%r4433 = getelementptr inbounds i8, %Pointer %r4432, i32 16
	%r4434 = bitcast %Pointer %r4433 to %Pointer*
	%r4435 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r4435, %Pointer* %r4434
	; Call
	call void @GC_collect(%Pointer %r4422, %Word64 0, %Word32 0)
	; CacheFrontier
	%r4436 = bitcast %struct.GC_state* @gcState to %Pointer
	%r4437 = getelementptr inbounds i8, %Pointer %r4436, i32 0
	%r4438 = bitcast %Pointer %r4437 to %Pointer*
	%r4439 = load %Pointer, %Pointer* %r4438
	store %Pointer %r4439, %Pointer* %frontier
	; CacheStackTop
	%r4440 = bitcast %struct.GC_state* @gcState to %Pointer
	%r4441 = getelementptr inbounds i8, %Pointer %r4440, i32 16
	%r4442 = bitcast %Pointer %r4441 to %Pointer*
	%r4443 = load %Pointer, %Pointer* %r4442
	store %Pointer %r4443, %Pointer* %stackTop
	br label %L_914

L_912:
	; RP(0): Objptr (opt_3)  = SP(0): Objptr (opt_3)
	%r4444 = load %Pointer, %Pointer* %stackTop
	%r4445 = getelementptr inbounds i8, %Pointer %r4444, i32 0
	%r4446 = bitcast %Pointer %r4445 to %Objptr*
	%r4447 = load %Objptr, %Objptr* %r4446
	store %Objptr %r4447, %Objptr* %regP_0
	; Goto L_901
	br label %L_901

L_911:
	; Goto L_895
	br label %L_895

L_910:
	; RW32(0): Word32  = Word64_equal (SW64(32): Word64, SW64(8): Word64)
	%r4448 = load %Pointer, %Pointer* %stackTop
	%r4449 = getelementptr inbounds i8, %Pointer %r4448, i32 32
	%r4450 = bitcast %Pointer %r4449 to %Word64*
	%r4451 = load %Word64, %Word64* %r4450
	%r4452 = load %Pointer, %Pointer* %stackTop
	%r4453 = getelementptr inbounds i8, %Pointer %r4452, i32 8
	%r4454 = bitcast %Pointer %r4453 to %Word64*
	%r4455 = load %Word64, %Word64* %r4454
	%r4457 = icmp eq %Word64 %r4451, %r4455
	%r4456 = zext i1 %r4457 to %Word32
	store %Word32 %r4456, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_911), (0x1, L_912))}
	%r4458 = load %Word32, %Word32* %regW32_0
	%r4459 = trunc %Word32 %r4458 to i1
	br i1 %r4459, label %L_912, label %L_911

L_909:
	; Goto L_826
	br label %L_826

L_908:
	; SP(8): Objptr (opt_11)  = glob {index = 22, isRoot = true, ty = Objptr (opt_11)}
	%r4460 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 22
	%r4461 = load %Objptr, %Objptr* %r4460
	%r4462 = load %Pointer, %Pointer* %stackTop
	%r4463 = getelementptr inbounds i8, %Pointer %r4462, i32 8
	%r4464 = bitcast %Pointer %r4463 to %Objptr*
	store %Objptr %r4461, %Objptr* %r4464
	; Goto L_join_16
	br label %L_join_16

L_907:
	; Push(-56)
	%r4465 = load %Pointer, %Pointer* %stackTop
	%r4466 = getelementptr inbounds i8, %Pointer %r4465, i32 -56
	store %Pointer %r4466, %Pointer* %stackTop
	; Goto L_899
	br label %L_899

L_906:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 133}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_907}
	; GetOperands
	%r4467 = bitcast %struct.GC_state* @gcState to %Pointer
	%r4468 = load %Pointer, %Pointer* %stackTop
	%r4469 = getelementptr inbounds i8, %Pointer %r4468, i32 48
	%r4470 = bitcast %Pointer %r4469 to %uintptr_t*
	store %uintptr_t 133, %uintptr_t* %r4470
	; Push(56)
	%r4471 = load %Pointer, %Pointer* %stackTop
	%r4472 = getelementptr inbounds i8, %Pointer %r4471, i32 56
	store %Pointer %r4472, %Pointer* %stackTop
	; FlushFrontier
	%r4473 = bitcast %struct.GC_state* @gcState to %Pointer
	%r4474 = getelementptr inbounds i8, %Pointer %r4473, i32 0
	%r4475 = bitcast %Pointer %r4474 to %Pointer*
	%r4476 = load %Pointer, %Pointer* %frontier
	store %Pointer %r4476, %Pointer* %r4475
	; FlushStackTop
	%r4477 = bitcast %struct.GC_state* @gcState to %Pointer
	%r4478 = getelementptr inbounds i8, %Pointer %r4477, i32 16
	%r4479 = bitcast %Pointer %r4478 to %Pointer*
	%r4480 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r4480, %Pointer* %r4479
	; Call
	call void @GC_collect(%Pointer %r4467, %Word64 0, %Word32 0)
	; CacheFrontier
	%r4481 = bitcast %struct.GC_state* @gcState to %Pointer
	%r4482 = getelementptr inbounds i8, %Pointer %r4481, i32 0
	%r4483 = bitcast %Pointer %r4482 to %Pointer*
	%r4484 = load %Pointer, %Pointer* %r4483
	store %Pointer %r4484, %Pointer* %frontier
	; CacheStackTop
	%r4485 = bitcast %struct.GC_state* @gcState to %Pointer
	%r4486 = getelementptr inbounds i8, %Pointer %r4485, i32 16
	%r4487 = bitcast %Pointer %r4486 to %Pointer*
	%r4488 = load %Pointer, %Pointer* %r4487
	store %Pointer %r4488, %Pointer* %stackTop
	br label %L_907

L_905:
	; Push(-56)
	%r4489 = load %Pointer, %Pointer* %stackTop
	%r4490 = getelementptr inbounds i8, %Pointer %r4489, i32 -56
	store %Pointer %r4490, %Pointer* %stackTop
	; Goto L_903
	br label %L_903

L_904:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 132}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_905}
	; GetOperands
	%r4491 = bitcast %struct.GC_state* @gcState to %Pointer
	%r4492 = load %Pointer, %Pointer* %stackTop
	%r4493 = getelementptr inbounds i8, %Pointer %r4492, i32 48
	%r4494 = bitcast %Pointer %r4493 to %uintptr_t*
	store %uintptr_t 132, %uintptr_t* %r4494
	; Push(56)
	%r4495 = load %Pointer, %Pointer* %stackTop
	%r4496 = getelementptr inbounds i8, %Pointer %r4495, i32 56
	store %Pointer %r4496, %Pointer* %stackTop
	; FlushFrontier
	%r4497 = bitcast %struct.GC_state* @gcState to %Pointer
	%r4498 = getelementptr inbounds i8, %Pointer %r4497, i32 0
	%r4499 = bitcast %Pointer %r4498 to %Pointer*
	%r4500 = load %Pointer, %Pointer* %frontier
	store %Pointer %r4500, %Pointer* %r4499
	; FlushStackTop
	%r4501 = bitcast %struct.GC_state* @gcState to %Pointer
	%r4502 = getelementptr inbounds i8, %Pointer %r4501, i32 16
	%r4503 = bitcast %Pointer %r4502 to %Pointer*
	%r4504 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r4504, %Pointer* %r4503
	; Call
	call void @GC_collect(%Pointer %r4491, %Word64 0, %Word32 0)
	; CacheFrontier
	%r4505 = bitcast %struct.GC_state* @gcState to %Pointer
	%r4506 = getelementptr inbounds i8, %Pointer %r4505, i32 0
	%r4507 = bitcast %Pointer %r4506 to %Pointer*
	%r4508 = load %Pointer, %Pointer* %r4507
	store %Pointer %r4508, %Pointer* %frontier
	; CacheStackTop
	%r4509 = bitcast %struct.GC_state* @gcState to %Pointer
	%r4510 = getelementptr inbounds i8, %Pointer %r4509, i32 16
	%r4511 = bitcast %Pointer %r4510 to %Pointer*
	%r4512 = load %Pointer, %Pointer* %r4511
	store %Pointer %r4512, %Pointer* %stackTop
	br label %L_905

L_903:
	; CW64 (<Frontier>)  = 0x57
	%r4513 = load %Pointer, %Pointer* %frontier
	%r4514 = bitcast %Pointer %r4513 to %Word64*
	store %Word64 87, %Word64* %r4514
	; RQ(79): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r4515 = load %Pointer, %Pointer* %frontier
	%r4517 = ptrtoint %Pointer %r4515 to %uintptr_t
	%r4518 = add %uintptr_t %r4517, 8
	%r4516 = inttoptr %uintptr_t %r4518 to %Pointer
	store %CPointer %r4516, %CPointer* %regQ_79
	; RP(0): Objptr (opt_43)  = Cast (RQ(79): CPointer, Objptr (opt_43))
	%r4519 = load %CPointer, %CPointer* %regQ_79
	%r4520 = bitcast %CPointer %r4519 to %Objptr
	store %Objptr %r4520, %Objptr* %regP_0
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r4521 = load %Pointer, %Pointer* %frontier
	%r4523 = ptrtoint %Pointer %r4521 to %uintptr_t
	%r4524 = add %uintptr_t %r4523, 24
	%r4522 = inttoptr %uintptr_t %r4524 to %Pointer
	store %Pointer %r4522, %Pointer* %frontier
	; OP (RP(0): Objptr (opt_43), 0): Objptr (opt_3)  = SP(0): Objptr (opt_3)
	%r4525 = load %Pointer, %Pointer* %stackTop
	%r4526 = getelementptr inbounds i8, %Pointer %r4525, i32 0
	%r4527 = bitcast %Pointer %r4526 to %Objptr*
	%r4528 = load %Objptr, %Objptr* %r4527
	%r4529 = load %Objptr, %Objptr* %regP_0
	%r4530 = getelementptr inbounds i8, %Objptr %r4529, i32 0
	%r4531 = bitcast %Objptr %r4530 to %Objptr*
	store %Objptr %r4528, %Objptr* %r4531
	; OP (RP(0): Objptr (opt_43), 8): Objptr (opt_43)  = Cast (0x1, Objptr (opt_43))
	%r4532 = inttoptr %Word64 1 to %Objptr
	%r4533 = load %Objptr, %Objptr* %regP_0
	%r4534 = getelementptr inbounds i8, %Objptr %r4533, i32 8
	%r4535 = bitcast %Objptr %r4534 to %Objptr*
	store %Objptr %r4532, %Objptr* %r4535
	; CW64 (<Frontier>)  = 0x57
	%r4536 = load %Pointer, %Pointer* %frontier
	%r4537 = bitcast %Pointer %r4536 to %Word64*
	store %Word64 87, %Word64* %r4537
	; RQ(78): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r4538 = load %Pointer, %Pointer* %frontier
	%r4540 = ptrtoint %Pointer %r4538 to %uintptr_t
	%r4541 = add %uintptr_t %r4540, 8
	%r4539 = inttoptr %uintptr_t %r4541 to %Pointer
	store %CPointer %r4539, %CPointer* %regQ_78
	; RP(1): Objptr (opt_43)  = Cast (RQ(78): CPointer, Objptr (opt_43))
	%r4542 = load %CPointer, %CPointer* %regQ_78
	%r4543 = bitcast %CPointer %r4542 to %Objptr
	store %Objptr %r4543, %Objptr* %regP_1
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r4544 = load %Pointer, %Pointer* %frontier
	%r4546 = ptrtoint %Pointer %r4544 to %uintptr_t
	%r4547 = add %uintptr_t %r4546, 24
	%r4545 = inttoptr %uintptr_t %r4547 to %Pointer
	store %Pointer %r4545, %Pointer* %frontier
	; OP (RP(1): Objptr (opt_43), 0): Objptr (opt_3)  = SP(40): Objptr (opt_3)
	%r4548 = load %Pointer, %Pointer* %stackTop
	%r4549 = getelementptr inbounds i8, %Pointer %r4548, i32 40
	%r4550 = bitcast %Pointer %r4549 to %Objptr*
	%r4551 = load %Objptr, %Objptr* %r4550
	%r4552 = load %Objptr, %Objptr* %regP_1
	%r4553 = getelementptr inbounds i8, %Objptr %r4552, i32 0
	%r4554 = bitcast %Objptr %r4553 to %Objptr*
	store %Objptr %r4551, %Objptr* %r4554
	; OP (RP(1): Objptr (opt_43), 8): Objptr (opt_43)  = RP(0): Objptr (opt_43)
	%r4555 = load %Objptr, %Objptr* %regP_0
	%r4556 = load %Objptr, %Objptr* %regP_1
	%r4557 = getelementptr inbounds i8, %Objptr %r4556, i32 8
	%r4558 = bitcast %Objptr %r4557 to %Objptr*
	store %Objptr %r4555, %Objptr* %r4558
	; SP(0): Objptr (opt_43)  = RP(1): Objptr (opt_43)
	%r4559 = load %Objptr, %Objptr* %regP_1
	%r4560 = load %Pointer, %Pointer* %stackTop
	%r4561 = getelementptr inbounds i8, %Pointer %r4560, i32 0
	%r4562 = bitcast %Pointer %r4561 to %Objptr*
	store %Objptr %r4559, %Objptr* %r4562
	br label %concat_0

L_902:
	; Push(-56)
	%r4563 = load %Pointer, %Pointer* %stackTop
	%r4564 = getelementptr inbounds i8, %Pointer %r4563, i32 -56
	store %Pointer %r4564, %Pointer* %stackTop
	; SP(0): Objptr (opt_3)  = SP(56): Objptr (opt_3)
	%r4565 = load %Pointer, %Pointer* %stackTop
	%r4566 = getelementptr inbounds i8, %Pointer %r4565, i32 56
	%r4567 = bitcast %Pointer %r4566 to %Objptr*
	%r4568 = load %Objptr, %Objptr* %r4567
	%r4569 = load %Pointer, %Pointer* %stackTop
	%r4570 = getelementptr inbounds i8, %Pointer %r4569, i32 0
	%r4571 = bitcast %Pointer %r4570 to %Objptr*
	store %Objptr %r4568, %Objptr* %r4571
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r4572 = bitcast %struct.GC_state* @gcState to %Pointer
	%r4573 = getelementptr inbounds i8, %Pointer %r4572, i32 8
	%r4574 = bitcast %Pointer %r4573 to %CPointer*
	%r4575 = load %CPointer, %CPointer* %r4574
	%r4576 = load %Pointer, %Pointer* %frontier
	%r4578 = icmp ult %Pointer %r4575, %r4576
	%r4577 = zext i1 %r4578 to %Word32
	store %Word32 %r4577, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_903), (0x1, L_904))}
	%r4579 = load %Word32, %Word32* %regW32_0
	%r4580 = trunc %Word32 %r4579 to i1
	br i1 %r4580, label %L_904, label %L_903

L_901:
	; CW64 (<Frontier>)  = 0x57
	%r4581 = load %Pointer, %Pointer* %frontier
	%r4582 = bitcast %Pointer %r4581 to %Word64*
	store %Word64 87, %Word64* %r4582
	; RQ(77): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r4583 = load %Pointer, %Pointer* %frontier
	%r4585 = ptrtoint %Pointer %r4583 to %uintptr_t
	%r4586 = add %uintptr_t %r4585, 8
	%r4584 = inttoptr %uintptr_t %r4586 to %Pointer
	store %CPointer %r4584, %CPointer* %regQ_77
	; RP(1): Objptr (opt_43)  = Cast (RQ(77): CPointer, Objptr (opt_43))
	%r4587 = load %CPointer, %CPointer* %regQ_77
	%r4588 = bitcast %CPointer %r4587 to %Objptr
	store %Objptr %r4588, %Objptr* %regP_1
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r4589 = load %Pointer, %Pointer* %frontier
	%r4591 = ptrtoint %Pointer %r4589 to %uintptr_t
	%r4592 = add %uintptr_t %r4591, 24
	%r4590 = inttoptr %uintptr_t %r4592 to %Pointer
	store %Pointer %r4590, %Pointer* %frontier
	; OP (RP(1): Objptr (opt_43), 0): Objptr (opt_3)  = RP(0): Objptr (opt_3)
	%r4593 = load %Objptr, %Objptr* %regP_0
	%r4594 = load %Objptr, %Objptr* %regP_1
	%r4595 = getelementptr inbounds i8, %Objptr %r4594, i32 0
	%r4596 = bitcast %Objptr %r4595 to %Objptr*
	store %Objptr %r4593, %Objptr* %r4596
	; OP (RP(1): Objptr (opt_43), 8): Objptr (opt_43)  = Cast (0x1, Objptr (opt_43))
	%r4597 = inttoptr %Word64 1 to %Objptr
	%r4598 = load %Objptr, %Objptr* %regP_1
	%r4599 = getelementptr inbounds i8, %Objptr %r4598, i32 8
	%r4600 = bitcast %Objptr %r4599 to %Objptr*
	store %Objptr %r4597, %Objptr* %r4600
	; CW64 (<Frontier>)  = 0x57
	%r4601 = load %Pointer, %Pointer* %frontier
	%r4602 = bitcast %Pointer %r4601 to %Word64*
	store %Word64 87, %Word64* %r4602
	; RQ(76): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r4603 = load %Pointer, %Pointer* %frontier
	%r4605 = ptrtoint %Pointer %r4603 to %uintptr_t
	%r4606 = add %uintptr_t %r4605, 8
	%r4604 = inttoptr %uintptr_t %r4606 to %Pointer
	store %CPointer %r4604, %CPointer* %regQ_76
	; RP(2): Objptr (opt_43)  = Cast (RQ(76): CPointer, Objptr (opt_43))
	%r4607 = load %CPointer, %CPointer* %regQ_76
	%r4608 = bitcast %CPointer %r4607 to %Objptr
	store %Objptr %r4608, %Objptr* %regP_2
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r4609 = load %Pointer, %Pointer* %frontier
	%r4611 = ptrtoint %Pointer %r4609 to %uintptr_t
	%r4612 = add %uintptr_t %r4611, 24
	%r4610 = inttoptr %uintptr_t %r4612 to %Pointer
	store %Pointer %r4610, %Pointer* %frontier
	; OP (RP(2): Objptr (opt_43), 0): Objptr (opt_3)  = glob {index = 136, isRoot = true, ty = Objptr (opt_3)}
	%r4613 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 136
	%r4614 = load %Objptr, %Objptr* %r4613
	%r4615 = load %Objptr, %Objptr* %regP_2
	%r4616 = getelementptr inbounds i8, %Objptr %r4615, i32 0
	%r4617 = bitcast %Objptr %r4616 to %Objptr*
	store %Objptr %r4614, %Objptr* %r4617
	; OP (RP(2): Objptr (opt_43), 8): Objptr (opt_43)  = RP(1): Objptr (opt_43)
	%r4618 = load %Objptr, %Objptr* %regP_1
	%r4619 = load %Objptr, %Objptr* %regP_2
	%r4620 = getelementptr inbounds i8, %Objptr %r4619, i32 8
	%r4621 = bitcast %Objptr %r4620 to %Objptr*
	store %Objptr %r4618, %Objptr* %r4621
	; CW64 (<Frontier>)  = 0x57
	%r4622 = load %Pointer, %Pointer* %frontier
	%r4623 = bitcast %Pointer %r4622 to %Word64*
	store %Word64 87, %Word64* %r4623
	; RQ(75): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r4624 = load %Pointer, %Pointer* %frontier
	%r4626 = ptrtoint %Pointer %r4624 to %uintptr_t
	%r4627 = add %uintptr_t %r4626, 8
	%r4625 = inttoptr %uintptr_t %r4627 to %Pointer
	store %CPointer %r4625, %CPointer* %regQ_75
	; RP(3): Objptr (opt_43)  = Cast (RQ(75): CPointer, Objptr (opt_43))
	%r4628 = load %CPointer, %CPointer* %regQ_75
	%r4629 = bitcast %CPointer %r4628 to %Objptr
	store %Objptr %r4629, %Objptr* %regP_3
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r4630 = load %Pointer, %Pointer* %frontier
	%r4632 = ptrtoint %Pointer %r4630 to %uintptr_t
	%r4633 = add %uintptr_t %r4632, 24
	%r4631 = inttoptr %uintptr_t %r4633 to %Pointer
	store %Pointer %r4631, %Pointer* %frontier
	; OP (RP(3): Objptr (opt_43), 0): Objptr (opt_3)  = SP(24): Objptr (opt_3)
	%r4634 = load %Pointer, %Pointer* %stackTop
	%r4635 = getelementptr inbounds i8, %Pointer %r4634, i32 24
	%r4636 = bitcast %Pointer %r4635 to %Objptr*
	%r4637 = load %Objptr, %Objptr* %r4636
	%r4638 = load %Objptr, %Objptr* %regP_3
	%r4639 = getelementptr inbounds i8, %Objptr %r4638, i32 0
	%r4640 = bitcast %Objptr %r4639 to %Objptr*
	store %Objptr %r4637, %Objptr* %r4640
	; OP (RP(3): Objptr (opt_43), 8): Objptr (opt_43)  = RP(2): Objptr (opt_43)
	%r4641 = load %Objptr, %Objptr* %regP_2
	%r4642 = load %Objptr, %Objptr* %regP_3
	%r4643 = getelementptr inbounds i8, %Objptr %r4642, i32 8
	%r4644 = bitcast %Objptr %r4643 to %Objptr*
	store %Objptr %r4641, %Objptr* %r4644
	; SP(56): Objptr (opt_43)  = RP(3): Objptr (opt_43)
	%r4645 = load %Objptr, %Objptr* %regP_3
	%r4646 = load %Pointer, %Pointer* %stackTop
	%r4647 = getelementptr inbounds i8, %Pointer %r4646, i32 56
	%r4648 = bitcast %Pointer %r4647 to %Objptr*
	store %Objptr %r4645, %Objptr* %r4648
	%r4649 = load %Pointer, %Pointer* %stackTop
	%r4650 = getelementptr inbounds i8, %Pointer %r4649, i32 48
	%r4651 = bitcast %Pointer %r4650 to %uintptr_t*
	store %uintptr_t 131, %uintptr_t* %r4651
	; Push(56)
	%r4652 = load %Pointer, %Pointer* %stackTop
	%r4653 = getelementptr inbounds i8, %Pointer %r4652, i32 56
	store %Pointer %r4653, %Pointer* %stackTop
	br label %concat_0

L_900:
	; Push(-56)
	%r4654 = load %Pointer, %Pointer* %stackTop
	%r4655 = getelementptr inbounds i8, %Pointer %r4654, i32 -56
	store %Pointer %r4655, %Pointer* %stackTop
	; OW64 (SP(8): Objptr (opt_11), ~8): Word64  = 0x7
	%r4656 = load %Pointer, %Pointer* %stackTop
	%r4657 = getelementptr inbounds i8, %Pointer %r4656, i32 8
	%r4658 = bitcast %Pointer %r4657 to %Objptr*
	%r4659 = load %Objptr, %Objptr* %r4658
	%r4660 = getelementptr inbounds i8, %Objptr %r4659, i32 -8
	%r4661 = bitcast %Objptr %r4660 to %Word64*
	store %Word64 7, %Word64* %r4661
	; RP(0): Objptr (opt_3)  = Cast (SP(8): Objptr (opt_11), Objptr (opt_3))
	%r4662 = load %Pointer, %Pointer* %stackTop
	%r4663 = getelementptr inbounds i8, %Pointer %r4662, i32 8
	%r4664 = bitcast %Pointer %r4663 to %Objptr*
	%r4665 = load %Objptr, %Objptr* %r4664
	%r4666 = bitcast %Objptr %r4665 to %Objptr
	store %Objptr %r4666, %Objptr* %regP_0
	; Goto L_901
	br label %L_901

L_899:
	; CCall {args = (<GCState>, SP(8): Objptr (opt_11), 0x0, SP(0): Objptr (opt_3), SW64(16): Word64, SW64(32): Word64), frameInfo = Some {frameLayoutsIndex = 130}, func = {args = (GCState, Objptr (opt_11), Word64, Objptr (opt_3), Word64, Word64), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Objptr, Int64, Objptr, Int64, Int64), res = None}, return = Bits0, symbolScope = private, target = GC_arrayCopy}, return = Some L_900}
	; GetOperands
	%r4667 = bitcast %struct.GC_state* @gcState to %Pointer
	%r4668 = load %Pointer, %Pointer* %stackTop
	%r4669 = getelementptr inbounds i8, %Pointer %r4668, i32 8
	%r4670 = bitcast %Pointer %r4669 to %Objptr*
	%r4671 = load %Objptr, %Objptr* %r4670
	%r4672 = load %Pointer, %Pointer* %stackTop
	%r4673 = getelementptr inbounds i8, %Pointer %r4672, i32 0
	%r4674 = bitcast %Pointer %r4673 to %Objptr*
	%r4675 = load %Objptr, %Objptr* %r4674
	%r4676 = load %Pointer, %Pointer* %stackTop
	%r4677 = getelementptr inbounds i8, %Pointer %r4676, i32 16
	%r4678 = bitcast %Pointer %r4677 to %Word64*
	%r4679 = load %Word64, %Word64* %r4678
	%r4680 = load %Pointer, %Pointer* %stackTop
	%r4681 = getelementptr inbounds i8, %Pointer %r4680, i32 32
	%r4682 = bitcast %Pointer %r4681 to %Word64*
	%r4683 = load %Word64, %Word64* %r4682
	%r4684 = load %Pointer, %Pointer* %stackTop
	%r4685 = getelementptr inbounds i8, %Pointer %r4684, i32 48
	%r4686 = bitcast %Pointer %r4685 to %uintptr_t*
	store %uintptr_t 130, %uintptr_t* %r4686
	; Push(56)
	%r4687 = load %Pointer, %Pointer* %stackTop
	%r4688 = getelementptr inbounds i8, %Pointer %r4687, i32 56
	store %Pointer %r4688, %Pointer* %stackTop
	; FlushFrontier
	%r4689 = bitcast %struct.GC_state* @gcState to %Pointer
	%r4690 = getelementptr inbounds i8, %Pointer %r4689, i32 0
	%r4691 = bitcast %Pointer %r4690 to %Pointer*
	%r4692 = load %Pointer, %Pointer* %frontier
	store %Pointer %r4692, %Pointer* %r4691
	; FlushStackTop
	%r4693 = bitcast %struct.GC_state* @gcState to %Pointer
	%r4694 = getelementptr inbounds i8, %Pointer %r4693, i32 16
	%r4695 = bitcast %Pointer %r4694 to %Pointer*
	%r4696 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r4696, %Pointer* %r4695
	; Call
	call void @GC_arrayCopy(%Pointer %r4667, %Objptr %r4671, %Word64 0, %Objptr %r4675, %Word64 %r4679, %Word64 %r4683)
	; CacheFrontier
	%r4697 = bitcast %struct.GC_state* @gcState to %Pointer
	%r4698 = getelementptr inbounds i8, %Pointer %r4697, i32 0
	%r4699 = bitcast %Pointer %r4698 to %Pointer*
	%r4700 = load %Pointer, %Pointer* %r4699
	store %Pointer %r4700, %Pointer* %frontier
	; CacheStackTop
	%r4701 = bitcast %struct.GC_state* @gcState to %Pointer
	%r4702 = getelementptr inbounds i8, %Pointer %r4701, i32 16
	%r4703 = bitcast %Pointer %r4702 to %Pointer*
	%r4704 = load %Pointer, %Pointer* %r4703
	store %Pointer %r4704, %Pointer* %stackTop
	br label %L_900

L_join_16:
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r4705 = bitcast %struct.GC_state* @gcState to %Pointer
	%r4706 = getelementptr inbounds i8, %Pointer %r4705, i32 8
	%r4707 = bitcast %Pointer %r4706 to %CPointer*
	%r4708 = load %CPointer, %CPointer* %r4707
	%r4709 = load %Pointer, %Pointer* %frontier
	%r4711 = icmp ult %Pointer %r4708, %r4709
	%r4710 = zext i1 %r4711 to %Word32
	store %Word32 %r4710, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_899), (0x1, L_906))}
	%r4712 = load %Word32, %Word32* %regW32_0
	%r4713 = trunc %Word32 %r4712 to i1
	br i1 %r4713, label %L_906, label %L_899

L_898:
	; Push(-56)
	%r4714 = load %Pointer, %Pointer* %stackTop
	%r4715 = getelementptr inbounds i8, %Pointer %r4714, i32 -56
	store %Pointer %r4715, %Pointer* %stackTop
	%r4716 = load %Objptr, %Objptr* @CReturnP
	store %Objptr %r4716, %Objptr* %regP_0
	; SP(8): Objptr (opt_11)  = RP(0): Objptr (opt_11)
	%r4717 = load %Objptr, %Objptr* %regP_0
	%r4718 = load %Pointer, %Pointer* %stackTop
	%r4719 = getelementptr inbounds i8, %Pointer %r4718, i32 8
	%r4720 = bitcast %Pointer %r4719 to %Objptr*
	store %Objptr %r4717, %Objptr* %r4720
	; Goto L_join_16
	br label %L_join_16

L_897:
	; CCall {args = (<GCState>, 0x0, SW64(32): Word64, 0x17), frameInfo = Some {frameLayoutsIndex = 129}, func = {args = (GCState, Word64, Word64, Word64), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int64, Word64), res = Some Objptr}, return = Objptr (opt_11), symbolScope = private, target = GC_arrayAllocate}, return = Some L_898}
	; GetOperands
	%r4721 = bitcast %struct.GC_state* @gcState to %Pointer
	%r4722 = load %Pointer, %Pointer* %stackTop
	%r4723 = getelementptr inbounds i8, %Pointer %r4722, i32 32
	%r4724 = bitcast %Pointer %r4723 to %Word64*
	%r4725 = load %Word64, %Word64* %r4724
	%r4726 = load %Pointer, %Pointer* %stackTop
	%r4727 = getelementptr inbounds i8, %Pointer %r4726, i32 48
	%r4728 = bitcast %Pointer %r4727 to %uintptr_t*
	store %uintptr_t 129, %uintptr_t* %r4728
	; Push(56)
	%r4729 = load %Pointer, %Pointer* %stackTop
	%r4730 = getelementptr inbounds i8, %Pointer %r4729, i32 56
	store %Pointer %r4730, %Pointer* %stackTop
	; FlushFrontier
	%r4731 = bitcast %struct.GC_state* @gcState to %Pointer
	%r4732 = getelementptr inbounds i8, %Pointer %r4731, i32 0
	%r4733 = bitcast %Pointer %r4732 to %Pointer*
	%r4734 = load %Pointer, %Pointer* %frontier
	store %Pointer %r4734, %Pointer* %r4733
	; FlushStackTop
	%r4735 = bitcast %struct.GC_state* @gcState to %Pointer
	%r4736 = getelementptr inbounds i8, %Pointer %r4735, i32 16
	%r4737 = bitcast %Pointer %r4736 to %Pointer*
	%r4738 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r4738, %Pointer* %r4737
	; Call
	%r4739 = call %Objptr @GC_arrayAllocate(%Pointer %r4721, %Word64 0, %Word64 %r4725, %Word64 23)
	store %Objptr %r4739, %Objptr* @CReturnP
	; CacheFrontier
	%r4740 = bitcast %struct.GC_state* @gcState to %Pointer
	%r4741 = getelementptr inbounds i8, %Pointer %r4740, i32 0
	%r4742 = bitcast %Pointer %r4741 to %Pointer*
	%r4743 = load %Pointer, %Pointer* %r4742
	store %Pointer %r4743, %Pointer* %frontier
	; CacheStackTop
	%r4744 = bitcast %struct.GC_state* @gcState to %Pointer
	%r4745 = getelementptr inbounds i8, %Pointer %r4744, i32 16
	%r4746 = bitcast %Pointer %r4745 to %Pointer*
	%r4747 = load %Pointer, %Pointer* %r4746
	store %Pointer %r4747, %Pointer* %stackTop
	br label %L_898

L_896:
	; RW32(0): Word32  = Word64_equal (0x0, SW64(32): Word64)
	%r4748 = load %Pointer, %Pointer* %stackTop
	%r4749 = getelementptr inbounds i8, %Pointer %r4748, i32 32
	%r4750 = bitcast %Pointer %r4749 to %Word64*
	%r4751 = load %Word64, %Word64* %r4750
	%r4753 = icmp eq %Word64 0, %r4751
	%r4752 = zext i1 %r4753 to %Word32
	store %Word32 %r4752, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_897), (0x1, L_908))}
	%r4754 = load %Word32, %Word32* %regW32_0
	%r4755 = trunc %Word32 %r4754 to i1
	br i1 %r4755, label %L_908, label %L_897

L_895:
	; RW32(0): Word32  = WordU64_lt (0x7FFFFFFF, SW64(32): Word64)
	%r4756 = load %Pointer, %Pointer* %stackTop
	%r4757 = getelementptr inbounds i8, %Pointer %r4756, i32 32
	%r4758 = bitcast %Pointer %r4757 to %Word64*
	%r4759 = load %Word64, %Word64* %r4758
	%r4761 = icmp ult %Word64 2147483647, %r4759
	%r4760 = zext i1 %r4761 to %Word32
	store %Word32 %r4760, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_896), (0x1, L_909))}
	%r4762 = load %Word32, %Word32* %regW32_0
	%r4763 = trunc %Word32 %r4762 to i1
	br i1 %r4763, label %L_909, label %L_896

L_894:
	; Goto L_895
	br label %L_895

L_893:
	; SW64(32): Word64  = Word64_sub (SW64(8): Word64, SW64(16): Word64)
	%r4764 = load %Pointer, %Pointer* %stackTop
	%r4765 = getelementptr inbounds i8, %Pointer %r4764, i32 8
	%r4766 = bitcast %Pointer %r4765 to %Word64*
	%r4767 = load %Word64, %Word64* %r4766
	%r4768 = load %Pointer, %Pointer* %stackTop
	%r4769 = getelementptr inbounds i8, %Pointer %r4768, i32 16
	%r4770 = bitcast %Pointer %r4769 to %Word64*
	%r4771 = load %Word64, %Word64* %r4770
	%r4772 = sub %Word64 %r4767, %r4771
	%r4773 = load %Pointer, %Pointer* %stackTop
	%r4774 = getelementptr inbounds i8, %Pointer %r4773, i32 32
	%r4775 = bitcast %Pointer %r4774 to %Word64*
	store %Word64 %r4772, %Word64* %r4775
	; RW32(0): Word32  = Word64_equal (SW64(16): Word64, 0x0)
	%r4776 = load %Pointer, %Pointer* %stackTop
	%r4777 = getelementptr inbounds i8, %Pointer %r4776, i32 16
	%r4778 = bitcast %Pointer %r4777 to %Word64*
	%r4779 = load %Word64, %Word64* %r4778
	%r4781 = icmp eq %Word64 %r4779, 0
	%r4780 = zext i1 %r4781 to %Word32
	store %Word32 %r4780, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_894), (0x1, L_910))}
	%r4782 = load %Word32, %Word32* %regW32_0
	%r4783 = trunc %Word32 %r4782 to i1
	br i1 %r4783, label %L_910, label %L_894

L_892:
	; Push(-56)
	%r4784 = load %Pointer, %Pointer* %stackTop
	%r4785 = getelementptr inbounds i8, %Pointer %r4784, i32 -56
	store %Pointer %r4785, %Pointer* %stackTop
	; OW64 (SP(24): Objptr (opt_11), ~8): Word64  = 0x7
	%r4786 = load %Pointer, %Pointer* %stackTop
	%r4787 = getelementptr inbounds i8, %Pointer %r4786, i32 24
	%r4788 = bitcast %Pointer %r4787 to %Objptr*
	%r4789 = load %Objptr, %Objptr* %r4788
	%r4790 = getelementptr inbounds i8, %Objptr %r4789, i32 -8
	%r4791 = bitcast %Objptr %r4790 to %Word64*
	store %Word64 7, %Word64* %r4791
	; SP(24): Objptr (opt_3)  = Cast (SP(24): Objptr (opt_11), Objptr (opt_3))
	%r4792 = load %Pointer, %Pointer* %stackTop
	%r4793 = getelementptr inbounds i8, %Pointer %r4792, i32 24
	%r4794 = bitcast %Pointer %r4793 to %Objptr*
	%r4795 = load %Objptr, %Objptr* %r4794
	%r4796 = bitcast %Objptr %r4795 to %Objptr
	%r4797 = load %Pointer, %Pointer* %stackTop
	%r4798 = getelementptr inbounds i8, %Pointer %r4797, i32 24
	%r4799 = bitcast %Pointer %r4798 to %Objptr*
	store %Objptr %r4796, %Objptr* %r4799
	; Goto L_893
	br label %L_893

L_891:
	; CCall {args = (<GCState>, SP(24): Objptr (opt_11), 0x0, SP(0): Objptr (opt_3), 0x0, SW64(16): Word64), frameInfo = Some {frameLayoutsIndex = 128}, func = {args = (GCState, Objptr (opt_11), Word64, Objptr (opt_3), Word64, Word64), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Objptr, Int64, Objptr, Int64, Int64), res = None}, return = Bits0, symbolScope = private, target = GC_arrayCopy}, return = Some L_892}
	; GetOperands
	%r4800 = bitcast %struct.GC_state* @gcState to %Pointer
	%r4801 = load %Pointer, %Pointer* %stackTop
	%r4802 = getelementptr inbounds i8, %Pointer %r4801, i32 24
	%r4803 = bitcast %Pointer %r4802 to %Objptr*
	%r4804 = load %Objptr, %Objptr* %r4803
	%r4805 = load %Pointer, %Pointer* %stackTop
	%r4806 = getelementptr inbounds i8, %Pointer %r4805, i32 0
	%r4807 = bitcast %Pointer %r4806 to %Objptr*
	%r4808 = load %Objptr, %Objptr* %r4807
	%r4809 = load %Pointer, %Pointer* %stackTop
	%r4810 = getelementptr inbounds i8, %Pointer %r4809, i32 16
	%r4811 = bitcast %Pointer %r4810 to %Word64*
	%r4812 = load %Word64, %Word64* %r4811
	%r4813 = load %Pointer, %Pointer* %stackTop
	%r4814 = getelementptr inbounds i8, %Pointer %r4813, i32 48
	%r4815 = bitcast %Pointer %r4814 to %uintptr_t*
	store %uintptr_t 128, %uintptr_t* %r4815
	; Push(56)
	%r4816 = load %Pointer, %Pointer* %stackTop
	%r4817 = getelementptr inbounds i8, %Pointer %r4816, i32 56
	store %Pointer %r4817, %Pointer* %stackTop
	; FlushFrontier
	%r4818 = bitcast %struct.GC_state* @gcState to %Pointer
	%r4819 = getelementptr inbounds i8, %Pointer %r4818, i32 0
	%r4820 = bitcast %Pointer %r4819 to %Pointer*
	%r4821 = load %Pointer, %Pointer* %frontier
	store %Pointer %r4821, %Pointer* %r4820
	; FlushStackTop
	%r4822 = bitcast %struct.GC_state* @gcState to %Pointer
	%r4823 = getelementptr inbounds i8, %Pointer %r4822, i32 16
	%r4824 = bitcast %Pointer %r4823 to %Pointer*
	%r4825 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r4825, %Pointer* %r4824
	; Call
	call void @GC_arrayCopy(%Pointer %r4800, %Objptr %r4804, %Word64 0, %Objptr %r4808, %Word64 0, %Word64 %r4812)
	; CacheFrontier
	%r4826 = bitcast %struct.GC_state* @gcState to %Pointer
	%r4827 = getelementptr inbounds i8, %Pointer %r4826, i32 0
	%r4828 = bitcast %Pointer %r4827 to %Pointer*
	%r4829 = load %Pointer, %Pointer* %r4828
	store %Pointer %r4829, %Pointer* %frontier
	; CacheStackTop
	%r4830 = bitcast %struct.GC_state* @gcState to %Pointer
	%r4831 = getelementptr inbounds i8, %Pointer %r4830, i32 16
	%r4832 = bitcast %Pointer %r4831 to %Pointer*
	%r4833 = load %Pointer, %Pointer* %r4832
	store %Pointer %r4833, %Pointer* %stackTop
	br label %L_892

L_join_15:
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r4834 = bitcast %struct.GC_state* @gcState to %Pointer
	%r4835 = getelementptr inbounds i8, %Pointer %r4834, i32 8
	%r4836 = bitcast %Pointer %r4835 to %CPointer*
	%r4837 = load %CPointer, %CPointer* %r4836
	%r4838 = load %Pointer, %Pointer* %frontier
	%r4840 = icmp ult %Pointer %r4837, %r4838
	%r4839 = zext i1 %r4840 to %Word32
	store %Word32 %r4839, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_891), (0x1, L_913))}
	%r4841 = load %Word32, %Word32* %regW32_0
	%r4842 = trunc %Word32 %r4841 to i1
	br i1 %r4842, label %L_913, label %L_891

L_890:
	; Push(-56)
	%r4843 = load %Pointer, %Pointer* %stackTop
	%r4844 = getelementptr inbounds i8, %Pointer %r4843, i32 -56
	store %Pointer %r4844, %Pointer* %stackTop
	%r4845 = load %Objptr, %Objptr* @CReturnP
	store %Objptr %r4845, %Objptr* %regP_0
	; SP(24): Objptr (opt_11)  = RP(0): Objptr (opt_11)
	%r4846 = load %Objptr, %Objptr* %regP_0
	%r4847 = load %Pointer, %Pointer* %stackTop
	%r4848 = getelementptr inbounds i8, %Pointer %r4847, i32 24
	%r4849 = bitcast %Pointer %r4848 to %Objptr*
	store %Objptr %r4846, %Objptr* %r4849
	; Goto L_join_15
	br label %L_join_15

L_889:
	; CCall {args = (<GCState>, 0x0, SW64(16): Word64, 0x17), frameInfo = Some {frameLayoutsIndex = 127}, func = {args = (GCState, Word64, Word64, Word64), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int64, Word64), res = Some Objptr}, return = Objptr (opt_11), symbolScope = private, target = GC_arrayAllocate}, return = Some L_890}
	; GetOperands
	%r4850 = bitcast %struct.GC_state* @gcState to %Pointer
	%r4851 = load %Pointer, %Pointer* %stackTop
	%r4852 = getelementptr inbounds i8, %Pointer %r4851, i32 16
	%r4853 = bitcast %Pointer %r4852 to %Word64*
	%r4854 = load %Word64, %Word64* %r4853
	%r4855 = load %Pointer, %Pointer* %stackTop
	%r4856 = getelementptr inbounds i8, %Pointer %r4855, i32 48
	%r4857 = bitcast %Pointer %r4856 to %uintptr_t*
	store %uintptr_t 127, %uintptr_t* %r4857
	; Push(56)
	%r4858 = load %Pointer, %Pointer* %stackTop
	%r4859 = getelementptr inbounds i8, %Pointer %r4858, i32 56
	store %Pointer %r4859, %Pointer* %stackTop
	; FlushFrontier
	%r4860 = bitcast %struct.GC_state* @gcState to %Pointer
	%r4861 = getelementptr inbounds i8, %Pointer %r4860, i32 0
	%r4862 = bitcast %Pointer %r4861 to %Pointer*
	%r4863 = load %Pointer, %Pointer* %frontier
	store %Pointer %r4863, %Pointer* %r4862
	; FlushStackTop
	%r4864 = bitcast %struct.GC_state* @gcState to %Pointer
	%r4865 = getelementptr inbounds i8, %Pointer %r4864, i32 16
	%r4866 = bitcast %Pointer %r4865 to %Pointer*
	%r4867 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r4867, %Pointer* %r4866
	; Call
	%r4868 = call %Objptr @GC_arrayAllocate(%Pointer %r4850, %Word64 0, %Word64 %r4854, %Word64 23)
	store %Objptr %r4868, %Objptr* @CReturnP
	; CacheFrontier
	%r4869 = bitcast %struct.GC_state* @gcState to %Pointer
	%r4870 = getelementptr inbounds i8, %Pointer %r4869, i32 0
	%r4871 = bitcast %Pointer %r4870 to %Pointer*
	%r4872 = load %Pointer, %Pointer* %r4871
	store %Pointer %r4872, %Pointer* %frontier
	; CacheStackTop
	%r4873 = bitcast %struct.GC_state* @gcState to %Pointer
	%r4874 = getelementptr inbounds i8, %Pointer %r4873, i32 16
	%r4875 = bitcast %Pointer %r4874 to %Pointer*
	%r4876 = load %Pointer, %Pointer* %r4875
	store %Pointer %r4876, %Pointer* %stackTop
	br label %L_890

L_888:
	; RW32(0): Word32  = Word64_equal (0x0, SW64(16): Word64)
	%r4877 = load %Pointer, %Pointer* %stackTop
	%r4878 = getelementptr inbounds i8, %Pointer %r4877, i32 16
	%r4879 = bitcast %Pointer %r4878 to %Word64*
	%r4880 = load %Word64, %Word64* %r4879
	%r4882 = icmp eq %Word64 0, %r4880
	%r4881 = zext i1 %r4882 to %Word32
	store %Word32 %r4881, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_889), (0x1, L_915))}
	%r4883 = load %Word32, %Word32* %regW32_0
	%r4884 = trunc %Word32 %r4883 to i1
	br i1 %r4884, label %L_915, label %L_889

L_887:
	; RW32(0): Word32  = WordU64_lt (0x7FFFFFFF, SW64(16): Word64)
	%r4885 = load %Pointer, %Pointer* %stackTop
	%r4886 = getelementptr inbounds i8, %Pointer %r4885, i32 16
	%r4887 = bitcast %Pointer %r4886 to %Word64*
	%r4888 = load %Word64, %Word64* %r4887
	%r4890 = icmp ult %Word64 2147483647, %r4888
	%r4889 = zext i1 %r4890 to %Word32
	store %Word32 %r4889, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_888), (0x1, L_916))}
	%r4891 = load %Word32, %Word32* %regW32_0
	%r4892 = trunc %Word32 %r4891 to i1
	br i1 %r4892, label %L_916, label %L_888

L_886:
	; RW32(0): Word32  = Word64_equal (SW64(16): Word64, SW64(8): Word64)
	%r4893 = load %Pointer, %Pointer* %stackTop
	%r4894 = getelementptr inbounds i8, %Pointer %r4893, i32 16
	%r4895 = bitcast %Pointer %r4894 to %Word64*
	%r4896 = load %Word64, %Word64* %r4895
	%r4897 = load %Pointer, %Pointer* %stackTop
	%r4898 = getelementptr inbounds i8, %Pointer %r4897, i32 8
	%r4899 = bitcast %Pointer %r4898 to %Word64*
	%r4900 = load %Word64, %Word64* %r4899
	%r4902 = icmp eq %Word64 %r4896, %r4900
	%r4901 = zext i1 %r4902 to %Word32
	store %Word32 %r4901, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_887), (0x1, L_917))}
	%r4903 = load %Word32, %Word32* %regW32_0
	%r4904 = trunc %Word32 %r4903 to i1
	br i1 %r4904, label %L_917, label %L_887

L_885:
	; RW32(0): Word32  = Word32_add (SW32(24): Word32, 0x1)
	%r4905 = load %Pointer, %Pointer* %stackTop
	%r4906 = getelementptr inbounds i8, %Pointer %r4905, i32 24
	%r4907 = bitcast %Pointer %r4906 to %Word32*
	%r4908 = load %Word32, %Word32* %r4907
	%r4909 = add %Word32 %r4908, 1
	store %Word32 %r4909, %Word32* %regW32_0
	; SW64(16): Word64  = WordS32_extdToWord64 (RW32(0): Word32)
	%r4910 = load %Word32, %Word32* %regW32_0
	%r4911 = sext %Word32 %r4910 to %Word64
	%r4912 = load %Pointer, %Pointer* %stackTop
	%r4913 = getelementptr inbounds i8, %Pointer %r4912, i32 16
	%r4914 = bitcast %Pointer %r4913 to %Word64*
	store %Word64 %r4911, %Word64* %r4914
	; RW32(1): Word32  = WordU64_lt (SW64(8): Word64, SW64(16): Word64)
	%r4915 = load %Pointer, %Pointer* %stackTop
	%r4916 = getelementptr inbounds i8, %Pointer %r4915, i32 8
	%r4917 = bitcast %Pointer %r4916 to %Word64*
	%r4918 = load %Word64, %Word64* %r4917
	%r4919 = load %Pointer, %Pointer* %stackTop
	%r4920 = getelementptr inbounds i8, %Pointer %r4919, i32 16
	%r4921 = bitcast %Pointer %r4920 to %Word64*
	%r4922 = load %Word64, %Word64* %r4921
	%r4924 = icmp ult %Word64 %r4918, %r4922
	%r4923 = zext i1 %r4924 to %Word32
	store %Word32 %r4923, %Word32* %regW32_1
	; switch {test = RW32(1): Word32, default = None, cases = ((0x0, L_886), (0x1, L_918))}
	%r4925 = load %Word32, %Word32* %regW32_1
	%r4926 = trunc %Word32 %r4925 to i1
	br i1 %r4926, label %L_918, label %L_886

L_884:
	; RW32(0): Word32  = WordS32_lt (SW32(24): Word32, 0x0)
	%r4927 = load %Pointer, %Pointer* %stackTop
	%r4928 = getelementptr inbounds i8, %Pointer %r4927, i32 24
	%r4929 = bitcast %Pointer %r4928 to %Word32*
	%r4930 = load %Word32, %Word32* %r4929
	%r4932 = icmp slt %Word32 %r4930, 0
	%r4931 = zext i1 %r4932 to %Word32
	store %Word32 %r4931, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_885), (0x1, L_919))}
	%r4933 = load %Word32, %Word32* %regW32_0
	%r4934 = trunc %Word32 %r4933 to i1
	br i1 %r4934, label %L_919, label %L_885

L_883:
	; Goto L_826
	br label %L_826

L_882:
	; SP(16): Objptr (opt_11)  = glob {index = 22, isRoot = true, ty = Objptr (opt_11)}
	%r4935 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 22
	%r4936 = load %Objptr, %Objptr* %r4935
	%r4937 = load %Pointer, %Pointer* %stackTop
	%r4938 = getelementptr inbounds i8, %Pointer %r4937, i32 16
	%r4939 = bitcast %Pointer %r4938 to %Objptr*
	store %Objptr %r4936, %Objptr* %r4939
	; Goto L_join_14
	br label %L_join_14

L_881:
	; XW8 (SP(16): Objptr (opt_11), RW64(0): Word64, 1, 0): Word8  = 0x30
	%r4940 = load %Pointer, %Pointer* %stackTop
	%r4941 = getelementptr inbounds i8, %Pointer %r4940, i32 16
	%r4942 = bitcast %Pointer %r4941 to %Objptr*
	%r4943 = load %Objptr, %Objptr* %r4942
	%r4944 = load %Word64, %Word64* %regW64_0
	%r4945 = mul nsw %Word64 %r4944, 1
	%r4946 = add nsw %Word64 %r4945, 0
	%r4947 = getelementptr inbounds i8, %Objptr %r4943, %Word64 %r4946
	%r4948 = bitcast %Objptr %r4947 to %Word8*
	store %Word8 48, %Word8* %r4948
	; RW64(1): Word64  = Word64_add (RW64(0): Word64, 0x1)
	%r4949 = load %Word64, %Word64* %regW64_0
	%r4950 = add %Word64 %r4949, 1
	store %Word64 %r4950, %Word64* %regW64_1
	; RW64(0): Word64  = RW64(1): Word64
	%r4951 = load %Word64, %Word64* %regW64_1
	store %Word64 %r4951, %Word64* %regW64_0
	; Goto loop_49
	br label %loop_49

L_880:
	; Push(-56)
	%r4952 = load %Pointer, %Pointer* %stackTop
	%r4953 = getelementptr inbounds i8, %Pointer %r4952, i32 -56
	store %Pointer %r4953, %Pointer* %stackTop
	; Goto L_878
	br label %L_878

L_879:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 126}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_880}
	; GetOperands
	%r4954 = bitcast %struct.GC_state* @gcState to %Pointer
	%r4955 = load %Pointer, %Pointer* %stackTop
	%r4956 = getelementptr inbounds i8, %Pointer %r4955, i32 48
	%r4957 = bitcast %Pointer %r4956 to %uintptr_t*
	store %uintptr_t 126, %uintptr_t* %r4957
	; Push(56)
	%r4958 = load %Pointer, %Pointer* %stackTop
	%r4959 = getelementptr inbounds i8, %Pointer %r4958, i32 56
	store %Pointer %r4959, %Pointer* %stackTop
	; FlushFrontier
	%r4960 = bitcast %struct.GC_state* @gcState to %Pointer
	%r4961 = getelementptr inbounds i8, %Pointer %r4960, i32 0
	%r4962 = bitcast %Pointer %r4961 to %Pointer*
	%r4963 = load %Pointer, %Pointer* %frontier
	store %Pointer %r4963, %Pointer* %r4962
	; FlushStackTop
	%r4964 = bitcast %struct.GC_state* @gcState to %Pointer
	%r4965 = getelementptr inbounds i8, %Pointer %r4964, i32 16
	%r4966 = bitcast %Pointer %r4965 to %Pointer*
	%r4967 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r4967, %Pointer* %r4966
	; Call
	call void @GC_collect(%Pointer %r4954, %Word64 0, %Word32 0)
	; CacheFrontier
	%r4968 = bitcast %struct.GC_state* @gcState to %Pointer
	%r4969 = getelementptr inbounds i8, %Pointer %r4968, i32 0
	%r4970 = bitcast %Pointer %r4969 to %Pointer*
	%r4971 = load %Pointer, %Pointer* %r4970
	store %Pointer %r4971, %Pointer* %frontier
	; CacheStackTop
	%r4972 = bitcast %struct.GC_state* @gcState to %Pointer
	%r4973 = getelementptr inbounds i8, %Pointer %r4972, i32 16
	%r4974 = bitcast %Pointer %r4973 to %Pointer*
	%r4975 = load %Pointer, %Pointer* %r4974
	store %Pointer %r4975, %Pointer* %stackTop
	br label %L_880

L_878:
	; OW64 (SP(16): Objptr (opt_11), ~8): Word64  = 0x7
	%r4976 = load %Pointer, %Pointer* %stackTop
	%r4977 = getelementptr inbounds i8, %Pointer %r4976, i32 16
	%r4978 = bitcast %Pointer %r4977 to %Objptr*
	%r4979 = load %Objptr, %Objptr* %r4978
	%r4980 = getelementptr inbounds i8, %Objptr %r4979, i32 -8
	%r4981 = bitcast %Objptr %r4980 to %Word64*
	store %Word64 7, %Word64* %r4981
	; CW64 (<Frontier>)  = 0x57
	%r4982 = load %Pointer, %Pointer* %frontier
	%r4983 = bitcast %Pointer %r4982 to %Word64*
	store %Word64 87, %Word64* %r4983
	; RQ(74): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r4984 = load %Pointer, %Pointer* %frontier
	%r4986 = ptrtoint %Pointer %r4984 to %uintptr_t
	%r4987 = add %uintptr_t %r4986, 8
	%r4985 = inttoptr %uintptr_t %r4987 to %Pointer
	store %CPointer %r4985, %CPointer* %regQ_74
	; RP(0): Objptr (opt_43)  = Cast (RQ(74): CPointer, Objptr (opt_43))
	%r4988 = load %CPointer, %CPointer* %regQ_74
	%r4989 = bitcast %CPointer %r4988 to %Objptr
	store %Objptr %r4989, %Objptr* %regP_0
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r4990 = load %Pointer, %Pointer* %frontier
	%r4992 = ptrtoint %Pointer %r4990 to %uintptr_t
	%r4993 = add %uintptr_t %r4992, 24
	%r4991 = inttoptr %uintptr_t %r4993 to %Pointer
	store %Pointer %r4991, %Pointer* %frontier
	; OP (RP(0): Objptr (opt_43), 0): Objptr (opt_3)  = Cast (SP(16): Objptr (opt_11), Objptr (opt_3))
	%r4994 = load %Pointer, %Pointer* %stackTop
	%r4995 = getelementptr inbounds i8, %Pointer %r4994, i32 16
	%r4996 = bitcast %Pointer %r4995 to %Objptr*
	%r4997 = load %Objptr, %Objptr* %r4996
	%r4998 = bitcast %Objptr %r4997 to %Objptr
	%r4999 = load %Objptr, %Objptr* %regP_0
	%r5000 = getelementptr inbounds i8, %Objptr %r4999, i32 0
	%r5001 = bitcast %Objptr %r5000 to %Objptr*
	store %Objptr %r4998, %Objptr* %r5001
	; OP (RP(0): Objptr (opt_43), 8): Objptr (opt_43)  = Cast (0x1, Objptr (opt_43))
	%r5002 = inttoptr %Word64 1 to %Objptr
	%r5003 = load %Objptr, %Objptr* %regP_0
	%r5004 = getelementptr inbounds i8, %Objptr %r5003, i32 8
	%r5005 = bitcast %Objptr %r5004 to %Objptr*
	store %Objptr %r5002, %Objptr* %r5005
	; CW64 (<Frontier>)  = 0x57
	%r5006 = load %Pointer, %Pointer* %frontier
	%r5007 = bitcast %Pointer %r5006 to %Word64*
	store %Word64 87, %Word64* %r5007
	; RQ(73): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r5008 = load %Pointer, %Pointer* %frontier
	%r5010 = ptrtoint %Pointer %r5008 to %uintptr_t
	%r5011 = add %uintptr_t %r5010, 8
	%r5009 = inttoptr %uintptr_t %r5011 to %Pointer
	store %CPointer %r5009, %CPointer* %regQ_73
	; RP(1): Objptr (opt_43)  = Cast (RQ(73): CPointer, Objptr (opt_43))
	%r5012 = load %CPointer, %CPointer* %regQ_73
	%r5013 = bitcast %CPointer %r5012 to %Objptr
	store %Objptr %r5013, %Objptr* %regP_1
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r5014 = load %Pointer, %Pointer* %frontier
	%r5016 = ptrtoint %Pointer %r5014 to %uintptr_t
	%r5017 = add %uintptr_t %r5016, 24
	%r5015 = inttoptr %uintptr_t %r5017 to %Pointer
	store %Pointer %r5015, %Pointer* %frontier
	; OP (RP(1): Objptr (opt_43), 0): Objptr (opt_3)  = SP(0): Objptr (opt_3)
	%r5018 = load %Pointer, %Pointer* %stackTop
	%r5019 = getelementptr inbounds i8, %Pointer %r5018, i32 0
	%r5020 = bitcast %Pointer %r5019 to %Objptr*
	%r5021 = load %Objptr, %Objptr* %r5020
	%r5022 = load %Objptr, %Objptr* %regP_1
	%r5023 = getelementptr inbounds i8, %Objptr %r5022, i32 0
	%r5024 = bitcast %Objptr %r5023 to %Objptr*
	store %Objptr %r5021, %Objptr* %r5024
	; OP (RP(1): Objptr (opt_43), 8): Objptr (opt_43)  = RP(0): Objptr (opt_43)
	%r5025 = load %Objptr, %Objptr* %regP_0
	%r5026 = load %Objptr, %Objptr* %regP_1
	%r5027 = getelementptr inbounds i8, %Objptr %r5026, i32 8
	%r5028 = bitcast %Objptr %r5027 to %Objptr*
	store %Objptr %r5025, %Objptr* %r5028
	; CW64 (<Frontier>)  = 0x57
	%r5029 = load %Pointer, %Pointer* %frontier
	%r5030 = bitcast %Pointer %r5029 to %Word64*
	store %Word64 87, %Word64* %r5030
	; RQ(72): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r5031 = load %Pointer, %Pointer* %frontier
	%r5033 = ptrtoint %Pointer %r5031 to %uintptr_t
	%r5034 = add %uintptr_t %r5033, 8
	%r5032 = inttoptr %uintptr_t %r5034 to %Pointer
	store %CPointer %r5032, %CPointer* %regQ_72
	; RP(2): Objptr (opt_43)  = Cast (RQ(72): CPointer, Objptr (opt_43))
	%r5035 = load %CPointer, %CPointer* %regQ_72
	%r5036 = bitcast %CPointer %r5035 to %Objptr
	store %Objptr %r5036, %Objptr* %regP_2
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r5037 = load %Pointer, %Pointer* %frontier
	%r5039 = ptrtoint %Pointer %r5037 to %uintptr_t
	%r5040 = add %uintptr_t %r5039, 24
	%r5038 = inttoptr %uintptr_t %r5040 to %Pointer
	store %Pointer %r5038, %Pointer* %frontier
	; OP (RP(2): Objptr (opt_43), 0): Objptr (opt_3)  = SP(40): Objptr (opt_3)
	%r5041 = load %Pointer, %Pointer* %stackTop
	%r5042 = getelementptr inbounds i8, %Pointer %r5041, i32 40
	%r5043 = bitcast %Pointer %r5042 to %Objptr*
	%r5044 = load %Objptr, %Objptr* %r5043
	%r5045 = load %Objptr, %Objptr* %regP_2
	%r5046 = getelementptr inbounds i8, %Objptr %r5045, i32 0
	%r5047 = bitcast %Objptr %r5046 to %Objptr*
	store %Objptr %r5044, %Objptr* %r5047
	; OP (RP(2): Objptr (opt_43), 8): Objptr (opt_43)  = RP(1): Objptr (opt_43)
	%r5048 = load %Objptr, %Objptr* %regP_1
	%r5049 = load %Objptr, %Objptr* %regP_2
	%r5050 = getelementptr inbounds i8, %Objptr %r5049, i32 8
	%r5051 = bitcast %Objptr %r5050 to %Objptr*
	store %Objptr %r5048, %Objptr* %r5051
	; SP(0): Objptr (opt_43)  = RP(2): Objptr (opt_43)
	%r5052 = load %Objptr, %Objptr* %regP_2
	%r5053 = load %Pointer, %Pointer* %stackTop
	%r5054 = getelementptr inbounds i8, %Pointer %r5053, i32 0
	%r5055 = bitcast %Pointer %r5054 to %Objptr*
	store %Objptr %r5052, %Objptr* %r5055
	br label %concat_0

L_877:
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r5056 = bitcast %struct.GC_state* @gcState to %Pointer
	%r5057 = getelementptr inbounds i8, %Pointer %r5056, i32 8
	%r5058 = bitcast %Pointer %r5057 to %CPointer*
	%r5059 = load %CPointer, %CPointer* %r5058
	%r5060 = load %Pointer, %Pointer* %frontier
	%r5062 = icmp ult %Pointer %r5059, %r5060
	%r5061 = zext i1 %r5062 to %Word32
	store %Word32 %r5061, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_878), (0x1, L_879))}
	%r5063 = load %Word32, %Word32* %regW32_0
	%r5064 = trunc %Word32 %r5063 to i1
	br i1 %r5064, label %L_879, label %L_878

loop_49:
	; RW32(0): Word32  = WordS64_lt (RW64(0): Word64, SW64(8): Word64)
	%r5065 = load %Word64, %Word64* %regW64_0
	%r5066 = load %Pointer, %Pointer* %stackTop
	%r5067 = getelementptr inbounds i8, %Pointer %r5066, i32 8
	%r5068 = bitcast %Pointer %r5067 to %Word64*
	%r5069 = load %Word64, %Word64* %r5068
	%r5071 = icmp slt %Word64 %r5065, %r5069
	%r5070 = zext i1 %r5071 to %Word32
	store %Word32 %r5070, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_877), (0x1, L_881))}
	%r5072 = load %Word32, %Word32* %regW32_0
	%r5073 = trunc %Word32 %r5072 to i1
	br i1 %r5073, label %L_881, label %L_877

L_join_14:
	; RW64(0): Word64  = 0x0
	store %Word64 0, %Word64* %regW64_0
	; Goto loop_49
	br label %loop_49

L_876:
	; Push(-56)
	%r5074 = load %Pointer, %Pointer* %stackTop
	%r5075 = getelementptr inbounds i8, %Pointer %r5074, i32 -56
	store %Pointer %r5075, %Pointer* %stackTop
	%r5076 = load %Objptr, %Objptr* @CReturnP
	store %Objptr %r5076, %Objptr* %regP_0
	; SP(16): Objptr (opt_11)  = RP(0): Objptr (opt_11)
	%r5077 = load %Objptr, %Objptr* %regP_0
	%r5078 = load %Pointer, %Pointer* %stackTop
	%r5079 = getelementptr inbounds i8, %Pointer %r5078, i32 16
	%r5080 = bitcast %Pointer %r5079 to %Objptr*
	store %Objptr %r5077, %Objptr* %r5080
	; Goto L_join_14
	br label %L_join_14

L_875:
	; CCall {args = (<GCState>, 0x0, SW64(8): Word64, 0x17), frameInfo = Some {frameLayoutsIndex = 125}, func = {args = (GCState, Word64, Word64, Word64), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int64, Word64), res = Some Objptr}, return = Objptr (opt_11), symbolScope = private, target = GC_arrayAllocate}, return = Some L_876}
	; GetOperands
	%r5081 = bitcast %struct.GC_state* @gcState to %Pointer
	%r5082 = load %Pointer, %Pointer* %stackTop
	%r5083 = getelementptr inbounds i8, %Pointer %r5082, i32 8
	%r5084 = bitcast %Pointer %r5083 to %Word64*
	%r5085 = load %Word64, %Word64* %r5084
	%r5086 = load %Pointer, %Pointer* %stackTop
	%r5087 = getelementptr inbounds i8, %Pointer %r5086, i32 48
	%r5088 = bitcast %Pointer %r5087 to %uintptr_t*
	store %uintptr_t 125, %uintptr_t* %r5088
	; Push(56)
	%r5089 = load %Pointer, %Pointer* %stackTop
	%r5090 = getelementptr inbounds i8, %Pointer %r5089, i32 56
	store %Pointer %r5090, %Pointer* %stackTop
	; FlushFrontier
	%r5091 = bitcast %struct.GC_state* @gcState to %Pointer
	%r5092 = getelementptr inbounds i8, %Pointer %r5091, i32 0
	%r5093 = bitcast %Pointer %r5092 to %Pointer*
	%r5094 = load %Pointer, %Pointer* %frontier
	store %Pointer %r5094, %Pointer* %r5093
	; FlushStackTop
	%r5095 = bitcast %struct.GC_state* @gcState to %Pointer
	%r5096 = getelementptr inbounds i8, %Pointer %r5095, i32 16
	%r5097 = bitcast %Pointer %r5096 to %Pointer*
	%r5098 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r5098, %Pointer* %r5097
	; Call
	%r5099 = call %Objptr @GC_arrayAllocate(%Pointer %r5081, %Word64 0, %Word64 %r5085, %Word64 23)
	store %Objptr %r5099, %Objptr* @CReturnP
	; CacheFrontier
	%r5100 = bitcast %struct.GC_state* @gcState to %Pointer
	%r5101 = getelementptr inbounds i8, %Pointer %r5100, i32 0
	%r5102 = bitcast %Pointer %r5101 to %Pointer*
	%r5103 = load %Pointer, %Pointer* %r5102
	store %Pointer %r5103, %Pointer* %frontier
	; CacheStackTop
	%r5104 = bitcast %struct.GC_state* @gcState to %Pointer
	%r5105 = getelementptr inbounds i8, %Pointer %r5104, i32 16
	%r5106 = bitcast %Pointer %r5105 to %Pointer*
	%r5107 = load %Pointer, %Pointer* %r5106
	store %Pointer %r5107, %Pointer* %stackTop
	br label %L_876

L_874:
	; RW32(0): Word32  = Word64_equal (0x0, SW64(8): Word64)
	%r5108 = load %Pointer, %Pointer* %stackTop
	%r5109 = getelementptr inbounds i8, %Pointer %r5108, i32 8
	%r5110 = bitcast %Pointer %r5109 to %Word64*
	%r5111 = load %Word64, %Word64* %r5110
	%r5113 = icmp eq %Word64 0, %r5111
	%r5112 = zext i1 %r5113 to %Word32
	store %Word32 %r5112, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_875), (0x1, L_882))}
	%r5114 = load %Word32, %Word32* %regW32_0
	%r5115 = trunc %Word32 %r5114 to i1
	br i1 %r5115, label %L_882, label %L_875

L_873:
	; SW64(8): Word64  = WordS32_extdToWord64 (RW32(0): Word32)
	%r5116 = load %Word32, %Word32* %regW32_0
	%r5117 = sext %Word32 %r5116 to %Word64
	%r5118 = load %Pointer, %Pointer* %stackTop
	%r5119 = getelementptr inbounds i8, %Pointer %r5118, i32 8
	%r5120 = bitcast %Pointer %r5119 to %Word64*
	store %Word64 %r5117, %Word64* %r5120
	; RW32(1): Word32  = WordU64_lt (0x7FFFFFFF, SW64(8): Word64)
	%r5121 = load %Pointer, %Pointer* %stackTop
	%r5122 = getelementptr inbounds i8, %Pointer %r5121, i32 8
	%r5123 = bitcast %Pointer %r5122 to %Word64*
	%r5124 = load %Word64, %Word64* %r5123
	%r5126 = icmp ult %Word64 2147483647, %r5124
	%r5125 = zext i1 %r5126 to %Word32
	store %Word32 %r5125, %Word32* %regW32_1
	; switch {test = RW32(1): Word32, default = None, cases = ((0x0, L_874), (0x1, L_883))}
	%r5127 = load %Word32, %Word32* %regW32_1
	%r5128 = trunc %Word32 %r5127 to i1
	br i1 %r5128, label %L_883, label %L_874

L_872:
	; Arith {prim = WordS32_subCheck, args = (SW32(24): Word32, RW32(2): Word32), dst = RW32(0): Word32, overflow = L_712, success = L_873}
	%r5129 = load %Pointer, %Pointer* %stackTop
	%r5130 = getelementptr inbounds i8, %Pointer %r5129, i32 24
	%r5131 = bitcast %Pointer %r5130 to %Word32*
	%r5132 = load %Word32, %Word32* %r5131
	%r5133 = load %Word32, %Word32* %regW32_2
	%r5134 = call {%Word32, i1} @llvm.ssub.with.overflow.i32(%Word32 %r5132, %Word32 %r5133)
	%r5135 = extractvalue {%Word32, i1} %r5134, 0
	%r5136 = extractvalue {%Word32, i1} %r5134, 1
	store %Word32 %r5135, %Word32* %regW32_0
	br i1 %r5136, label %L_712, label %L_873

L_871:
	; RW32(0): Word32  = WordS32_lt (SW32(24): Word32, RW32(2): Word32)
	%r5137 = load %Pointer, %Pointer* %stackTop
	%r5138 = getelementptr inbounds i8, %Pointer %r5137, i32 24
	%r5139 = bitcast %Pointer %r5138 to %Word32*
	%r5140 = load %Word32, %Word32* %r5139
	%r5141 = load %Word32, %Word32* %regW32_2
	%r5143 = icmp slt %Word32 %r5140, %r5141
	%r5142 = zext i1 %r5143 to %Word32
	store %Word32 %r5142, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_872), (0x1, L_884))}
	%r5144 = load %Word32, %Word32* %regW32_0
	%r5145 = trunc %Word32 %r5144 to i1
	br i1 %r5145, label %L_884, label %L_872

L_870:
	; Arith {prim = WordS32_subCheck, args = (RW32(0): Word32, 0x1), dst = RW32(2): Word32, overflow = L_712, success = L_871}
	%r5146 = load %Word32, %Word32* %regW32_0
	%r5147 = call {%Word32, i1} @llvm.ssub.with.overflow.i32(%Word32 %r5146, %Word32 1)
	%r5148 = extractvalue {%Word32, i1} %r5147, 0
	%r5149 = extractvalue {%Word32, i1} %r5147, 1
	store %Word32 %r5148, %Word32* %regW32_2
	br i1 %r5149, label %L_712, label %L_871

L_869:
	; RP(0): Objptr (opt_3)  = SP(0): Objptr (opt_3)
	%r5150 = load %Pointer, %Pointer* %stackTop
	%r5151 = getelementptr inbounds i8, %Pointer %r5150, i32 0
	%r5152 = bitcast %Pointer %r5151 to %Objptr*
	%r5153 = load %Objptr, %Objptr* %r5152
	store %Objptr %r5153, %Objptr* %regP_0
	; Goto L_860
	br label %L_860

L_868:
	; Goto L_781
	br label %L_781

L_867:
	; SP(16): Objptr (opt_3)  = SP(0): Objptr (opt_3)
	%r5154 = load %Pointer, %Pointer* %stackTop
	%r5155 = getelementptr inbounds i8, %Pointer %r5154, i32 0
	%r5156 = bitcast %Pointer %r5155 to %Objptr*
	%r5157 = load %Objptr, %Objptr* %r5156
	%r5158 = load %Pointer, %Pointer* %stackTop
	%r5159 = getelementptr inbounds i8, %Pointer %r5158, i32 16
	%r5160 = bitcast %Pointer %r5159 to %Objptr*
	store %Objptr %r5157, %Objptr* %r5160
	; Goto L_852
	br label %L_852

L_866:
	; Goto L_826
	br label %L_826

L_865:
	; SP(8): Objptr (opt_11)  = glob {index = 22, isRoot = true, ty = Objptr (opt_11)}
	%r5161 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 22
	%r5162 = load %Objptr, %Objptr* %r5161
	%r5163 = load %Pointer, %Pointer* %stackTop
	%r5164 = getelementptr inbounds i8, %Pointer %r5163, i32 8
	%r5165 = bitcast %Pointer %r5164 to %Objptr*
	store %Objptr %r5162, %Objptr* %r5165
	; Goto L_join_13
	br label %L_join_13

L_864:
	; Push(-56)
	%r5166 = load %Pointer, %Pointer* %stackTop
	%r5167 = getelementptr inbounds i8, %Pointer %r5166, i32 -56
	store %Pointer %r5167, %Pointer* %stackTop
	; Goto L_856
	br label %L_856

L_863:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 124}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_864}
	; GetOperands
	%r5168 = bitcast %struct.GC_state* @gcState to %Pointer
	%r5169 = load %Pointer, %Pointer* %stackTop
	%r5170 = getelementptr inbounds i8, %Pointer %r5169, i32 48
	%r5171 = bitcast %Pointer %r5170 to %uintptr_t*
	store %uintptr_t 124, %uintptr_t* %r5171
	; Push(56)
	%r5172 = load %Pointer, %Pointer* %stackTop
	%r5173 = getelementptr inbounds i8, %Pointer %r5172, i32 56
	store %Pointer %r5173, %Pointer* %stackTop
	; FlushFrontier
	%r5174 = bitcast %struct.GC_state* @gcState to %Pointer
	%r5175 = getelementptr inbounds i8, %Pointer %r5174, i32 0
	%r5176 = bitcast %Pointer %r5175 to %Pointer*
	%r5177 = load %Pointer, %Pointer* %frontier
	store %Pointer %r5177, %Pointer* %r5176
	; FlushStackTop
	%r5178 = bitcast %struct.GC_state* @gcState to %Pointer
	%r5179 = getelementptr inbounds i8, %Pointer %r5178, i32 16
	%r5180 = bitcast %Pointer %r5179 to %Pointer*
	%r5181 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r5181, %Pointer* %r5180
	; Call
	call void @GC_collect(%Pointer %r5168, %Word64 0, %Word32 0)
	; CacheFrontier
	%r5182 = bitcast %struct.GC_state* @gcState to %Pointer
	%r5183 = getelementptr inbounds i8, %Pointer %r5182, i32 0
	%r5184 = bitcast %Pointer %r5183 to %Pointer*
	%r5185 = load %Pointer, %Pointer* %r5184
	store %Pointer %r5185, %Pointer* %frontier
	; CacheStackTop
	%r5186 = bitcast %struct.GC_state* @gcState to %Pointer
	%r5187 = getelementptr inbounds i8, %Pointer %r5186, i32 16
	%r5188 = bitcast %Pointer %r5187 to %Pointer*
	%r5189 = load %Pointer, %Pointer* %r5188
	store %Pointer %r5189, %Pointer* %stackTop
	br label %L_864

L_862:
	; Push(-56)
	%r5190 = load %Pointer, %Pointer* %stackTop
	%r5191 = getelementptr inbounds i8, %Pointer %r5190, i32 -56
	store %Pointer %r5191, %Pointer* %stackTop
	; Goto L_859
	br label %L_859

L_861:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 123}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_862}
	; GetOperands
	%r5192 = bitcast %struct.GC_state* @gcState to %Pointer
	%r5193 = load %Pointer, %Pointer* %stackTop
	%r5194 = getelementptr inbounds i8, %Pointer %r5193, i32 48
	%r5195 = bitcast %Pointer %r5194 to %uintptr_t*
	store %uintptr_t 123, %uintptr_t* %r5195
	; Push(56)
	%r5196 = load %Pointer, %Pointer* %stackTop
	%r5197 = getelementptr inbounds i8, %Pointer %r5196, i32 56
	store %Pointer %r5197, %Pointer* %stackTop
	; FlushFrontier
	%r5198 = bitcast %struct.GC_state* @gcState to %Pointer
	%r5199 = getelementptr inbounds i8, %Pointer %r5198, i32 0
	%r5200 = bitcast %Pointer %r5199 to %Pointer*
	%r5201 = load %Pointer, %Pointer* %frontier
	store %Pointer %r5201, %Pointer* %r5200
	; FlushStackTop
	%r5202 = bitcast %struct.GC_state* @gcState to %Pointer
	%r5203 = getelementptr inbounds i8, %Pointer %r5202, i32 16
	%r5204 = bitcast %Pointer %r5203 to %Pointer*
	%r5205 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r5205, %Pointer* %r5204
	; Call
	call void @GC_collect(%Pointer %r5192, %Word64 0, %Word32 0)
	; CacheFrontier
	%r5206 = bitcast %struct.GC_state* @gcState to %Pointer
	%r5207 = getelementptr inbounds i8, %Pointer %r5206, i32 0
	%r5208 = bitcast %Pointer %r5207 to %Pointer*
	%r5209 = load %Pointer, %Pointer* %r5208
	store %Pointer %r5209, %Pointer* %frontier
	; CacheStackTop
	%r5210 = bitcast %struct.GC_state* @gcState to %Pointer
	%r5211 = getelementptr inbounds i8, %Pointer %r5210, i32 16
	%r5212 = bitcast %Pointer %r5211 to %Pointer*
	%r5213 = load %Pointer, %Pointer* %r5212
	store %Pointer %r5213, %Pointer* %stackTop
	br label %L_862

L_860:
	; CW64 (<Frontier>)  = 0x57
	%r5214 = load %Pointer, %Pointer* %frontier
	%r5215 = bitcast %Pointer %r5214 to %Word64*
	store %Word64 87, %Word64* %r5215
	; RQ(71): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r5216 = load %Pointer, %Pointer* %frontier
	%r5218 = ptrtoint %Pointer %r5216 to %uintptr_t
	%r5219 = add %uintptr_t %r5218, 8
	%r5217 = inttoptr %uintptr_t %r5219 to %Pointer
	store %CPointer %r5217, %CPointer* %regQ_71
	; RP(1): Objptr (opt_43)  = Cast (RQ(71): CPointer, Objptr (opt_43))
	%r5220 = load %CPointer, %CPointer* %regQ_71
	%r5221 = bitcast %CPointer %r5220 to %Objptr
	store %Objptr %r5221, %Objptr* %regP_1
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r5222 = load %Pointer, %Pointer* %frontier
	%r5224 = ptrtoint %Pointer %r5222 to %uintptr_t
	%r5225 = add %uintptr_t %r5224, 24
	%r5223 = inttoptr %uintptr_t %r5225 to %Pointer
	store %Pointer %r5223, %Pointer* %frontier
	; OP (RP(1): Objptr (opt_43), 0): Objptr (opt_3)  = RP(0): Objptr (opt_3)
	%r5226 = load %Objptr, %Objptr* %regP_0
	%r5227 = load %Objptr, %Objptr* %regP_1
	%r5228 = getelementptr inbounds i8, %Objptr %r5227, i32 0
	%r5229 = bitcast %Objptr %r5228 to %Objptr*
	store %Objptr %r5226, %Objptr* %r5229
	; OP (RP(1): Objptr (opt_43), 8): Objptr (opt_43)  = SP(24): Objptr (opt_43)
	%r5230 = load %Pointer, %Pointer* %stackTop
	%r5231 = getelementptr inbounds i8, %Pointer %r5230, i32 24
	%r5232 = bitcast %Pointer %r5231 to %Objptr*
	%r5233 = load %Objptr, %Objptr* %r5232
	%r5234 = load %Objptr, %Objptr* %regP_1
	%r5235 = getelementptr inbounds i8, %Objptr %r5234, i32 8
	%r5236 = bitcast %Objptr %r5235 to %Objptr*
	store %Objptr %r5233, %Objptr* %r5236
	; CW64 (<Frontier>)  = 0x57
	%r5237 = load %Pointer, %Pointer* %frontier
	%r5238 = bitcast %Pointer %r5237 to %Word64*
	store %Word64 87, %Word64* %r5238
	; RQ(70): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r5239 = load %Pointer, %Pointer* %frontier
	%r5241 = ptrtoint %Pointer %r5239 to %uintptr_t
	%r5242 = add %uintptr_t %r5241, 8
	%r5240 = inttoptr %uintptr_t %r5242 to %Pointer
	store %CPointer %r5240, %CPointer* %regQ_70
	; RP(2): Objptr (opt_43)  = Cast (RQ(70): CPointer, Objptr (opt_43))
	%r5243 = load %CPointer, %CPointer* %regQ_70
	%r5244 = bitcast %CPointer %r5243 to %Objptr
	store %Objptr %r5244, %Objptr* %regP_2
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r5245 = load %Pointer, %Pointer* %frontier
	%r5247 = ptrtoint %Pointer %r5245 to %uintptr_t
	%r5248 = add %uintptr_t %r5247, 24
	%r5246 = inttoptr %uintptr_t %r5248 to %Pointer
	store %Pointer %r5246, %Pointer* %frontier
	; OP (RP(2): Objptr (opt_43), 0): Objptr (opt_3)  = SP(40): Objptr (opt_3)
	%r5249 = load %Pointer, %Pointer* %stackTop
	%r5250 = getelementptr inbounds i8, %Pointer %r5249, i32 40
	%r5251 = bitcast %Pointer %r5250 to %Objptr*
	%r5252 = load %Objptr, %Objptr* %r5251
	%r5253 = load %Objptr, %Objptr* %regP_2
	%r5254 = getelementptr inbounds i8, %Objptr %r5253, i32 0
	%r5255 = bitcast %Objptr %r5254 to %Objptr*
	store %Objptr %r5252, %Objptr* %r5255
	; OP (RP(2): Objptr (opt_43), 8): Objptr (opt_43)  = RP(1): Objptr (opt_43)
	%r5256 = load %Objptr, %Objptr* %regP_1
	%r5257 = load %Objptr, %Objptr* %regP_2
	%r5258 = getelementptr inbounds i8, %Objptr %r5257, i32 8
	%r5259 = bitcast %Objptr %r5258 to %Objptr*
	store %Objptr %r5256, %Objptr* %r5259
	; SP(0): Objptr (opt_43)  = RP(2): Objptr (opt_43)
	%r5260 = load %Objptr, %Objptr* %regP_2
	%r5261 = load %Pointer, %Pointer* %stackTop
	%r5262 = getelementptr inbounds i8, %Pointer %r5261, i32 0
	%r5263 = bitcast %Pointer %r5262 to %Objptr*
	store %Objptr %r5260, %Objptr* %r5263
	br label %concat_0

L_859:
	; RP(0): Objptr (opt_3)  = SP(0): Objptr (opt_3)
	%r5264 = load %Pointer, %Pointer* %stackTop
	%r5265 = getelementptr inbounds i8, %Pointer %r5264, i32 0
	%r5266 = bitcast %Pointer %r5265 to %Objptr*
	%r5267 = load %Objptr, %Objptr* %r5266
	store %Objptr %r5267, %Objptr* %regP_0
	; Goto L_860
	br label %L_860

L_858:
	; Push(-56)
	%r5268 = load %Pointer, %Pointer* %stackTop
	%r5269 = getelementptr inbounds i8, %Pointer %r5268, i32 -56
	store %Pointer %r5269, %Pointer* %stackTop
	; SP(0): Objptr (opt_3)  = SP(56): Objptr (opt_3)
	%r5270 = load %Pointer, %Pointer* %stackTop
	%r5271 = getelementptr inbounds i8, %Pointer %r5270, i32 56
	%r5272 = bitcast %Pointer %r5271 to %Objptr*
	%r5273 = load %Objptr, %Objptr* %r5272
	%r5274 = load %Pointer, %Pointer* %stackTop
	%r5275 = getelementptr inbounds i8, %Pointer %r5274, i32 0
	%r5276 = bitcast %Pointer %r5275 to %Objptr*
	store %Objptr %r5273, %Objptr* %r5276
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r5277 = bitcast %struct.GC_state* @gcState to %Pointer
	%r5278 = getelementptr inbounds i8, %Pointer %r5277, i32 8
	%r5279 = bitcast %Pointer %r5278 to %CPointer*
	%r5280 = load %CPointer, %CPointer* %r5279
	%r5281 = load %Pointer, %Pointer* %frontier
	%r5283 = icmp ult %Pointer %r5280, %r5281
	%r5282 = zext i1 %r5283 to %Word32
	store %Word32 %r5282, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_859), (0x1, L_861))}
	%r5284 = load %Word32, %Word32* %regW32_0
	%r5285 = trunc %Word32 %r5284 to i1
	br i1 %r5285, label %L_861, label %L_859

L_857:
	; Push(-56)
	%r5286 = load %Pointer, %Pointer* %stackTop
	%r5287 = getelementptr inbounds i8, %Pointer %r5286, i32 -56
	store %Pointer %r5287, %Pointer* %stackTop
	; OW64 (SP(8): Objptr (opt_11), ~8): Word64  = 0x7
	%r5288 = load %Pointer, %Pointer* %stackTop
	%r5289 = getelementptr inbounds i8, %Pointer %r5288, i32 8
	%r5290 = bitcast %Pointer %r5289 to %Objptr*
	%r5291 = load %Objptr, %Objptr* %r5290
	%r5292 = getelementptr inbounds i8, %Objptr %r5291, i32 -8
	%r5293 = bitcast %Objptr %r5292 to %Word64*
	store %Word64 7, %Word64* %r5293
	; CW64 (<Frontier>)  = 0x57
	%r5294 = load %Pointer, %Pointer* %frontier
	%r5295 = bitcast %Pointer %r5294 to %Word64*
	store %Word64 87, %Word64* %r5295
	; RQ(69): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r5296 = load %Pointer, %Pointer* %frontier
	%r5298 = ptrtoint %Pointer %r5296 to %uintptr_t
	%r5299 = add %uintptr_t %r5298, 8
	%r5297 = inttoptr %uintptr_t %r5299 to %Pointer
	store %CPointer %r5297, %CPointer* %regQ_69
	; RP(0): Objptr (opt_43)  = Cast (RQ(69): CPointer, Objptr (opt_43))
	%r5300 = load %CPointer, %CPointer* %regQ_69
	%r5301 = bitcast %CPointer %r5300 to %Objptr
	store %Objptr %r5301, %Objptr* %regP_0
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r5302 = load %Pointer, %Pointer* %frontier
	%r5304 = ptrtoint %Pointer %r5302 to %uintptr_t
	%r5305 = add %uintptr_t %r5304, 24
	%r5303 = inttoptr %uintptr_t %r5305 to %Pointer
	store %Pointer %r5303, %Pointer* %frontier
	; OP (RP(0): Objptr (opt_43), 0): Objptr (opt_3)  = Cast (SP(8): Objptr (opt_11), Objptr (opt_3))
	%r5306 = load %Pointer, %Pointer* %stackTop
	%r5307 = getelementptr inbounds i8, %Pointer %r5306, i32 8
	%r5308 = bitcast %Pointer %r5307 to %Objptr*
	%r5309 = load %Objptr, %Objptr* %r5308
	%r5310 = bitcast %Objptr %r5309 to %Objptr
	%r5311 = load %Objptr, %Objptr* %regP_0
	%r5312 = getelementptr inbounds i8, %Objptr %r5311, i32 0
	%r5313 = bitcast %Objptr %r5312 to %Objptr*
	store %Objptr %r5310, %Objptr* %r5313
	; OP (RP(0): Objptr (opt_43), 8): Objptr (opt_43)  = Cast (0x1, Objptr (opt_43))
	%r5314 = inttoptr %Word64 1 to %Objptr
	%r5315 = load %Objptr, %Objptr* %regP_0
	%r5316 = getelementptr inbounds i8, %Objptr %r5315, i32 8
	%r5317 = bitcast %Objptr %r5316 to %Objptr*
	store %Objptr %r5314, %Objptr* %r5317
	; CW64 (<Frontier>)  = 0x57
	%r5318 = load %Pointer, %Pointer* %frontier
	%r5319 = bitcast %Pointer %r5318 to %Word64*
	store %Word64 87, %Word64* %r5319
	; RQ(68): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r5320 = load %Pointer, %Pointer* %frontier
	%r5322 = ptrtoint %Pointer %r5320 to %uintptr_t
	%r5323 = add %uintptr_t %r5322, 8
	%r5321 = inttoptr %uintptr_t %r5323 to %Pointer
	store %CPointer %r5321, %CPointer* %regQ_68
	; RP(1): Objptr (opt_43)  = Cast (RQ(68): CPointer, Objptr (opt_43))
	%r5324 = load %CPointer, %CPointer* %regQ_68
	%r5325 = bitcast %CPointer %r5324 to %Objptr
	store %Objptr %r5325, %Objptr* %regP_1
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r5326 = load %Pointer, %Pointer* %frontier
	%r5328 = ptrtoint %Pointer %r5326 to %uintptr_t
	%r5329 = add %uintptr_t %r5328, 24
	%r5327 = inttoptr %uintptr_t %r5329 to %Pointer
	store %Pointer %r5327, %Pointer* %frontier
	; OP (RP(1): Objptr (opt_43), 0): Objptr (opt_3)  = glob {index = 136, isRoot = true, ty = Objptr (opt_3)}
	%r5330 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 136
	%r5331 = load %Objptr, %Objptr* %r5330
	%r5332 = load %Objptr, %Objptr* %regP_1
	%r5333 = getelementptr inbounds i8, %Objptr %r5332, i32 0
	%r5334 = bitcast %Objptr %r5333 to %Objptr*
	store %Objptr %r5331, %Objptr* %r5334
	; OP (RP(1): Objptr (opt_43), 8): Objptr (opt_43)  = RP(0): Objptr (opt_43)
	%r5335 = load %Objptr, %Objptr* %regP_0
	%r5336 = load %Objptr, %Objptr* %regP_1
	%r5337 = getelementptr inbounds i8, %Objptr %r5336, i32 8
	%r5338 = bitcast %Objptr %r5337 to %Objptr*
	store %Objptr %r5335, %Objptr* %r5338
	; CW64 (<Frontier>)  = 0x57
	%r5339 = load %Pointer, %Pointer* %frontier
	%r5340 = bitcast %Pointer %r5339 to %Word64*
	store %Word64 87, %Word64* %r5340
	; RQ(67): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r5341 = load %Pointer, %Pointer* %frontier
	%r5343 = ptrtoint %Pointer %r5341 to %uintptr_t
	%r5344 = add %uintptr_t %r5343, 8
	%r5342 = inttoptr %uintptr_t %r5344 to %Pointer
	store %CPointer %r5342, %CPointer* %regQ_67
	; RP(2): Objptr (opt_43)  = Cast (RQ(67): CPointer, Objptr (opt_43))
	%r5345 = load %CPointer, %CPointer* %regQ_67
	%r5346 = bitcast %CPointer %r5345 to %Objptr
	store %Objptr %r5346, %Objptr* %regP_2
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r5347 = load %Pointer, %Pointer* %frontier
	%r5349 = ptrtoint %Pointer %r5347 to %uintptr_t
	%r5350 = add %uintptr_t %r5349, 24
	%r5348 = inttoptr %uintptr_t %r5350 to %Pointer
	store %Pointer %r5348, %Pointer* %frontier
	; OP (RP(2): Objptr (opt_43), 0): Objptr (opt_3)  = SP(16): Objptr (opt_3)
	%r5351 = load %Pointer, %Pointer* %stackTop
	%r5352 = getelementptr inbounds i8, %Pointer %r5351, i32 16
	%r5353 = bitcast %Pointer %r5352 to %Objptr*
	%r5354 = load %Objptr, %Objptr* %r5353
	%r5355 = load %Objptr, %Objptr* %regP_2
	%r5356 = getelementptr inbounds i8, %Objptr %r5355, i32 0
	%r5357 = bitcast %Objptr %r5356 to %Objptr*
	store %Objptr %r5354, %Objptr* %r5357
	; OP (RP(2): Objptr (opt_43), 8): Objptr (opt_43)  = RP(1): Objptr (opt_43)
	%r5358 = load %Objptr, %Objptr* %regP_1
	%r5359 = load %Objptr, %Objptr* %regP_2
	%r5360 = getelementptr inbounds i8, %Objptr %r5359, i32 8
	%r5361 = bitcast %Objptr %r5360 to %Objptr*
	store %Objptr %r5358, %Objptr* %r5361
	; SP(56): Objptr (opt_43)  = RP(2): Objptr (opt_43)
	%r5362 = load %Objptr, %Objptr* %regP_2
	%r5363 = load %Pointer, %Pointer* %stackTop
	%r5364 = getelementptr inbounds i8, %Pointer %r5363, i32 56
	%r5365 = bitcast %Pointer %r5364 to %Objptr*
	store %Objptr %r5362, %Objptr* %r5365
	%r5366 = load %Pointer, %Pointer* %stackTop
	%r5367 = getelementptr inbounds i8, %Pointer %r5366, i32 48
	%r5368 = bitcast %Pointer %r5367 to %uintptr_t*
	store %uintptr_t 122, %uintptr_t* %r5368
	; Push(56)
	%r5369 = load %Pointer, %Pointer* %stackTop
	%r5370 = getelementptr inbounds i8, %Pointer %r5369, i32 56
	store %Pointer %r5370, %Pointer* %stackTop
	br label %concat_0

L_856:
	; CCall {args = (<GCState>, SP(8): Objptr (opt_11), 0x0, SP(0): Objptr (opt_3), 0x1, SW64(32): Word64), frameInfo = Some {frameLayoutsIndex = 121}, func = {args = (GCState, Objptr (opt_11), Word64, Objptr (opt_3), Word64, Word64), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Objptr, Int64, Objptr, Int64, Int64), res = None}, return = Bits0, symbolScope = private, target = GC_arrayCopy}, return = Some L_857}
	; GetOperands
	%r5371 = bitcast %struct.GC_state* @gcState to %Pointer
	%r5372 = load %Pointer, %Pointer* %stackTop
	%r5373 = getelementptr inbounds i8, %Pointer %r5372, i32 8
	%r5374 = bitcast %Pointer %r5373 to %Objptr*
	%r5375 = load %Objptr, %Objptr* %r5374
	%r5376 = load %Pointer, %Pointer* %stackTop
	%r5377 = getelementptr inbounds i8, %Pointer %r5376, i32 0
	%r5378 = bitcast %Pointer %r5377 to %Objptr*
	%r5379 = load %Objptr, %Objptr* %r5378
	%r5380 = load %Pointer, %Pointer* %stackTop
	%r5381 = getelementptr inbounds i8, %Pointer %r5380, i32 32
	%r5382 = bitcast %Pointer %r5381 to %Word64*
	%r5383 = load %Word64, %Word64* %r5382
	%r5384 = load %Pointer, %Pointer* %stackTop
	%r5385 = getelementptr inbounds i8, %Pointer %r5384, i32 48
	%r5386 = bitcast %Pointer %r5385 to %uintptr_t*
	store %uintptr_t 121, %uintptr_t* %r5386
	; Push(56)
	%r5387 = load %Pointer, %Pointer* %stackTop
	%r5388 = getelementptr inbounds i8, %Pointer %r5387, i32 56
	store %Pointer %r5388, %Pointer* %stackTop
	; FlushFrontier
	%r5389 = bitcast %struct.GC_state* @gcState to %Pointer
	%r5390 = getelementptr inbounds i8, %Pointer %r5389, i32 0
	%r5391 = bitcast %Pointer %r5390 to %Pointer*
	%r5392 = load %Pointer, %Pointer* %frontier
	store %Pointer %r5392, %Pointer* %r5391
	; FlushStackTop
	%r5393 = bitcast %struct.GC_state* @gcState to %Pointer
	%r5394 = getelementptr inbounds i8, %Pointer %r5393, i32 16
	%r5395 = bitcast %Pointer %r5394 to %Pointer*
	%r5396 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r5396, %Pointer* %r5395
	; Call
	call void @GC_arrayCopy(%Pointer %r5371, %Objptr %r5375, %Word64 0, %Objptr %r5379, %Word64 1, %Word64 %r5383)
	; CacheFrontier
	%r5397 = bitcast %struct.GC_state* @gcState to %Pointer
	%r5398 = getelementptr inbounds i8, %Pointer %r5397, i32 0
	%r5399 = bitcast %Pointer %r5398 to %Pointer*
	%r5400 = load %Pointer, %Pointer* %r5399
	store %Pointer %r5400, %Pointer* %frontier
	; CacheStackTop
	%r5401 = bitcast %struct.GC_state* @gcState to %Pointer
	%r5402 = getelementptr inbounds i8, %Pointer %r5401, i32 16
	%r5403 = bitcast %Pointer %r5402 to %Pointer*
	%r5404 = load %Pointer, %Pointer* %r5403
	store %Pointer %r5404, %Pointer* %stackTop
	br label %L_857

L_join_13:
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r5405 = bitcast %struct.GC_state* @gcState to %Pointer
	%r5406 = getelementptr inbounds i8, %Pointer %r5405, i32 8
	%r5407 = bitcast %Pointer %r5406 to %CPointer*
	%r5408 = load %CPointer, %CPointer* %r5407
	%r5409 = load %Pointer, %Pointer* %frontier
	%r5411 = icmp ult %Pointer %r5408, %r5409
	%r5410 = zext i1 %r5411 to %Word32
	store %Word32 %r5410, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_856), (0x1, L_863))}
	%r5412 = load %Word32, %Word32* %regW32_0
	%r5413 = trunc %Word32 %r5412 to i1
	br i1 %r5413, label %L_863, label %L_856

L_855:
	; Push(-56)
	%r5414 = load %Pointer, %Pointer* %stackTop
	%r5415 = getelementptr inbounds i8, %Pointer %r5414, i32 -56
	store %Pointer %r5415, %Pointer* %stackTop
	%r5416 = load %Objptr, %Objptr* @CReturnP
	store %Objptr %r5416, %Objptr* %regP_0
	; SP(8): Objptr (opt_11)  = RP(0): Objptr (opt_11)
	%r5417 = load %Objptr, %Objptr* %regP_0
	%r5418 = load %Pointer, %Pointer* %stackTop
	%r5419 = getelementptr inbounds i8, %Pointer %r5418, i32 8
	%r5420 = bitcast %Pointer %r5419 to %Objptr*
	store %Objptr %r5417, %Objptr* %r5420
	; Goto L_join_13
	br label %L_join_13

L_854:
	; CCall {args = (<GCState>, 0x0, SW64(32): Word64, 0x17), frameInfo = Some {frameLayoutsIndex = 120}, func = {args = (GCState, Word64, Word64, Word64), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int64, Word64), res = Some Objptr}, return = Objptr (opt_11), symbolScope = private, target = GC_arrayAllocate}, return = Some L_855}
	; GetOperands
	%r5421 = bitcast %struct.GC_state* @gcState to %Pointer
	%r5422 = load %Pointer, %Pointer* %stackTop
	%r5423 = getelementptr inbounds i8, %Pointer %r5422, i32 32
	%r5424 = bitcast %Pointer %r5423 to %Word64*
	%r5425 = load %Word64, %Word64* %r5424
	%r5426 = load %Pointer, %Pointer* %stackTop
	%r5427 = getelementptr inbounds i8, %Pointer %r5426, i32 48
	%r5428 = bitcast %Pointer %r5427 to %uintptr_t*
	store %uintptr_t 120, %uintptr_t* %r5428
	; Push(56)
	%r5429 = load %Pointer, %Pointer* %stackTop
	%r5430 = getelementptr inbounds i8, %Pointer %r5429, i32 56
	store %Pointer %r5430, %Pointer* %stackTop
	; FlushFrontier
	%r5431 = bitcast %struct.GC_state* @gcState to %Pointer
	%r5432 = getelementptr inbounds i8, %Pointer %r5431, i32 0
	%r5433 = bitcast %Pointer %r5432 to %Pointer*
	%r5434 = load %Pointer, %Pointer* %frontier
	store %Pointer %r5434, %Pointer* %r5433
	; FlushStackTop
	%r5435 = bitcast %struct.GC_state* @gcState to %Pointer
	%r5436 = getelementptr inbounds i8, %Pointer %r5435, i32 16
	%r5437 = bitcast %Pointer %r5436 to %Pointer*
	%r5438 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r5438, %Pointer* %r5437
	; Call
	%r5439 = call %Objptr @GC_arrayAllocate(%Pointer %r5421, %Word64 0, %Word64 %r5425, %Word64 23)
	store %Objptr %r5439, %Objptr* @CReturnP
	; CacheFrontier
	%r5440 = bitcast %struct.GC_state* @gcState to %Pointer
	%r5441 = getelementptr inbounds i8, %Pointer %r5440, i32 0
	%r5442 = bitcast %Pointer %r5441 to %Pointer*
	%r5443 = load %Pointer, %Pointer* %r5442
	store %Pointer %r5443, %Pointer* %frontier
	; CacheStackTop
	%r5444 = bitcast %struct.GC_state* @gcState to %Pointer
	%r5445 = getelementptr inbounds i8, %Pointer %r5444, i32 16
	%r5446 = bitcast %Pointer %r5445 to %Pointer*
	%r5447 = load %Pointer, %Pointer* %r5446
	store %Pointer %r5447, %Pointer* %stackTop
	br label %L_855

L_853:
	; RW32(0): Word32  = Word64_equal (0x0, SW64(32): Word64)
	%r5448 = load %Pointer, %Pointer* %stackTop
	%r5449 = getelementptr inbounds i8, %Pointer %r5448, i32 32
	%r5450 = bitcast %Pointer %r5449 to %Word64*
	%r5451 = load %Word64, %Word64* %r5450
	%r5453 = icmp eq %Word64 0, %r5451
	%r5452 = zext i1 %r5453 to %Word32
	store %Word32 %r5452, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_854), (0x1, L_865))}
	%r5454 = load %Word32, %Word32* %regW32_0
	%r5455 = trunc %Word32 %r5454 to i1
	br i1 %r5455, label %L_865, label %L_854

L_852:
	; SW64(32): Word64  = Word64_sub (SW64(8): Word64, 0x1)
	%r5456 = load %Pointer, %Pointer* %stackTop
	%r5457 = getelementptr inbounds i8, %Pointer %r5456, i32 8
	%r5458 = bitcast %Pointer %r5457 to %Word64*
	%r5459 = load %Word64, %Word64* %r5458
	%r5460 = sub %Word64 %r5459, 1
	%r5461 = load %Pointer, %Pointer* %stackTop
	%r5462 = getelementptr inbounds i8, %Pointer %r5461, i32 32
	%r5463 = bitcast %Pointer %r5462 to %Word64*
	store %Word64 %r5460, %Word64* %r5463
	; RW32(0): Word32  = WordU64_lt (0x7FFFFFFF, SW64(32): Word64)
	%r5464 = load %Pointer, %Pointer* %stackTop
	%r5465 = getelementptr inbounds i8, %Pointer %r5464, i32 32
	%r5466 = bitcast %Pointer %r5465 to %Word64*
	%r5467 = load %Word64, %Word64* %r5466
	%r5469 = icmp ult %Word64 2147483647, %r5467
	%r5468 = zext i1 %r5469 to %Word32
	store %Word32 %r5468, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_853), (0x1, L_866))}
	%r5470 = load %Word32, %Word32* %regW32_0
	%r5471 = trunc %Word32 %r5470 to i1
	br i1 %r5471, label %L_866, label %L_853

L_851:
	; Push(-56)
	%r5472 = load %Pointer, %Pointer* %stackTop
	%r5473 = getelementptr inbounds i8, %Pointer %r5472, i32 -56
	store %Pointer %r5473, %Pointer* %stackTop
	; OW64 (SP(16): Objptr (opt_11), ~8): Word64  = 0x7
	%r5474 = load %Pointer, %Pointer* %stackTop
	%r5475 = getelementptr inbounds i8, %Pointer %r5474, i32 16
	%r5476 = bitcast %Pointer %r5475 to %Objptr*
	%r5477 = load %Objptr, %Objptr* %r5476
	%r5478 = getelementptr inbounds i8, %Objptr %r5477, i32 -8
	%r5479 = bitcast %Objptr %r5478 to %Word64*
	store %Word64 7, %Word64* %r5479
	; SP(16): Objptr (opt_3)  = Cast (SP(16): Objptr (opt_11), Objptr (opt_3))
	%r5480 = load %Pointer, %Pointer* %stackTop
	%r5481 = getelementptr inbounds i8, %Pointer %r5480, i32 16
	%r5482 = bitcast %Pointer %r5481 to %Objptr*
	%r5483 = load %Objptr, %Objptr* %r5482
	%r5484 = bitcast %Objptr %r5483 to %Objptr
	%r5485 = load %Pointer, %Pointer* %stackTop
	%r5486 = getelementptr inbounds i8, %Pointer %r5485, i32 16
	%r5487 = bitcast %Pointer %r5486 to %Objptr*
	store %Objptr %r5484, %Objptr* %r5487
	; Goto L_852
	br label %L_852

L_850:
	; Push(-56)
	%r5488 = load %Pointer, %Pointer* %stackTop
	%r5489 = getelementptr inbounds i8, %Pointer %r5488, i32 -56
	store %Pointer %r5489, %Pointer* %stackTop
	%r5491 = load %Pointer, %Pointer* %stackTop
	%r5492 = getelementptr inbounds i8, %Pointer %r5491, i32 16
	%r5493 = bitcast %Pointer %r5492 to %Objptr*
	%r5490 = load %Objptr, %Objptr* @CReturnP
	store %Objptr %r5490, %Objptr* %r5493
	; CCall {args = (<GCState>, SP(16): Objptr (opt_11), 0x0, SP(0): Objptr (opt_3), 0x0, 0x1), frameInfo = Some {frameLayoutsIndex = 119}, func = {args = (GCState, Objptr (opt_11), Word64, Objptr (opt_3), Word64, Word64), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Objptr, Int64, Objptr, Int64, Int64), res = None}, return = Bits0, symbolScope = private, target = GC_arrayCopy}, return = Some L_851}
	; GetOperands
	%r5494 = bitcast %struct.GC_state* @gcState to %Pointer
	%r5495 = load %Pointer, %Pointer* %stackTop
	%r5496 = getelementptr inbounds i8, %Pointer %r5495, i32 16
	%r5497 = bitcast %Pointer %r5496 to %Objptr*
	%r5498 = load %Objptr, %Objptr* %r5497
	%r5499 = load %Pointer, %Pointer* %stackTop
	%r5500 = getelementptr inbounds i8, %Pointer %r5499, i32 0
	%r5501 = bitcast %Pointer %r5500 to %Objptr*
	%r5502 = load %Objptr, %Objptr* %r5501
	%r5503 = load %Pointer, %Pointer* %stackTop
	%r5504 = getelementptr inbounds i8, %Pointer %r5503, i32 48
	%r5505 = bitcast %Pointer %r5504 to %uintptr_t*
	store %uintptr_t 119, %uintptr_t* %r5505
	; Push(56)
	%r5506 = load %Pointer, %Pointer* %stackTop
	%r5507 = getelementptr inbounds i8, %Pointer %r5506, i32 56
	store %Pointer %r5507, %Pointer* %stackTop
	; FlushFrontier
	%r5508 = bitcast %struct.GC_state* @gcState to %Pointer
	%r5509 = getelementptr inbounds i8, %Pointer %r5508, i32 0
	%r5510 = bitcast %Pointer %r5509 to %Pointer*
	%r5511 = load %Pointer, %Pointer* %frontier
	store %Pointer %r5511, %Pointer* %r5510
	; FlushStackTop
	%r5512 = bitcast %struct.GC_state* @gcState to %Pointer
	%r5513 = getelementptr inbounds i8, %Pointer %r5512, i32 16
	%r5514 = bitcast %Pointer %r5513 to %Pointer*
	%r5515 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r5515, %Pointer* %r5514
	; Call
	call void @GC_arrayCopy(%Pointer %r5494, %Objptr %r5498, %Word64 0, %Objptr %r5502, %Word64 0, %Word64 1)
	; CacheFrontier
	%r5516 = bitcast %struct.GC_state* @gcState to %Pointer
	%r5517 = getelementptr inbounds i8, %Pointer %r5516, i32 0
	%r5518 = bitcast %Pointer %r5517 to %Pointer*
	%r5519 = load %Pointer, %Pointer* %r5518
	store %Pointer %r5519, %Pointer* %frontier
	; CacheStackTop
	%r5520 = bitcast %struct.GC_state* @gcState to %Pointer
	%r5521 = getelementptr inbounds i8, %Pointer %r5520, i32 16
	%r5522 = bitcast %Pointer %r5521 to %Pointer*
	%r5523 = load %Pointer, %Pointer* %r5522
	store %Pointer %r5523, %Pointer* %stackTop
	br label %L_851

L_849:
	; CCall {args = (<GCState>, 0x0, 0x1, 0x17), frameInfo = Some {frameLayoutsIndex = 118}, func = {args = (GCState, Word64, Word64, Word64), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int64, Word64), res = Some Objptr}, return = Objptr (opt_11), symbolScope = private, target = GC_arrayAllocate}, return = Some L_850}
	; GetOperands
	%r5524 = bitcast %struct.GC_state* @gcState to %Pointer
	%r5525 = load %Pointer, %Pointer* %stackTop
	%r5526 = getelementptr inbounds i8, %Pointer %r5525, i32 48
	%r5527 = bitcast %Pointer %r5526 to %uintptr_t*
	store %uintptr_t 118, %uintptr_t* %r5527
	; Push(56)
	%r5528 = load %Pointer, %Pointer* %stackTop
	%r5529 = getelementptr inbounds i8, %Pointer %r5528, i32 56
	store %Pointer %r5529, %Pointer* %stackTop
	; FlushFrontier
	%r5530 = bitcast %struct.GC_state* @gcState to %Pointer
	%r5531 = getelementptr inbounds i8, %Pointer %r5530, i32 0
	%r5532 = bitcast %Pointer %r5531 to %Pointer*
	%r5533 = load %Pointer, %Pointer* %frontier
	store %Pointer %r5533, %Pointer* %r5532
	; FlushStackTop
	%r5534 = bitcast %struct.GC_state* @gcState to %Pointer
	%r5535 = getelementptr inbounds i8, %Pointer %r5534, i32 16
	%r5536 = bitcast %Pointer %r5535 to %Pointer*
	%r5537 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r5537, %Pointer* %r5536
	; Call
	%r5538 = call %Objptr @GC_arrayAllocate(%Pointer %r5524, %Word64 0, %Word64 1, %Word64 23)
	store %Objptr %r5538, %Objptr* @CReturnP
	; CacheFrontier
	%r5539 = bitcast %struct.GC_state* @gcState to %Pointer
	%r5540 = getelementptr inbounds i8, %Pointer %r5539, i32 0
	%r5541 = bitcast %Pointer %r5540 to %Pointer*
	%r5542 = load %Pointer, %Pointer* %r5541
	store %Pointer %r5542, %Pointer* %frontier
	; CacheStackTop
	%r5543 = bitcast %struct.GC_state* @gcState to %Pointer
	%r5544 = getelementptr inbounds i8, %Pointer %r5543, i32 16
	%r5545 = bitcast %Pointer %r5544 to %Pointer*
	%r5546 = load %Pointer, %Pointer* %r5545
	store %Pointer %r5546, %Pointer* %stackTop
	br label %L_850

L_848:
	; RW32(0): Word32  = Word64_equal (SW64(8): Word64, 0x1)
	%r5547 = load %Pointer, %Pointer* %stackTop
	%r5548 = getelementptr inbounds i8, %Pointer %r5547, i32 8
	%r5549 = bitcast %Pointer %r5548 to %Word64*
	%r5550 = load %Word64, %Word64* %r5549
	%r5552 = icmp eq %Word64 %r5550, 1
	%r5551 = zext i1 %r5552 to %Word32
	store %Word32 %r5551, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_849), (0x1, L_867))}
	%r5553 = load %Word32, %Word32* %regW32_0
	%r5554 = trunc %Word32 %r5553 to i1
	br i1 %r5554, label %L_867, label %L_849

L_847:
	; RW32(0): Word32  = WordU64_lt (SW64(8): Word64, 0x1)
	%r5555 = load %Pointer, %Pointer* %stackTop
	%r5556 = getelementptr inbounds i8, %Pointer %r5555, i32 8
	%r5557 = bitcast %Pointer %r5556 to %Word64*
	%r5558 = load %Word64, %Word64* %r5557
	%r5560 = icmp ult %Word64 %r5558, 1
	%r5559 = zext i1 %r5560 to %Word32
	store %Word32 %r5559, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_848), (0x1, L_868))}
	%r5561 = load %Word32, %Word32* %regW32_0
	%r5562 = trunc %Word32 %r5561 to i1
	br i1 %r5562, label %L_868, label %L_848

sci_0:
	; CW64 (<Frontier>)  = 0x57
	%r5563 = load %Pointer, %Pointer* %frontier
	%r5564 = bitcast %Pointer %r5563 to %Word64*
	store %Word64 87, %Word64* %r5564
	; RQ(66): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r5565 = load %Pointer, %Pointer* %frontier
	%r5567 = ptrtoint %Pointer %r5565 to %uintptr_t
	%r5568 = add %uintptr_t %r5567, 8
	%r5566 = inttoptr %uintptr_t %r5568 to %Pointer
	store %CPointer %r5566, %CPointer* %regQ_66
	; RP(0): Objptr (opt_43)  = Cast (RQ(66): CPointer, Objptr (opt_43))
	%r5569 = load %CPointer, %CPointer* %regQ_66
	%r5570 = bitcast %CPointer %r5569 to %Objptr
	store %Objptr %r5570, %Objptr* %regP_0
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r5571 = load %Pointer, %Pointer* %frontier
	%r5573 = ptrtoint %Pointer %r5571 to %uintptr_t
	%r5574 = add %uintptr_t %r5573, 24
	%r5572 = inttoptr %uintptr_t %r5574 to %Pointer
	store %Pointer %r5572, %Pointer* %frontier
	; OP (RP(0): Objptr (opt_43), 0): Objptr (opt_3)  = SP(16): Objptr (opt_3)
	%r5575 = load %Pointer, %Pointer* %stackTop
	%r5576 = getelementptr inbounds i8, %Pointer %r5575, i32 16
	%r5577 = bitcast %Pointer %r5576 to %Objptr*
	%r5578 = load %Objptr, %Objptr* %r5577
	%r5579 = load %Objptr, %Objptr* %regP_0
	%r5580 = getelementptr inbounds i8, %Objptr %r5579, i32 0
	%r5581 = bitcast %Objptr %r5580 to %Objptr*
	store %Objptr %r5578, %Objptr* %r5581
	; OP (RP(0): Objptr (opt_43), 8): Objptr (opt_43)  = Cast (0x1, Objptr (opt_43))
	%r5582 = inttoptr %Word64 1 to %Objptr
	%r5583 = load %Objptr, %Objptr* %regP_0
	%r5584 = getelementptr inbounds i8, %Objptr %r5583, i32 8
	%r5585 = bitcast %Objptr %r5584 to %Objptr*
	store %Objptr %r5582, %Objptr* %r5585
	; CW64 (<Frontier>)  = 0x57
	%r5586 = load %Pointer, %Pointer* %frontier
	%r5587 = bitcast %Pointer %r5586 to %Word64*
	store %Word64 87, %Word64* %r5587
	; RQ(65): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r5588 = load %Pointer, %Pointer* %frontier
	%r5590 = ptrtoint %Pointer %r5588 to %uintptr_t
	%r5591 = add %uintptr_t %r5590, 8
	%r5589 = inttoptr %uintptr_t %r5591 to %Pointer
	store %CPointer %r5589, %CPointer* %regQ_65
	; SP(24): Objptr (opt_43)  = Cast (RQ(65): CPointer, Objptr (opt_43))
	%r5592 = load %CPointer, %CPointer* %regQ_65
	%r5593 = bitcast %CPointer %r5592 to %Objptr
	%r5594 = load %Pointer, %Pointer* %stackTop
	%r5595 = getelementptr inbounds i8, %Pointer %r5594, i32 24
	%r5596 = bitcast %Pointer %r5595 to %Objptr*
	store %Objptr %r5593, %Objptr* %r5596
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r5597 = load %Pointer, %Pointer* %frontier
	%r5599 = ptrtoint %Pointer %r5597 to %uintptr_t
	%r5600 = add %uintptr_t %r5599, 24
	%r5598 = inttoptr %uintptr_t %r5600 to %Pointer
	store %Pointer %r5598, %Pointer* %frontier
	; OP (SP(24): Objptr (opt_43), 0): Objptr (opt_3)  = glob {index = 138, isRoot = true, ty = Objptr (opt_3)}
	%r5601 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 138
	%r5602 = load %Objptr, %Objptr* %r5601
	%r5603 = load %Pointer, %Pointer* %stackTop
	%r5604 = getelementptr inbounds i8, %Pointer %r5603, i32 24
	%r5605 = bitcast %Pointer %r5604 to %Objptr*
	%r5606 = load %Objptr, %Objptr* %r5605
	%r5607 = getelementptr inbounds i8, %Objptr %r5606, i32 0
	%r5608 = bitcast %Objptr %r5607 to %Objptr*
	store %Objptr %r5602, %Objptr* %r5608
	; OP (SP(24): Objptr (opt_43), 8): Objptr (opt_43)  = RP(0): Objptr (opt_43)
	%r5609 = load %Objptr, %Objptr* %regP_0
	%r5610 = load %Pointer, %Pointer* %stackTop
	%r5611 = getelementptr inbounds i8, %Pointer %r5610, i32 24
	%r5612 = bitcast %Pointer %r5611 to %Objptr*
	%r5613 = load %Objptr, %Objptr* %r5612
	%r5614 = getelementptr inbounds i8, %Objptr %r5613, i32 8
	%r5615 = bitcast %Objptr %r5614 to %Objptr*
	store %Objptr %r5609, %Objptr* %r5615
	; switch {test = RW32(1): Word32, default = None, cases = ((0x0, L_847), (0x1, L_869))}
	%r5616 = load %Word32, %Word32* %regW32_1
	%r5617 = trunc %Word32 %r5616 to i1
	br i1 %r5617, label %L_869, label %L_847

L_846:
	; Goto sci_0
	br label %sci_0

L_845:
	; RW32(3): Word32  = WordS32_lt (SW32(24): Word32, RW32(2): Word32)
	%r5618 = load %Pointer, %Pointer* %stackTop
	%r5619 = getelementptr inbounds i8, %Pointer %r5618, i32 24
	%r5620 = bitcast %Pointer %r5619 to %Word32*
	%r5621 = load %Word32, %Word32* %r5620
	%r5622 = load %Word32, %Word32* %regW32_2
	%r5624 = icmp slt %Word32 %r5621, %r5622
	%r5623 = zext i1 %r5624 to %Word32
	store %Word32 %r5623, %Word32* %regW32_3
	; switch {test = RW32(3): Word32, default = None, cases = ((0x0, L_846), (0x1, L_870))}
	%r5625 = load %Word32, %Word32* %regW32_3
	%r5626 = trunc %Word32 %r5625 to i1
	br i1 %r5626, label %L_870, label %L_846

L_844:
	; Goto L_845
	br label %L_845

L_843:
	; Arith {prim = WordS32_addCheck, args = (RW32(0): Word32, 0x3), dst = RW32(2): Word32, overflow = L_712, success = L_844}
	%r5627 = load %Word32, %Word32* %regW32_0
	%r5628 = call {%Word32, i1} @llvm.sadd.with.overflow.i32(%Word32 %r5627, %Word32 3)
	%r5629 = extractvalue {%Word32, i1} %r5628, 0
	%r5630 = extractvalue {%Word32, i1} %r5628, 1
	store %Word32 %r5629, %Word32* %regW32_2
	br i1 %r5630, label %L_712, label %L_844

L_842:
	; RW32(1): Word32  = Word32_equal (RW32(0): Word32, 0x1)
	%r5631 = load %Word32, %Word32* %regW32_0
	%r5633 = icmp eq %Word32 %r5631, 1
	%r5632 = zext i1 %r5633 to %Word32
	store %Word32 %r5632, %Word32* %regW32_1
	; switch {test = RW32(1): Word32, default = None, cases = ((0x0, L_843), (0x1, L_937))}
	%r5634 = load %Word32, %Word32* %regW32_1
	%r5635 = trunc %Word32 %r5634 to i1
	br i1 %r5635, label %L_937, label %L_843

L_841:
	; Goto L_760
	br label %L_760

L_840:
	; SW64(8): Word64  = OW64 (SP(0): Objptr (opt_3), ~16): Word64
	%r5636 = load %Pointer, %Pointer* %stackTop
	%r5637 = getelementptr inbounds i8, %Pointer %r5636, i32 0
	%r5638 = bitcast %Pointer %r5637 to %Objptr*
	%r5639 = load %Objptr, %Objptr* %r5638
	%r5640 = getelementptr inbounds i8, %Objptr %r5639, i32 -16
	%r5641 = bitcast %Objptr %r5640 to %Word64*
	%r5642 = load %Word64, %Word64* %r5641
	%r5643 = load %Pointer, %Pointer* %stackTop
	%r5644 = getelementptr inbounds i8, %Pointer %r5643, i32 8
	%r5645 = bitcast %Pointer %r5644 to %Word64*
	store %Word64 %r5642, %Word64* %r5645
	; RW32(0): Word32  = WordU64_extdToWord32 (SW64(8): Word64)
	%r5646 = load %Pointer, %Pointer* %stackTop
	%r5647 = getelementptr inbounds i8, %Pointer %r5646, i32 8
	%r5648 = bitcast %Pointer %r5647 to %Word64*
	%r5649 = load %Word64, %Word64* %r5648
	%r5650 = trunc %Word64 %r5649 to %Word32
	store %Word32 %r5650, %Word32* %regW32_0
	; RW64(0): Word64  = WordS32_extdToWord64 (RW32(0): Word32)
	%r5651 = load %Word32, %Word32* %regW32_0
	%r5652 = sext %Word32 %r5651 to %Word64
	store %Word64 %r5652, %Word64* %regW64_0
	; RW32(1): Word32  = Word64_equal (RW64(0): Word64, SW64(8): Word64)
	%r5653 = load %Word64, %Word64* %regW64_0
	%r5654 = load %Pointer, %Pointer* %stackTop
	%r5655 = getelementptr inbounds i8, %Pointer %r5654, i32 8
	%r5656 = bitcast %Pointer %r5655 to %Word64*
	%r5657 = load %Word64, %Word64* %r5656
	%r5659 = icmp eq %Word64 %r5653, %r5657
	%r5658 = zext i1 %r5659 to %Word32
	store %Word32 %r5658, %Word32* %regW32_1
	; switch {test = RW32(1): Word32, default = None, cases = ((0x0, L_841), (0x1, L_842))}
	%r5660 = load %Word32, %Word32* %regW32_1
	%r5661 = trunc %Word32 %r5660 to i1
	br i1 %r5661, label %L_842, label %L_841

L_839:
	; OW64 (SP(8): Objptr (opt_11), ~8): Word64  = 0x7
	%r5662 = load %Pointer, %Pointer* %stackTop
	%r5663 = getelementptr inbounds i8, %Pointer %r5662, i32 8
	%r5664 = bitcast %Pointer %r5663 to %Objptr*
	%r5665 = load %Objptr, %Objptr* %r5664
	%r5666 = getelementptr inbounds i8, %Objptr %r5665, i32 -8
	%r5667 = bitcast %Objptr %r5666 to %Word64*
	store %Word64 7, %Word64* %r5667
	; SP(0): Objptr (opt_3)  = Cast (SP(8): Objptr (opt_11), Objptr (opt_3))
	%r5668 = load %Pointer, %Pointer* %stackTop
	%r5669 = getelementptr inbounds i8, %Pointer %r5668, i32 8
	%r5670 = bitcast %Pointer %r5669 to %Objptr*
	%r5671 = load %Objptr, %Objptr* %r5670
	%r5672 = bitcast %Objptr %r5671 to %Objptr
	%r5673 = load %Pointer, %Pointer* %stackTop
	%r5674 = getelementptr inbounds i8, %Pointer %r5673, i32 0
	%r5675 = bitcast %Pointer %r5674 to %Objptr*
	store %Objptr %r5672, %Objptr* %r5675
	; Goto L_840
	br label %L_840

L_838:
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r5676 = bitcast %struct.GC_state* @gcState to %Pointer
	%r5677 = getelementptr inbounds i8, %Pointer %r5676, i32 8
	%r5678 = bitcast %Pointer %r5677 to %CPointer*
	%r5679 = load %CPointer, %CPointer* %r5678
	%r5680 = load %Pointer, %Pointer* %frontier
	%r5682 = icmp ult %Pointer %r5679, %r5680
	%r5681 = zext i1 %r5682 to %Word32
	store %Word32 %r5681, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_839), (0x1, L_938))}
	%r5683 = load %Word32, %Word32* %regW32_0
	%r5684 = trunc %Word32 %r5683 to i1
	br i1 %r5684, label %L_938, label %L_839

L_837:
	; RP(0): Objptr (opt_45)  = OP (SP(0): Objptr (opt_45), 8): Objptr (opt_45)
	%r5685 = load %Pointer, %Pointer* %stackTop
	%r5686 = getelementptr inbounds i8, %Pointer %r5685, i32 0
	%r5687 = bitcast %Pointer %r5686 to %Objptr*
	%r5688 = load %Objptr, %Objptr* %r5687
	%r5689 = getelementptr inbounds i8, %Objptr %r5688, i32 8
	%r5690 = bitcast %Objptr %r5689 to %Objptr*
	%r5691 = load %Objptr, %Objptr* %r5690
	store %Objptr %r5691, %Objptr* %regP_0
	; RP(1): Objptr (opt_9)  = OP (SP(0): Objptr (opt_45), 0): Objptr (opt_9)
	%r5692 = load %Pointer, %Pointer* %stackTop
	%r5693 = getelementptr inbounds i8, %Pointer %r5692, i32 0
	%r5694 = bitcast %Pointer %r5693 to %Objptr*
	%r5695 = load %Objptr, %Objptr* %r5694
	%r5696 = getelementptr inbounds i8, %Objptr %r5695, i32 0
	%r5697 = bitcast %Objptr %r5696 to %Objptr*
	%r5698 = load %Objptr, %Objptr* %r5697
	store %Objptr %r5698, %Objptr* %regP_1
	; SP(0): Objptr (opt_45)  = RP(0): Objptr (opt_45)
	%r5699 = load %Objptr, %Objptr* %regP_0
	%r5700 = load %Pointer, %Pointer* %stackTop
	%r5701 = getelementptr inbounds i8, %Pointer %r5700, i32 0
	%r5702 = bitcast %Pointer %r5701 to %Objptr*
	store %Objptr %r5699, %Objptr* %r5702
	; RP(0): Objptr (opt_9)  = RP(1): Objptr (opt_9)
	%r5703 = load %Objptr, %Objptr* %regP_1
	store %Objptr %r5703, %Objptr* %regP_0
	; SW64(32): Word64  = RW64(0): Word64
	%r5704 = load %Word64, %Word64* %regW64_0
	%r5705 = load %Pointer, %Pointer* %stackTop
	%r5706 = getelementptr inbounds i8, %Pointer %r5705, i32 32
	%r5707 = bitcast %Pointer %r5706 to %Word64*
	store %Word64 %r5704, %Word64* %r5707
	; Goto L_833
	br label %L_833

L_836:
	; RW64(0): Word64  = Word64_add (SW64(48): Word64, SW64(32): Word64)
	%r5708 = load %Pointer, %Pointer* %stackTop
	%r5709 = getelementptr inbounds i8, %Pointer %r5708, i32 48
	%r5710 = bitcast %Pointer %r5709 to %Word64*
	%r5711 = load %Word64, %Word64* %r5710
	%r5712 = load %Pointer, %Pointer* %stackTop
	%r5713 = getelementptr inbounds i8, %Pointer %r5712, i32 32
	%r5714 = bitcast %Pointer %r5713 to %Word64*
	%r5715 = load %Word64, %Word64* %r5714
	%r5716 = add %Word64 %r5711, %r5715
	store %Word64 %r5716, %Word64* %regW64_0
	; switch {test = Cast (SP(0): Objptr (opt_45), Bits64), default = Some L_837, cases = ((0x1, L_838))}
	%r5717 = load %Pointer, %Pointer* %stackTop
	%r5718 = getelementptr inbounds i8, %Pointer %r5717, i32 0
	%r5719 = bitcast %Pointer %r5718 to %Objptr*
	%r5720 = load %Objptr, %Objptr* %r5719
	%r5721 = ptrtoint %Objptr %r5720 to %Word64
	switch %Word64 %r5721, label %L_837 [
		%Word64 1, label %L_838
	]

L_835:
	; Push(-64)
	%r5722 = load %Pointer, %Pointer* %stackTop
	%r5723 = getelementptr inbounds i8, %Pointer %r5722, i32 -64
	store %Pointer %r5723, %Pointer* %stackTop
	; Goto L_836
	br label %L_836

L_834:
	; CCall {args = (<GCState>, SP(8): Objptr (opt_11), SW64(32): Word64, RP(1): Objptr (opt_3), RW64(0): Word64, SW64(48): Word64), frameInfo = Some {frameLayoutsIndex = 117}, func = {args = (GCState, Objptr (opt_11), Word64, Objptr (opt_3), Word64, Word64), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Objptr, Int64, Objptr, Int64, Int64), res = None}, return = Bits0, symbolScope = private, target = GC_arrayCopy}, return = Some L_835}
	; GetOperands
	%r5724 = bitcast %struct.GC_state* @gcState to %Pointer
	%r5725 = load %Pointer, %Pointer* %stackTop
	%r5726 = getelementptr inbounds i8, %Pointer %r5725, i32 8
	%r5727 = bitcast %Pointer %r5726 to %Objptr*
	%r5728 = load %Objptr, %Objptr* %r5727
	%r5729 = load %Pointer, %Pointer* %stackTop
	%r5730 = getelementptr inbounds i8, %Pointer %r5729, i32 32
	%r5731 = bitcast %Pointer %r5730 to %Word64*
	%r5732 = load %Word64, %Word64* %r5731
	%r5733 = load %Objptr, %Objptr* %regP_1
	%r5734 = load %Word64, %Word64* %regW64_0
	%r5735 = load %Pointer, %Pointer* %stackTop
	%r5736 = getelementptr inbounds i8, %Pointer %r5735, i32 48
	%r5737 = bitcast %Pointer %r5736 to %Word64*
	%r5738 = load %Word64, %Word64* %r5737
	%r5739 = load %Pointer, %Pointer* %stackTop
	%r5740 = getelementptr inbounds i8, %Pointer %r5739, i32 56
	%r5741 = bitcast %Pointer %r5740 to %uintptr_t*
	store %uintptr_t 117, %uintptr_t* %r5741
	; Push(64)
	%r5742 = load %Pointer, %Pointer* %stackTop
	%r5743 = getelementptr inbounds i8, %Pointer %r5742, i32 64
	store %Pointer %r5743, %Pointer* %stackTop
	; FlushFrontier
	%r5744 = bitcast %struct.GC_state* @gcState to %Pointer
	%r5745 = getelementptr inbounds i8, %Pointer %r5744, i32 0
	%r5746 = bitcast %Pointer %r5745 to %Pointer*
	%r5747 = load %Pointer, %Pointer* %frontier
	store %Pointer %r5747, %Pointer* %r5746
	; FlushStackTop
	%r5748 = bitcast %struct.GC_state* @gcState to %Pointer
	%r5749 = getelementptr inbounds i8, %Pointer %r5748, i32 16
	%r5750 = bitcast %Pointer %r5749 to %Pointer*
	%r5751 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r5751, %Pointer* %r5750
	; Call
	call void @GC_arrayCopy(%Pointer %r5724, %Objptr %r5728, %Word64 %r5732, %Objptr %r5733, %Word64 %r5734, %Word64 %r5738)
	; CacheFrontier
	%r5752 = bitcast %struct.GC_state* @gcState to %Pointer
	%r5753 = getelementptr inbounds i8, %Pointer %r5752, i32 0
	%r5754 = bitcast %Pointer %r5753 to %Pointer*
	%r5755 = load %Pointer, %Pointer* %r5754
	store %Pointer %r5755, %Pointer* %frontier
	; CacheStackTop
	%r5756 = bitcast %struct.GC_state* @gcState to %Pointer
	%r5757 = getelementptr inbounds i8, %Pointer %r5756, i32 16
	%r5758 = bitcast %Pointer %r5757 to %Pointer*
	%r5759 = load %Pointer, %Pointer* %r5758
	store %Pointer %r5759, %Pointer* %stackTop
	br label %L_835

L_833:
	; RW64(0): Word64  = OW64 (RP(0): Objptr (opt_9), 0): Word64
	%r5760 = load %Objptr, %Objptr* %regP_0
	%r5761 = getelementptr inbounds i8, %Objptr %r5760, i32 0
	%r5762 = bitcast %Objptr %r5761 to %Word64*
	%r5763 = load %Word64, %Word64* %r5762
	store %Word64 %r5763, %Word64* %regW64_0
	; RP(1): Objptr (opt_3)  = OP (RP(0): Objptr (opt_9), 16): Objptr (opt_3)
	%r5764 = load %Objptr, %Objptr* %regP_0
	%r5765 = getelementptr inbounds i8, %Objptr %r5764, i32 16
	%r5766 = bitcast %Objptr %r5765 to %Objptr*
	%r5767 = load %Objptr, %Objptr* %r5766
	store %Objptr %r5767, %Objptr* %regP_1
	; SW64(48): Word64  = OW64 (RP(0): Objptr (opt_9), 8): Word64
	%r5768 = load %Objptr, %Objptr* %regP_0
	%r5769 = getelementptr inbounds i8, %Objptr %r5768, i32 8
	%r5770 = bitcast %Objptr %r5769 to %Word64*
	%r5771 = load %Word64, %Word64* %r5770
	%r5772 = load %Pointer, %Pointer* %stackTop
	%r5773 = getelementptr inbounds i8, %Pointer %r5772, i32 48
	%r5774 = bitcast %Pointer %r5773 to %Word64*
	store %Word64 %r5771, %Word64* %r5774
	; RW32(0): Word32  = WordS64_lt (SW64(48): Word64, 0x5)
	%r5775 = load %Pointer, %Pointer* %stackTop
	%r5776 = getelementptr inbounds i8, %Pointer %r5775, i32 48
	%r5777 = bitcast %Pointer %r5776 to %Word64*
	%r5778 = load %Word64, %Word64* %r5777
	%r5780 = icmp slt %Word64 %r5778, 5
	%r5779 = zext i1 %r5780 to %Word32
	store %Word32 %r5779, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_834), (0x1, L_940))}
	%r5781 = load %Word32, %Word32* %regW32_0
	%r5782 = trunc %Word32 %r5781 to i1
	br i1 %r5782, label %L_940, label %L_834

L_832:
	; Push(-56)
	%r5783 = load %Pointer, %Pointer* %stackTop
	%r5784 = getelementptr inbounds i8, %Pointer %r5783, i32 -56
	store %Pointer %r5784, %Pointer* %stackTop
	%r5785 = load %Objptr, %Objptr* @CReturnP
	store %Objptr %r5785, %Objptr* %regP_0
	; SP(0): Objptr (opt_45)  = SP(32): Objptr (opt_45)
	%r5786 = load %Pointer, %Pointer* %stackTop
	%r5787 = getelementptr inbounds i8, %Pointer %r5786, i32 32
	%r5788 = bitcast %Pointer %r5787 to %Objptr*
	%r5789 = load %Objptr, %Objptr* %r5788
	%r5790 = load %Pointer, %Pointer* %stackTop
	%r5791 = getelementptr inbounds i8, %Pointer %r5790, i32 0
	%r5792 = bitcast %Pointer %r5791 to %Objptr*
	store %Objptr %r5789, %Objptr* %r5792
	; SW64(32): Word64  = 0x0
	%r5793 = load %Pointer, %Pointer* %stackTop
	%r5794 = getelementptr inbounds i8, %Pointer %r5793, i32 32
	%r5795 = bitcast %Pointer %r5794 to %Word64*
	store %Word64 0, %Word64* %r5795
	; RP(11): Objptr (opt_11)  = RP(0): Objptr (opt_11)
	%r5796 = load %Objptr, %Objptr* %regP_0
	store %Objptr %r5796, %Objptr* %regP_11
	; RP(0): Objptr (opt_9)  = SP(8): Objptr (opt_9)
	%r5797 = load %Pointer, %Pointer* %stackTop
	%r5798 = getelementptr inbounds i8, %Pointer %r5797, i32 8
	%r5799 = bitcast %Pointer %r5798 to %Objptr*
	%r5800 = load %Objptr, %Objptr* %r5799
	store %Objptr %r5800, %Objptr* %regP_0
	; SP(8): Objptr (opt_11)  = RP(11): Objptr (opt_11)
	%r5801 = load %Objptr, %Objptr* %regP_11
	%r5802 = load %Pointer, %Pointer* %stackTop
	%r5803 = getelementptr inbounds i8, %Pointer %r5802, i32 8
	%r5804 = bitcast %Pointer %r5803 to %Objptr*
	store %Objptr %r5801, %Objptr* %r5804
	; Goto L_833
	br label %L_833

L_831:
	; CCall {args = (<GCState>, 0x0, RW64(2): Word64, 0x17), frameInfo = Some {frameLayoutsIndex = 116}, func = {args = (GCState, Word64, Word64, Word64), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int64, Word64), res = Some Objptr}, return = Objptr (opt_11), symbolScope = private, target = GC_arrayAllocate}, return = Some L_832}
	; GetOperands
	%r5805 = bitcast %struct.GC_state* @gcState to %Pointer
	%r5806 = load %Word64, %Word64* %regW64_2
	%r5807 = load %Pointer, %Pointer* %stackTop
	%r5808 = getelementptr inbounds i8, %Pointer %r5807, i32 48
	%r5809 = bitcast %Pointer %r5808 to %uintptr_t*
	store %uintptr_t 116, %uintptr_t* %r5809
	; Push(56)
	%r5810 = load %Pointer, %Pointer* %stackTop
	%r5811 = getelementptr inbounds i8, %Pointer %r5810, i32 56
	store %Pointer %r5811, %Pointer* %stackTop
	; FlushFrontier
	%r5812 = bitcast %struct.GC_state* @gcState to %Pointer
	%r5813 = getelementptr inbounds i8, %Pointer %r5812, i32 0
	%r5814 = bitcast %Pointer %r5813 to %Pointer*
	%r5815 = load %Pointer, %Pointer* %frontier
	store %Pointer %r5815, %Pointer* %r5814
	; FlushStackTop
	%r5816 = bitcast %struct.GC_state* @gcState to %Pointer
	%r5817 = getelementptr inbounds i8, %Pointer %r5816, i32 16
	%r5818 = bitcast %Pointer %r5817 to %Pointer*
	%r5819 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r5819, %Pointer* %r5818
	; Call
	%r5820 = call %Objptr @GC_arrayAllocate(%Pointer %r5805, %Word64 0, %Word64 %r5806, %Word64 23)
	store %Objptr %r5820, %Objptr* @CReturnP
	; CacheFrontier
	%r5821 = bitcast %struct.GC_state* @gcState to %Pointer
	%r5822 = getelementptr inbounds i8, %Pointer %r5821, i32 0
	%r5823 = bitcast %Pointer %r5822 to %Pointer*
	%r5824 = load %Pointer, %Pointer* %r5823
	store %Pointer %r5824, %Pointer* %frontier
	; CacheStackTop
	%r5825 = bitcast %struct.GC_state* @gcState to %Pointer
	%r5826 = getelementptr inbounds i8, %Pointer %r5825, i32 16
	%r5827 = bitcast %Pointer %r5826 to %Pointer*
	%r5828 = load %Pointer, %Pointer* %r5827
	store %Pointer %r5828, %Pointer* %stackTop
	br label %L_832

L_830:
	; RW32(0): Word32  = Word64_equal (0x0, RW64(2): Word64)
	%r5829 = load %Word64, %Word64* %regW64_2
	%r5831 = icmp eq %Word64 0, %r5829
	%r5830 = zext i1 %r5831 to %Word32
	store %Word32 %r5830, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_831), (0x1, L_943))}
	%r5832 = load %Word32, %Word32* %regW32_0
	%r5833 = trunc %Word32 %r5832 to i1
	br i1 %r5833, label %L_943, label %L_831

L_829:
	; RW32(0): Word32  = WordU64_lt (0x7FFFFFFF, RW64(2): Word64)
	%r5834 = load %Word64, %Word64* %regW64_2
	%r5836 = icmp ult %Word64 2147483647, %r5834
	%r5835 = zext i1 %r5836 to %Word32
	store %Word32 %r5835, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_830), (0x1, L_944))}
	%r5837 = load %Word32, %Word32* %regW32_0
	%r5838 = trunc %Word32 %r5837 to i1
	br i1 %r5838, label %L_944, label %L_830

L_828:
	; RP(1): Objptr (opt_45)  = OP (RP(0): Objptr (opt_45), 8): Objptr (opt_45)
	%r5839 = load %Objptr, %Objptr* %regP_0
	%r5840 = getelementptr inbounds i8, %Objptr %r5839, i32 8
	%r5841 = bitcast %Objptr %r5840 to %Objptr*
	%r5842 = load %Objptr, %Objptr* %r5841
	store %Objptr %r5842, %Objptr* %regP_1
	; RP(2): Objptr (opt_9)  = OP (RP(0): Objptr (opt_45), 0): Objptr (opt_9)
	%r5843 = load %Objptr, %Objptr* %regP_0
	%r5844 = getelementptr inbounds i8, %Objptr %r5843, i32 0
	%r5845 = bitcast %Objptr %r5844 to %Objptr*
	%r5846 = load %Objptr, %Objptr* %r5845
	store %Objptr %r5846, %Objptr* %regP_2
	; RP(0): Objptr (opt_45)  = RP(1): Objptr (opt_45)
	%r5847 = load %Objptr, %Objptr* %regP_1
	store %Objptr %r5847, %Objptr* %regP_0
	; RP(1): Objptr (opt_9)  = RP(2): Objptr (opt_9)
	%r5848 = load %Objptr, %Objptr* %regP_2
	store %Objptr %r5848, %Objptr* %regP_1
	; RW64(0): Word64  = RW64(2): Word64
	%r5849 = load %Word64, %Word64* %regW64_2
	store %Word64 %r5849, %Word64* %regW64_0
	; Goto L_825
	br label %L_825

L_827:
	; switch {test = Cast (RP(0): Objptr (opt_45), Bits64), default = Some L_828, cases = ((0x1, L_829))}
	%r5850 = load %Objptr, %Objptr* %regP_0
	%r5851 = ptrtoint %Objptr %r5850 to %Word64
	switch %Word64 %r5851, label %L_828 [
		%Word64 1, label %L_829
	]

L_826:
	; glob {index = 0, isRoot = false, ty = Objptr (opt_34, opt_33, opt_32, opt_31)}  = Cast (0x2, Objptr (opt_34, opt_33, opt_32, opt_31))
	%r5852 = inttoptr %Word64 2 to %Objptr
	%r5853 = getelementptr inbounds [1 x %Objptr], [1 x %Objptr]* @globalObjptrNonRoot, i32 0, i32 0
	store %Objptr %r5852, %Objptr* %r5853
	; Raise
	%r5854 = bitcast %struct.GC_state* @gcState to %Pointer
	%r5855 = getelementptr inbounds i8, %Pointer %r5854, i32 1616
	%r5856 = bitcast %Pointer %r5855 to %Pointer*
	%r5857 = load %Pointer, %Pointer* %r5856
	%r5858 = bitcast %struct.GC_state* @gcState to %Pointer
	%r5859 = getelementptr inbounds i8, %Pointer %r5858, i32 32
	%r5860 = bitcast %Pointer %r5859 to i32*
	%r5861 = load i32, i32* %r5860
	%r5862 = getelementptr inbounds i8, %Pointer %r5857, i32 %r5861
	store %Pointer %r5862, %Pointer* %stackTop
	%r5863 = load %Pointer, %Pointer* %stackTop
	%r5864 = getelementptr inbounds i8, %Pointer %r5863, i32 -8
	%r5865 = bitcast %Pointer %r5864 to %uintptr_t*
	%r5866 = load %uintptr_t, %uintptr_t* %r5865
	store %uintptr_t %r5866, %uintptr_t* %l_nextFun
	br label %top

L_825:
	; RW64(1): Word64  = OW64 (RP(1): Objptr (opt_9), 8): Word64
	%r5867 = load %Objptr, %Objptr* %regP_1
	%r5868 = getelementptr inbounds i8, %Objptr %r5867, i32 8
	%r5869 = bitcast %Objptr %r5868 to %Word64*
	%r5870 = load %Word64, %Word64* %r5869
	store %Word64 %r5870, %Word64* %regW64_1
	; Arith {prim = WordS64_addCheck, args = (RW64(0): Word64, RW64(1): Word64), dst = RW64(2): Word64, overflow = L_826, success = L_827}
	%r5871 = load %Word64, %Word64* %regW64_0
	%r5872 = load %Word64, %Word64* %regW64_1
	%r5873 = call {%Word64, i1} @llvm.sadd.with.overflow.i64(%Word64 %r5871, %Word64 %r5872)
	%r5874 = extractvalue {%Word64, i1} %r5873, 0
	%r5875 = extractvalue {%Word64, i1} %r5873, 1
	store %Word64 %r5874, %Word64* %regW64_2
	br i1 %r5875, label %L_826, label %L_827

L_824:
	; RP(0): Objptr (opt_45)  = SP(32): Objptr (opt_45)
	%r5876 = load %Pointer, %Pointer* %stackTop
	%r5877 = getelementptr inbounds i8, %Pointer %r5876, i32 32
	%r5878 = bitcast %Pointer %r5877 to %Objptr*
	%r5879 = load %Objptr, %Objptr* %r5878
	store %Objptr %r5879, %Objptr* %regP_0
	; RP(1): Objptr (opt_9)  = SP(8): Objptr (opt_9)
	%r5880 = load %Pointer, %Pointer* %stackTop
	%r5881 = getelementptr inbounds i8, %Pointer %r5880, i32 8
	%r5882 = bitcast %Pointer %r5881 to %Objptr*
	%r5883 = load %Objptr, %Objptr* %r5882
	store %Objptr %r5883, %Objptr* %regP_1
	; RW64(0): Word64  = 0x0
	store %Word64 0, %Word64* %regW64_0
	; Goto L_825
	br label %L_825

L_823:
	; switch {test = Cast (SP(32): Objptr (opt_45), Bits64), default = Some L_824, cases = ((0x1, L_945))}
	%r5884 = load %Pointer, %Pointer* %stackTop
	%r5885 = getelementptr inbounds i8, %Pointer %r5884, i32 32
	%r5886 = bitcast %Pointer %r5885 to %Objptr*
	%r5887 = load %Objptr, %Objptr* %r5886
	%r5888 = ptrtoint %Objptr %r5887 to %Word64
	switch %Word64 %r5888, label %L_824 [
		%Word64 1, label %L_945
	]

L_822:
	; RP(1): Objptr (opt_45)  = OP (SP(0): Objptr (opt_45), 8): Objptr (opt_45)
	%r5889 = load %Pointer, %Pointer* %stackTop
	%r5890 = getelementptr inbounds i8, %Pointer %r5889, i32 0
	%r5891 = bitcast %Pointer %r5890 to %Objptr*
	%r5892 = load %Objptr, %Objptr* %r5891
	%r5893 = getelementptr inbounds i8, %Objptr %r5892, i32 8
	%r5894 = bitcast %Objptr %r5893 to %Objptr*
	%r5895 = load %Objptr, %Objptr* %r5894
	store %Objptr %r5895, %Objptr* %regP_1
	; RP(2): Objptr (opt_9)  = OP (SP(0): Objptr (opt_45), 0): Objptr (opt_9)
	%r5896 = load %Pointer, %Pointer* %stackTop
	%r5897 = getelementptr inbounds i8, %Pointer %r5896, i32 0
	%r5898 = bitcast %Pointer %r5897 to %Objptr*
	%r5899 = load %Objptr, %Objptr* %r5898
	%r5900 = getelementptr inbounds i8, %Objptr %r5899, i32 0
	%r5901 = bitcast %Objptr %r5900 to %Objptr*
	%r5902 = load %Objptr, %Objptr* %r5901
	store %Objptr %r5902, %Objptr* %regP_2
	; SP(0): Objptr (opt_45)  = RP(1): Objptr (opt_45)
	%r5903 = load %Objptr, %Objptr* %regP_1
	%r5904 = load %Pointer, %Pointer* %stackTop
	%r5905 = getelementptr inbounds i8, %Pointer %r5904, i32 0
	%r5906 = bitcast %Pointer %r5905 to %Objptr*
	store %Objptr %r5903, %Objptr* %r5906
	; SP(8): Objptr (opt_9)  = RP(2): Objptr (opt_9)
	%r5907 = load %Objptr, %Objptr* %regP_2
	%r5908 = load %Pointer, %Pointer* %stackTop
	%r5909 = getelementptr inbounds i8, %Pointer %r5908, i32 8
	%r5910 = bitcast %Pointer %r5909 to %Objptr*
	store %Objptr %r5907, %Objptr* %r5910
	; SP(32): Objptr (opt_45)  = RP(0): Objptr (opt_45)
	%r5911 = load %Objptr, %Objptr* %regP_0
	%r5912 = load %Pointer, %Pointer* %stackTop
	%r5913 = getelementptr inbounds i8, %Pointer %r5912, i32 32
	%r5914 = bitcast %Pointer %r5913 to %Objptr*
	store %Objptr %r5911, %Objptr* %r5914
	; Goto L_820
	br label %L_820

L_821:
	; CW64 (<Frontier>)  = 0x5B
	%r5915 = load %Pointer, %Pointer* %frontier
	%r5916 = bitcast %Pointer %r5915 to %Word64*
	store %Word64 91, %Word64* %r5916
	; RQ(64): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r5917 = load %Pointer, %Pointer* %frontier
	%r5919 = ptrtoint %Pointer %r5917 to %uintptr_t
	%r5920 = add %uintptr_t %r5919, 8
	%r5918 = inttoptr %uintptr_t %r5920 to %Pointer
	store %CPointer %r5918, %CPointer* %regQ_64
	; RP(0): Objptr (opt_45)  = Cast (RQ(64): CPointer, Objptr (opt_45))
	%r5921 = load %CPointer, %CPointer* %regQ_64
	%r5922 = bitcast %CPointer %r5921 to %Objptr
	store %Objptr %r5922, %Objptr* %regP_0
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r5923 = load %Pointer, %Pointer* %frontier
	%r5925 = ptrtoint %Pointer %r5923 to %uintptr_t
	%r5926 = add %uintptr_t %r5925, 24
	%r5924 = inttoptr %uintptr_t %r5926 to %Pointer
	store %Pointer %r5924, %Pointer* %frontier
	; OP (RP(0): Objptr (opt_45), 0): Objptr (opt_9)  = SP(8): Objptr (opt_9)
	%r5927 = load %Pointer, %Pointer* %stackTop
	%r5928 = getelementptr inbounds i8, %Pointer %r5927, i32 8
	%r5929 = bitcast %Pointer %r5928 to %Objptr*
	%r5930 = load %Objptr, %Objptr* %r5929
	%r5931 = load %Objptr, %Objptr* %regP_0
	%r5932 = getelementptr inbounds i8, %Objptr %r5931, i32 0
	%r5933 = bitcast %Objptr %r5932 to %Objptr*
	store %Objptr %r5930, %Objptr* %r5933
	; OP (RP(0): Objptr (opt_45), 8): Objptr (opt_45)  = SP(32): Objptr (opt_45)
	%r5934 = load %Pointer, %Pointer* %stackTop
	%r5935 = getelementptr inbounds i8, %Pointer %r5934, i32 32
	%r5936 = bitcast %Pointer %r5935 to %Objptr*
	%r5937 = load %Objptr, %Objptr* %r5936
	%r5938 = load %Objptr, %Objptr* %regP_0
	%r5939 = getelementptr inbounds i8, %Objptr %r5938, i32 8
	%r5940 = bitcast %Objptr %r5939 to %Objptr*
	store %Objptr %r5937, %Objptr* %r5940
	; switch {test = Cast (SP(0): Objptr (opt_45), Bits64), default = Some L_822, cases = ((0x1, L_823))}
	%r5941 = load %Pointer, %Pointer* %stackTop
	%r5942 = getelementptr inbounds i8, %Pointer %r5941, i32 0
	%r5943 = bitcast %Pointer %r5942 to %Objptr*
	%r5944 = load %Objptr, %Objptr* %r5943
	%r5945 = ptrtoint %Objptr %r5944 to %Word64
	switch %Word64 %r5945, label %L_822 [
		%Word64 1, label %L_823
	]

L_820:
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r5946 = bitcast %struct.GC_state* @gcState to %Pointer
	%r5947 = getelementptr inbounds i8, %Pointer %r5946, i32 8
	%r5948 = bitcast %Pointer %r5947 to %CPointer*
	%r5949 = load %CPointer, %CPointer* %r5948
	%r5950 = load %Pointer, %Pointer* %frontier
	%r5952 = icmp ult %Pointer %r5949, %r5950
	%r5951 = zext i1 %r5952 to %Word32
	store %Word32 %r5951, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_821), (0x1, L_960))}
	%r5953 = load %Word32, %Word32* %regW32_0
	%r5954 = trunc %Word32 %r5953 to i1
	br i1 %r5954, label %L_960, label %L_821

L_819:
	; RP(0): Objptr (opt_45)  = OP (SP(32): Objptr (opt_45), 8): Objptr (opt_45)
	%r5955 = load %Pointer, %Pointer* %stackTop
	%r5956 = getelementptr inbounds i8, %Pointer %r5955, i32 32
	%r5957 = bitcast %Pointer %r5956 to %Objptr*
	%r5958 = load %Objptr, %Objptr* %r5957
	%r5959 = getelementptr inbounds i8, %Objptr %r5958, i32 8
	%r5960 = bitcast %Objptr %r5959 to %Objptr*
	%r5961 = load %Objptr, %Objptr* %r5960
	store %Objptr %r5961, %Objptr* %regP_0
	; RP(1): Objptr (opt_9)  = OP (SP(32): Objptr (opt_45), 0): Objptr (opt_9)
	%r5962 = load %Pointer, %Pointer* %stackTop
	%r5963 = getelementptr inbounds i8, %Pointer %r5962, i32 32
	%r5964 = bitcast %Pointer %r5963 to %Objptr*
	%r5965 = load %Objptr, %Objptr* %r5964
	%r5966 = getelementptr inbounds i8, %Objptr %r5965, i32 0
	%r5967 = bitcast %Objptr %r5966 to %Objptr*
	%r5968 = load %Objptr, %Objptr* %r5967
	store %Objptr %r5968, %Objptr* %regP_1
	; SP(0): Objptr (opt_45)  = RP(0): Objptr (opt_45)
	%r5969 = load %Objptr, %Objptr* %regP_0
	%r5970 = load %Pointer, %Pointer* %stackTop
	%r5971 = getelementptr inbounds i8, %Pointer %r5970, i32 0
	%r5972 = bitcast %Pointer %r5971 to %Objptr*
	store %Objptr %r5969, %Objptr* %r5972
	; SP(8): Objptr (opt_9)  = RP(1): Objptr (opt_9)
	%r5973 = load %Objptr, %Objptr* %regP_1
	%r5974 = load %Pointer, %Pointer* %stackTop
	%r5975 = getelementptr inbounds i8, %Pointer %r5974, i32 8
	%r5976 = bitcast %Pointer %r5975 to %Objptr*
	store %Objptr %r5973, %Objptr* %r5976
	; SP(32): Objptr (opt_45)  = Cast (0x1, Objptr (opt_45))
	%r5977 = inttoptr %Word64 1 to %Objptr
	%r5978 = load %Pointer, %Pointer* %stackTop
	%r5979 = getelementptr inbounds i8, %Pointer %r5978, i32 32
	%r5980 = bitcast %Pointer %r5979 to %Objptr*
	store %Objptr %r5977, %Objptr* %r5980
	; Goto L_820
	br label %L_820

L_818:
	; switch {test = Cast (SP(32): Objptr (opt_45), Bits64), default = Some L_819, cases = ((0x1, L_962))}
	%r5981 = load %Pointer, %Pointer* %stackTop
	%r5982 = getelementptr inbounds i8, %Pointer %r5981, i32 32
	%r5983 = bitcast %Pointer %r5982 to %Objptr*
	%r5984 = load %Objptr, %Objptr* %r5983
	%r5985 = ptrtoint %Objptr %r5984 to %Word64
	switch %Word64 %r5985, label %L_819 [
		%Word64 1, label %L_962
	]

L_817:
	; SP(48): Objptr (opt_3)  = glob {index = 135, isRoot = true, ty = Objptr (opt_3)}
	%r5986 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 135
	%r5987 = load %Objptr, %Objptr* %r5986
	%r5988 = load %Pointer, %Pointer* %stackTop
	%r5989 = getelementptr inbounds i8, %Pointer %r5988, i32 48
	%r5990 = bitcast %Pointer %r5989 to %Objptr*
	store %Objptr %r5987, %Objptr* %r5990
	; Goto full_2
	br label %full_2

L_816:
	; XW8 (RP(0): Objptr (opt_11), RW64(0): Word64, 1, 0): Word8  = SW8(28): Word8
	%r5991 = load %Pointer, %Pointer* %stackTop
	%r5992 = getelementptr inbounds i8, %Pointer %r5991, i32 28
	%r5993 = bitcast %Pointer %r5992 to %Word8*
	%r5994 = load %Word8, %Word8* %r5993
	%r5995 = load %Objptr, %Objptr* %regP_0
	%r5996 = load %Word64, %Word64* %regW64_0
	%r5997 = mul nsw %Word64 %r5996, 1
	%r5998 = add nsw %Word64 %r5997, 0
	%r5999 = getelementptr inbounds i8, %Objptr %r5995, %Word64 %r5998
	%r6000 = bitcast %Objptr %r5999 to %Word8*
	store %Word8 %r5994, %Word8* %r6000
	; RW64(1): Word64  = Word64_add (RW64(0): Word64, 0x1)
	%r6001 = load %Word64, %Word64* %regW64_0
	%r6002 = add %Word64 %r6001, 1
	store %Word64 %r6002, %Word64* %regW64_1
	; RW64(0): Word64  = RW64(1): Word64
	%r6003 = load %Word64, %Word64* %regW64_1
	store %Word64 %r6003, %Word64* %regW64_0
	; Goto loop_48
	br label %loop_48

L_815:
	; Push(-72)
	%r6004 = load %Pointer, %Pointer* %stackTop
	%r6005 = getelementptr inbounds i8, %Pointer %r6004, i32 -72
	store %Pointer %r6005, %Pointer* %stackTop
	; Goto L_813
	br label %L_813

L_814:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 115}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_815}
	; GetOperands
	%r6006 = bitcast %struct.GC_state* @gcState to %Pointer
	%r6007 = load %Pointer, %Pointer* %stackTop
	%r6008 = getelementptr inbounds i8, %Pointer %r6007, i32 64
	%r6009 = bitcast %Pointer %r6008 to %uintptr_t*
	store %uintptr_t 115, %uintptr_t* %r6009
	; Push(72)
	%r6010 = load %Pointer, %Pointer* %stackTop
	%r6011 = getelementptr inbounds i8, %Pointer %r6010, i32 72
	store %Pointer %r6011, %Pointer* %stackTop
	; FlushFrontier
	%r6012 = bitcast %struct.GC_state* @gcState to %Pointer
	%r6013 = getelementptr inbounds i8, %Pointer %r6012, i32 0
	%r6014 = bitcast %Pointer %r6013 to %Pointer*
	%r6015 = load %Pointer, %Pointer* %frontier
	store %Pointer %r6015, %Pointer* %r6014
	; FlushStackTop
	%r6016 = bitcast %struct.GC_state* @gcState to %Pointer
	%r6017 = getelementptr inbounds i8, %Pointer %r6016, i32 16
	%r6018 = bitcast %Pointer %r6017 to %Pointer*
	%r6019 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r6019, %Pointer* %r6018
	; Call
	call void @GC_collect(%Pointer %r6006, %Word64 0, %Word32 0)
	; CacheFrontier
	%r6020 = bitcast %struct.GC_state* @gcState to %Pointer
	%r6021 = getelementptr inbounds i8, %Pointer %r6020, i32 0
	%r6022 = bitcast %Pointer %r6021 to %Pointer*
	%r6023 = load %Pointer, %Pointer* %r6022
	store %Pointer %r6023, %Pointer* %frontier
	; CacheStackTop
	%r6024 = bitcast %struct.GC_state* @gcState to %Pointer
	%r6025 = getelementptr inbounds i8, %Pointer %r6024, i32 16
	%r6026 = bitcast %Pointer %r6025 to %Pointer*
	%r6027 = load %Pointer, %Pointer* %r6026
	store %Pointer %r6027, %Pointer* %stackTop
	br label %L_815

L_813:
	; RW64(0): Word64  = OW64 (SP(48): Objptr (opt_3), ~16): Word64
	%r6028 = load %Pointer, %Pointer* %stackTop
	%r6029 = getelementptr inbounds i8, %Pointer %r6028, i32 48
	%r6030 = bitcast %Pointer %r6029 to %Objptr*
	%r6031 = load %Objptr, %Objptr* %r6030
	%r6032 = getelementptr inbounds i8, %Objptr %r6031, i32 -16
	%r6033 = bitcast %Objptr %r6032 to %Word64*
	%r6034 = load %Word64, %Word64* %r6033
	store %Word64 %r6034, %Word64* %regW64_0
	; CW64 (<Frontier>)  = 0x13
	%r6035 = load %Pointer, %Pointer* %frontier
	%r6036 = bitcast %Pointer %r6035 to %Word64*
	store %Word64 19, %Word64* %r6036
	; RQ(63): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r6037 = load %Pointer, %Pointer* %frontier
	%r6039 = ptrtoint %Pointer %r6037 to %uintptr_t
	%r6040 = add %uintptr_t %r6039, 8
	%r6038 = inttoptr %uintptr_t %r6040 to %Pointer
	store %CPointer %r6038, %CPointer* %regQ_63
	; RP(0): Objptr (opt_9)  = Cast (RQ(63): CPointer, Objptr (opt_9))
	%r6041 = load %CPointer, %CPointer* %regQ_63
	%r6042 = bitcast %CPointer %r6041 to %Objptr
	store %Objptr %r6042, %Objptr* %regP_0
	; <Frontier>  = CPointer_add (<Frontier>, 0x20)
	%r6043 = load %Pointer, %Pointer* %frontier
	%r6045 = ptrtoint %Pointer %r6043 to %uintptr_t
	%r6046 = add %uintptr_t %r6045, 32
	%r6044 = inttoptr %uintptr_t %r6046 to %Pointer
	store %Pointer %r6044, %Pointer* %frontier
	; OW64 (RP(0): Objptr (opt_9), 0): Word64  = 0x0
	%r6047 = load %Objptr, %Objptr* %regP_0
	%r6048 = getelementptr inbounds i8, %Objptr %r6047, i32 0
	%r6049 = bitcast %Objptr %r6048 to %Word64*
	store %Word64 0, %Word64* %r6049
	; OW64 (RP(0): Objptr (opt_9), 8): Word64  = RW64(0): Word64
	%r6050 = load %Word64, %Word64* %regW64_0
	%r6051 = load %Objptr, %Objptr* %regP_0
	%r6052 = getelementptr inbounds i8, %Objptr %r6051, i32 8
	%r6053 = bitcast %Objptr %r6052 to %Word64*
	store %Word64 %r6050, %Word64* %r6053
	; OP (RP(0): Objptr (opt_9), 16): Objptr (opt_3)  = SP(48): Objptr (opt_3)
	%r6054 = load %Pointer, %Pointer* %stackTop
	%r6055 = getelementptr inbounds i8, %Pointer %r6054, i32 48
	%r6056 = bitcast %Pointer %r6055 to %Objptr*
	%r6057 = load %Objptr, %Objptr* %r6056
	%r6058 = load %Objptr, %Objptr* %regP_0
	%r6059 = getelementptr inbounds i8, %Objptr %r6058, i32 16
	%r6060 = bitcast %Objptr %r6059 to %Objptr*
	store %Objptr %r6057, %Objptr* %r6060
	; CW64 (<Frontier>)  = 0x5B
	%r6061 = load %Pointer, %Pointer* %frontier
	%r6062 = bitcast %Pointer %r6061 to %Word64*
	store %Word64 91, %Word64* %r6062
	; RQ(62): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r6063 = load %Pointer, %Pointer* %frontier
	%r6065 = ptrtoint %Pointer %r6063 to %uintptr_t
	%r6066 = add %uintptr_t %r6065, 8
	%r6064 = inttoptr %uintptr_t %r6066 to %Pointer
	store %CPointer %r6064, %CPointer* %regQ_62
	; RP(1): Objptr (opt_45)  = Cast (RQ(62): CPointer, Objptr (opt_45))
	%r6067 = load %CPointer, %CPointer* %regQ_62
	%r6068 = bitcast %CPointer %r6067 to %Objptr
	store %Objptr %r6068, %Objptr* %regP_1
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r6069 = load %Pointer, %Pointer* %frontier
	%r6071 = ptrtoint %Pointer %r6069 to %uintptr_t
	%r6072 = add %uintptr_t %r6071, 24
	%r6070 = inttoptr %uintptr_t %r6072 to %Pointer
	store %Pointer %r6070, %Pointer* %frontier
	; OP (RP(1): Objptr (opt_45), 0): Objptr (opt_9)  = RP(0): Objptr (opt_9)
	%r6073 = load %Objptr, %Objptr* %regP_0
	%r6074 = load %Objptr, %Objptr* %regP_1
	%r6075 = getelementptr inbounds i8, %Objptr %r6074, i32 0
	%r6076 = bitcast %Objptr %r6075 to %Objptr*
	store %Objptr %r6073, %Objptr* %r6076
	; OP (RP(1): Objptr (opt_45), 8): Objptr (opt_45)  = SP(32): Objptr (opt_45)
	%r6077 = load %Pointer, %Pointer* %stackTop
	%r6078 = getelementptr inbounds i8, %Pointer %r6077, i32 32
	%r6079 = bitcast %Pointer %r6078 to %Objptr*
	%r6080 = load %Objptr, %Objptr* %r6079
	%r6081 = load %Objptr, %Objptr* %regP_1
	%r6082 = getelementptr inbounds i8, %Objptr %r6081, i32 8
	%r6083 = bitcast %Objptr %r6082 to %Objptr*
	store %Objptr %r6080, %Objptr* %r6083
	; SP(32): Objptr (opt_45)  = RP(1): Objptr (opt_45)
	%r6084 = load %Objptr, %Objptr* %regP_1
	%r6085 = load %Pointer, %Pointer* %stackTop
	%r6086 = getelementptr inbounds i8, %Pointer %r6085, i32 32
	%r6087 = bitcast %Pointer %r6086 to %Objptr*
	store %Objptr %r6084, %Objptr* %r6087
	; SW64(48): Word64  = SW64(56): Word64
	%r6088 = load %Pointer, %Pointer* %stackTop
	%r6089 = getelementptr inbounds i8, %Pointer %r6088, i32 56
	%r6090 = bitcast %Pointer %r6089 to %Word64*
	%r6091 = load %Word64, %Word64* %r6090
	%r6092 = load %Pointer, %Pointer* %stackTop
	%r6093 = getelementptr inbounds i8, %Pointer %r6092, i32 48
	%r6094 = bitcast %Pointer %r6093 to %Word64*
	store %Word64 %r6091, %Word64* %r6094
	; Goto loop_47
	br label %loop_47

full_2:
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r6095 = bitcast %struct.GC_state* @gcState to %Pointer
	%r6096 = getelementptr inbounds i8, %Pointer %r6095, i32 8
	%r6097 = bitcast %Pointer %r6096 to %CPointer*
	%r6098 = load %CPointer, %CPointer* %r6097
	%r6099 = load %Pointer, %Pointer* %frontier
	%r6101 = icmp ult %Pointer %r6098, %r6099
	%r6100 = zext i1 %r6101 to %Word32
	store %Word32 %r6100, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_813), (0x1, L_814))}
	%r6102 = load %Word32, %Word32* %regW32_0
	%r6103 = trunc %Word32 %r6102 to i1
	br i1 %r6103, label %L_814, label %L_813

L_812:
	; OW64 (RP(0): Objptr (opt_11), ~8): Word64  = 0x7
	%r6104 = load %Objptr, %Objptr* %regP_0
	%r6105 = getelementptr inbounds i8, %Objptr %r6104, i32 -8
	%r6106 = bitcast %Objptr %r6105 to %Word64*
	store %Word64 7, %Word64* %r6106
	; SP(48): Objptr (opt_3)  = Cast (RP(0): Objptr (opt_11), Objptr (opt_3))
	%r6107 = load %Objptr, %Objptr* %regP_0
	%r6108 = bitcast %Objptr %r6107 to %Objptr
	%r6109 = load %Pointer, %Pointer* %stackTop
	%r6110 = getelementptr inbounds i8, %Pointer %r6109, i32 48
	%r6111 = bitcast %Pointer %r6110 to %Objptr*
	store %Objptr %r6108, %Objptr* %r6111
	; Goto full_2
	br label %full_2

loop_48:
	; RW32(0): Word32  = WordS64_lt (RW64(0): Word64, 0x1)
	%r6112 = load %Word64, %Word64* %regW64_0
	%r6114 = icmp slt %Word64 %r6112, 1
	%r6113 = zext i1 %r6114 to %Word32
	store %Word32 %r6113, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_812), (0x1, L_816))}
	%r6115 = load %Word32, %Word32* %regW32_0
	%r6116 = trunc %Word32 %r6115 to i1
	br i1 %r6116, label %L_816, label %L_812

L_811:
	; Push(-72)
	%r6117 = load %Pointer, %Pointer* %stackTop
	%r6118 = getelementptr inbounds i8, %Pointer %r6117, i32 -72
	store %Pointer %r6118, %Pointer* %stackTop
	%r6119 = load %Objptr, %Objptr* @CReturnP
	store %Objptr %r6119, %Objptr* %regP_0
	; RW64(0): Word64  = 0x0
	store %Word64 0, %Word64* %regW64_0
	; Goto loop_48
	br label %loop_48

L_810:
	; CCall {args = (<GCState>, 0x0, 0x1, 0x17), frameInfo = Some {frameLayoutsIndex = 114}, func = {args = (GCState, Word64, Word64, Word64), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int64, Word64), res = Some Objptr}, return = Objptr (opt_11), symbolScope = private, target = GC_arrayAllocate}, return = Some L_811}
	; GetOperands
	%r6120 = bitcast %struct.GC_state* @gcState to %Pointer
	%r6121 = load %Pointer, %Pointer* %stackTop
	%r6122 = getelementptr inbounds i8, %Pointer %r6121, i32 64
	%r6123 = bitcast %Pointer %r6122 to %uintptr_t*
	store %uintptr_t 114, %uintptr_t* %r6123
	; Push(72)
	%r6124 = load %Pointer, %Pointer* %stackTop
	%r6125 = getelementptr inbounds i8, %Pointer %r6124, i32 72
	store %Pointer %r6125, %Pointer* %stackTop
	; FlushFrontier
	%r6126 = bitcast %struct.GC_state* @gcState to %Pointer
	%r6127 = getelementptr inbounds i8, %Pointer %r6126, i32 0
	%r6128 = bitcast %Pointer %r6127 to %Pointer*
	%r6129 = load %Pointer, %Pointer* %frontier
	store %Pointer %r6129, %Pointer* %r6128
	; FlushStackTop
	%r6130 = bitcast %struct.GC_state* @gcState to %Pointer
	%r6131 = getelementptr inbounds i8, %Pointer %r6130, i32 16
	%r6132 = bitcast %Pointer %r6131 to %Pointer*
	%r6133 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r6133, %Pointer* %r6132
	; Call
	%r6134 = call %Objptr @GC_arrayAllocate(%Pointer %r6120, %Word64 0, %Word64 1, %Word64 23)
	store %Objptr %r6134, %Objptr* @CReturnP
	; CacheFrontier
	%r6135 = bitcast %struct.GC_state* @gcState to %Pointer
	%r6136 = getelementptr inbounds i8, %Pointer %r6135, i32 0
	%r6137 = bitcast %Pointer %r6136 to %Pointer*
	%r6138 = load %Pointer, %Pointer* %r6137
	store %Pointer %r6138, %Pointer* %frontier
	; CacheStackTop
	%r6139 = bitcast %struct.GC_state* @gcState to %Pointer
	%r6140 = getelementptr inbounds i8, %Pointer %r6139, i32 16
	%r6141 = bitcast %Pointer %r6140 to %Pointer*
	%r6142 = load %Pointer, %Pointer* %r6141
	store %Pointer %r6142, %Pointer* %stackTop
	br label %L_811

L_809:
	; SW64(56): Word64  = Word64_add (SW64(48): Word64, 0x1)
	%r6143 = load %Pointer, %Pointer* %stackTop
	%r6144 = getelementptr inbounds i8, %Pointer %r6143, i32 48
	%r6145 = bitcast %Pointer %r6144 to %Word64*
	%r6146 = load %Word64, %Word64* %r6145
	%r6147 = add %Word64 %r6146, 1
	%r6148 = load %Pointer, %Pointer* %stackTop
	%r6149 = getelementptr inbounds i8, %Pointer %r6148, i32 56
	%r6150 = bitcast %Pointer %r6149 to %Word64*
	store %Word64 %r6147, %Word64* %r6150
	; SW8(28): Word8  = XW8 (SP(0): Objptr (opt_3), SW64(48): Word64, 1, 0): Word8
	%r6151 = load %Pointer, %Pointer* %stackTop
	%r6152 = getelementptr inbounds i8, %Pointer %r6151, i32 0
	%r6153 = bitcast %Pointer %r6152 to %Objptr*
	%r6154 = load %Objptr, %Objptr* %r6153
	%r6155 = load %Pointer, %Pointer* %stackTop
	%r6156 = getelementptr inbounds i8, %Pointer %r6155, i32 48
	%r6157 = bitcast %Pointer %r6156 to %Word64*
	%r6158 = load %Word64, %Word64* %r6157
	%r6159 = mul nsw %Word64 %r6158, 1
	%r6160 = add nsw %Word64 %r6159, 0
	%r6161 = getelementptr inbounds i8, %Objptr %r6154, %Word64 %r6160
	%r6162 = bitcast %Objptr %r6161 to %Word8*
	%r6163 = load %Word8, %Word8* %r6162
	%r6164 = load %Pointer, %Pointer* %stackTop
	%r6165 = getelementptr inbounds i8, %Pointer %r6164, i32 28
	%r6166 = bitcast %Pointer %r6165 to %Word8*
	store %Word8 %r6163, %Word8* %r6166
	; switch {test = SW8(28): Word8, default = Some L_810, cases = ((0x2E, L_817))}
	%r6167 = load %Pointer, %Pointer* %stackTop
	%r6168 = getelementptr inbounds i8, %Pointer %r6167, i32 28
	%r6169 = bitcast %Pointer %r6168 to %Word8*
	%r6170 = load %Word8, %Word8* %r6169
	switch %Word8 %r6170, label %L_810 [
		%Word8 46, label %L_817
	]

L_808:
	; RW32(0): Word32  = WordS64_lt (SW64(8): Word64, SW64(48): Word64)
	%r6171 = load %Pointer, %Pointer* %stackTop
	%r6172 = getelementptr inbounds i8, %Pointer %r6171, i32 8
	%r6173 = bitcast %Pointer %r6172 to %Word64*
	%r6174 = load %Word64, %Word64* %r6173
	%r6175 = load %Pointer, %Pointer* %stackTop
	%r6176 = getelementptr inbounds i8, %Pointer %r6175, i32 48
	%r6177 = bitcast %Pointer %r6176 to %Word64*
	%r6178 = load %Word64, %Word64* %r6177
	%r6180 = icmp slt %Word64 %r6174, %r6178
	%r6179 = zext i1 %r6180 to %Word32
	store %Word32 %r6179, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_809), (0x1, L_818))}
	%r6181 = load %Word32, %Word32* %regW32_0
	%r6182 = trunc %Word32 %r6181 to i1
	br i1 %r6182, label %L_818, label %L_809

loop_47:
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r6183 = bitcast %struct.GC_state* @gcState to %Pointer
	%r6184 = getelementptr inbounds i8, %Pointer %r6183, i32 8
	%r6185 = bitcast %Pointer %r6184 to %CPointer*
	%r6186 = load %CPointer, %CPointer* %r6185
	%r6187 = load %Pointer, %Pointer* %frontier
	%r6189 = icmp ult %Pointer %r6186, %r6187
	%r6188 = zext i1 %r6189 to %Word32
	store %Word32 %r6188, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_808), (0x1, L_963))}
	%r6190 = load %Word32, %Word32* %regW32_0
	%r6191 = trunc %Word32 %r6190 to i1
	br i1 %r6191, label %L_963, label %L_808

full_1:
	; RW64(0): Word64  = OW64 (SP(0): Objptr (opt_3), ~16): Word64
	%r6192 = load %Pointer, %Pointer* %stackTop
	%r6193 = getelementptr inbounds i8, %Pointer %r6192, i32 0
	%r6194 = bitcast %Pointer %r6193 to %Objptr*
	%r6195 = load %Objptr, %Objptr* %r6194
	%r6196 = getelementptr inbounds i8, %Objptr %r6195, i32 -16
	%r6197 = bitcast %Objptr %r6196 to %Word64*
	%r6198 = load %Word64, %Word64* %r6197
	store %Word64 %r6198, %Word64* %regW64_0
	; SW64(8): Word64  = Word64_sub (RW64(0): Word64, 0x1)
	%r6199 = load %Word64, %Word64* %regW64_0
	%r6200 = sub %Word64 %r6199, 1
	%r6201 = load %Pointer, %Pointer* %stackTop
	%r6202 = getelementptr inbounds i8, %Pointer %r6201, i32 8
	%r6203 = bitcast %Pointer %r6202 to %Word64*
	store %Word64 %r6200, %Word64* %r6203
	; SP(32): Objptr (opt_45)  = Cast (0x1, Objptr (opt_45))
	%r6204 = inttoptr %Word64 1 to %Objptr
	%r6205 = load %Pointer, %Pointer* %stackTop
	%r6206 = getelementptr inbounds i8, %Pointer %r6205, i32 32
	%r6207 = bitcast %Pointer %r6206 to %Objptr*
	store %Objptr %r6204, %Objptr* %r6207
	; SW64(48): Word64  = 0x0
	%r6208 = load %Pointer, %Pointer* %stackTop
	%r6209 = getelementptr inbounds i8, %Pointer %r6208, i32 48
	%r6210 = bitcast %Pointer %r6209 to %Word64*
	store %Word64 0, %Word64* %r6210
	; Goto loop_47
	br label %loop_47

L_807:
	; Push(-56)
	%r6211 = load %Pointer, %Pointer* %stackTop
	%r6212 = getelementptr inbounds i8, %Pointer %r6211, i32 -56
	store %Pointer %r6212, %Pointer* %stackTop
	; OW64 (SP(8): Objptr (opt_11), ~8): Word64  = 0x7
	%r6213 = load %Pointer, %Pointer* %stackTop
	%r6214 = getelementptr inbounds i8, %Pointer %r6213, i32 8
	%r6215 = bitcast %Pointer %r6214 to %Objptr*
	%r6216 = load %Objptr, %Objptr* %r6215
	%r6217 = getelementptr inbounds i8, %Objptr %r6216, i32 -8
	%r6218 = bitcast %Objptr %r6217 to %Word64*
	store %Word64 7, %Word64* %r6218
	; SP(0): Objptr (opt_3)  = Cast (SP(8): Objptr (opt_11), Objptr (opt_3))
	%r6219 = load %Pointer, %Pointer* %stackTop
	%r6220 = getelementptr inbounds i8, %Pointer %r6219, i32 8
	%r6221 = bitcast %Pointer %r6220 to %Objptr*
	%r6222 = load %Objptr, %Objptr* %r6221
	%r6223 = bitcast %Objptr %r6222 to %Objptr
	%r6224 = load %Pointer, %Pointer* %stackTop
	%r6225 = getelementptr inbounds i8, %Pointer %r6224, i32 0
	%r6226 = bitcast %Pointer %r6225 to %Objptr*
	store %Objptr %r6223, %Objptr* %r6226
	; Goto full_1
	br label %full_1

L_join_12:
	; CCall {args = (<GCState>, SP(8): Objptr (opt_11), 0x0, SP(0): Objptr (opt_3), 0x0, SW64(32): Word64), frameInfo = Some {frameLayoutsIndex = 113}, func = {args = (GCState, Objptr (opt_11), Word64, Objptr (opt_3), Word64, Word64), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Objptr, Int64, Objptr, Int64, Int64), res = None}, return = Bits0, symbolScope = private, target = GC_arrayCopy}, return = Some L_807}
	; GetOperands
	%r6227 = bitcast %struct.GC_state* @gcState to %Pointer
	%r6228 = load %Pointer, %Pointer* %stackTop
	%r6229 = getelementptr inbounds i8, %Pointer %r6228, i32 8
	%r6230 = bitcast %Pointer %r6229 to %Objptr*
	%r6231 = load %Objptr, %Objptr* %r6230
	%r6232 = load %Pointer, %Pointer* %stackTop
	%r6233 = getelementptr inbounds i8, %Pointer %r6232, i32 0
	%r6234 = bitcast %Pointer %r6233 to %Objptr*
	%r6235 = load %Objptr, %Objptr* %r6234
	%r6236 = load %Pointer, %Pointer* %stackTop
	%r6237 = getelementptr inbounds i8, %Pointer %r6236, i32 32
	%r6238 = bitcast %Pointer %r6237 to %Word64*
	%r6239 = load %Word64, %Word64* %r6238
	%r6240 = load %Pointer, %Pointer* %stackTop
	%r6241 = getelementptr inbounds i8, %Pointer %r6240, i32 48
	%r6242 = bitcast %Pointer %r6241 to %uintptr_t*
	store %uintptr_t 113, %uintptr_t* %r6242
	; Push(56)
	%r6243 = load %Pointer, %Pointer* %stackTop
	%r6244 = getelementptr inbounds i8, %Pointer %r6243, i32 56
	store %Pointer %r6244, %Pointer* %stackTop
	; FlushFrontier
	%r6245 = bitcast %struct.GC_state* @gcState to %Pointer
	%r6246 = getelementptr inbounds i8, %Pointer %r6245, i32 0
	%r6247 = bitcast %Pointer %r6246 to %Pointer*
	%r6248 = load %Pointer, %Pointer* %frontier
	store %Pointer %r6248, %Pointer* %r6247
	; FlushStackTop
	%r6249 = bitcast %struct.GC_state* @gcState to %Pointer
	%r6250 = getelementptr inbounds i8, %Pointer %r6249, i32 16
	%r6251 = bitcast %Pointer %r6250 to %Pointer*
	%r6252 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r6252, %Pointer* %r6251
	; Call
	call void @GC_arrayCopy(%Pointer %r6227, %Objptr %r6231, %Word64 0, %Objptr %r6235, %Word64 0, %Word64 %r6239)
	; CacheFrontier
	%r6253 = bitcast %struct.GC_state* @gcState to %Pointer
	%r6254 = getelementptr inbounds i8, %Pointer %r6253, i32 0
	%r6255 = bitcast %Pointer %r6254 to %Pointer*
	%r6256 = load %Pointer, %Pointer* %r6255
	store %Pointer %r6256, %Pointer* %frontier
	; CacheStackTop
	%r6257 = bitcast %struct.GC_state* @gcState to %Pointer
	%r6258 = getelementptr inbounds i8, %Pointer %r6257, i32 16
	%r6259 = bitcast %Pointer %r6258 to %Pointer*
	%r6260 = load %Pointer, %Pointer* %r6259
	store %Pointer %r6260, %Pointer* %stackTop
	br label %L_807

L_806:
	; Push(-56)
	%r6261 = load %Pointer, %Pointer* %stackTop
	%r6262 = getelementptr inbounds i8, %Pointer %r6261, i32 -56
	store %Pointer %r6262, %Pointer* %stackTop
	%r6263 = load %Objptr, %Objptr* @CReturnP
	store %Objptr %r6263, %Objptr* %regP_0
	; SP(8): Objptr (opt_11)  = RP(0): Objptr (opt_11)
	%r6264 = load %Objptr, %Objptr* %regP_0
	%r6265 = load %Pointer, %Pointer* %stackTop
	%r6266 = getelementptr inbounds i8, %Pointer %r6265, i32 8
	%r6267 = bitcast %Pointer %r6266 to %Objptr*
	store %Objptr %r6264, %Objptr* %r6267
	; Goto L_join_12
	br label %L_join_12

L_805:
	; CCall {args = (<GCState>, 0x0, SW64(32): Word64, 0x17), frameInfo = Some {frameLayoutsIndex = 112}, func = {args = (GCState, Word64, Word64, Word64), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int64, Word64), res = Some Objptr}, return = Objptr (opt_11), symbolScope = private, target = GC_arrayAllocate}, return = Some L_806}
	; GetOperands
	%r6268 = bitcast %struct.GC_state* @gcState to %Pointer
	%r6269 = load %Pointer, %Pointer* %stackTop
	%r6270 = getelementptr inbounds i8, %Pointer %r6269, i32 32
	%r6271 = bitcast %Pointer %r6270 to %Word64*
	%r6272 = load %Word64, %Word64* %r6271
	%r6273 = load %Pointer, %Pointer* %stackTop
	%r6274 = getelementptr inbounds i8, %Pointer %r6273, i32 48
	%r6275 = bitcast %Pointer %r6274 to %uintptr_t*
	store %uintptr_t 112, %uintptr_t* %r6275
	; Push(56)
	%r6276 = load %Pointer, %Pointer* %stackTop
	%r6277 = getelementptr inbounds i8, %Pointer %r6276, i32 56
	store %Pointer %r6277, %Pointer* %stackTop
	; FlushFrontier
	%r6278 = bitcast %struct.GC_state* @gcState to %Pointer
	%r6279 = getelementptr inbounds i8, %Pointer %r6278, i32 0
	%r6280 = bitcast %Pointer %r6279 to %Pointer*
	%r6281 = load %Pointer, %Pointer* %frontier
	store %Pointer %r6281, %Pointer* %r6280
	; FlushStackTop
	%r6282 = bitcast %struct.GC_state* @gcState to %Pointer
	%r6283 = getelementptr inbounds i8, %Pointer %r6282, i32 16
	%r6284 = bitcast %Pointer %r6283 to %Pointer*
	%r6285 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r6285, %Pointer* %r6284
	; Call
	%r6286 = call %Objptr @GC_arrayAllocate(%Pointer %r6268, %Word64 0, %Word64 %r6272, %Word64 23)
	store %Objptr %r6286, %Objptr* @CReturnP
	; CacheFrontier
	%r6287 = bitcast %struct.GC_state* @gcState to %Pointer
	%r6288 = getelementptr inbounds i8, %Pointer %r6287, i32 0
	%r6289 = bitcast %Pointer %r6288 to %Pointer*
	%r6290 = load %Pointer, %Pointer* %r6289
	store %Pointer %r6290, %Pointer* %frontier
	; CacheStackTop
	%r6291 = bitcast %struct.GC_state* @gcState to %Pointer
	%r6292 = getelementptr inbounds i8, %Pointer %r6291, i32 16
	%r6293 = bitcast %Pointer %r6292 to %Pointer*
	%r6294 = load %Pointer, %Pointer* %r6293
	store %Pointer %r6294, %Pointer* %stackTop
	br label %L_806

L_804:
	; RW32(0): Word32  = Word64_equal (0x0, SW64(32): Word64)
	%r6295 = load %Pointer, %Pointer* %stackTop
	%r6296 = getelementptr inbounds i8, %Pointer %r6295, i32 32
	%r6297 = bitcast %Pointer %r6296 to %Word64*
	%r6298 = load %Word64, %Word64* %r6297
	%r6300 = icmp eq %Word64 0, %r6298
	%r6299 = zext i1 %r6300 to %Word32
	store %Word32 %r6299, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_805), (0x1, L_965))}
	%r6301 = load %Word32, %Word32* %regW32_0
	%r6302 = trunc %Word32 %r6301 to i1
	br i1 %r6302, label %L_965, label %L_805

L_803:
	; RW32(0): Word32  = WordU64_lt (0x7FFFFFFF, SW64(32): Word64)
	%r6303 = load %Pointer, %Pointer* %stackTop
	%r6304 = getelementptr inbounds i8, %Pointer %r6303, i32 32
	%r6305 = bitcast %Pointer %r6304 to %Word64*
	%r6306 = load %Word64, %Word64* %r6305
	%r6308 = icmp ult %Word64 2147483647, %r6306
	%r6307 = zext i1 %r6308 to %Word32
	store %Word32 %r6307, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_804), (0x1, L_966))}
	%r6309 = load %Word32, %Word32* %regW32_0
	%r6310 = trunc %Word32 %r6309 to i1
	br i1 %r6310, label %L_966, label %L_804

L_802:
	; RW32(0): Word32  = Word64_equal (SW64(32): Word64, SW64(8): Word64)
	%r6311 = load %Pointer, %Pointer* %stackTop
	%r6312 = getelementptr inbounds i8, %Pointer %r6311, i32 32
	%r6313 = bitcast %Pointer %r6312 to %Word64*
	%r6314 = load %Word64, %Word64* %r6313
	%r6315 = load %Pointer, %Pointer* %stackTop
	%r6316 = getelementptr inbounds i8, %Pointer %r6315, i32 8
	%r6317 = bitcast %Pointer %r6316 to %Word64*
	%r6318 = load %Word64, %Word64* %r6317
	%r6320 = icmp eq %Word64 %r6314, %r6318
	%r6319 = zext i1 %r6320 to %Word32
	store %Word32 %r6319, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_803), (0x1, L_967))}
	%r6321 = load %Word32, %Word32* %regW32_0
	%r6322 = trunc %Word32 %r6321 to i1
	br i1 %r6322, label %L_967, label %L_803

L_801:
	; RW64(1): Word64  = Word64_add (RW64(0): Word64, 0x1)
	%r6323 = load %Word64, %Word64* %regW64_0
	%r6324 = add %Word64 %r6323, 1
	store %Word64 %r6324, %Word64* %regW64_1
	; SW64(32): Word64  = RW64(1): Word64
	%r6325 = load %Word64, %Word64* %regW64_1
	%r6326 = load %Pointer, %Pointer* %stackTop
	%r6327 = getelementptr inbounds i8, %Pointer %r6326, i32 32
	%r6328 = bitcast %Pointer %r6327 to %Word64*
	store %Word64 %r6325, %Word64* %r6328
	; Goto L_802
	br label %L_802

L_800:
	; RW8(0): Word8  = XW8 (SP(0): Objptr (opt_3), RW64(0): Word64, 1, 0): Word8
	%r6329 = load %Pointer, %Pointer* %stackTop
	%r6330 = getelementptr inbounds i8, %Pointer %r6329, i32 0
	%r6331 = bitcast %Pointer %r6330 to %Objptr*
	%r6332 = load %Objptr, %Objptr* %r6331
	%r6333 = load %Word64, %Word64* %regW64_0
	%r6334 = mul nsw %Word64 %r6333, 1
	%r6335 = add nsw %Word64 %r6334, 0
	%r6336 = getelementptr inbounds i8, %Objptr %r6332, %Word64 %r6335
	%r6337 = bitcast %Objptr %r6336 to %Word8*
	%r6338 = load %Word8, %Word8* %r6337
	store %Word8 %r6338, %Word8* %regW8_0
	; RW32(0): Word32  = Word8_equal (RW8(0): Word8, 0x30)
	%r6339 = load %Word8, %Word8* %regW8_0
	%r6341 = icmp eq %Word8 %r6339, 48
	%r6340 = zext i1 %r6341 to %Word32
	store %Word32 %r6340, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_801), (0x1, L_968))}
	%r6342 = load %Word32, %Word32* %regW32_0
	%r6343 = trunc %Word32 %r6342 to i1
	br i1 %r6343, label %L_968, label %L_801

loop_46:
	; RW32(0): Word32  = WordS64_lt (RW64(0): Word64, 0x0)
	%r6344 = load %Word64, %Word64* %regW64_0
	%r6346 = icmp slt %Word64 %r6344, 0
	%r6345 = zext i1 %r6346 to %Word32
	store %Word32 %r6345, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_800), (0x1, L_969))}
	%r6347 = load %Word32, %Word32* %regW32_0
	%r6348 = trunc %Word32 %r6347 to i1
	br i1 %r6348, label %L_969, label %L_800

L_799:
	; RW64(1): Word64  = Word64_sub (RW64(0): Word64, 0x1)
	%r6349 = load %Word64, %Word64* %regW64_0
	%r6350 = sub %Word64 %r6349, 1
	store %Word64 %r6350, %Word64* %regW64_1
	; RW64(0): Word64  = RW64(1): Word64
	%r6351 = load %Word64, %Word64* %regW64_1
	store %Word64 %r6351, %Word64* %regW64_0
	; Goto loop_46
	br label %loop_46

L_798:
	; Goto L_799
	br label %L_799

loop_45:
	; RW32(0): Word32  = WordS64_lt (RW64(0): Word64, SW64(8): Word64)
	%r6352 = load %Word64, %Word64* %regW64_0
	%r6353 = load %Pointer, %Pointer* %stackTop
	%r6354 = getelementptr inbounds i8, %Pointer %r6353, i32 8
	%r6355 = bitcast %Pointer %r6354 to %Word64*
	%r6356 = load %Word64, %Word64* %r6355
	%r6358 = icmp slt %Word64 %r6352, %r6356
	%r6357 = zext i1 %r6358 to %Word32
	store %Word32 %r6357, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_798), (0x1, L_970))}
	%r6359 = load %Word32, %Word32* %regW32_0
	%r6360 = trunc %Word32 %r6359 to i1
	br i1 %r6360, label %L_970, label %L_798

L_797:
	; RW64(0): Word64  = 0x0
	store %Word64 0, %Word64* %regW64_0
	; Goto loop_45
	br label %loop_45

L_796:
	; SW32(24): Word32  = RW32(1): Word32
	%r6361 = load %Word32, %Word32* %regW32_1
	%r6362 = load %Pointer, %Pointer* %stackTop
	%r6363 = getelementptr inbounds i8, %Pointer %r6362, i32 24
	%r6364 = bitcast %Pointer %r6363 to %Word32*
	store %Word32 %r6361, %Word32* %r6364
	; Goto L_797
	br label %L_797

L_795:
	; Arith {prim = Word32_negCheck, args = (RW32(0): Word32), dst = RW32(1): Word32, overflow = L_712, success = L_796}
	%r6365 = load %Word32, %Word32* %regW32_0
	%r6366 = call {%Word32, i1} @llvm.ssub.with.overflow.i32(%Word32 0, %Word32 %r6365)
	%r6367 = extractvalue {%Word32, i1} %r6366, 0
	%r6368 = extractvalue {%Word32, i1} %r6366, 1
	store %Word32 %r6367, %Word32* %regW32_1
	br i1 %r6368, label %L_712, label %L_796

L_794:
	; Goto L_795
	br label %L_795

L_793:
	; RW32(2): Word32  = WordS32_lt (RW32(1): Word32, SW32(60): Word32)
	%r6369 = load %Word32, %Word32* %regW32_1
	%r6370 = load %Pointer, %Pointer* %stackTop
	%r6371 = getelementptr inbounds i8, %Pointer %r6370, i32 60
	%r6372 = bitcast %Pointer %r6371 to %Word32*
	%r6373 = load %Word32, %Word32* %r6372
	%r6375 = icmp slt %Word32 %r6369, %r6373
	%r6374 = zext i1 %r6375 to %Word32
	store %Word32 %r6374, %Word32* %regW32_2
	; switch {test = RW32(2): Word32, default = None, cases = ((0x0, L_794), (0x1, L_973))}
	%r6376 = load %Word32, %Word32* %regW32_2
	%r6377 = trunc %Word32 %r6376 to i1
	br i1 %r6377, label %L_973, label %L_794

L_792:
	; RW64(1): [Word1, Word32, Bits31]  = WordU64_rshift (Cast (RW64(0): [Word1, Bits63], [Word1, Word32, Bits31]), 0x1)
	%r6378 = load %Word64, %Word64* %regW64_0
	%r6379 = bitcast %Word64 %r6378 to %Word64
	%r6380 = zext %Word32 1 to %Word64
	%r6381 = lshr %Word64 %r6379, %r6380
	store %Word64 %r6381, %Word64* %regW64_1
	; RW32(0): Word32  = WordU64_extdToWord32 (RW64(1): [Word1, Word32, Bits31])
	%r6382 = load %Word64, %Word64* %regW64_1
	%r6383 = trunc %Word64 %r6382 to %Word32
	store %Word32 %r6383, %Word32* %regW32_0
	; RW32(2): Word32  = Word32_neg (RW32(0): Word32)
	%r6384 = load %Word32, %Word32* %regW32_0
	%r6385 = sub %Word32 0, %r6384
	store %Word32 %r6385, %Word32* %regW32_2
	; RW32(0): Word32  = RW32(2): Word32
	%r6386 = load %Word32, %Word32* %regW32_2
	store %Word32 %r6386, %Word32* %regW32_0
	; Goto L_793
	br label %L_793

L_791:
	; Goto L_778
	br label %L_778

L_790:
	; RW64(0): [Word1, Bits63]  = XW64 (SP(32): Objptr (opt_23), RW64(1): Word64, 8, 0): [Word1, Bits63]
	%r6387 = load %Pointer, %Pointer* %stackTop
	%r6388 = getelementptr inbounds i8, %Pointer %r6387, i32 32
	%r6389 = bitcast %Pointer %r6388 to %Objptr*
	%r6390 = load %Objptr, %Objptr* %r6389
	%r6391 = load %Word64, %Word64* %regW64_1
	%r6392 = mul nsw %Word64 %r6391, 8
	%r6393 = add nsw %Word64 %r6392, 0
	%r6394 = getelementptr inbounds i8, %Objptr %r6390, %Word64 %r6393
	%r6395 = bitcast %Objptr %r6394 to %Word64*
	%r6396 = load %Word64, %Word64* %r6395
	store %Word64 %r6396, %Word64* %regW64_0
	; RW64(2): [Word1, Bits63]  = Word64_andb (RW64(0): [Word1, Bits63], 0x1)
	%r6397 = load %Word64, %Word64* %regW64_0
	%r6398 = and %Word64 %r6397, 1
	store %Word64 %r6398, %Word64* %regW64_2
	; switch {test = RW64(2): [Word1, Bits63], default = None, cases = ((0x0, L_791), (0x1, L_792))}
	%r6399 = load %Word64, %Word64* %regW64_2
	%r6400 = trunc %Word64 %r6399 to i1
	br i1 %r6400, label %L_792, label %L_791

L_789:
	; Goto L_781
	br label %L_781

L_788:
	; RW8(0): Word8  = XW8 (SP(16): Objptr (opt_3), RW64(0): Word64, 1, 0): Word8
	%r6401 = load %Pointer, %Pointer* %stackTop
	%r6402 = getelementptr inbounds i8, %Pointer %r6401, i32 16
	%r6403 = bitcast %Pointer %r6402 to %Objptr*
	%r6404 = load %Objptr, %Objptr* %r6403
	%r6405 = load %Word64, %Word64* %regW64_0
	%r6406 = mul nsw %Word64 %r6405, 1
	%r6407 = add nsw %Word64 %r6406, 0
	%r6408 = getelementptr inbounds i8, %Objptr %r6404, %Word64 %r6407
	%r6409 = bitcast %Objptr %r6408 to %Word8*
	%r6410 = load %Word8, %Word8* %r6409
	store %Word8 %r6410, %Word8* %regW8_0
	; RW32(1): Word32  = Word32_add (RW32(0): Word32, 0x1)
	%r6411 = load %Word32, %Word32* %regW32_0
	%r6412 = add %Word32 %r6411, 1
	store %Word32 %r6412, %Word32* %regW32_1
	; RW64(1): Word64  = WordU8_extdToWord64 (RW8(0): Word8)
	%r6413 = load %Word8, %Word8* %regW8_0
	%r6414 = zext %Word8 %r6413 to %Word64
	store %Word64 %r6414, %Word64* %regW64_1
	; RW32(2): Word32  = WordU64_lt (RW64(1): Word64, 0x100)
	%r6415 = load %Word64, %Word64* %regW64_1
	%r6417 = icmp ult %Word64 %r6415, 256
	%r6416 = zext i1 %r6417 to %Word32
	store %Word32 %r6416, %Word32* %regW32_2
	; switch {test = RW32(2): Word32, default = None, cases = ((0x0, L_789), (0x1, L_790))}
	%r6418 = load %Word32, %Word32* %regW32_2
	%r6419 = trunc %Word32 %r6418 to i1
	br i1 %r6419, label %L_790, label %L_789

L_787:
	; Goto L_781
	br label %L_781

L_786:
	; RW64(0): Word64  = WordS32_extdToWord64 (RW32(0): Word32)
	%r6420 = load %Word32, %Word32* %regW32_0
	%r6421 = sext %Word32 %r6420 to %Word64
	store %Word64 %r6421, %Word64* %regW64_0
	; RW32(1): Word32  = WordU64_lt (RW64(0): Word64, SW64(64): Word64)
	%r6422 = load %Word64, %Word64* %regW64_0
	%r6423 = load %Pointer, %Pointer* %stackTop
	%r6424 = getelementptr inbounds i8, %Pointer %r6423, i32 64
	%r6425 = bitcast %Pointer %r6424 to %Word64*
	%r6426 = load %Word64, %Word64* %r6425
	%r6428 = icmp ult %Word64 %r6422, %r6426
	%r6427 = zext i1 %r6428 to %Word32
	store %Word32 %r6427, %Word32* %regW32_1
	; switch {test = RW32(1): Word32, default = None, cases = ((0x0, L_787), (0x1, L_788))}
	%r6429 = load %Word32, %Word32* %regW32_1
	%r6430 = trunc %Word32 %r6429 to i1
	br i1 %r6430, label %L_788, label %L_787

L_785:
	; Goto L_778
	br label %L_778

L_784:
	; RW32(1): Word32  = WordS32_lt (RW32(0): Word32, SW32(60): Word32)
	%r6431 = load %Word32, %Word32* %regW32_0
	%r6432 = load %Pointer, %Pointer* %stackTop
	%r6433 = getelementptr inbounds i8, %Pointer %r6432, i32 60
	%r6434 = bitcast %Pointer %r6433 to %Word32*
	%r6435 = load %Word32, %Word32* %r6434
	%r6437 = icmp slt %Word32 %r6431, %r6435
	%r6436 = zext i1 %r6437 to %Word32
	store %Word32 %r6436, %Word32* %regW32_1
	; switch {test = RW32(1): Word32, default = None, cases = ((0x0, L_785), (0x1, L_786))}
	%r6438 = load %Word32, %Word32* %regW32_1
	%r6439 = trunc %Word32 %r6438 to i1
	br i1 %r6439, label %L_786, label %L_785

L_783:
	; RW32(0): Word32  = SW32(56): Word32
	%r6440 = load %Pointer, %Pointer* %stackTop
	%r6441 = getelementptr inbounds i8, %Pointer %r6440, i32 56
	%r6442 = bitcast %Pointer %r6441 to %Word32*
	%r6443 = load %Word32, %Word32* %r6442
	store %Word32 %r6443, %Word32* %regW32_0
	; Goto L_784
	br label %L_784

L_782:
	; RW8(0): Word8  = XW8 (SP(16): Objptr (opt_3), RW64(0): Word64, 1, 0): Word8
	%r6444 = load %Pointer, %Pointer* %stackTop
	%r6445 = getelementptr inbounds i8, %Pointer %r6444, i32 16
	%r6446 = bitcast %Pointer %r6445 to %Objptr*
	%r6447 = load %Objptr, %Objptr* %r6446
	%r6448 = load %Word64, %Word64* %regW64_0
	%r6449 = mul nsw %Word64 %r6448, 1
	%r6450 = add nsw %Word64 %r6449, 0
	%r6451 = getelementptr inbounds i8, %Objptr %r6447, %Word64 %r6450
	%r6452 = bitcast %Objptr %r6451 to %Word8*
	%r6453 = load %Word8, %Word8* %r6452
	store %Word8 %r6453, %Word8* %regW8_0
	; RW32(0): Word32  = Word32_add (SW32(56): Word32, 0x1)
	%r6454 = load %Pointer, %Pointer* %stackTop
	%r6455 = getelementptr inbounds i8, %Pointer %r6454, i32 56
	%r6456 = bitcast %Pointer %r6455 to %Word32*
	%r6457 = load %Word32, %Word32* %r6456
	%r6458 = add %Word32 %r6457, 1
	store %Word32 %r6458, %Word32* %regW32_0
	; switch {test = RW8(0): Word8, default = Some L_783, cases = ((0x2B, L_982), (0x2D, L_983), (0x7E, L_1003))}
	%r6459 = load %Word8, %Word8* %regW8_0
	switch %Word8 %r6459, label %L_783 [
		%Word8 43, label %L_982
		%Word8 45, label %L_983
		%Word8 126, label %L_1003
	]

L_781:
	; glob {index = 0, isRoot = false, ty = Objptr (opt_34, opt_33, opt_32, opt_31)}  = Cast (0x3, Objptr (opt_34, opt_33, opt_32, opt_31))
	%r6460 = inttoptr %Word64 3 to %Objptr
	%r6461 = getelementptr inbounds [1 x %Objptr], [1 x %Objptr]* @globalObjptrNonRoot, i32 0, i32 0
	store %Objptr %r6460, %Objptr* %r6461
	; Raise
	%r6462 = bitcast %struct.GC_state* @gcState to %Pointer
	%r6463 = getelementptr inbounds i8, %Pointer %r6462, i32 1616
	%r6464 = bitcast %Pointer %r6463 to %Pointer*
	%r6465 = load %Pointer, %Pointer* %r6464
	%r6466 = bitcast %struct.GC_state* @gcState to %Pointer
	%r6467 = getelementptr inbounds i8, %Pointer %r6466, i32 32
	%r6468 = bitcast %Pointer %r6467 to i32*
	%r6469 = load i32, i32* %r6468
	%r6470 = getelementptr inbounds i8, %Pointer %r6465, i32 %r6469
	store %Pointer %r6470, %Pointer* %stackTop
	%r6471 = load %Pointer, %Pointer* %stackTop
	%r6472 = getelementptr inbounds i8, %Pointer %r6471, i32 -8
	%r6473 = bitcast %Pointer %r6472 to %uintptr_t*
	%r6474 = load %uintptr_t, %uintptr_t* %r6473
	store %uintptr_t %r6474, %uintptr_t* %l_nextFun
	br label %top

L_780:
	; Goto L_781
	br label %L_781

L_779:
	; RW64(0): Word64  = WordS32_extdToWord64 (SW32(56): Word32)
	%r6475 = load %Pointer, %Pointer* %stackTop
	%r6476 = getelementptr inbounds i8, %Pointer %r6475, i32 56
	%r6477 = bitcast %Pointer %r6476 to %Word32*
	%r6478 = load %Word32, %Word32* %r6477
	%r6479 = sext %Word32 %r6478 to %Word64
	store %Word64 %r6479, %Word64* %regW64_0
	; RW32(0): Word32  = WordU64_lt (RW64(0): Word64, SW64(64): Word64)
	%r6480 = load %Word64, %Word64* %regW64_0
	%r6481 = load %Pointer, %Pointer* %stackTop
	%r6482 = getelementptr inbounds i8, %Pointer %r6481, i32 64
	%r6483 = bitcast %Pointer %r6482 to %Word64*
	%r6484 = load %Word64, %Word64* %r6483
	%r6486 = icmp ult %Word64 %r6480, %r6484
	%r6485 = zext i1 %r6486 to %Word32
	store %Word32 %r6485, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_780), (0x1, L_782))}
	%r6487 = load %Word32, %Word32* %regW32_0
	%r6488 = trunc %Word32 %r6487 to i1
	br i1 %r6488, label %L_782, label %L_780

L_778:
	; glob {index = 0, isRoot = false, ty = Objptr (opt_34, opt_33, opt_32, opt_31)}  = Cast (0x5, Objptr (opt_34, opt_33, opt_32, opt_31))
	%r6489 = inttoptr %Word64 5 to %Objptr
	%r6490 = getelementptr inbounds [1 x %Objptr], [1 x %Objptr]* @globalObjptrNonRoot, i32 0, i32 0
	store %Objptr %r6489, %Objptr* %r6490
	; Raise
	%r6491 = bitcast %struct.GC_state* @gcState to %Pointer
	%r6492 = getelementptr inbounds i8, %Pointer %r6491, i32 1616
	%r6493 = bitcast %Pointer %r6492 to %Pointer*
	%r6494 = load %Pointer, %Pointer* %r6493
	%r6495 = bitcast %struct.GC_state* @gcState to %Pointer
	%r6496 = getelementptr inbounds i8, %Pointer %r6495, i32 32
	%r6497 = bitcast %Pointer %r6496 to i32*
	%r6498 = load i32, i32* %r6497
	%r6499 = getelementptr inbounds i8, %Pointer %r6494, i32 %r6498
	store %Pointer %r6499, %Pointer* %stackTop
	%r6500 = load %Pointer, %Pointer* %stackTop
	%r6501 = getelementptr inbounds i8, %Pointer %r6500, i32 -8
	%r6502 = bitcast %Pointer %r6501 to %uintptr_t*
	%r6503 = load %uintptr_t, %uintptr_t* %r6502
	store %uintptr_t %r6503, %uintptr_t* %l_nextFun
	br label %top

L_777:
	; Goto L_778
	br label %L_778

L_776:
	; switch {test = SW32(72): Word32, default = None, cases = ((0x0, L_777), (0x1, L_779))}
	%r6504 = load %Pointer, %Pointer* %stackTop
	%r6505 = getelementptr inbounds i8, %Pointer %r6504, i32 72
	%r6506 = bitcast %Pointer %r6505 to %Word32*
	%r6507 = load %Word32, %Word32* %r6506
	%r6508 = trunc %Word32 %r6507 to i1
	br i1 %r6508, label %L_779, label %L_777

L_775:
	; Goto L_776
	br label %L_776

loop_44:
	; RW32(0): Word32  = WordS64_lt (RW64(1): Word64, RW64(0): Word64)
	%r6509 = load %Word64, %Word64* %regW64_1
	%r6510 = load %Word64, %Word64* %regW64_0
	%r6512 = icmp slt %Word64 %r6509, %r6510
	%r6511 = zext i1 %r6512 to %Word32
	store %Word32 %r6511, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_775), (0x1, L_1023))}
	%r6513 = load %Word32, %Word32* %regW32_0
	%r6514 = trunc %Word32 %r6513 to i1
	br i1 %r6514, label %L_1023, label %L_775

L_774:
	; RW64(1): Word64  = 0x0
	store %Word64 0, %Word64* %regW64_1
	; Goto loop_44
	br label %loop_44

L_773:
	; RW64(0): Word64  = WordS32_extdToWord64 (RW32(0): Word32)
	%r6515 = load %Word32, %Word32* %regW32_0
	%r6516 = sext %Word32 %r6515 to %Word64
	store %Word64 %r6516, %Word64* %regW64_0
	; RW32(1): Word32  = WordU64_lt (0x7FFFFFFF, RW64(0): Word64)
	%r6517 = load %Word64, %Word64* %regW64_0
	%r6519 = icmp ult %Word64 2147483647, %r6517
	%r6518 = zext i1 %r6519 to %Word32
	store %Word32 %r6518, %Word32* %regW32_1
	; switch {test = RW32(1): Word32, default = None, cases = ((0x0, L_774), (0x1, L_1027))}
	%r6520 = load %Word32, %Word32* %regW32_1
	%r6521 = trunc %Word32 %r6520 to i1
	br i1 %r6521, label %L_1027, label %L_774

L_772:
	; RW32(0): Word32  = RW32(1): Word32
	%r6522 = load %Word32, %Word32* %regW32_1
	store %Word32 %r6522, %Word32* %regW32_0
	; Goto L_773
	br label %L_773

L_771:
	; RP(2): Objptr (opt_44)  = OP (RP(1): Objptr (opt_44), 0): Objptr (opt_44)
	%r6523 = load %Objptr, %Objptr* %regP_1
	%r6524 = getelementptr inbounds i8, %Objptr %r6523, i32 0
	%r6525 = bitcast %Objptr %r6524 to %Objptr*
	%r6526 = load %Objptr, %Objptr* %r6525
	store %Objptr %r6526, %Objptr* %regP_2
	; RP(1): Objptr (opt_44)  = RP(2): Objptr (opt_44)
	%r6527 = load %Objptr, %Objptr* %regP_2
	store %Objptr %r6527, %Objptr* %regP_1
	; RW32(0): Word32  = RW32(1): Word32
	%r6528 = load %Word32, %Word32* %regW32_1
	store %Word32 %r6528, %Word32* %regW32_0
	; Goto L_770
	br label %L_770

L_770:
	; RW32(1): Word32  = Word32_add (RW32(0): Word32, 0x1)
	%r6529 = load %Word32, %Word32* %regW32_0
	%r6530 = add %Word32 %r6529, 1
	store %Word32 %r6530, %Word32* %regW32_1
	; switch {test = Cast (RP(1): Objptr (opt_44), Bits64), default = Some L_771, cases = ((0x1, L_772))}
	%r6531 = load %Objptr, %Objptr* %regP_1
	%r6532 = ptrtoint %Objptr %r6531 to %Word64
	switch %Word64 %r6532, label %L_771 [
		%Word64 1, label %L_772
	]

L_769:
	; RP(1): Objptr (opt_44)  = OP (RP(0): Objptr (opt_44), 0): Objptr (opt_44)
	%r6533 = load %Objptr, %Objptr* %regP_0
	%r6534 = getelementptr inbounds i8, %Objptr %r6533, i32 0
	%r6535 = bitcast %Objptr %r6534 to %Objptr*
	%r6536 = load %Objptr, %Objptr* %r6535
	store %Objptr %r6536, %Objptr* %regP_1
	; RW32(0): Word32  = 0x0
	store %Word32 0, %Word32* %regW32_0
	; Goto L_770
	br label %L_770

L_768:
	; switch {test = Cast (RP(0): Objptr (opt_44), Bits64), default = Some L_769, cases = ((0x1, L_1028))}
	%r6537 = load %Objptr, %Objptr* %regP_0
	%r6538 = ptrtoint %Objptr %r6537 to %Word64
	switch %Word64 %r6538, label %L_769 [
		%Word64 1, label %L_1028
	]

L_767:
	; Goto L_768
	br label %L_768

L_766:
	; RP(1): Objptr (opt_44)  = OP (SP(24): Objptr (opt_44), 0): Objptr (opt_44)
	%r6539 = load %Pointer, %Pointer* %stackTop
	%r6540 = getelementptr inbounds i8, %Pointer %r6539, i32 24
	%r6541 = bitcast %Pointer %r6540 to %Objptr*
	%r6542 = load %Objptr, %Objptr* %r6541
	%r6543 = getelementptr inbounds i8, %Objptr %r6542, i32 0
	%r6544 = bitcast %Objptr %r6543 to %Objptr*
	%r6545 = load %Objptr, %Objptr* %r6544
	store %Objptr %r6545, %Objptr* %regP_1
	; SP(24): Objptr (opt_44)  = RP(1): Objptr (opt_44)
	%r6546 = load %Objptr, %Objptr* %regP_1
	%r6547 = load %Pointer, %Pointer* %stackTop
	%r6548 = getelementptr inbounds i8, %Pointer %r6547, i32 24
	%r6549 = bitcast %Pointer %r6548 to %Objptr*
	store %Objptr %r6546, %Objptr* %r6549
	; SP(48): Objptr (opt_44)  = RP(0): Objptr (opt_44)
	%r6550 = load %Objptr, %Objptr* %regP_0
	%r6551 = load %Pointer, %Pointer* %stackTop
	%r6552 = getelementptr inbounds i8, %Pointer %r6551, i32 48
	%r6553 = bitcast %Pointer %r6552 to %Objptr*
	store %Objptr %r6550, %Objptr* %r6553
	; Goto L_764
	br label %L_764

L_765:
	; CW64 (<Frontier>)  = 0x59
	%r6554 = load %Pointer, %Pointer* %frontier
	%r6555 = bitcast %Pointer %r6554 to %Word64*
	store %Word64 89, %Word64* %r6555
	; RQ(61): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r6556 = load %Pointer, %Pointer* %frontier
	%r6558 = ptrtoint %Pointer %r6556 to %uintptr_t
	%r6559 = add %uintptr_t %r6558, 8
	%r6557 = inttoptr %uintptr_t %r6559 to %Pointer
	store %CPointer %r6557, %CPointer* %regQ_61
	; RP(0): Objptr (opt_44)  = Cast (RQ(61): CPointer, Objptr (opt_44))
	%r6560 = load %CPointer, %CPointer* %regQ_61
	%r6561 = bitcast %CPointer %r6560 to %Objptr
	store %Objptr %r6561, %Objptr* %regP_0
	; <Frontier>  = CPointer_add (<Frontier>, 0x10)
	%r6562 = load %Pointer, %Pointer* %frontier
	%r6564 = ptrtoint %Pointer %r6562 to %uintptr_t
	%r6565 = add %uintptr_t %r6564, 16
	%r6563 = inttoptr %uintptr_t %r6565 to %Pointer
	store %Pointer %r6563, %Pointer* %frontier
	; OP (RP(0): Objptr (opt_44), 0): Objptr (opt_44)  = SP(48): Objptr (opt_44)
	%r6566 = load %Pointer, %Pointer* %stackTop
	%r6567 = getelementptr inbounds i8, %Pointer %r6566, i32 48
	%r6568 = bitcast %Pointer %r6567 to %Objptr*
	%r6569 = load %Objptr, %Objptr* %r6568
	%r6570 = load %Objptr, %Objptr* %regP_0
	%r6571 = getelementptr inbounds i8, %Objptr %r6570, i32 0
	%r6572 = bitcast %Objptr %r6571 to %Objptr*
	store %Objptr %r6569, %Objptr* %r6572
	; switch {test = Cast (SP(24): Objptr (opt_44), Bits64), default = Some L_766, cases = ((0x1, L_767))}
	%r6573 = load %Pointer, %Pointer* %stackTop
	%r6574 = getelementptr inbounds i8, %Pointer %r6573, i32 24
	%r6575 = bitcast %Pointer %r6574 to %Objptr*
	%r6576 = load %Objptr, %Objptr* %r6575
	%r6577 = ptrtoint %Objptr %r6576 to %Word64
	switch %Word64 %r6577, label %L_766 [
		%Word64 1, label %L_767
	]

L_764:
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r6578 = bitcast %struct.GC_state* @gcState to %Pointer
	%r6579 = getelementptr inbounds i8, %Pointer %r6578, i32 8
	%r6580 = bitcast %Pointer %r6579 to %CPointer*
	%r6581 = load %CPointer, %CPointer* %r6580
	%r6582 = load %Pointer, %Pointer* %frontier
	%r6584 = icmp ult %Pointer %r6581, %r6582
	%r6583 = zext i1 %r6584 to %Word32
	store %Word32 %r6583, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_765), (0x1, L_1029))}
	%r6585 = load %Word32, %Word32* %regW32_0
	%r6586 = trunc %Word32 %r6585 to i1
	br i1 %r6586, label %L_1029, label %L_765

L_763:
	; RP(0): Objptr (opt_44)  = OP (SP(48): Objptr (opt_44), 0): Objptr (opt_44)
	%r6587 = load %Pointer, %Pointer* %stackTop
	%r6588 = getelementptr inbounds i8, %Pointer %r6587, i32 48
	%r6589 = bitcast %Pointer %r6588 to %Objptr*
	%r6590 = load %Objptr, %Objptr* %r6589
	%r6591 = getelementptr inbounds i8, %Objptr %r6590, i32 0
	%r6592 = bitcast %Objptr %r6591 to %Objptr*
	%r6593 = load %Objptr, %Objptr* %r6592
	store %Objptr %r6593, %Objptr* %regP_0
	; SP(24): Objptr (opt_44)  = RP(0): Objptr (opt_44)
	%r6594 = load %Objptr, %Objptr* %regP_0
	%r6595 = load %Pointer, %Pointer* %stackTop
	%r6596 = getelementptr inbounds i8, %Pointer %r6595, i32 24
	%r6597 = bitcast %Pointer %r6596 to %Objptr*
	store %Objptr %r6594, %Objptr* %r6597
	; SP(48): Objptr (opt_44)  = Cast (0x1, Objptr (opt_44))
	%r6598 = inttoptr %Word64 1 to %Objptr
	%r6599 = load %Pointer, %Pointer* %stackTop
	%r6600 = getelementptr inbounds i8, %Pointer %r6599, i32 48
	%r6601 = bitcast %Pointer %r6600 to %Objptr*
	store %Objptr %r6598, %Objptr* %r6601
	; Goto L_764
	br label %L_764

L_762:
	; switch {test = Cast (SP(48): Objptr (opt_44), Bits64), default = Some L_763, cases = ((0x1, L_1031))}
	%r6602 = load %Pointer, %Pointer* %stackTop
	%r6603 = getelementptr inbounds i8, %Pointer %r6602, i32 48
	%r6604 = bitcast %Pointer %r6603 to %Objptr*
	%r6605 = load %Objptr, %Objptr* %r6604
	%r6606 = ptrtoint %Objptr %r6605 to %Word64
	switch %Word64 %r6606, label %L_763 [
		%Word64 1, label %L_1031
	]

L_761:
	; SW32(72): Word32  = WordS32_lt (SW32(56): Word32, SW32(60): Word32)
	%r6607 = load %Pointer, %Pointer* %stackTop
	%r6608 = getelementptr inbounds i8, %Pointer %r6607, i32 56
	%r6609 = bitcast %Pointer %r6608 to %Word32*
	%r6610 = load %Word32, %Word32* %r6609
	%r6611 = load %Pointer, %Pointer* %stackTop
	%r6612 = getelementptr inbounds i8, %Pointer %r6611, i32 60
	%r6613 = bitcast %Pointer %r6612 to %Word32*
	%r6614 = load %Word32, %Word32* %r6613
	%r6616 = icmp slt %Word32 %r6610, %r6614
	%r6615 = zext i1 %r6616 to %Word32
	%r6617 = load %Pointer, %Pointer* %stackTop
	%r6618 = getelementptr inbounds i8, %Pointer %r6617, i32 72
	%r6619 = bitcast %Pointer %r6618 to %Word32*
	store %Word32 %r6615, %Word32* %r6619
	; switch {test = SW32(72): Word32, default = None, cases = ((0x0, L_762), (0x1, L_1032))}
	%r6620 = load %Pointer, %Pointer* %stackTop
	%r6621 = getelementptr inbounds i8, %Pointer %r6620, i32 72
	%r6622 = bitcast %Pointer %r6621 to %Word32*
	%r6623 = load %Word32, %Word32* %r6622
	%r6624 = trunc %Word32 %r6623 to i1
	br i1 %r6624, label %L_1032, label %L_762

L_760:
	; glob {index = 0, isRoot = false, ty = Objptr (opt_34, opt_33, opt_32, opt_31)}  = Cast (glob {index = 10, isRoot = true, ty = Objptr (opt_32)}, Objptr (opt_34, opt_33, opt_32, opt_31))
	%r6625 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 10
	%r6626 = load %Objptr, %Objptr* %r6625
	%r6627 = bitcast %Objptr %r6626 to %Objptr
	%r6628 = getelementptr inbounds [1 x %Objptr], [1 x %Objptr]* @globalObjptrNonRoot, i32 0, i32 0
	store %Objptr %r6627, %Objptr* %r6628
	; Raise
	%r6629 = bitcast %struct.GC_state* @gcState to %Pointer
	%r6630 = getelementptr inbounds i8, %Pointer %r6629, i32 1616
	%r6631 = bitcast %Pointer %r6630 to %Pointer*
	%r6632 = load %Pointer, %Pointer* %r6631
	%r6633 = bitcast %struct.GC_state* @gcState to %Pointer
	%r6634 = getelementptr inbounds i8, %Pointer %r6633, i32 32
	%r6635 = bitcast %Pointer %r6634 to i32*
	%r6636 = load i32, i32* %r6635
	%r6637 = getelementptr inbounds i8, %Pointer %r6632, i32 %r6636
	store %Pointer %r6637, %Pointer* %stackTop
	%r6638 = load %Pointer, %Pointer* %stackTop
	%r6639 = getelementptr inbounds i8, %Pointer %r6638, i32 -8
	%r6640 = bitcast %Pointer %r6639 to %uintptr_t*
	%r6641 = load %uintptr_t, %uintptr_t* %r6640
	store %uintptr_t %r6641, %uintptr_t* %l_nextFun
	br label %top

L_759:
	; Goto L_760
	br label %L_760

L_758:
	; SW64(64): Word64  = OW64 (SP(16): Objptr (opt_3), ~16): Word64
	%r6642 = load %Pointer, %Pointer* %stackTop
	%r6643 = getelementptr inbounds i8, %Pointer %r6642, i32 16
	%r6644 = bitcast %Pointer %r6643 to %Objptr*
	%r6645 = load %Objptr, %Objptr* %r6644
	%r6646 = getelementptr inbounds i8, %Objptr %r6645, i32 -16
	%r6647 = bitcast %Objptr %r6646 to %Word64*
	%r6648 = load %Word64, %Word64* %r6647
	%r6649 = load %Pointer, %Pointer* %stackTop
	%r6650 = getelementptr inbounds i8, %Pointer %r6649, i32 64
	%r6651 = bitcast %Pointer %r6650 to %Word64*
	store %Word64 %r6648, %Word64* %r6651
	; SW32(60): Word32  = WordU64_extdToWord32 (SW64(64): Word64)
	%r6652 = load %Pointer, %Pointer* %stackTop
	%r6653 = getelementptr inbounds i8, %Pointer %r6652, i32 64
	%r6654 = bitcast %Pointer %r6653 to %Word64*
	%r6655 = load %Word64, %Word64* %r6654
	%r6656 = trunc %Word64 %r6655 to %Word32
	%r6657 = load %Pointer, %Pointer* %stackTop
	%r6658 = getelementptr inbounds i8, %Pointer %r6657, i32 60
	%r6659 = bitcast %Pointer %r6658 to %Word32*
	store %Word32 %r6656, %Word32* %r6659
	; RW64(0): Word64  = WordS32_extdToWord64 (SW32(60): Word32)
	%r6660 = load %Pointer, %Pointer* %stackTop
	%r6661 = getelementptr inbounds i8, %Pointer %r6660, i32 60
	%r6662 = bitcast %Pointer %r6661 to %Word32*
	%r6663 = load %Word32, %Word32* %r6662
	%r6664 = sext %Word32 %r6663 to %Word64
	store %Word64 %r6664, %Word64* %regW64_0
	; RW32(0): Word32  = Word64_equal (RW64(0): Word64, SW64(64): Word64)
	%r6665 = load %Word64, %Word64* %regW64_0
	%r6666 = load %Pointer, %Pointer* %stackTop
	%r6667 = getelementptr inbounds i8, %Pointer %r6666, i32 64
	%r6668 = bitcast %Pointer %r6667 to %Word64*
	%r6669 = load %Word64, %Word64* %r6668
	%r6671 = icmp eq %Word64 %r6665, %r6669
	%r6670 = zext i1 %r6671 to %Word32
	store %Word32 %r6670, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_759), (0x1, L_761))}
	%r6672 = load %Word32, %Word32* %regW32_0
	%r6673 = trunc %Word32 %r6672 to i1
	br i1 %r6673, label %L_761, label %L_759

loop_43:
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r6674 = bitcast %struct.GC_state* @gcState to %Pointer
	%r6675 = getelementptr inbounds i8, %Pointer %r6674, i32 8
	%r6676 = bitcast %Pointer %r6675 to %CPointer*
	%r6677 = load %CPointer, %CPointer* %r6676
	%r6678 = load %Pointer, %Pointer* %frontier
	%r6680 = icmp ult %Pointer %r6677, %r6678
	%r6679 = zext i1 %r6680 to %Word32
	store %Word32 %r6679, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_758), (0x1, L_1060))}
	%r6681 = load %Word32, %Word32* %regW32_0
	%r6682 = trunc %Word32 %r6681 to i1
	br i1 %r6682, label %L_1060, label %L_758

L_757:
	; SP(48): Objptr (opt_44)  = Cast (0x1, Objptr (opt_44))
	%r6683 = inttoptr %Word64 1 to %Objptr
	%r6684 = load %Pointer, %Pointer* %stackTop
	%r6685 = getelementptr inbounds i8, %Pointer %r6684, i32 48
	%r6686 = bitcast %Pointer %r6685 to %Objptr*
	store %Objptr %r6683, %Objptr* %r6686
	; SW32(56): Word32  = 0x0
	%r6687 = load %Pointer, %Pointer* %stackTop
	%r6688 = getelementptr inbounds i8, %Pointer %r6687, i32 56
	%r6689 = bitcast %Pointer %r6688 to %Word32*
	store %Word32 0, %Word32* %r6689
	; Goto loop_43
	br label %loop_43

L_756:
	; Push(-72)
	%r6690 = load %Pointer, %Pointer* %stackTop
	%r6691 = getelementptr inbounds i8, %Pointer %r6690, i32 -72
	store %Pointer %r6691, %Pointer* %stackTop
	; OW64 (SP(56): Objptr (opt_11), ~8): Word64  = 0x7
	%r6692 = load %Pointer, %Pointer* %stackTop
	%r6693 = getelementptr inbounds i8, %Pointer %r6692, i32 56
	%r6694 = bitcast %Pointer %r6693 to %Objptr*
	%r6695 = load %Objptr, %Objptr* %r6694
	%r6696 = getelementptr inbounds i8, %Objptr %r6695, i32 -8
	%r6697 = bitcast %Objptr %r6696 to %Word64*
	store %Word64 7, %Word64* %r6697
	; SP(16): Objptr (opt_3)  = Cast (SP(56): Objptr (opt_11), Objptr (opt_3))
	%r6698 = load %Pointer, %Pointer* %stackTop
	%r6699 = getelementptr inbounds i8, %Pointer %r6698, i32 56
	%r6700 = bitcast %Pointer %r6699 to %Objptr*
	%r6701 = load %Objptr, %Objptr* %r6700
	%r6702 = bitcast %Objptr %r6701 to %Objptr
	%r6703 = load %Pointer, %Pointer* %stackTop
	%r6704 = getelementptr inbounds i8, %Pointer %r6703, i32 16
	%r6705 = bitcast %Pointer %r6704 to %Objptr*
	store %Objptr %r6702, %Objptr* %r6705
	; Goto L_757
	br label %L_757

L_join_11:
	; CCall {args = (<GCState>, SP(56): Objptr (opt_11), 0x0, SP(0): Objptr (opt_3), SW64(16): Word64, SW64(48): Word64), frameInfo = Some {frameLayoutsIndex = 111}, func = {args = (GCState, Objptr (opt_11), Word64, Objptr (opt_3), Word64, Word64), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Objptr, Int64, Objptr, Int64, Int64), res = None}, return = Bits0, symbolScope = private, target = GC_arrayCopy}, return = Some L_756}
	; GetOperands
	%r6706 = bitcast %struct.GC_state* @gcState to %Pointer
	%r6707 = load %Pointer, %Pointer* %stackTop
	%r6708 = getelementptr inbounds i8, %Pointer %r6707, i32 56
	%r6709 = bitcast %Pointer %r6708 to %Objptr*
	%r6710 = load %Objptr, %Objptr* %r6709
	%r6711 = load %Pointer, %Pointer* %stackTop
	%r6712 = getelementptr inbounds i8, %Pointer %r6711, i32 0
	%r6713 = bitcast %Pointer %r6712 to %Objptr*
	%r6714 = load %Objptr, %Objptr* %r6713
	%r6715 = load %Pointer, %Pointer* %stackTop
	%r6716 = getelementptr inbounds i8, %Pointer %r6715, i32 16
	%r6717 = bitcast %Pointer %r6716 to %Word64*
	%r6718 = load %Word64, %Word64* %r6717
	%r6719 = load %Pointer, %Pointer* %stackTop
	%r6720 = getelementptr inbounds i8, %Pointer %r6719, i32 48
	%r6721 = bitcast %Pointer %r6720 to %Word64*
	%r6722 = load %Word64, %Word64* %r6721
	%r6723 = load %Pointer, %Pointer* %stackTop
	%r6724 = getelementptr inbounds i8, %Pointer %r6723, i32 64
	%r6725 = bitcast %Pointer %r6724 to %uintptr_t*
	store %uintptr_t 111, %uintptr_t* %r6725
	; Push(72)
	%r6726 = load %Pointer, %Pointer* %stackTop
	%r6727 = getelementptr inbounds i8, %Pointer %r6726, i32 72
	store %Pointer %r6727, %Pointer* %stackTop
	; FlushFrontier
	%r6728 = bitcast %struct.GC_state* @gcState to %Pointer
	%r6729 = getelementptr inbounds i8, %Pointer %r6728, i32 0
	%r6730 = bitcast %Pointer %r6729 to %Pointer*
	%r6731 = load %Pointer, %Pointer* %frontier
	store %Pointer %r6731, %Pointer* %r6730
	; FlushStackTop
	%r6732 = bitcast %struct.GC_state* @gcState to %Pointer
	%r6733 = getelementptr inbounds i8, %Pointer %r6732, i32 16
	%r6734 = bitcast %Pointer %r6733 to %Pointer*
	%r6735 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r6735, %Pointer* %r6734
	; Call
	call void @GC_arrayCopy(%Pointer %r6706, %Objptr %r6710, %Word64 0, %Objptr %r6714, %Word64 %r6718, %Word64 %r6722)
	; CacheFrontier
	%r6736 = bitcast %struct.GC_state* @gcState to %Pointer
	%r6737 = getelementptr inbounds i8, %Pointer %r6736, i32 0
	%r6738 = bitcast %Pointer %r6737 to %Pointer*
	%r6739 = load %Pointer, %Pointer* %r6738
	store %Pointer %r6739, %Pointer* %frontier
	; CacheStackTop
	%r6740 = bitcast %struct.GC_state* @gcState to %Pointer
	%r6741 = getelementptr inbounds i8, %Pointer %r6740, i32 16
	%r6742 = bitcast %Pointer %r6741 to %Pointer*
	%r6743 = load %Pointer, %Pointer* %r6742
	store %Pointer %r6743, %Pointer* %stackTop
	br label %L_756

L_755:
	; Push(-64)
	%r6744 = load %Pointer, %Pointer* %stackTop
	%r6745 = getelementptr inbounds i8, %Pointer %r6744, i32 -64
	store %Pointer %r6745, %Pointer* %stackTop
	%r6746 = load %Objptr, %Objptr* @CReturnP
	store %Objptr %r6746, %Objptr* %regP_0
	; SP(56): Objptr (opt_11)  = RP(0): Objptr (opt_11)
	%r6747 = load %Objptr, %Objptr* %regP_0
	%r6748 = load %Pointer, %Pointer* %stackTop
	%r6749 = getelementptr inbounds i8, %Pointer %r6748, i32 56
	%r6750 = bitcast %Pointer %r6749 to %Objptr*
	store %Objptr %r6747, %Objptr* %r6750
	; Goto L_join_11
	br label %L_join_11

L_754:
	; CCall {args = (<GCState>, 0x0, SW64(48): Word64, 0x17), frameInfo = Some {frameLayoutsIndex = 110}, func = {args = (GCState, Word64, Word64, Word64), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int64, Word64), res = Some Objptr}, return = Objptr (opt_11), symbolScope = private, target = GC_arrayAllocate}, return = Some L_755}
	; GetOperands
	%r6751 = bitcast %struct.GC_state* @gcState to %Pointer
	%r6752 = load %Pointer, %Pointer* %stackTop
	%r6753 = getelementptr inbounds i8, %Pointer %r6752, i32 48
	%r6754 = bitcast %Pointer %r6753 to %Word64*
	%r6755 = load %Word64, %Word64* %r6754
	%r6756 = load %Pointer, %Pointer* %stackTop
	%r6757 = getelementptr inbounds i8, %Pointer %r6756, i32 56
	%r6758 = bitcast %Pointer %r6757 to %uintptr_t*
	store %uintptr_t 110, %uintptr_t* %r6758
	; Push(64)
	%r6759 = load %Pointer, %Pointer* %stackTop
	%r6760 = getelementptr inbounds i8, %Pointer %r6759, i32 64
	store %Pointer %r6760, %Pointer* %stackTop
	; FlushFrontier
	%r6761 = bitcast %struct.GC_state* @gcState to %Pointer
	%r6762 = getelementptr inbounds i8, %Pointer %r6761, i32 0
	%r6763 = bitcast %Pointer %r6762 to %Pointer*
	%r6764 = load %Pointer, %Pointer* %frontier
	store %Pointer %r6764, %Pointer* %r6763
	; FlushStackTop
	%r6765 = bitcast %struct.GC_state* @gcState to %Pointer
	%r6766 = getelementptr inbounds i8, %Pointer %r6765, i32 16
	%r6767 = bitcast %Pointer %r6766 to %Pointer*
	%r6768 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r6768, %Pointer* %r6767
	; Call
	%r6769 = call %Objptr @GC_arrayAllocate(%Pointer %r6751, %Word64 0, %Word64 %r6755, %Word64 23)
	store %Objptr %r6769, %Objptr* @CReturnP
	; CacheFrontier
	%r6770 = bitcast %struct.GC_state* @gcState to %Pointer
	%r6771 = getelementptr inbounds i8, %Pointer %r6770, i32 0
	%r6772 = bitcast %Pointer %r6771 to %Pointer*
	%r6773 = load %Pointer, %Pointer* %r6772
	store %Pointer %r6773, %Pointer* %frontier
	; CacheStackTop
	%r6774 = bitcast %struct.GC_state* @gcState to %Pointer
	%r6775 = getelementptr inbounds i8, %Pointer %r6774, i32 16
	%r6776 = bitcast %Pointer %r6775 to %Pointer*
	%r6777 = load %Pointer, %Pointer* %r6776
	store %Pointer %r6777, %Pointer* %stackTop
	br label %L_755

L_753:
	; RW32(0): Word32  = Word64_equal (0x0, SW64(48): Word64)
	%r6778 = load %Pointer, %Pointer* %stackTop
	%r6779 = getelementptr inbounds i8, %Pointer %r6778, i32 48
	%r6780 = bitcast %Pointer %r6779 to %Word64*
	%r6781 = load %Word64, %Word64* %r6780
	%r6783 = icmp eq %Word64 0, %r6781
	%r6782 = zext i1 %r6783 to %Word32
	store %Word32 %r6782, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_754), (0x1, L_1062))}
	%r6784 = load %Word32, %Word32* %regW32_0
	%r6785 = trunc %Word32 %r6784 to i1
	br i1 %r6785, label %L_1062, label %L_754

L_752:
	; RW32(0): Word32  = WordU64_lt (0x7FFFFFFF, SW64(48): Word64)
	%r6786 = load %Pointer, %Pointer* %stackTop
	%r6787 = getelementptr inbounds i8, %Pointer %r6786, i32 48
	%r6788 = bitcast %Pointer %r6787 to %Word64*
	%r6789 = load %Word64, %Word64* %r6788
	%r6791 = icmp ult %Word64 2147483647, %r6789
	%r6790 = zext i1 %r6791 to %Word32
	store %Word32 %r6790, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_753), (0x1, L_1063))}
	%r6792 = load %Word32, %Word32* %regW32_0
	%r6793 = trunc %Word32 %r6792 to i1
	br i1 %r6793, label %L_1063, label %L_753

L_751:
	; Goto L_752
	br label %L_752

L_750:
	; SW64(48): Word64  = Word64_sub (SW64(8): Word64, SW64(16): Word64)
	%r6794 = load %Pointer, %Pointer* %stackTop
	%r6795 = getelementptr inbounds i8, %Pointer %r6794, i32 8
	%r6796 = bitcast %Pointer %r6795 to %Word64*
	%r6797 = load %Word64, %Word64* %r6796
	%r6798 = load %Pointer, %Pointer* %stackTop
	%r6799 = getelementptr inbounds i8, %Pointer %r6798, i32 16
	%r6800 = bitcast %Pointer %r6799 to %Word64*
	%r6801 = load %Word64, %Word64* %r6800
	%r6802 = sub %Word64 %r6797, %r6801
	%r6803 = load %Pointer, %Pointer* %stackTop
	%r6804 = getelementptr inbounds i8, %Pointer %r6803, i32 48
	%r6805 = bitcast %Pointer %r6804 to %Word64*
	store %Word64 %r6802, %Word64* %r6805
	; RW32(0): Word32  = Word64_equal (SW64(16): Word64, 0x0)
	%r6806 = load %Pointer, %Pointer* %stackTop
	%r6807 = getelementptr inbounds i8, %Pointer %r6806, i32 16
	%r6808 = bitcast %Pointer %r6807 to %Word64*
	%r6809 = load %Word64, %Word64* %r6808
	%r6811 = icmp eq %Word64 %r6809, 0
	%r6810 = zext i1 %r6811 to %Word32
	store %Word32 %r6810, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_751), (0x1, L_1064))}
	%r6812 = load %Word32, %Word32* %regW32_0
	%r6813 = trunc %Word32 %r6812 to i1
	br i1 %r6813, label %L_1064, label %L_751

L_749:
	; RW64(1): Word64  = Word64_add (RW64(0): Word64, 0x1)
	%r6814 = load %Word64, %Word64* %regW64_0
	%r6815 = add %Word64 %r6814, 1
	store %Word64 %r6815, %Word64* %regW64_1
	; SW64(16): Word64  = RW64(1): Word64
	%r6816 = load %Word64, %Word64* %regW64_1
	%r6817 = load %Pointer, %Pointer* %stackTop
	%r6818 = getelementptr inbounds i8, %Pointer %r6817, i32 16
	%r6819 = bitcast %Pointer %r6818 to %Word64*
	store %Word64 %r6816, %Word64* %r6819
	; Goto L_750
	br label %L_750

L_748:
	; RW64(1): Word64  = Word64_sub (RW64(0): Word64, 0x1)
	%r6820 = load %Word64, %Word64* %regW64_0
	%r6821 = sub %Word64 %r6820, 1
	store %Word64 %r6821, %Word64* %regW64_1
	; RW64(0): Word64  = RW64(1): Word64
	%r6822 = load %Word64, %Word64* %regW64_1
	store %Word64 %r6822, %Word64* %regW64_0
	; Goto loop_42
	br label %loop_42

L_747:
	; RW8(0): Word8  = XW8 (SP(0): Objptr (opt_3), RW64(0): Word64, 1, 0): Word8
	%r6823 = load %Pointer, %Pointer* %stackTop
	%r6824 = getelementptr inbounds i8, %Pointer %r6823, i32 0
	%r6825 = bitcast %Pointer %r6824 to %Objptr*
	%r6826 = load %Objptr, %Objptr* %r6825
	%r6827 = load %Word64, %Word64* %regW64_0
	%r6828 = mul nsw %Word64 %r6827, 1
	%r6829 = add nsw %Word64 %r6828, 0
	%r6830 = getelementptr inbounds i8, %Objptr %r6826, %Word64 %r6829
	%r6831 = bitcast %Objptr %r6830 to %Word8*
	%r6832 = load %Word8, %Word8* %r6831
	store %Word8 %r6832, %Word8* %regW8_0
	; RW32(0): Word32  = Word8_equal (RW8(0): Word8, 0x45)
	%r6833 = load %Word8, %Word8* %regW8_0
	%r6835 = icmp eq %Word8 %r6833, 69
	%r6834 = zext i1 %r6835 to %Word32
	store %Word32 %r6834, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_748), (0x1, L_749))}
	%r6836 = load %Word32, %Word32* %regW32_0
	%r6837 = trunc %Word32 %r6836 to i1
	br i1 %r6837, label %L_749, label %L_748

loop_42:
	; RW32(0): Word32  = WordS64_lt (RW64(0): Word64, 0x0)
	%r6838 = load %Word64, %Word64* %regW64_0
	%r6840 = icmp slt %Word64 %r6838, 0
	%r6839 = zext i1 %r6840 to %Word32
	store %Word32 %r6839, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_747), (0x1, L_1067))}
	%r6841 = load %Word32, %Word32* %regW32_0
	%r6842 = trunc %Word32 %r6841 to i1
	br i1 %r6842, label %L_1067, label %L_747

full_0:
	; Push(-56)
	%r6843 = load %Pointer, %Pointer* %stackTop
	%r6844 = getelementptr inbounds i8, %Pointer %r6843, i32 -56
	store %Pointer %r6844, %Pointer* %stackTop
	; SP(0): Objptr (opt_3)  = SP(56): Objptr (opt_3)
	%r6845 = load %Pointer, %Pointer* %stackTop
	%r6846 = getelementptr inbounds i8, %Pointer %r6845, i32 56
	%r6847 = bitcast %Pointer %r6846 to %Objptr*
	%r6848 = load %Objptr, %Objptr* %r6847
	%r6849 = load %Pointer, %Pointer* %stackTop
	%r6850 = getelementptr inbounds i8, %Pointer %r6849, i32 0
	%r6851 = bitcast %Pointer %r6850 to %Objptr*
	store %Objptr %r6848, %Objptr* %r6851
	; SW64(8): Word64  = OW64 (SP(0): Objptr (opt_3), ~16): Word64
	%r6852 = load %Pointer, %Pointer* %stackTop
	%r6853 = getelementptr inbounds i8, %Pointer %r6852, i32 0
	%r6854 = bitcast %Pointer %r6853 to %Objptr*
	%r6855 = load %Objptr, %Objptr* %r6854
	%r6856 = getelementptr inbounds i8, %Objptr %r6855, i32 -16
	%r6857 = bitcast %Objptr %r6856 to %Word64*
	%r6858 = load %Word64, %Word64* %r6857
	%r6859 = load %Pointer, %Pointer* %stackTop
	%r6860 = getelementptr inbounds i8, %Pointer %r6859, i32 8
	%r6861 = bitcast %Pointer %r6860 to %Word64*
	store %Word64 %r6858, %Word64* %r6861
	; RW64(0): Word64  = Word64_sub (SW64(8): Word64, 0x1)
	%r6862 = load %Pointer, %Pointer* %stackTop
	%r6863 = getelementptr inbounds i8, %Pointer %r6862, i32 8
	%r6864 = bitcast %Pointer %r6863 to %Word64*
	%r6865 = load %Word64, %Word64* %r6864
	%r6866 = sub %Word64 %r6865, 1
	store %Word64 %r6866, %Word64* %regW64_0
	; Goto loop_42
	br label %loop_42

L_746:
	; CW64 (<Frontier>)  = 0x57
	%r6867 = load %Pointer, %Pointer* %frontier
	%r6868 = bitcast %Pointer %r6867 to %Word64*
	store %Word64 87, %Word64* %r6868
	; RQ(60): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r6869 = load %Pointer, %Pointer* %frontier
	%r6871 = ptrtoint %Pointer %r6869 to %uintptr_t
	%r6872 = add %uintptr_t %r6871, 8
	%r6870 = inttoptr %uintptr_t %r6872 to %Pointer
	store %CPointer %r6870, %CPointer* %regQ_60
	; RP(0): Objptr (opt_43)  = Cast (RQ(60): CPointer, Objptr (opt_43))
	%r6873 = load %CPointer, %CPointer* %regQ_60
	%r6874 = bitcast %CPointer %r6873 to %Objptr
	store %Objptr %r6874, %Objptr* %regP_0
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r6875 = load %Pointer, %Pointer* %frontier
	%r6877 = ptrtoint %Pointer %r6875 to %uintptr_t
	%r6878 = add %uintptr_t %r6877, 24
	%r6876 = inttoptr %uintptr_t %r6878 to %Pointer
	store %Pointer %r6876, %Pointer* %frontier
	; OP (RP(0): Objptr (opt_43), 0): Objptr (opt_3)  = SP(0): Objptr (opt_3)
	%r6879 = load %Pointer, %Pointer* %stackTop
	%r6880 = getelementptr inbounds i8, %Pointer %r6879, i32 0
	%r6881 = bitcast %Pointer %r6880 to %Objptr*
	%r6882 = load %Objptr, %Objptr* %r6881
	%r6883 = load %Objptr, %Objptr* %regP_0
	%r6884 = getelementptr inbounds i8, %Objptr %r6883, i32 0
	%r6885 = bitcast %Objptr %r6884 to %Objptr*
	store %Objptr %r6882, %Objptr* %r6885
	; OP (RP(0): Objptr (opt_43), 8): Objptr (opt_43)  = Cast (0x1, Objptr (opt_43))
	%r6886 = inttoptr %Word64 1 to %Objptr
	%r6887 = load %Objptr, %Objptr* %regP_0
	%r6888 = getelementptr inbounds i8, %Objptr %r6887, i32 8
	%r6889 = bitcast %Objptr %r6888 to %Objptr*
	store %Objptr %r6886, %Objptr* %r6889
	; CW64 (<Frontier>)  = 0x57
	%r6890 = load %Pointer, %Pointer* %frontier
	%r6891 = bitcast %Pointer %r6890 to %Word64*
	store %Word64 87, %Word64* %r6891
	; RQ(59): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r6892 = load %Pointer, %Pointer* %frontier
	%r6894 = ptrtoint %Pointer %r6892 to %uintptr_t
	%r6895 = add %uintptr_t %r6894, 8
	%r6893 = inttoptr %uintptr_t %r6895 to %Pointer
	store %CPointer %r6893, %CPointer* %regQ_59
	; RP(1): Objptr (opt_43)  = Cast (RQ(59): CPointer, Objptr (opt_43))
	%r6896 = load %CPointer, %CPointer* %regQ_59
	%r6897 = bitcast %CPointer %r6896 to %Objptr
	store %Objptr %r6897, %Objptr* %regP_1
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r6898 = load %Pointer, %Pointer* %frontier
	%r6900 = ptrtoint %Pointer %r6898 to %uintptr_t
	%r6901 = add %uintptr_t %r6900, 24
	%r6899 = inttoptr %uintptr_t %r6901 to %Pointer
	store %Pointer %r6899, %Pointer* %frontier
	; OP (RP(1): Objptr (opt_43), 0): Objptr (opt_3)  = glob {index = 138, isRoot = true, ty = Objptr (opt_3)}
	%r6902 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 138
	%r6903 = load %Objptr, %Objptr* %r6902
	%r6904 = load %Objptr, %Objptr* %regP_1
	%r6905 = getelementptr inbounds i8, %Objptr %r6904, i32 0
	%r6906 = bitcast %Objptr %r6905 to %Objptr*
	store %Objptr %r6903, %Objptr* %r6906
	; OP (RP(1): Objptr (opt_43), 8): Objptr (opt_43)  = RP(0): Objptr (opt_43)
	%r6907 = load %Objptr, %Objptr* %regP_0
	%r6908 = load %Objptr, %Objptr* %regP_1
	%r6909 = getelementptr inbounds i8, %Objptr %r6908, i32 8
	%r6910 = bitcast %Objptr %r6909 to %Objptr*
	store %Objptr %r6907, %Objptr* %r6910
	; CW64 (<Frontier>)  = 0x57
	%r6911 = load %Pointer, %Pointer* %frontier
	%r6912 = bitcast %Pointer %r6911 to %Word64*
	store %Word64 87, %Word64* %r6912
	; RQ(58): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r6913 = load %Pointer, %Pointer* %frontier
	%r6915 = ptrtoint %Pointer %r6913 to %uintptr_t
	%r6916 = add %uintptr_t %r6915, 8
	%r6914 = inttoptr %uintptr_t %r6916 to %Pointer
	store %CPointer %r6914, %CPointer* %regQ_58
	; RP(2): Objptr (opt_43)  = Cast (RQ(58): CPointer, Objptr (opt_43))
	%r6917 = load %CPointer, %CPointer* %regQ_58
	%r6918 = bitcast %CPointer %r6917 to %Objptr
	store %Objptr %r6918, %Objptr* %regP_2
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r6919 = load %Pointer, %Pointer* %frontier
	%r6921 = ptrtoint %Pointer %r6919 to %uintptr_t
	%r6922 = add %uintptr_t %r6921, 24
	%r6920 = inttoptr %uintptr_t %r6922 to %Pointer
	store %Pointer %r6920, %Pointer* %frontier
	; OP (RP(2): Objptr (opt_43), 0): Objptr (opt_3)  = SP(8): Objptr (opt_3)
	%r6923 = load %Pointer, %Pointer* %stackTop
	%r6924 = getelementptr inbounds i8, %Pointer %r6923, i32 8
	%r6925 = bitcast %Pointer %r6924 to %Objptr*
	%r6926 = load %Objptr, %Objptr* %r6925
	%r6927 = load %Objptr, %Objptr* %regP_2
	%r6928 = getelementptr inbounds i8, %Objptr %r6927, i32 0
	%r6929 = bitcast %Objptr %r6928 to %Objptr*
	store %Objptr %r6926, %Objptr* %r6929
	; OP (RP(2): Objptr (opt_43), 8): Objptr (opt_43)  = RP(1): Objptr (opt_43)
	%r6930 = load %Objptr, %Objptr* %regP_1
	%r6931 = load %Objptr, %Objptr* %regP_2
	%r6932 = getelementptr inbounds i8, %Objptr %r6931, i32 8
	%r6933 = bitcast %Objptr %r6932 to %Objptr*
	store %Objptr %r6930, %Objptr* %r6933
	; CW64 (<Frontier>)  = 0x57
	%r6934 = load %Pointer, %Pointer* %frontier
	%r6935 = bitcast %Pointer %r6934 to %Word64*
	store %Word64 87, %Word64* %r6935
	; RQ(57): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r6936 = load %Pointer, %Pointer* %frontier
	%r6938 = ptrtoint %Pointer %r6936 to %uintptr_t
	%r6939 = add %uintptr_t %r6938, 8
	%r6937 = inttoptr %uintptr_t %r6939 to %Pointer
	store %CPointer %r6937, %CPointer* %regQ_57
	; RP(3): Objptr (opt_43)  = Cast (RQ(57): CPointer, Objptr (opt_43))
	%r6940 = load %CPointer, %CPointer* %regQ_57
	%r6941 = bitcast %CPointer %r6940 to %Objptr
	store %Objptr %r6941, %Objptr* %regP_3
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r6942 = load %Pointer, %Pointer* %frontier
	%r6944 = ptrtoint %Pointer %r6942 to %uintptr_t
	%r6945 = add %uintptr_t %r6944, 24
	%r6943 = inttoptr %uintptr_t %r6945 to %Pointer
	store %Pointer %r6943, %Pointer* %frontier
	; OP (RP(3): Objptr (opt_43), 0): Objptr (opt_3)  = Cast (SP(56): Objptr (opt_11), Objptr (opt_3))
	%r6946 = load %Pointer, %Pointer* %stackTop
	%r6947 = getelementptr inbounds i8, %Pointer %r6946, i32 56
	%r6948 = bitcast %Pointer %r6947 to %Objptr*
	%r6949 = load %Objptr, %Objptr* %r6948
	%r6950 = bitcast %Objptr %r6949 to %Objptr
	%r6951 = load %Objptr, %Objptr* %regP_3
	%r6952 = getelementptr inbounds i8, %Objptr %r6951, i32 0
	%r6953 = bitcast %Objptr %r6952 to %Objptr*
	store %Objptr %r6950, %Objptr* %r6953
	; OP (RP(3): Objptr (opt_43), 8): Objptr (opt_43)  = RP(2): Objptr (opt_43)
	%r6954 = load %Objptr, %Objptr* %regP_2
	%r6955 = load %Objptr, %Objptr* %regP_3
	%r6956 = getelementptr inbounds i8, %Objptr %r6955, i32 8
	%r6957 = bitcast %Objptr %r6956 to %Objptr*
	store %Objptr %r6954, %Objptr* %r6957
	; CW64 (<Frontier>)  = 0x57
	%r6958 = load %Pointer, %Pointer* %frontier
	%r6959 = bitcast %Pointer %r6958 to %Word64*
	store %Word64 87, %Word64* %r6959
	; RQ(56): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r6960 = load %Pointer, %Pointer* %frontier
	%r6962 = ptrtoint %Pointer %r6960 to %uintptr_t
	%r6963 = add %uintptr_t %r6962, 8
	%r6961 = inttoptr %uintptr_t %r6963 to %Pointer
	store %CPointer %r6961, %CPointer* %regQ_56
	; RP(4): Objptr (opt_43)  = Cast (RQ(56): CPointer, Objptr (opt_43))
	%r6964 = load %CPointer, %CPointer* %regQ_56
	%r6965 = bitcast %CPointer %r6964 to %Objptr
	store %Objptr %r6965, %Objptr* %regP_4
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r6966 = load %Pointer, %Pointer* %frontier
	%r6968 = ptrtoint %Pointer %r6966 to %uintptr_t
	%r6969 = add %uintptr_t %r6968, 24
	%r6967 = inttoptr %uintptr_t %r6969 to %Pointer
	store %Pointer %r6967, %Pointer* %frontier
	; OP (RP(4): Objptr (opt_43), 0): Objptr (opt_3)  = SP(48): Objptr (opt_3)
	%r6970 = load %Pointer, %Pointer* %stackTop
	%r6971 = getelementptr inbounds i8, %Pointer %r6970, i32 48
	%r6972 = bitcast %Pointer %r6971 to %Objptr*
	%r6973 = load %Objptr, %Objptr* %r6972
	%r6974 = load %Objptr, %Objptr* %regP_4
	%r6975 = getelementptr inbounds i8, %Objptr %r6974, i32 0
	%r6976 = bitcast %Objptr %r6975 to %Objptr*
	store %Objptr %r6973, %Objptr* %r6976
	; OP (RP(4): Objptr (opt_43), 8): Objptr (opt_43)  = RP(3): Objptr (opt_43)
	%r6977 = load %Objptr, %Objptr* %regP_3
	%r6978 = load %Objptr, %Objptr* %regP_4
	%r6979 = getelementptr inbounds i8, %Objptr %r6978, i32 8
	%r6980 = bitcast %Objptr %r6979 to %Objptr*
	store %Objptr %r6977, %Objptr* %r6980
	; SP(56): Objptr (opt_43)  = RP(4): Objptr (opt_43)
	%r6981 = load %Objptr, %Objptr* %regP_4
	%r6982 = load %Pointer, %Pointer* %stackTop
	%r6983 = getelementptr inbounds i8, %Pointer %r6982, i32 56
	%r6984 = bitcast %Pointer %r6983 to %Objptr*
	store %Objptr %r6981, %Objptr* %r6984
	%r6985 = load %Pointer, %Pointer* %stackTop
	%r6986 = getelementptr inbounds i8, %Pointer %r6985, i32 48
	%r6987 = bitcast %Pointer %r6986 to %uintptr_t*
	store %uintptr_t 109, %uintptr_t* %r6987
	; Push(56)
	%r6988 = load %Pointer, %Pointer* %stackTop
	%r6989 = getelementptr inbounds i8, %Pointer %r6988, i32 56
	store %Pointer %r6989, %Pointer* %stackTop
	br label %concat_0

L_745:
	; Push(-72)
	%r6990 = load %Pointer, %Pointer* %stackTop
	%r6991 = getelementptr inbounds i8, %Pointer %r6990, i32 -72
	store %Pointer %r6991, %Pointer* %stackTop
	; SP(0): Objptr (opt_3)  = SP(72): Objptr (opt_3)
	%r6992 = load %Pointer, %Pointer* %stackTop
	%r6993 = getelementptr inbounds i8, %Pointer %r6992, i32 72
	%r6994 = bitcast %Pointer %r6993 to %Objptr*
	%r6995 = load %Objptr, %Objptr* %r6994
	%r6996 = load %Pointer, %Pointer* %stackTop
	%r6997 = getelementptr inbounds i8, %Pointer %r6996, i32 0
	%r6998 = bitcast %Pointer %r6997 to %Objptr*
	store %Objptr %r6995, %Objptr* %r6998
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r6999 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7000 = getelementptr inbounds i8, %Pointer %r6999, i32 8
	%r7001 = bitcast %Pointer %r7000 to %CPointer*
	%r7002 = load %CPointer, %CPointer* %r7001
	%r7003 = load %Pointer, %Pointer* %frontier
	%r7005 = icmp ult %Pointer %r7002, %r7003
	%r7004 = zext i1 %r7005 to %Word32
	store %Word32 %r7004, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_746), (0x1, L_1068))}
	%r7006 = load %Word32, %Word32* %regW32_0
	%r7007 = trunc %Word32 %r7006 to i1
	br i1 %r7007, label %L_1068, label %L_746

L_744:
	; CW64 (<Frontier>)  = 0x57
	%r7008 = load %Pointer, %Pointer* %frontier
	%r7009 = bitcast %Pointer %r7008 to %Word64*
	store %Word64 87, %Word64* %r7009
	; RQ(55): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r7010 = load %Pointer, %Pointer* %frontier
	%r7012 = ptrtoint %Pointer %r7010 to %uintptr_t
	%r7013 = add %uintptr_t %r7012, 8
	%r7011 = inttoptr %uintptr_t %r7013 to %Pointer
	store %CPointer %r7011, %CPointer* %regQ_55
	; RP(0): Objptr (opt_43)  = Cast (RQ(55): CPointer, Objptr (opt_43))
	%r7014 = load %CPointer, %CPointer* %regQ_55
	%r7015 = bitcast %CPointer %r7014 to %Objptr
	store %Objptr %r7015, %Objptr* %regP_0
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r7016 = load %Pointer, %Pointer* %frontier
	%r7018 = ptrtoint %Pointer %r7016 to %uintptr_t
	%r7019 = add %uintptr_t %r7018, 24
	%r7017 = inttoptr %uintptr_t %r7019 to %Pointer
	store %Pointer %r7017, %Pointer* %frontier
	; OP (RP(0): Objptr (opt_43), 0): Objptr (opt_3)  = Cast (SP(96): Objptr (opt_11), Objptr (opt_3))
	%r7020 = load %Pointer, %Pointer* %stackTop
	%r7021 = getelementptr inbounds i8, %Pointer %r7020, i32 96
	%r7022 = bitcast %Pointer %r7021 to %Objptr*
	%r7023 = load %Objptr, %Objptr* %r7022
	%r7024 = bitcast %Objptr %r7023 to %Objptr
	%r7025 = load %Objptr, %Objptr* %regP_0
	%r7026 = getelementptr inbounds i8, %Objptr %r7025, i32 0
	%r7027 = bitcast %Objptr %r7026 to %Objptr*
	store %Objptr %r7024, %Objptr* %r7027
	; OP (RP(0): Objptr (opt_43), 8): Objptr (opt_43)  = Cast (0x1, Objptr (opt_43))
	%r7028 = inttoptr %Word64 1 to %Objptr
	%r7029 = load %Objptr, %Objptr* %regP_0
	%r7030 = getelementptr inbounds i8, %Objptr %r7029, i32 8
	%r7031 = bitcast %Objptr %r7030 to %Objptr*
	store %Objptr %r7028, %Objptr* %r7031
	; CW64 (<Frontier>)  = 0x57
	%r7032 = load %Pointer, %Pointer* %frontier
	%r7033 = bitcast %Pointer %r7032 to %Word64*
	store %Word64 87, %Word64* %r7033
	; RQ(54): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r7034 = load %Pointer, %Pointer* %frontier
	%r7036 = ptrtoint %Pointer %r7034 to %uintptr_t
	%r7037 = add %uintptr_t %r7036, 8
	%r7035 = inttoptr %uintptr_t %r7037 to %Pointer
	store %CPointer %r7035, %CPointer* %regQ_54
	; RP(1): Objptr (opt_43)  = Cast (RQ(54): CPointer, Objptr (opt_43))
	%r7038 = load %CPointer, %CPointer* %regQ_54
	%r7039 = bitcast %CPointer %r7038 to %Objptr
	store %Objptr %r7039, %Objptr* %regP_1
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r7040 = load %Pointer, %Pointer* %frontier
	%r7042 = ptrtoint %Pointer %r7040 to %uintptr_t
	%r7043 = add %uintptr_t %r7042, 24
	%r7041 = inttoptr %uintptr_t %r7043 to %Pointer
	store %Pointer %r7041, %Pointer* %frontier
	; OP (RP(1): Objptr (opt_43), 0): Objptr (opt_3)  = SP(0): Objptr (opt_3)
	%r7044 = load %Pointer, %Pointer* %stackTop
	%r7045 = getelementptr inbounds i8, %Pointer %r7044, i32 0
	%r7046 = bitcast %Pointer %r7045 to %Objptr*
	%r7047 = load %Objptr, %Objptr* %r7046
	%r7048 = load %Objptr, %Objptr* %regP_1
	%r7049 = getelementptr inbounds i8, %Objptr %r7048, i32 0
	%r7050 = bitcast %Objptr %r7049 to %Objptr*
	store %Objptr %r7047, %Objptr* %r7050
	; OP (RP(1): Objptr (opt_43), 8): Objptr (opt_43)  = RP(0): Objptr (opt_43)
	%r7051 = load %Objptr, %Objptr* %regP_0
	%r7052 = load %Objptr, %Objptr* %regP_1
	%r7053 = getelementptr inbounds i8, %Objptr %r7052, i32 8
	%r7054 = bitcast %Objptr %r7053 to %Objptr*
	store %Objptr %r7051, %Objptr* %r7054
	; SP(72): Objptr (opt_43)  = RP(1): Objptr (opt_43)
	%r7055 = load %Objptr, %Objptr* %regP_1
	%r7056 = load %Pointer, %Pointer* %stackTop
	%r7057 = getelementptr inbounds i8, %Pointer %r7056, i32 72
	%r7058 = bitcast %Pointer %r7057 to %Objptr*
	store %Objptr %r7055, %Objptr* %r7058
	%r7059 = load %Pointer, %Pointer* %stackTop
	%r7060 = getelementptr inbounds i8, %Pointer %r7059, i32 64
	%r7061 = bitcast %Pointer %r7060 to %uintptr_t*
	store %uintptr_t 108, %uintptr_t* %r7061
	; Push(72)
	%r7062 = load %Pointer, %Pointer* %stackTop
	%r7063 = getelementptr inbounds i8, %Pointer %r7062, i32 72
	store %Pointer %r7063, %Pointer* %stackTop
	br label %concat_0

L_743:
	; OW32 (SP(72): Objptr (opt_13), 0): Word32  = 0x0
	%r7064 = load %Pointer, %Pointer* %stackTop
	%r7065 = getelementptr inbounds i8, %Pointer %r7064, i32 72
	%r7066 = bitcast %Pointer %r7065 to %Objptr*
	%r7067 = load %Objptr, %Objptr* %r7066
	%r7068 = getelementptr inbounds i8, %Objptr %r7067, i32 0
	%r7069 = bitcast %Objptr %r7068 to %Word32*
	store %Word32 0, %Word32* %r7069
	; Goto L_744
	br label %L_744

L_742:
	; OW64 (SP(96): Objptr (opt_11), ~8): Word64  = 0x7
	%r7070 = load %Pointer, %Pointer* %stackTop
	%r7071 = getelementptr inbounds i8, %Pointer %r7070, i32 96
	%r7072 = bitcast %Pointer %r7071 to %Objptr*
	%r7073 = load %Objptr, %Objptr* %r7072
	%r7074 = getelementptr inbounds i8, %Objptr %r7073, i32 -8
	%r7075 = bitcast %Objptr %r7074 to %Word64*
	store %Word64 7, %Word64* %r7075
	; switch {test = SW32(68): Word32, default = None, cases = ((0x0, L_743), (0x1, L_1070))}
	%r7076 = load %Pointer, %Pointer* %stackTop
	%r7077 = getelementptr inbounds i8, %Pointer %r7076, i32 68
	%r7078 = bitcast %Pointer %r7077 to %Word32*
	%r7079 = load %Word32, %Word32* %r7078
	%r7080 = trunc %Word32 %r7079 to i1
	br i1 %r7080, label %L_1070, label %L_743

L_741:
	; Push(-112)
	%r7081 = load %Pointer, %Pointer* %stackTop
	%r7082 = getelementptr inbounds i8, %Pointer %r7081, i32 -112
	store %Pointer %r7082, %Pointer* %stackTop
	; Goto L_742
	br label %L_742

L_740:
	; CCall {args = (<GCState>, SP(96): Objptr (opt_11), 0x0, SP(16): Objptr (opt_11), SW64(80): Word64, SW64(88): Word64), frameInfo = Some {frameLayoutsIndex = 107}, func = {args = (GCState, Objptr (opt_11), Word64, Objptr (opt_11), Word64, Word64), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Objptr, Int64, Objptr, Int64, Int64), res = None}, return = Bits0, symbolScope = private, target = GC_arrayCopy}, return = Some L_741}
	; GetOperands
	%r7083 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7084 = load %Pointer, %Pointer* %stackTop
	%r7085 = getelementptr inbounds i8, %Pointer %r7084, i32 96
	%r7086 = bitcast %Pointer %r7085 to %Objptr*
	%r7087 = load %Objptr, %Objptr* %r7086
	%r7088 = load %Pointer, %Pointer* %stackTop
	%r7089 = getelementptr inbounds i8, %Pointer %r7088, i32 16
	%r7090 = bitcast %Pointer %r7089 to %Objptr*
	%r7091 = load %Objptr, %Objptr* %r7090
	%r7092 = load %Pointer, %Pointer* %stackTop
	%r7093 = getelementptr inbounds i8, %Pointer %r7092, i32 80
	%r7094 = bitcast %Pointer %r7093 to %Word64*
	%r7095 = load %Word64, %Word64* %r7094
	%r7096 = load %Pointer, %Pointer* %stackTop
	%r7097 = getelementptr inbounds i8, %Pointer %r7096, i32 88
	%r7098 = bitcast %Pointer %r7097 to %Word64*
	%r7099 = load %Word64, %Word64* %r7098
	%r7100 = load %Pointer, %Pointer* %stackTop
	%r7101 = getelementptr inbounds i8, %Pointer %r7100, i32 104
	%r7102 = bitcast %Pointer %r7101 to %uintptr_t*
	store %uintptr_t 107, %uintptr_t* %r7102
	; Push(112)
	%r7103 = load %Pointer, %Pointer* %stackTop
	%r7104 = getelementptr inbounds i8, %Pointer %r7103, i32 112
	store %Pointer %r7104, %Pointer* %stackTop
	; FlushFrontier
	%r7105 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7106 = getelementptr inbounds i8, %Pointer %r7105, i32 0
	%r7107 = bitcast %Pointer %r7106 to %Pointer*
	%r7108 = load %Pointer, %Pointer* %frontier
	store %Pointer %r7108, %Pointer* %r7107
	; FlushStackTop
	%r7109 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7110 = getelementptr inbounds i8, %Pointer %r7109, i32 16
	%r7111 = bitcast %Pointer %r7110 to %Pointer*
	%r7112 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r7112, %Pointer* %r7111
	; Call
	call void @GC_arrayCopy(%Pointer %r7083, %Objptr %r7087, %Word64 0, %Objptr %r7091, %Word64 %r7095, %Word64 %r7099)
	; CacheFrontier
	%r7113 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7114 = getelementptr inbounds i8, %Pointer %r7113, i32 0
	%r7115 = bitcast %Pointer %r7114 to %Pointer*
	%r7116 = load %Pointer, %Pointer* %r7115
	store %Pointer %r7116, %Pointer* %frontier
	; CacheStackTop
	%r7117 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7118 = getelementptr inbounds i8, %Pointer %r7117, i32 16
	%r7119 = bitcast %Pointer %r7118 to %Pointer*
	%r7120 = load %Pointer, %Pointer* %r7119
	store %Pointer %r7120, %Pointer* %stackTop
	br label %L_741

L_739:
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r7121 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7122 = getelementptr inbounds i8, %Pointer %r7121, i32 8
	%r7123 = bitcast %Pointer %r7122 to %CPointer*
	%r7124 = load %CPointer, %CPointer* %r7123
	%r7125 = load %Pointer, %Pointer* %frontier
	%r7127 = icmp ult %Pointer %r7124, %r7125
	%r7126 = zext i1 %r7127 to %Word32
	store %Word32 %r7126, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_740), (0x1, L_1071))}
	%r7128 = load %Word32, %Word32* %regW32_0
	%r7129 = trunc %Word32 %r7128 to i1
	br i1 %r7129, label %L_1071, label %L_740

L_join_10:
	; RW32(0): Word32  = WordS64_lt (SW64(88): Word64, 0x5)
	%r7130 = load %Pointer, %Pointer* %stackTop
	%r7131 = getelementptr inbounds i8, %Pointer %r7130, i32 88
	%r7132 = bitcast %Pointer %r7131 to %Word64*
	%r7133 = load %Word64, %Word64* %r7132
	%r7135 = icmp slt %Word64 %r7133, 5
	%r7134 = zext i1 %r7135 to %Word32
	store %Word32 %r7134, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_739), (0x1, L_1073))}
	%r7136 = load %Word32, %Word32* %regW32_0
	%r7137 = trunc %Word32 %r7136 to i1
	br i1 %r7137, label %L_1073, label %L_739

L_738:
	; Push(-104)
	%r7138 = load %Pointer, %Pointer* %stackTop
	%r7139 = getelementptr inbounds i8, %Pointer %r7138, i32 -104
	store %Pointer %r7139, %Pointer* %stackTop
	%r7140 = load %Objptr, %Objptr* @CReturnP
	store %Objptr %r7140, %Objptr* %regP_0
	; SP(96): Objptr (opt_11)  = RP(0): Objptr (opt_11)
	%r7141 = load %Objptr, %Objptr* %regP_0
	%r7142 = load %Pointer, %Pointer* %stackTop
	%r7143 = getelementptr inbounds i8, %Pointer %r7142, i32 96
	%r7144 = bitcast %Pointer %r7143 to %Objptr*
	store %Objptr %r7141, %Objptr* %r7144
	; Goto L_join_10
	br label %L_join_10

L_737:
	; CCall {args = (<GCState>, 0x0, SW64(88): Word64, 0x17), frameInfo = Some {frameLayoutsIndex = 106}, func = {args = (GCState, Word64, Word64, Word64), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int64, Word64), res = Some Objptr}, return = Objptr (opt_11), symbolScope = private, target = GC_arrayAllocate}, return = Some L_738}
	; GetOperands
	%r7145 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7146 = load %Pointer, %Pointer* %stackTop
	%r7147 = getelementptr inbounds i8, %Pointer %r7146, i32 88
	%r7148 = bitcast %Pointer %r7147 to %Word64*
	%r7149 = load %Word64, %Word64* %r7148
	%r7150 = load %Pointer, %Pointer* %stackTop
	%r7151 = getelementptr inbounds i8, %Pointer %r7150, i32 96
	%r7152 = bitcast %Pointer %r7151 to %uintptr_t*
	store %uintptr_t 106, %uintptr_t* %r7152
	; Push(104)
	%r7153 = load %Pointer, %Pointer* %stackTop
	%r7154 = getelementptr inbounds i8, %Pointer %r7153, i32 104
	store %Pointer %r7154, %Pointer* %stackTop
	; FlushFrontier
	%r7155 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7156 = getelementptr inbounds i8, %Pointer %r7155, i32 0
	%r7157 = bitcast %Pointer %r7156 to %Pointer*
	%r7158 = load %Pointer, %Pointer* %frontier
	store %Pointer %r7158, %Pointer* %r7157
	; FlushStackTop
	%r7159 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7160 = getelementptr inbounds i8, %Pointer %r7159, i32 16
	%r7161 = bitcast %Pointer %r7160 to %Pointer*
	%r7162 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r7162, %Pointer* %r7161
	; Call
	%r7163 = call %Objptr @GC_arrayAllocate(%Pointer %r7145, %Word64 0, %Word64 %r7149, %Word64 23)
	store %Objptr %r7163, %Objptr* @CReturnP
	; CacheFrontier
	%r7164 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7165 = getelementptr inbounds i8, %Pointer %r7164, i32 0
	%r7166 = bitcast %Pointer %r7165 to %Pointer*
	%r7167 = load %Pointer, %Pointer* %r7166
	store %Pointer %r7167, %Pointer* %frontier
	; CacheStackTop
	%r7168 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7169 = getelementptr inbounds i8, %Pointer %r7168, i32 16
	%r7170 = bitcast %Pointer %r7169 to %Pointer*
	%r7171 = load %Pointer, %Pointer* %r7170
	store %Pointer %r7171, %Pointer* %stackTop
	br label %L_738

L_736:
	; SW64(88): Word64  = Word64_sub (RW64(1): Word64, SW64(80): Word64)
	%r7172 = load %Word64, %Word64* %regW64_1
	%r7173 = load %Pointer, %Pointer* %stackTop
	%r7174 = getelementptr inbounds i8, %Pointer %r7173, i32 80
	%r7175 = bitcast %Pointer %r7174 to %Word64*
	%r7176 = load %Word64, %Word64* %r7175
	%r7177 = sub %Word64 %r7172, %r7176
	%r7178 = load %Pointer, %Pointer* %stackTop
	%r7179 = getelementptr inbounds i8, %Pointer %r7178, i32 88
	%r7180 = bitcast %Pointer %r7179 to %Word64*
	store %Word64 %r7177, %Word64* %r7180
	; RW32(0): Word32  = Word64_equal (0x0, SW64(88): Word64)
	%r7181 = load %Pointer, %Pointer* %stackTop
	%r7182 = getelementptr inbounds i8, %Pointer %r7181, i32 88
	%r7183 = bitcast %Pointer %r7182 to %Word64*
	%r7184 = load %Word64, %Word64* %r7183
	%r7186 = icmp eq %Word64 0, %r7184
	%r7185 = zext i1 %r7186 to %Word32
	store %Word32 %r7185, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_737), (0x1, L_1079))}
	%r7187 = load %Word32, %Word32* %regW32_0
	%r7188 = trunc %Word32 %r7187 to i1
	br i1 %r7188, label %L_1079, label %L_737

L_735:
	; SW64(80): Word64  = WordS32_extdToWord64 (RW32(0): Word32)
	%r7189 = load %Word32, %Word32* %regW32_0
	%r7190 = sext %Word32 %r7189 to %Word64
	%r7191 = load %Pointer, %Pointer* %stackTop
	%r7192 = getelementptr inbounds i8, %Pointer %r7191, i32 80
	%r7193 = bitcast %Pointer %r7192 to %Word64*
	store %Word64 %r7190, %Word64* %r7193
	; RW32(1): Word32  = WordU64_lt (RW64(1): Word64, SW64(80): Word64)
	%r7194 = load %Word64, %Word64* %regW64_1
	%r7195 = load %Pointer, %Pointer* %stackTop
	%r7196 = getelementptr inbounds i8, %Pointer %r7195, i32 80
	%r7197 = bitcast %Pointer %r7196 to %Word64*
	%r7198 = load %Word64, %Word64* %r7197
	%r7200 = icmp ult %Word64 %r7194, %r7198
	%r7199 = zext i1 %r7200 to %Word32
	store %Word32 %r7199, %Word32* %regW32_1
	; switch {test = RW32(1): Word32, default = None, cases = ((0x0, L_736), (0x1, L_1080))}
	%r7201 = load %Word32, %Word32* %regW32_1
	%r7202 = trunc %Word32 %r7201 to i1
	br i1 %r7202, label %L_1080, label %L_736

L_734:
	; RW32(0): Word32  = RW32(1): Word32
	%r7203 = load %Word32, %Word32* %regW32_1
	store %Word32 %r7203, %Word32* %regW32_0
	; Goto L_735
	br label %L_735

L_733:
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_734), (0x1, L_1081))}
	%r7204 = load %Word32, %Word32* %regW32_0
	%r7205 = trunc %Word32 %r7204 to i1
	br i1 %r7205, label %L_1081, label %L_734

L_732:
	; RW32(1): Word32  = RW32(2): Word32
	%r7206 = load %Word32, %Word32* %regW32_2
	store %Word32 %r7206, %Word32* %regW32_1
	; RW32(2): Word32  = RW32(3): Word32
	%r7207 = load %Word32, %Word32* %regW32_3
	store %Word32 %r7207, %Word32* %regW32_2
	; Goto loop_41
	br label %loop_41

L_731:
	; glob {index = 0, isRoot = false, ty = Objptr (opt_34, opt_33, opt_32, opt_31)}  = Cast (0x1, Objptr (opt_34, opt_33, opt_32, opt_31))
	%r7208 = inttoptr %Word64 1 to %Objptr
	%r7209 = getelementptr inbounds [1 x %Objptr], [1 x %Objptr]* @globalObjptrNonRoot, i32 0, i32 0
	store %Objptr %r7208, %Objptr* %r7209
	; Raise
	%r7210 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7211 = getelementptr inbounds i8, %Pointer %r7210, i32 1616
	%r7212 = bitcast %Pointer %r7211 to %Pointer*
	%r7213 = load %Pointer, %Pointer* %r7212
	%r7214 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7215 = getelementptr inbounds i8, %Pointer %r7214, i32 32
	%r7216 = bitcast %Pointer %r7215 to i32*
	%r7217 = load i32, i32* %r7216
	%r7218 = getelementptr inbounds i8, %Pointer %r7213, i32 %r7217
	store %Pointer %r7218, %Pointer* %stackTop
	%r7219 = load %Pointer, %Pointer* %stackTop
	%r7220 = getelementptr inbounds i8, %Pointer %r7219, i32 -8
	%r7221 = bitcast %Pointer %r7220 to %uintptr_t*
	%r7222 = load %uintptr_t, %uintptr_t* %r7221
	store %uintptr_t %r7222, %uintptr_t* %l_nextFun
	br label %top

L_730:
	; RP(0): Objptr (opt_34, opt_33, opt_32, opt_31)  = Cast (0x1, Objptr (opt_34, opt_33, opt_32, opt_31))
	%r7223 = inttoptr %Word64 1 to %Objptr
	store %Objptr %r7223, %Objptr* %regP_0
	; Goto L_723
	br label %L_723

L_729:
	; switch {test = SW32(68): Word32, default = None, cases = ((0x0, L_730), (0x1, L_731))}
	%r7224 = load %Pointer, %Pointer* %stackTop
	%r7225 = getelementptr inbounds i8, %Pointer %r7224, i32 68
	%r7226 = bitcast %Pointer %r7225 to %Word32*
	%r7227 = load %Word32, %Word32* %r7226
	%r7228 = trunc %Word32 %r7227 to i1
	br i1 %r7228, label %L_731, label %L_730

L_728:
	; Arith {prim = WordS32_subCheck, args = (RW32(1): Word32, 0x1), dst = RW32(2): Word32, overflow = L_729, success = L_732}
	%r7229 = load %Word32, %Word32* %regW32_1
	%r7230 = call {%Word32, i1} @llvm.ssub.with.overflow.i32(%Word32 %r7229, %Word32 1)
	%r7231 = extractvalue {%Word32, i1} %r7230, 0
	%r7232 = extractvalue {%Word32, i1} %r7230, 1
	store %Word32 %r7231, %Word32* %regW32_2
	br i1 %r7232, label %L_729, label %L_732

L_727:
	; XW8 (SP(16): Objptr (opt_11), RW64(2): Word64, 1, 0): Word8  = RW8(0): Word8
	%r7233 = load %Word8, %Word8* %regW8_0
	%r7234 = load %Pointer, %Pointer* %stackTop
	%r7235 = getelementptr inbounds i8, %Pointer %r7234, i32 16
	%r7236 = bitcast %Pointer %r7235 to %Objptr*
	%r7237 = load %Objptr, %Objptr* %r7236
	%r7238 = load %Word64, %Word64* %regW64_2
	%r7239 = mul nsw %Word64 %r7238, 1
	%r7240 = add nsw %Word64 %r7239, 0
	%r7241 = getelementptr inbounds i8, %Objptr %r7237, %Word64 %r7240
	%r7242 = bitcast %Objptr %r7241 to %Word8*
	store %Word8 %r7233, %Word8* %r7242
	; RW32(3): Word32  = WordS32_quot (RW32(2): Word32, 0xA)
	%r7243 = load %Word32, %Word32* %regW32_2
	%r7244 = sdiv %Word32 %r7243, 10
	store %Word32 %r7244, %Word32* %regW32_3
	; RW32(4): Word32  = Word32_equal (RW32(3): Word32, 0x0)
	%r7245 = load %Word32, %Word32* %regW32_3
	%r7247 = icmp eq %Word32 %r7245, 0
	%r7246 = zext i1 %r7247 to %Word32
	store %Word32 %r7246, %Word32* %regW32_4
	; switch {test = RW32(4): Word32, default = None, cases = ((0x0, L_728), (0x1, L_733))}
	%r7248 = load %Word32, %Word32* %regW32_4
	%r7249 = trunc %Word32 %r7248 to i1
	br i1 %r7249, label %L_733, label %L_728

L_726:
	; Goto L_721
	br label %L_721

L_725:
	; RW8(0): Word8  = XW8 (glob {index = 137, isRoot = true, ty = Objptr (opt_3)}, RW64(0): Word64, 1, 0): Word8
	%r7250 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 137
	%r7251 = load %Objptr, %Objptr* %r7250
	%r7252 = load %Word64, %Word64* %regW64_0
	%r7253 = mul nsw %Word64 %r7252, 1
	%r7254 = add nsw %Word64 %r7253, 0
	%r7255 = getelementptr inbounds i8, %Objptr %r7251, %Word64 %r7254
	%r7256 = bitcast %Objptr %r7255 to %Word8*
	%r7257 = load %Word8, %Word8* %r7256
	store %Word8 %r7257, %Word8* %regW8_0
	; RW64(1): Word64  = OW64 (SP(16): Objptr (opt_11), ~16): Word64
	%r7258 = load %Pointer, %Pointer* %stackTop
	%r7259 = getelementptr inbounds i8, %Pointer %r7258, i32 16
	%r7260 = bitcast %Pointer %r7259 to %Objptr*
	%r7261 = load %Objptr, %Objptr* %r7260
	%r7262 = getelementptr inbounds i8, %Objptr %r7261, i32 -16
	%r7263 = bitcast %Objptr %r7262 to %Word64*
	%r7264 = load %Word64, %Word64* %r7263
	store %Word64 %r7264, %Word64* %regW64_1
	; RW64(2): Word64  = WordS32_extdToWord64 (RW32(1): Word32)
	%r7265 = load %Word32, %Word32* %regW32_1
	%r7266 = sext %Word32 %r7265 to %Word64
	store %Word64 %r7266, %Word64* %regW64_2
	; RW32(3): Word32  = WordU64_lt (RW64(2): Word64, RW64(1): Word64)
	%r7267 = load %Word64, %Word64* %regW64_2
	%r7268 = load %Word64, %Word64* %regW64_1
	%r7270 = icmp ult %Word64 %r7267, %r7268
	%r7269 = zext i1 %r7270 to %Word32
	store %Word32 %r7269, %Word32* %regW32_3
	; switch {test = RW32(3): Word32, default = None, cases = ((0x0, L_726), (0x1, L_727))}
	%r7271 = load %Word32, %Word32* %regW32_3
	%r7272 = trunc %Word32 %r7271 to i1
	br i1 %r7272, label %L_727, label %L_726

L_724:
	; glob {index = 0, isRoot = false, ty = Objptr (opt_34, opt_33, opt_32, opt_31)}  = Cast (0x3, Objptr (opt_34, opt_33, opt_32, opt_31))
	%r7273 = inttoptr %Word64 3 to %Objptr
	%r7274 = getelementptr inbounds [1 x %Objptr], [1 x %Objptr]* @globalObjptrNonRoot, i32 0, i32 0
	store %Objptr %r7273, %Objptr* %r7274
	; Raise
	%r7275 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7276 = getelementptr inbounds i8, %Pointer %r7275, i32 1616
	%r7277 = bitcast %Pointer %r7276 to %Pointer*
	%r7278 = load %Pointer, %Pointer* %r7277
	%r7279 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7280 = getelementptr inbounds i8, %Pointer %r7279, i32 32
	%r7281 = bitcast %Pointer %r7280 to i32*
	%r7282 = load i32, i32* %r7281
	%r7283 = getelementptr inbounds i8, %Pointer %r7278, i32 %r7282
	store %Pointer %r7283, %Pointer* %stackTop
	%r7284 = load %Pointer, %Pointer* %stackTop
	%r7285 = getelementptr inbounds i8, %Pointer %r7284, i32 -8
	%r7286 = bitcast %Pointer %r7285 to %uintptr_t*
	%r7287 = load %uintptr_t, %uintptr_t* %r7286
	store %uintptr_t %r7287, %uintptr_t* %l_nextFun
	br label %top

L_723:
	; OW32 (SP(72): Objptr (opt_13), 0): Word32  = 0x0
	%r7288 = load %Pointer, %Pointer* %stackTop
	%r7289 = getelementptr inbounds i8, %Pointer %r7288, i32 72
	%r7290 = bitcast %Pointer %r7289 to %Objptr*
	%r7291 = load %Objptr, %Objptr* %r7290
	%r7292 = getelementptr inbounds i8, %Objptr %r7291, i32 0
	%r7293 = bitcast %Objptr %r7292 to %Word32*
	store %Word32 0, %Word32* %r7293
	; glob {index = 0, isRoot = false, ty = Objptr (opt_34, opt_33, opt_32, opt_31)}  = RP(0): Objptr (opt_34, opt_33, opt_32, opt_31)
	%r7294 = load %Objptr, %Objptr* %regP_0
	%r7295 = getelementptr inbounds [1 x %Objptr], [1 x %Objptr]* @globalObjptrNonRoot, i32 0, i32 0
	store %Objptr %r7294, %Objptr* %r7295
	; Raise
	%r7296 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7297 = getelementptr inbounds i8, %Pointer %r7296, i32 1616
	%r7298 = bitcast %Pointer %r7297 to %Pointer*
	%r7299 = load %Pointer, %Pointer* %r7298
	%r7300 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7301 = getelementptr inbounds i8, %Pointer %r7300, i32 32
	%r7302 = bitcast %Pointer %r7301 to i32*
	%r7303 = load i32, i32* %r7302
	%r7304 = getelementptr inbounds i8, %Pointer %r7299, i32 %r7303
	store %Pointer %r7304, %Pointer* %stackTop
	%r7305 = load %Pointer, %Pointer* %stackTop
	%r7306 = getelementptr inbounds i8, %Pointer %r7305, i32 -8
	%r7307 = bitcast %Pointer %r7306 to %uintptr_t*
	%r7308 = load %uintptr_t, %uintptr_t* %r7307
	store %uintptr_t %r7308, %uintptr_t* %l_nextFun
	br label %top

L_722:
	; RP(0): Objptr (opt_34, opt_33, opt_32, opt_31)  = Cast (0x3, Objptr (opt_34, opt_33, opt_32, opt_31))
	%r7309 = inttoptr %Word64 3 to %Objptr
	store %Objptr %r7309, %Objptr* %regP_0
	; Goto L_723
	br label %L_723

L_721:
	; switch {test = SW32(68): Word32, default = None, cases = ((0x0, L_722), (0x1, L_724))}
	%r7310 = load %Pointer, %Pointer* %stackTop
	%r7311 = getelementptr inbounds i8, %Pointer %r7310, i32 68
	%r7312 = bitcast %Pointer %r7311 to %Word32*
	%r7313 = load %Word32, %Word32* %r7312
	%r7314 = trunc %Word32 %r7313 to i1
	br i1 %r7314, label %L_724, label %L_722

L_720:
	; Goto L_721
	br label %L_721

loop_41:
	; RW32(3): Word32  = WordS32_rem (RW32(2): Word32, 0xA)
	%r7315 = load %Word32, %Word32* %regW32_2
	%r7316 = srem %Word32 %r7315, 10
	store %Word32 %r7316, %Word32* %regW32_3
	; RW32(4): Word32  = Word32_neg (RW32(3): Word32)
	%r7317 = load %Word32, %Word32* %regW32_3
	%r7318 = sub %Word32 0, %r7317
	store %Word32 %r7318, %Word32* %regW32_4
	; RW64(0): Word64  = WordS32_extdToWord64 (RW32(4): Word32)
	%r7319 = load %Word32, %Word32* %regW32_4
	%r7320 = sext %Word32 %r7319 to %Word64
	store %Word64 %r7320, %Word64* %regW64_0
	; RW32(5): Word32  = WordU64_lt (RW64(0): Word64, 0x10)
	%r7321 = load %Word64, %Word64* %regW64_0
	%r7323 = icmp ult %Word64 %r7321, 16
	%r7322 = zext i1 %r7323 to %Word32
	store %Word32 %r7322, %Word32* %regW32_5
	; switch {test = RW32(5): Word32, default = None, cases = ((0x0, L_720), (0x1, L_725))}
	%r7324 = load %Word32, %Word32* %regW32_5
	%r7325 = trunc %Word32 %r7324 to i1
	br i1 %r7325, label %L_725, label %L_720

L_719:
	; RW32(1): Word32  = Word32_neg (SW32(64): Word32)
	%r7326 = load %Pointer, %Pointer* %stackTop
	%r7327 = getelementptr inbounds i8, %Pointer %r7326, i32 64
	%r7328 = bitcast %Pointer %r7327 to %Word32*
	%r7329 = load %Word32, %Word32* %r7328
	%r7330 = sub %Word32 0, %r7329
	store %Word32 %r7330, %Word32* %regW32_1
	; RW32(2): Word32  = RW32(1): Word32
	%r7331 = load %Word32, %Word32* %regW32_1
	store %Word32 %r7331, %Word32* %regW32_2
	; RW32(1): Word32  = 0x20
	store %Word32 32, %Word32* %regW32_1
	; Goto loop_41
	br label %loop_41

L_718:
	; RW32(0): Word32  = WordS32_lt (SW32(64): Word32, 0x0)
	%r7332 = load %Pointer, %Pointer* %stackTop
	%r7333 = getelementptr inbounds i8, %Pointer %r7332, i32 64
	%r7334 = bitcast %Pointer %r7333 to %Word32*
	%r7335 = load %Word32, %Word32* %r7334
	%r7337 = icmp slt %Word32 %r7335, 0
	%r7336 = zext i1 %r7337 to %Word32
	store %Word32 %r7336, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_719), (0x1, L_1085))}
	%r7338 = load %Word32, %Word32* %regW32_0
	%r7339 = trunc %Word32 %r7338 to i1
	br i1 %r7339, label %L_1085, label %L_719

L_717:
	; RW32(0): Word32  = Word32_add (OW32 (<GCState>, 68): Word32, 0xFFFFFFFF)
	%r7340 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7341 = getelementptr inbounds i8, %Pointer %r7340, i32 68
	%r7342 = bitcast %Pointer %r7341 to %Word32*
	%r7343 = load %Word32, %Word32* %r7342
	%r7344 = add %Word32 %r7343, 4294967295
	store %Word32 %r7344, %Word32* %regW32_0
	; OW32 (<GCState>, 68): Word32  = RW32(0): Word32
	%r7345 = load %Word32, %Word32* %regW32_0
	%r7346 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7347 = getelementptr inbounds i8, %Pointer %r7346, i32 68
	%r7348 = bitcast %Pointer %r7347 to %Word32*
	store %Word32 %r7345, %Word32* %r7348
	; SP(16): Objptr (opt_11)  = RP(0): Objptr (opt_11)
	%r7349 = load %Objptr, %Objptr* %regP_0
	%r7350 = load %Pointer, %Pointer* %stackTop
	%r7351 = getelementptr inbounds i8, %Pointer %r7350, i32 16
	%r7352 = bitcast %Pointer %r7351 to %Objptr*
	store %Objptr %r7349, %Objptr* %r7352
	; Goto L_718
	br label %L_718

L_716:
	; OW32 (SP(72): Objptr (opt_13), 0): Word32  = 0x1
	%r7353 = load %Pointer, %Pointer* %stackTop
	%r7354 = getelementptr inbounds i8, %Pointer %r7353, i32 72
	%r7355 = bitcast %Pointer %r7354 to %Objptr*
	%r7356 = load %Objptr, %Objptr* %r7355
	%r7357 = getelementptr inbounds i8, %Objptr %r7356, i32 0
	%r7358 = bitcast %Objptr %r7357 to %Word32*
	store %Word32 1, %Word32* %r7358
	; RW32(0): Word32  = OW32 (<GCState>, 68): Word32
	%r7359 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7360 = getelementptr inbounds i8, %Pointer %r7359, i32 68
	%r7361 = bitcast %Pointer %r7360 to %Word32*
	%r7362 = load %Word32, %Word32* %r7361
	store %Word32 %r7362, %Word32* %regW32_0
	; RW32(1): Word32  = Word32_equal (RW32(0): Word32, 0x0)
	%r7363 = load %Word32, %Word32* %regW32_0
	%r7365 = icmp eq %Word32 %r7363, 0
	%r7364 = zext i1 %r7365 to %Word32
	store %Word32 %r7364, %Word32* %regW32_1
	; switch {test = RW32(1): Word32, default = None, cases = ((0x0, L_717), (0x1, L_1086))}
	%r7366 = load %Word32, %Word32* %regW32_1
	%r7367 = trunc %Word32 %r7366 to i1
	br i1 %r7367, label %L_1086, label %L_717

L_715:
	; RP(0): Objptr (opt_11)  = OP (SP(16): Objptr (opt_25), 8): Objptr (opt_11)
	%r7368 = load %Pointer, %Pointer* %stackTop
	%r7369 = getelementptr inbounds i8, %Pointer %r7368, i32 16
	%r7370 = bitcast %Pointer %r7369 to %Objptr*
	%r7371 = load %Objptr, %Objptr* %r7370
	%r7372 = getelementptr inbounds i8, %Objptr %r7371, i32 8
	%r7373 = bitcast %Objptr %r7372 to %Objptr*
	%r7374 = load %Objptr, %Objptr* %r7373
	store %Objptr %r7374, %Objptr* %regP_0
	; SP(72): Objptr (opt_13)  = OP (SP(16): Objptr (opt_25), 0): Objptr (opt_13)
	%r7375 = load %Pointer, %Pointer* %stackTop
	%r7376 = getelementptr inbounds i8, %Pointer %r7375, i32 16
	%r7377 = bitcast %Pointer %r7376 to %Objptr*
	%r7378 = load %Objptr, %Objptr* %r7377
	%r7379 = getelementptr inbounds i8, %Objptr %r7378, i32 0
	%r7380 = bitcast %Objptr %r7379 to %Objptr*
	%r7381 = load %Objptr, %Objptr* %r7380
	%r7382 = load %Pointer, %Pointer* %stackTop
	%r7383 = getelementptr inbounds i8, %Pointer %r7382, i32 72
	%r7384 = bitcast %Pointer %r7383 to %Objptr*
	store %Objptr %r7381, %Objptr* %r7384
	; RW32(0): Word32  = Word32_add (OW32 (<GCState>, 68): Word32, 0x1)
	%r7385 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7386 = getelementptr inbounds i8, %Pointer %r7385, i32 68
	%r7387 = bitcast %Pointer %r7386 to %Word32*
	%r7388 = load %Word32, %Word32* %r7387
	%r7389 = add %Word32 %r7388, 1
	store %Word32 %r7389, %Word32* %regW32_0
	; OW32 (<GCState>, 68): Word32  = RW32(0): Word32
	%r7390 = load %Word32, %Word32* %regW32_0
	%r7391 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7392 = getelementptr inbounds i8, %Pointer %r7391, i32 68
	%r7393 = bitcast %Pointer %r7392 to %Word32*
	store %Word32 %r7390, %Word32* %r7393
	; SW32(68): Word32  = OW32 (SP(72): Objptr (opt_13), 0): Word32
	%r7394 = load %Pointer, %Pointer* %stackTop
	%r7395 = getelementptr inbounds i8, %Pointer %r7394, i32 72
	%r7396 = bitcast %Pointer %r7395 to %Objptr*
	%r7397 = load %Objptr, %Objptr* %r7396
	%r7398 = getelementptr inbounds i8, %Objptr %r7397, i32 0
	%r7399 = bitcast %Objptr %r7398 to %Word32*
	%r7400 = load %Word32, %Word32* %r7399
	%r7401 = load %Pointer, %Pointer* %stackTop
	%r7402 = getelementptr inbounds i8, %Pointer %r7401, i32 68
	%r7403 = bitcast %Pointer %r7402 to %Word32*
	store %Word32 %r7400, %Word32* %r7403
	; switch {test = SW32(68): Word32, default = None, cases = ((0x0, L_716), (0x1, L_1088))}
	%r7404 = load %Pointer, %Pointer* %stackTop
	%r7405 = getelementptr inbounds i8, %Pointer %r7404, i32 68
	%r7406 = bitcast %Pointer %r7405 to %Word32*
	%r7407 = load %Word32, %Word32* %r7406
	%r7408 = trunc %Word32 %r7407 to i1
	br i1 %r7408, label %L_1088, label %L_716

L_714:
	; SP(0): Objptr (opt_3)  = glob {index = 135, isRoot = true, ty = Objptr (opt_3)}
	%r7409 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 135
	%r7410 = load %Objptr, %Objptr* %r7409
	%r7411 = load %Pointer, %Pointer* %stackTop
	%r7412 = getelementptr inbounds i8, %Pointer %r7411, i32 0
	%r7413 = bitcast %Pointer %r7412 to %Objptr*
	store %Objptr %r7410, %Objptr* %r7413
	; SW32(64): Word32  = RW32(0): Word32
	%r7414 = load %Word32, %Word32* %regW32_0
	%r7415 = load %Pointer, %Pointer* %stackTop
	%r7416 = getelementptr inbounds i8, %Pointer %r7415, i32 64
	%r7417 = bitcast %Pointer %r7416 to %Word32*
	store %Word32 %r7414, %Word32* %r7417
	; Goto L_715
	br label %L_715

L_713:
	; RW32(1): Word32  = WordS32_lt (RW32(0): Word32, 0x0)
	%r7418 = load %Word32, %Word32* %regW32_0
	%r7420 = icmp slt %Word32 %r7418, 0
	%r7419 = zext i1 %r7420 to %Word32
	store %Word32 %r7419, %Word32* %regW32_1
	; switch {test = RW32(1): Word32, default = None, cases = ((0x0, L_714), (0x1, L_1094))}
	%r7421 = load %Word32, %Word32* %regW32_1
	%r7422 = trunc %Word32 %r7421 to i1
	br i1 %r7422, label %L_1094, label %L_714

L_712:
	; glob {index = 0, isRoot = false, ty = Objptr (opt_34, opt_33, opt_32, opt_31)}  = Cast (0x1, Objptr (opt_34, opt_33, opt_32, opt_31))
	%r7423 = inttoptr %Word64 1 to %Objptr
	%r7424 = getelementptr inbounds [1 x %Objptr], [1 x %Objptr]* @globalObjptrNonRoot, i32 0, i32 0
	store %Objptr %r7423, %Objptr* %r7424
	; Raise
	%r7425 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7426 = getelementptr inbounds i8, %Pointer %r7425, i32 1616
	%r7427 = bitcast %Pointer %r7426 to %Pointer*
	%r7428 = load %Pointer, %Pointer* %r7427
	%r7429 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7430 = getelementptr inbounds i8, %Pointer %r7429, i32 32
	%r7431 = bitcast %Pointer %r7430 to i32*
	%r7432 = load i32, i32* %r7431
	%r7433 = getelementptr inbounds i8, %Pointer %r7428, i32 %r7432
	store %Pointer %r7433, %Pointer* %stackTop
	%r7434 = load %Pointer, %Pointer* %stackTop
	%r7435 = getelementptr inbounds i8, %Pointer %r7434, i32 -8
	%r7436 = bitcast %Pointer %r7435 to %uintptr_t*
	%r7437 = load %uintptr_t, %uintptr_t* %r7436
	store %uintptr_t %r7437, %uintptr_t* %l_nextFun
	br label %top

L_711:
	; Push(-72)
	%r7438 = load %Pointer, %Pointer* %stackTop
	%r7439 = getelementptr inbounds i8, %Pointer %r7438, i32 -72
	store %Pointer %r7439, %Pointer* %stackTop
	; SP(8): Objptr (opt_3)  = SP(72): Objptr (opt_3)
	%r7440 = load %Pointer, %Pointer* %stackTop
	%r7441 = getelementptr inbounds i8, %Pointer %r7440, i32 72
	%r7442 = bitcast %Pointer %r7441 to %Objptr*
	%r7443 = load %Objptr, %Objptr* %r7442
	%r7444 = load %Pointer, %Pointer* %stackTop
	%r7445 = getelementptr inbounds i8, %Pointer %r7444, i32 8
	%r7446 = bitcast %Pointer %r7445 to %Objptr*
	store %Objptr %r7443, %Objptr* %r7446
	; Arith {prim = WordS32_subCheck, args = (SW32(0): Word32, 0x1), dst = RW32(0): Word32, overflow = L_712, success = L_713}
	%r7447 = load %Pointer, %Pointer* %stackTop
	%r7448 = getelementptr inbounds i8, %Pointer %r7447, i32 0
	%r7449 = bitcast %Pointer %r7448 to %Word32*
	%r7450 = load %Word32, %Word32* %r7449
	%r7451 = call {%Word32, i1} @llvm.ssub.with.overflow.i32(%Word32 %r7450, %Word32 1)
	%r7452 = extractvalue {%Word32, i1} %r7451, 0
	%r7453 = extractvalue {%Word32, i1} %r7451, 1
	store %Word32 %r7452, %Word32* %regW32_0
	br i1 %r7453, label %L_712, label %L_713

L_710:
	; OW64 (SP(64): Objptr (opt_11), ~8): Word64  = 0x7
	%r7454 = load %Pointer, %Pointer* %stackTop
	%r7455 = getelementptr inbounds i8, %Pointer %r7454, i32 64
	%r7456 = bitcast %Pointer %r7455 to %Objptr*
	%r7457 = load %Objptr, %Objptr* %r7456
	%r7458 = getelementptr inbounds i8, %Objptr %r7457, i32 -8
	%r7459 = bitcast %Objptr %r7458 to %Word64*
	store %Word64 7, %Word64* %r7459
	; CW64 (<Frontier>)  = 0x57
	%r7460 = load %Pointer, %Pointer* %frontier
	%r7461 = bitcast %Pointer %r7460 to %Word64*
	store %Word64 87, %Word64* %r7461
	; RQ(53): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r7462 = load %Pointer, %Pointer* %frontier
	%r7464 = ptrtoint %Pointer %r7462 to %uintptr_t
	%r7465 = add %uintptr_t %r7464, 8
	%r7463 = inttoptr %uintptr_t %r7465 to %Pointer
	store %CPointer %r7463, %CPointer* %regQ_53
	; RP(0): Objptr (opt_43)  = Cast (RQ(53): CPointer, Objptr (opt_43))
	%r7466 = load %CPointer, %CPointer* %regQ_53
	%r7467 = bitcast %CPointer %r7466 to %Objptr
	store %Objptr %r7467, %Objptr* %regP_0
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r7468 = load %Pointer, %Pointer* %frontier
	%r7470 = ptrtoint %Pointer %r7468 to %uintptr_t
	%r7471 = add %uintptr_t %r7470, 24
	%r7469 = inttoptr %uintptr_t %r7471 to %Pointer
	store %Pointer %r7469, %Pointer* %frontier
	; OP (RP(0): Objptr (opt_43), 0): Objptr (opt_3)  = Cast (SP(64): Objptr (opt_11), Objptr (opt_3))
	%r7472 = load %Pointer, %Pointer* %stackTop
	%r7473 = getelementptr inbounds i8, %Pointer %r7472, i32 64
	%r7474 = bitcast %Pointer %r7473 to %Objptr*
	%r7475 = load %Objptr, %Objptr* %r7474
	%r7476 = bitcast %Objptr %r7475 to %Objptr
	%r7477 = load %Objptr, %Objptr* %regP_0
	%r7478 = getelementptr inbounds i8, %Objptr %r7477, i32 0
	%r7479 = bitcast %Objptr %r7478 to %Objptr*
	store %Objptr %r7476, %Objptr* %r7479
	; OP (RP(0): Objptr (opt_43), 8): Objptr (opt_43)  = Cast (0x1, Objptr (opt_43))
	%r7480 = inttoptr %Word64 1 to %Objptr
	%r7481 = load %Objptr, %Objptr* %regP_0
	%r7482 = getelementptr inbounds i8, %Objptr %r7481, i32 8
	%r7483 = bitcast %Objptr %r7482 to %Objptr*
	store %Objptr %r7480, %Objptr* %r7483
	; CW64 (<Frontier>)  = 0x57
	%r7484 = load %Pointer, %Pointer* %frontier
	%r7485 = bitcast %Pointer %r7484 to %Word64*
	store %Word64 87, %Word64* %r7485
	; RQ(52): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r7486 = load %Pointer, %Pointer* %frontier
	%r7488 = ptrtoint %Pointer %r7486 to %uintptr_t
	%r7489 = add %uintptr_t %r7488, 8
	%r7487 = inttoptr %uintptr_t %r7489 to %Pointer
	store %CPointer %r7487, %CPointer* %regQ_52
	; RP(1): Objptr (opt_43)  = Cast (RQ(52): CPointer, Objptr (opt_43))
	%r7490 = load %CPointer, %CPointer* %regQ_52
	%r7491 = bitcast %CPointer %r7490 to %Objptr
	store %Objptr %r7491, %Objptr* %regP_1
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r7492 = load %Pointer, %Pointer* %frontier
	%r7494 = ptrtoint %Pointer %r7492 to %uintptr_t
	%r7495 = add %uintptr_t %r7494, 24
	%r7493 = inttoptr %uintptr_t %r7495 to %Pointer
	store %Pointer %r7493, %Pointer* %frontier
	; OP (RP(1): Objptr (opt_43), 0): Objptr (opt_3)  = glob {index = 136, isRoot = true, ty = Objptr (opt_3)}
	%r7496 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 136
	%r7497 = load %Objptr, %Objptr* %r7496
	%r7498 = load %Objptr, %Objptr* %regP_1
	%r7499 = getelementptr inbounds i8, %Objptr %r7498, i32 0
	%r7500 = bitcast %Objptr %r7499 to %Objptr*
	store %Objptr %r7497, %Objptr* %r7500
	; OP (RP(1): Objptr (opt_43), 8): Objptr (opt_43)  = RP(0): Objptr (opt_43)
	%r7501 = load %Objptr, %Objptr* %regP_0
	%r7502 = load %Objptr, %Objptr* %regP_1
	%r7503 = getelementptr inbounds i8, %Objptr %r7502, i32 8
	%r7504 = bitcast %Objptr %r7503 to %Objptr*
	store %Objptr %r7501, %Objptr* %r7504
	; SP(72): Objptr (opt_43)  = RP(1): Objptr (opt_43)
	%r7505 = load %Objptr, %Objptr* %regP_1
	%r7506 = load %Pointer, %Pointer* %stackTop
	%r7507 = getelementptr inbounds i8, %Pointer %r7506, i32 72
	%r7508 = bitcast %Pointer %r7507 to %Objptr*
	store %Objptr %r7505, %Objptr* %r7508
	%r7509 = load %Pointer, %Pointer* %stackTop
	%r7510 = getelementptr inbounds i8, %Pointer %r7509, i32 64
	%r7511 = bitcast %Pointer %r7510 to %uintptr_t*
	store %uintptr_t 105, %uintptr_t* %r7511
	; Push(72)
	%r7512 = load %Pointer, %Pointer* %stackTop
	%r7513 = getelementptr inbounds i8, %Pointer %r7512, i32 72
	store %Pointer %r7513, %Pointer* %stackTop
	br label %concat_0

L_709:
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r7514 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7515 = getelementptr inbounds i8, %Pointer %r7514, i32 8
	%r7516 = bitcast %Pointer %r7515 to %CPointer*
	%r7517 = load %CPointer, %CPointer* %r7516
	%r7518 = load %Pointer, %Pointer* %frontier
	%r7520 = icmp ult %Pointer %r7517, %r7518
	%r7519 = zext i1 %r7520 to %Word32
	store %Word32 %r7519, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_710), (0x1, L_1096))}
	%r7521 = load %Word32, %Word32* %regW32_0
	%r7522 = trunc %Word32 %r7521 to i1
	br i1 %r7522, label %L_1096, label %L_710

loop_40:
	; RW32(0): Word32  = WordS64_lt (RW64(0): Word64, 0xB)
	%r7523 = load %Word64, %Word64* %regW64_0
	%r7525 = icmp slt %Word64 %r7523, 11
	%r7524 = zext i1 %r7525 to %Word32
	store %Word32 %r7524, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_709), (0x1, L_1098))}
	%r7526 = load %Word32, %Word32* %regW32_0
	%r7527 = trunc %Word32 %r7526 to i1
	br i1 %r7527, label %L_1098, label %L_709

L_708:
	; Push(-72)
	%r7528 = load %Pointer, %Pointer* %stackTop
	%r7529 = getelementptr inbounds i8, %Pointer %r7528, i32 -72
	store %Pointer %r7529, %Pointer* %stackTop
	%r7531 = load %Pointer, %Pointer* %stackTop
	%r7532 = getelementptr inbounds i8, %Pointer %r7531, i32 64
	%r7533 = bitcast %Pointer %r7532 to %Objptr*
	%r7530 = load %Objptr, %Objptr* @CReturnP
	store %Objptr %r7530, %Objptr* %r7533
	; RW64(0): Word64  = 0x0
	store %Word64 0, %Word64* %regW64_0
	; Goto loop_40
	br label %loop_40

L_707:
	; OW64 (SP(56): Objptr (opt_11), ~8): Word64  = 0x7
	%r7534 = load %Pointer, %Pointer* %stackTop
	%r7535 = getelementptr inbounds i8, %Pointer %r7534, i32 56
	%r7536 = bitcast %Pointer %r7535 to %Objptr*
	%r7537 = load %Objptr, %Objptr* %r7536
	%r7538 = getelementptr inbounds i8, %Objptr %r7537, i32 -8
	%r7539 = bitcast %Objptr %r7538 to %Word64*
	store %Word64 7, %Word64* %r7539
	; CCall {args = (<GCState>, 0x0, 0xB, 0x17), frameInfo = Some {frameLayoutsIndex = 104}, func = {args = (GCState, Word64, Word64, Word64), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int64, Word64), res = Some Objptr}, return = Objptr (opt_11), symbolScope = private, target = GC_arrayAllocate}, return = Some L_708}
	; GetOperands
	%r7540 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7541 = load %Pointer, %Pointer* %stackTop
	%r7542 = getelementptr inbounds i8, %Pointer %r7541, i32 64
	%r7543 = bitcast %Pointer %r7542 to %uintptr_t*
	store %uintptr_t 104, %uintptr_t* %r7543
	; Push(72)
	%r7544 = load %Pointer, %Pointer* %stackTop
	%r7545 = getelementptr inbounds i8, %Pointer %r7544, i32 72
	store %Pointer %r7545, %Pointer* %stackTop
	; FlushFrontier
	%r7546 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7547 = getelementptr inbounds i8, %Pointer %r7546, i32 0
	%r7548 = bitcast %Pointer %r7547 to %Pointer*
	%r7549 = load %Pointer, %Pointer* %frontier
	store %Pointer %r7549, %Pointer* %r7548
	; FlushStackTop
	%r7550 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7551 = getelementptr inbounds i8, %Pointer %r7550, i32 16
	%r7552 = bitcast %Pointer %r7551 to %Pointer*
	%r7553 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r7553, %Pointer* %r7552
	; Call
	%r7554 = call %Objptr @GC_arrayAllocate(%Pointer %r7540, %Word64 0, %Word64 11, %Word64 23)
	store %Objptr %r7554, %Objptr* @CReturnP
	; CacheFrontier
	%r7555 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7556 = getelementptr inbounds i8, %Pointer %r7555, i32 0
	%r7557 = bitcast %Pointer %r7556 to %Pointer*
	%r7558 = load %Pointer, %Pointer* %r7557
	store %Pointer %r7558, %Pointer* %frontier
	; CacheStackTop
	%r7559 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7560 = getelementptr inbounds i8, %Pointer %r7559, i32 16
	%r7561 = bitcast %Pointer %r7560 to %Pointer*
	%r7562 = load %Pointer, %Pointer* %r7561
	store %Pointer %r7562, %Pointer* %stackTop
	br label %L_708

loop_39:
	; RW32(0): Word32  = WordS64_lt (RW64(0): Word64, 0x1)
	%r7563 = load %Word64, %Word64* %regW64_0
	%r7565 = icmp slt %Word64 %r7563, 1
	%r7564 = zext i1 %r7565 to %Word32
	store %Word32 %r7564, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_707), (0x1, L_1103))}
	%r7566 = load %Word32, %Word32* %regW32_0
	%r7567 = trunc %Word32 %r7566 to i1
	br i1 %r7567, label %L_1103, label %L_707

L_706:
	; Push(-64)
	%r7568 = load %Pointer, %Pointer* %stackTop
	%r7569 = getelementptr inbounds i8, %Pointer %r7568, i32 -64
	store %Pointer %r7569, %Pointer* %stackTop
	%r7571 = load %Pointer, %Pointer* %stackTop
	%r7572 = getelementptr inbounds i8, %Pointer %r7571, i32 56
	%r7573 = bitcast %Pointer %r7572 to %Objptr*
	%r7570 = load %Objptr, %Objptr* @CReturnP
	store %Objptr %r7570, %Objptr* %r7573
	; RW64(0): Word64  = 0x0
	store %Word64 0, %Word64* %regW64_0
	; Goto loop_39
	br label %loop_39

L_705:
	; CCall {args = (<GCState>, 0x0, 0x1, 0x17), frameInfo = Some {frameLayoutsIndex = 103}, func = {args = (GCState, Word64, Word64, Word64), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int64, Word64), res = Some Objptr}, return = Objptr (opt_11), symbolScope = private, target = GC_arrayAllocate}, return = Some L_706}
	; GetOperands
	%r7574 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7575 = load %Pointer, %Pointer* %stackTop
	%r7576 = getelementptr inbounds i8, %Pointer %r7575, i32 56
	%r7577 = bitcast %Pointer %r7576 to %uintptr_t*
	store %uintptr_t 103, %uintptr_t* %r7577
	; Push(64)
	%r7578 = load %Pointer, %Pointer* %stackTop
	%r7579 = getelementptr inbounds i8, %Pointer %r7578, i32 64
	store %Pointer %r7579, %Pointer* %stackTop
	; FlushFrontier
	%r7580 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7581 = getelementptr inbounds i8, %Pointer %r7580, i32 0
	%r7582 = bitcast %Pointer %r7581 to %Pointer*
	%r7583 = load %Pointer, %Pointer* %frontier
	store %Pointer %r7583, %Pointer* %r7582
	; FlushStackTop
	%r7584 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7585 = getelementptr inbounds i8, %Pointer %r7584, i32 16
	%r7586 = bitcast %Pointer %r7585 to %Pointer*
	%r7587 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r7587, %Pointer* %r7586
	; Call
	%r7588 = call %Objptr @GC_arrayAllocate(%Pointer %r7574, %Word64 0, %Word64 1, %Word64 23)
	store %Objptr %r7588, %Objptr* @CReturnP
	; CacheFrontier
	%r7589 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7590 = getelementptr inbounds i8, %Pointer %r7589, i32 0
	%r7591 = bitcast %Pointer %r7590 to %Pointer*
	%r7592 = load %Pointer, %Pointer* %r7591
	store %Pointer %r7592, %Pointer* %frontier
	; CacheStackTop
	%r7593 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7594 = getelementptr inbounds i8, %Pointer %r7593, i32 16
	%r7595 = bitcast %Pointer %r7594 to %Pointer*
	%r7596 = load %Pointer, %Pointer* %r7595
	store %Pointer %r7596, %Pointer* %stackTop
	br label %L_706

L_704:
	; RW32(0): Word32  = Word32_add (SW32(4): Word32, 0x1)
	%r7597 = load %Pointer, %Pointer* %stackTop
	%r7598 = getelementptr inbounds i8, %Pointer %r7597, i32 4
	%r7599 = bitcast %Pointer %r7598 to %Word32*
	%r7600 = load %Word32, %Word32* %r7599
	%r7601 = add %Word32 %r7600, 1
	store %Word32 %r7601, %Word32* %regW32_0
	; SW32(4): Word32  = RW32(0): Word32
	%r7602 = load %Word32, %Word32* %regW32_0
	%r7603 = load %Pointer, %Pointer* %stackTop
	%r7604 = getelementptr inbounds i8, %Pointer %r7603, i32 4
	%r7605 = bitcast %Pointer %r7604 to %Word32*
	store %Word32 %r7602, %Word32* %r7605
	; Goto loop_38
	br label %loop_38

loop_38:
	; SQ(8): CPointer  = CPointer_fromWord (RW64(0): Word64)
	%r7606 = load %Word64, %Word64* %regW64_0
	%r7607 = inttoptr %uintptr_t %r7606 to %Pointer
	%r7608 = load %Pointer, %Pointer* %stackTop
	%r7609 = getelementptr inbounds i8, %Pointer %r7608, i32 8
	%r7610 = bitcast %Pointer %r7609 to %CPointer*
	store %CPointer %r7607, %CPointer* %r7610
	; RW64(1): Word64  = WordS32_extdToWord64 (SW32(4): Word32)
	%r7611 = load %Pointer, %Pointer* %stackTop
	%r7612 = getelementptr inbounds i8, %Pointer %r7611, i32 4
	%r7613 = bitcast %Pointer %r7612 to %Word32*
	%r7614 = load %Word32, %Word32* %r7613
	%r7615 = sext %Word32 %r7614 to %Word64
	store %Word64 %r7615, %Word64* %regW64_1
	; RW8(0): Word8  = XW8 (SQ(8): CPointer, RW64(1): Word64, 1, 0): Word8
	%r7616 = load %Pointer, %Pointer* %stackTop
	%r7617 = getelementptr inbounds i8, %Pointer %r7616, i32 8
	%r7618 = bitcast %Pointer %r7617 to %CPointer*
	%r7619 = load %CPointer, %CPointer* %r7618
	%r7620 = load %Word64, %Word64* %regW64_1
	%r7621 = mul nsw %Word64 %r7620, 1
	%r7622 = add nsw %Word64 %r7621, 0
	%r7623 = getelementptr inbounds i8, %CPointer %r7619, %Word64 %r7622
	%r7624 = bitcast %CPointer %r7623 to %Word8*
	%r7625 = load %Word8, %Word8* %r7624
	store %Word8 %r7625, %Word8* %regW8_0
	; switch {test = RW8(0): Word8, default = Some L_704, cases = ((0x0, L_705))}
	%r7626 = load %Word8, %Word8* %regW8_0
	switch %Word8 %r7626, label %L_704 [
		%Word8 0, label %L_705
	]

L_703:
	; SW32(4): Word32  = 0x0
	%r7627 = load %Pointer, %Pointer* %stackTop
	%r7628 = getelementptr inbounds i8, %Pointer %r7627, i32 4
	%r7629 = bitcast %Pointer %r7628 to %Word32*
	store %Word32 0, %Word32* %r7629
	; Goto loop_38
	br label %loop_38

L_702:
	; OW32 (SP(8): Objptr (opt_13), 0): Word32  = 0x0
	%r7630 = load %Pointer, %Pointer* %stackTop
	%r7631 = getelementptr inbounds i8, %Pointer %r7630, i32 8
	%r7632 = bitcast %Pointer %r7631 to %Objptr*
	%r7633 = load %Objptr, %Objptr* %r7632
	%r7634 = getelementptr inbounds i8, %Objptr %r7633, i32 0
	%r7635 = bitcast %Objptr %r7634 to %Word32*
	store %Word32 0, %Word32* %r7635
	; Goto L_703
	br label %L_703

L_701:
	%r7636 = load %Word64, %Word64* @CReturnW64
	store %Word64 %r7636, %Word64* %regW64_0
	; SW32(0): Word32  = OW32 (RP(0): Objptr (opt_10), 0): Word32
	%r7637 = load %Objptr, %Objptr* %regP_0
	%r7638 = getelementptr inbounds i8, %Objptr %r7637, i32 0
	%r7639 = bitcast %Objptr %r7638 to %Word32*
	%r7640 = load %Word32, %Word32* %r7639
	%r7641 = load %Pointer, %Pointer* %stackTop
	%r7642 = getelementptr inbounds i8, %Pointer %r7641, i32 0
	%r7643 = bitcast %Pointer %r7642 to %Word32*
	store %Word32 %r7640, %Word32* %r7643
	; switch {test = RW32(2): Word32, default = None, cases = ((0x0, L_702), (0x1, L_1104))}
	%r7644 = load %Word32, %Word32* %regW32_2
	%r7645 = trunc %Word32 %r7644 to i1
	br i1 %r7645, label %L_1104, label %L_702

L_700:
	; CCall {args = (SR64(0): Real64, 0x2, 0xC, RW32(0): Word32, RP(0): Objptr (opt_10)), frameInfo = None, func = {args = (Real64, Word32, Word32, Word32, Objptr (opt_10)), convention = cdecl, kind = Impure, prototype = {args = (Real64, Int32, Int32, Int32, Objptr), res = Some Word64}, return = Word64, symbolScope = private, target = Real64_gdtoa}, return = Some L_701}
	; GetOperands
	%r7646 = load %Pointer, %Pointer* %stackTop
	%r7647 = getelementptr inbounds i8, %Pointer %r7646, i32 0
	%r7648 = bitcast %Pointer %r7647 to %Real64*
	%r7649 = load %Real64, %Real64* %r7648
	%r7650 = load %Word32, %Word32* %regW32_0
	%r7651 = load %Objptr, %Objptr* %regP_0
	; Call
	%r7652 = call %Word64 @Real64_gdtoa(%Real64 %r7649, %Word32 2, %Word32 12, %Word32 %r7650, %Objptr %r7651)
	store %Word64 %r7652, %Word64* @CReturnW64
	br label %L_701

L_699:
	; RW32(1): Word32  = Word32_add (OW32 (<GCState>, 68): Word32, 0xFFFFFFFF)
	%r7653 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7654 = getelementptr inbounds i8, %Pointer %r7653, i32 68
	%r7655 = bitcast %Pointer %r7654 to %Word32*
	%r7656 = load %Word32, %Word32* %r7655
	%r7657 = add %Word32 %r7656, 4294967295
	store %Word32 %r7657, %Word32* %regW32_1
	; OW32 (<GCState>, 68): Word32  = RW32(1): Word32
	%r7658 = load %Word32, %Word32* %regW32_1
	%r7659 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7660 = getelementptr inbounds i8, %Pointer %r7659, i32 68
	%r7661 = bitcast %Pointer %r7660 to %Word32*
	store %Word32 %r7658, %Word32* %r7661
	; RP(0): Objptr (opt_10)  = glob {index = 11, isRoot = true, ty = Objptr (opt_10)}
	%r7662 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 11
	%r7663 = load %Objptr, %Objptr* %r7662
	store %Objptr %r7663, %Objptr* %regP_0
	; Goto L_700
	br label %L_700

L_698:
	; OW32 (SP(8): Objptr (opt_13), 0): Word32  = 0x1
	%r7664 = load %Pointer, %Pointer* %stackTop
	%r7665 = getelementptr inbounds i8, %Pointer %r7664, i32 8
	%r7666 = bitcast %Pointer %r7665 to %Objptr*
	%r7667 = load %Objptr, %Objptr* %r7666
	%r7668 = getelementptr inbounds i8, %Objptr %r7667, i32 0
	%r7669 = bitcast %Objptr %r7668 to %Word32*
	store %Word32 1, %Word32* %r7669
	; RW32(1): Word32  = OW32 (<GCState>, 68): Word32
	%r7670 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7671 = getelementptr inbounds i8, %Pointer %r7670, i32 68
	%r7672 = bitcast %Pointer %r7671 to %Word32*
	%r7673 = load %Word32, %Word32* %r7672
	store %Word32 %r7673, %Word32* %regW32_1
	; RW32(3): Word32  = Word32_equal (RW32(1): Word32, 0x0)
	%r7674 = load %Word32, %Word32* %regW32_1
	%r7676 = icmp eq %Word32 %r7674, 0
	%r7675 = zext i1 %r7676 to %Word32
	store %Word32 %r7675, %Word32* %regW32_3
	; switch {test = RW32(3): Word32, default = None, cases = ((0x0, L_699), (0x1, L_1105))}
	%r7677 = load %Word32, %Word32* %regW32_3
	%r7678 = trunc %Word32 %r7677 to i1
	br i1 %r7678, label %L_1105, label %L_699

L_697:
	; RW32(1): Word32  = Word32_add (OW32 (<GCState>, 68): Word32, 0x1)
	%r7679 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7680 = getelementptr inbounds i8, %Pointer %r7679, i32 68
	%r7681 = bitcast %Pointer %r7680 to %Word32*
	%r7682 = load %Word32, %Word32* %r7681
	%r7683 = add %Word32 %r7682, 1
	store %Word32 %r7683, %Word32* %regW32_1
	; OW32 (<GCState>, 68): Word32  = RW32(1): Word32
	%r7684 = load %Word32, %Word32* %regW32_1
	%r7685 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7686 = getelementptr inbounds i8, %Pointer %r7685, i32 68
	%r7687 = bitcast %Pointer %r7686 to %Word32*
	store %Word32 %r7684, %Word32* %r7687
	; RW32(2): Word32  = OW32 (SP(8): Objptr (opt_13), 0): Word32
	%r7688 = load %Pointer, %Pointer* %stackTop
	%r7689 = getelementptr inbounds i8, %Pointer %r7688, i32 8
	%r7690 = bitcast %Pointer %r7689 to %Objptr*
	%r7691 = load %Objptr, %Objptr* %r7690
	%r7692 = getelementptr inbounds i8, %Objptr %r7691, i32 0
	%r7693 = bitcast %Objptr %r7692 to %Word32*
	%r7694 = load %Word32, %Word32* %r7693
	store %Word32 %r7694, %Word32* %regW32_2
	; switch {test = RW32(2): Word32, default = None, cases = ((0x0, L_698), (0x1, L_1106))}
	%r7695 = load %Word32, %Word32* %regW32_2
	%r7696 = trunc %Word32 %r7695 to i1
	br i1 %r7696, label %L_1106, label %L_698

L_696:
	; RW32(0): Word32  = 0x0
	store %Word32 0, %Word32* %regW32_0
	; Goto L_697
	br label %L_697

L_695:
	; glob {index = 0, isRoot = false, ty = Objptr (opt_34, opt_33, opt_32, opt_31)}  = Cast (glob {index = 12, isRoot = true, ty = Objptr (opt_32)}, Objptr (opt_34, opt_33, opt_32, opt_31))
	%r7697 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 12
	%r7698 = load %Objptr, %Objptr* %r7697
	%r7699 = bitcast %Objptr %r7698 to %Objptr
	%r7700 = getelementptr inbounds [1 x %Objptr], [1 x %Objptr]* @globalObjptrNonRoot, i32 0, i32 0
	store %Objptr %r7699, %Objptr* %r7700
	; Raise
	%r7701 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7702 = getelementptr inbounds i8, %Pointer %r7701, i32 1616
	%r7703 = bitcast %Pointer %r7702 to %Pointer*
	%r7704 = load %Pointer, %Pointer* %r7703
	%r7705 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7706 = getelementptr inbounds i8, %Pointer %r7705, i32 32
	%r7707 = bitcast %Pointer %r7706 to i32*
	%r7708 = load i32, i32* %r7707
	%r7709 = getelementptr inbounds i8, %Pointer %r7704, i32 %r7708
	store %Pointer %r7709, %Pointer* %stackTop
	%r7710 = load %Pointer, %Pointer* %stackTop
	%r7711 = getelementptr inbounds i8, %Pointer %r7710, i32 -8
	%r7712 = bitcast %Pointer %r7711 to %uintptr_t*
	%r7713 = load %uintptr_t, %uintptr_t* %r7712
	store %uintptr_t %r7713, %uintptr_t* %l_nextFun
	br label %top

L_694:
	; RW32(1): Word32  = Word32_equal (RW32(0): Word32, 0xC00)
	%r7714 = load %Word32, %Word32* %regW32_0
	%r7716 = icmp eq %Word32 %r7714, 3072
	%r7715 = zext i1 %r7716 to %Word32
	store %Word32 %r7715, %Word32* %regW32_1
	; switch {test = RW32(1): Word32, default = None, cases = ((0x0, L_695), (0x1, L_696))}
	%r7717 = load %Word32, %Word32* %regW32_1
	%r7718 = trunc %Word32 %r7717 to i1
	br i1 %r7718, label %L_696, label %L_695

L_693:
	; RW32(1): Word32  = Word32_equal (RW32(0): Word32, 0x800)
	%r7719 = load %Word32, %Word32* %regW32_0
	%r7721 = icmp eq %Word32 %r7719, 2048
	%r7720 = zext i1 %r7721 to %Word32
	store %Word32 %r7720, %Word32* %regW32_1
	; switch {test = RW32(1): Word32, default = None, cases = ((0x0, L_694), (0x1, L_1109))}
	%r7722 = load %Word32, %Word32* %regW32_1
	%r7723 = trunc %Word32 %r7722 to i1
	br i1 %r7723, label %L_1109, label %L_694

L_692:
	; RW32(1): Word32  = Word32_equal (RW32(0): Word32, 0x400)
	%r7724 = load %Word32, %Word32* %regW32_0
	%r7726 = icmp eq %Word32 %r7724, 1024
	%r7725 = zext i1 %r7726 to %Word32
	store %Word32 %r7725, %Word32* %regW32_1
	; switch {test = RW32(1): Word32, default = None, cases = ((0x0, L_693), (0x1, L_1110))}
	%r7727 = load %Word32, %Word32* %regW32_1
	%r7728 = trunc %Word32 %r7727 to i1
	br i1 %r7728, label %L_1110, label %L_693

L_691:
	%r7729 = load %Word32, %Word32* @CReturnW32
	store %Word32 %r7729, %Word32* %regW32_0
	; RW32(1): Word32  = Word32_equal (RW32(0): Word32, 0x0)
	%r7730 = load %Word32, %Word32* %regW32_0
	%r7732 = icmp eq %Word32 %r7730, 0
	%r7731 = zext i1 %r7732 to %Word32
	store %Word32 %r7731, %Word32* %regW32_1
	; switch {test = RW32(1): Word32, default = None, cases = ((0x0, L_692), (0x1, L_1111))}
	%r7733 = load %Word32, %Word32* %regW32_1
	%r7734 = trunc %Word32 %r7733 to i1
	br i1 %r7734, label %L_1111, label %L_692

L_690:
	; CCall {args = (), frameInfo = None, func = {args = (), convention = cdecl, kind = Impure, prototype = {args = (), res = Some Int32}, return = Word32, symbolScope = private, target = IEEEReal_getRoundingMode}, return = Some L_691}
	; GetOperands
	; Call
	%r7735 = call %Word32 @IEEEReal_getRoundingMode()
	store %Word32 %r7735, %Word32* @CReturnW32
	br label %L_691

L_689:
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r7736 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7737 = getelementptr inbounds i8, %Pointer %r7736, i32 8
	%r7738 = bitcast %Pointer %r7737 to %CPointer*
	%r7739 = load %CPointer, %CPointer* %r7738
	%r7740 = load %Pointer, %Pointer* %frontier
	%r7742 = icmp ult %Pointer %r7739, %r7740
	%r7741 = zext i1 %r7742 to %Word32
	store %Word32 %r7741, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_690), (0x1, L_1112))}
	%r7743 = load %Word32, %Word32* %regW32_0
	%r7744 = trunc %Word32 %r7743 to i1
	br i1 %r7744, label %L_1112, label %L_690

L_688:
	; SP(48): Objptr (opt_3)  = glob {index = 135, isRoot = true, ty = Objptr (opt_3)}
	%r7745 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 135
	%r7746 = load %Objptr, %Objptr* %r7745
	%r7747 = load %Pointer, %Pointer* %stackTop
	%r7748 = getelementptr inbounds i8, %Pointer %r7747, i32 48
	%r7749 = bitcast %Pointer %r7748 to %Objptr*
	store %Objptr %r7746, %Objptr* %r7749
	; Goto L_689
	br label %L_689

L_687:
	; RW32(0): Word32  = Real64_lt (SR64(0): Real64, glob {index = 5, isRoot = true, ty = Real64})
	%r7750 = load %Pointer, %Pointer* %stackTop
	%r7751 = getelementptr inbounds i8, %Pointer %r7750, i32 0
	%r7752 = bitcast %Pointer %r7751 to %Real64*
	%r7753 = load %Real64, %Real64* %r7752
	%r7754 = getelementptr inbounds [6 x %Real64], [6 x %Real64]* @globalReal64, i32 0, i32 5
	%r7755 = load %Real64, %Real64* %r7754
	%r7757 = fcmp olt %Real64 %r7753, %r7755
	%r7756 = zext i1 %r7757 to %Word32
	store %Word32 %r7756, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_688), (0x1, L_1114))}
	%r7758 = load %Word32, %Word32* %regW32_0
	%r7759 = trunc %Word32 %r7758 to i1
	br i1 %r7759, label %L_1114, label %L_688

L_686:
	; SP(40): Objptr (opt_3)  = glob {index = 135, isRoot = true, ty = Objptr (opt_3)}
	%r7760 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 135
	%r7761 = load %Objptr, %Objptr* %r7760
	%r7762 = load %Pointer, %Pointer* %stackTop
	%r7763 = getelementptr inbounds i8, %Pointer %r7762, i32 40
	%r7764 = bitcast %Pointer %r7763 to %Objptr*
	store %Objptr %r7761, %Objptr* %r7764
	; Goto L_687
	br label %L_687

L_685:
	; RW32(0): Word32  = Real64_lt (SR64(0): Real64, glob {index = 5, isRoot = true, ty = Real64})
	%r7765 = load %Pointer, %Pointer* %stackTop
	%r7766 = getelementptr inbounds i8, %Pointer %r7765, i32 0
	%r7767 = bitcast %Pointer %r7766 to %Real64*
	%r7768 = load %Real64, %Real64* %r7767
	%r7769 = getelementptr inbounds [6 x %Real64], [6 x %Real64]* @globalReal64, i32 0, i32 5
	%r7770 = load %Real64, %Real64* %r7769
	%r7772 = fcmp olt %Real64 %r7768, %r7770
	%r7771 = zext i1 %r7772 to %Word32
	store %Word32 %r7771, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_686), (0x1, L_1115))}
	%r7773 = load %Word32, %Word32* %regW32_0
	%r7774 = trunc %Word32 %r7773 to i1
	br i1 %r7774, label %L_1115, label %L_686

L_684:
	; RW64(0): Word64  = Real64_castToWord64 (SR64(0): Real64)
	%r7775 = load %Pointer, %Pointer* %stackTop
	%r7776 = getelementptr inbounds i8, %Pointer %r7775, i32 0
	%r7777 = bitcast %Pointer %r7776 to %Real64*
	%r7778 = load %Real64, %Real64* %r7777
	%r7779 = bitcast double %r7778 to i64
	store %Word64 %r7779, %Word64* %regW64_0
	; RW64(1): Word64  = Word64_andb (RW64(0): Word64, 0x7FF0000000000000)
	%r7780 = load %Word64, %Word64* %regW64_0
	%r7781 = and %Word64 %r7780, 9218868437227405312
	store %Word64 %r7781, %Word64* %regW64_1
	; RW32(0): Word32  = Word64_equal (RW64(1): Word64, 0x7FF0000000000000)
	%r7782 = load %Word64, %Word64* %regW64_1
	%r7784 = icmp eq %Word64 %r7782, 9218868437227405312
	%r7783 = zext i1 %r7784 to %Word32
	store %Word32 %r7783, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_685), (0x1, L_1116))}
	%r7785 = load %Word32, %Word32* %regW32_0
	%r7786 = trunc %Word32 %r7785 to i1
	br i1 %r7786, label %L_1116, label %L_685

L_683:
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 24): CPointer, <StackTop>)
	%r7787 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7788 = getelementptr inbounds i8, %Pointer %r7787, i32 24
	%r7789 = bitcast %Pointer %r7788 to %CPointer*
	%r7790 = load %CPointer, %CPointer* %r7789
	%r7791 = load %Pointer, %Pointer* %stackTop
	%r7793 = icmp ult %Pointer %r7790, %r7791
	%r7792 = zext i1 %r7793 to %Word32
	store %Word32 %r7792, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_684), (0x1, L_1121))}
	%r7794 = load %Word32, %Word32* %regW32_0
	%r7795 = trunc %Word32 %r7794 to i1
	br i1 %r7795, label %L_1121, label %L_684

x_2:
	; Goto L_683
	br label %L_683

L_682:
	; Push(-24)
	%r7796 = load %Pointer, %Pointer* %stackTop
	%r7797 = getelementptr inbounds i8, %Pointer %r7796, i32 -24
	store %Pointer %r7797, %Pointer* %stackTop
	; Goto L_593
	br label %L_593

L_681:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 102}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_682}
	; GetOperands
	%r7798 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7799 = load %Pointer, %Pointer* %stackTop
	%r7800 = getelementptr inbounds i8, %Pointer %r7799, i32 16
	%r7801 = bitcast %Pointer %r7800 to %uintptr_t*
	store %uintptr_t 102, %uintptr_t* %r7801
	; Push(24)
	%r7802 = load %Pointer, %Pointer* %stackTop
	%r7803 = getelementptr inbounds i8, %Pointer %r7802, i32 24
	store %Pointer %r7803, %Pointer* %stackTop
	; FlushFrontier
	%r7804 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7805 = getelementptr inbounds i8, %Pointer %r7804, i32 0
	%r7806 = bitcast %Pointer %r7805 to %Pointer*
	%r7807 = load %Pointer, %Pointer* %frontier
	store %Pointer %r7807, %Pointer* %r7806
	; FlushStackTop
	%r7808 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7809 = getelementptr inbounds i8, %Pointer %r7808, i32 16
	%r7810 = bitcast %Pointer %r7809 to %Pointer*
	%r7811 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r7811, %Pointer* %r7810
	; Call
	call void @GC_collect(%Pointer %r7798, %Word64 0, %Word32 0)
	; CacheFrontier
	%r7812 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7813 = getelementptr inbounds i8, %Pointer %r7812, i32 0
	%r7814 = bitcast %Pointer %r7813 to %Pointer*
	%r7815 = load %Pointer, %Pointer* %r7814
	store %Pointer %r7815, %Pointer* %frontier
	; CacheStackTop
	%r7816 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7817 = getelementptr inbounds i8, %Pointer %r7816, i32 16
	%r7818 = bitcast %Pointer %r7817 to %Pointer*
	%r7819 = load %Pointer, %Pointer* %r7818
	store %Pointer %r7819, %Pointer* %stackTop
	br label %L_682

L_680:
	; Goto L_677
	br label %L_677

L_679:
	; Return
	%r7820 = load %Pointer, %Pointer* %stackTop
	%r7821 = getelementptr inbounds i8, %Pointer %r7820, i32 -8
	%r7822 = bitcast %Pointer %r7821 to %uintptr_t*
	%r7823 = load %uintptr_t, %uintptr_t* %r7822
	store %uintptr_t %r7823, %uintptr_t* %l_nextFun
	br label %top

L_678:
	; Goto L_677
	br label %L_677

L_677:
	; glob {index = 0, isRoot = false, ty = Objptr (opt_34, opt_33, opt_32, opt_31)}  = Cast (0x3, Objptr (opt_34, opt_33, opt_32, opt_31))
	%r7824 = inttoptr %Word64 3 to %Objptr
	%r7825 = getelementptr inbounds [1 x %Objptr], [1 x %Objptr]* @globalObjptrNonRoot, i32 0, i32 0
	store %Objptr %r7824, %Objptr* %r7825
	; Raise
	%r7826 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7827 = getelementptr inbounds i8, %Pointer %r7826, i32 1616
	%r7828 = bitcast %Pointer %r7827 to %Pointer*
	%r7829 = load %Pointer, %Pointer* %r7828
	%r7830 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7831 = getelementptr inbounds i8, %Pointer %r7830, i32 32
	%r7832 = bitcast %Pointer %r7831 to i32*
	%r7833 = load i32, i32* %r7832
	%r7834 = getelementptr inbounds i8, %Pointer %r7829, i32 %r7833
	store %Pointer %r7834, %Pointer* %stackTop
	%r7835 = load %Pointer, %Pointer* %stackTop
	%r7836 = getelementptr inbounds i8, %Pointer %r7835, i32 -8
	%r7837 = bitcast %Pointer %r7836 to %uintptr_t*
	%r7838 = load %uintptr_t, %uintptr_t* %r7837
	store %uintptr_t %r7838, %uintptr_t* %l_nextFun
	br label %top

L_676:
	; Goto L_677
	br label %L_677

L_675:
	; glob {index = 0, isRoot = false, ty = Objptr (opt_34, opt_33, opt_32, opt_31)}  = Cast (0x6, Objptr (opt_34, opt_33, opt_32, opt_31))
	%r7839 = inttoptr %Word64 6 to %Objptr
	%r7840 = getelementptr inbounds [1 x %Objptr], [1 x %Objptr]* @globalObjptrNonRoot, i32 0, i32 0
	store %Objptr %r7839, %Objptr* %r7840
	; Raise
	%r7841 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7842 = getelementptr inbounds i8, %Pointer %r7841, i32 1616
	%r7843 = bitcast %Pointer %r7842 to %Pointer*
	%r7844 = load %Pointer, %Pointer* %r7843
	%r7845 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7846 = getelementptr inbounds i8, %Pointer %r7845, i32 32
	%r7847 = bitcast %Pointer %r7846 to i32*
	%r7848 = load i32, i32* %r7847
	%r7849 = getelementptr inbounds i8, %Pointer %r7844, i32 %r7848
	store %Pointer %r7849, %Pointer* %stackTop
	%r7850 = load %Pointer, %Pointer* %stackTop
	%r7851 = getelementptr inbounds i8, %Pointer %r7850, i32 -8
	%r7852 = bitcast %Pointer %r7851 to %uintptr_t*
	%r7853 = load %uintptr_t, %uintptr_t* %r7852
	store %uintptr_t %r7853, %uintptr_t* %l_nextFun
	br label %top

L_674:
	; Goto L_611
	br label %L_611

L_673:
	; Goto L_611
	br label %L_611

L_672:
	; RW32(3): Word32  = Word32_add (OW32 (<GCState>, 68): Word32, 0xFFFFFFFF)
	%r7854 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7855 = getelementptr inbounds i8, %Pointer %r7854, i32 68
	%r7856 = bitcast %Pointer %r7855 to %Word32*
	%r7857 = load %Word32, %Word32* %r7856
	%r7858 = add %Word32 %r7857, 4294967295
	store %Word32 %r7858, %Word32* %regW32_3
	; OW32 (<GCState>, 68): Word32  = RW32(3): Word32
	%r7859 = load %Word32, %Word32* %regW32_3
	%r7860 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7861 = getelementptr inbounds i8, %Pointer %r7860, i32 68
	%r7862 = bitcast %Pointer %r7861 to %Word32*
	store %Word32 %r7859, %Word32* %r7862
	; SW32(0): Word32  = RW32(2): Word32
	%r7863 = load %Word32, %Word32* %regW32_2
	%r7864 = load %Pointer, %Pointer* %stackTop
	%r7865 = getelementptr inbounds i8, %Pointer %r7864, i32 0
	%r7866 = bitcast %Pointer %r7865 to %Word32*
	store %Word32 %r7863, %Word32* %r7866
	; Goto loop_33
	br label %loop_33

L_671:
	%r7867 = load %Word32, %Word32* @CReturnW32
	store %Word32 %r7867, %Word32* %regW32_2
	; RW32(3): Word32  = OW32 (<GCState>, 68): Word32
	%r7868 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7869 = getelementptr inbounds i8, %Pointer %r7868, i32 68
	%r7870 = bitcast %Pointer %r7869 to %Word32*
	%r7871 = load %Word32, %Word32* %r7870
	store %Word32 %r7871, %Word32* %regW32_3
	; RW32(4): Word32  = Word32_equal (RW32(3): Word32, 0x0)
	%r7872 = load %Word32, %Word32* %regW32_3
	%r7874 = icmp eq %Word32 %r7872, 0
	%r7873 = zext i1 %r7874 to %Word32
	store %Word32 %r7873, %Word32* %regW32_4
	; switch {test = RW32(4): Word32, default = None, cases = ((0x0, L_672), (0x1, L_673))}
	%r7875 = load %Word32, %Word32* %regW32_4
	%r7876 = trunc %Word32 %r7875 to i1
	br i1 %r7876, label %L_673, label %L_672

L_670:
	; CCall {args = (), frameInfo = None, func = {args = (), convention = cdecl, kind = Impure, prototype = {args = (), res = Some Int32}, return = Word32, symbolScope = private, target = Posix_Error_getErrno}, return = Some L_671}
	; GetOperands
	; Call
	%r7877 = call %Word32 @Posix_Error_getErrno()
	store %Word32 %r7877, %Word32* @CReturnW32
	br label %L_671

L_669:
	; Goto L_611
	br label %L_611

L_668:
	; RW32(2): Word32  = Word32_add (OW32 (<GCState>, 68): Word32, 0xFFFFFFFF)
	%r7878 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7879 = getelementptr inbounds i8, %Pointer %r7878, i32 68
	%r7880 = bitcast %Pointer %r7879 to %Word32*
	%r7881 = load %Word32, %Word32* %r7880
	%r7882 = add %Word32 %r7881, 4294967295
	store %Word32 %r7882, %Word32* %regW32_2
	; OW32 (<GCState>, 68): Word32  = RW32(2): Word32
	%r7883 = load %Word32, %Word32* %regW32_2
	%r7884 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7885 = getelementptr inbounds i8, %Pointer %r7884, i32 68
	%r7886 = bitcast %Pointer %r7885 to %Word32*
	store %Word32 %r7883, %Word32* %r7886
	; Goto x_1
	br label %x_1

L_667:
	; RW32(2): Word32  = OW32 (<GCState>, 68): Word32
	%r7887 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7888 = getelementptr inbounds i8, %Pointer %r7887, i32 68
	%r7889 = bitcast %Pointer %r7888 to %Word32*
	%r7890 = load %Word32, %Word32* %r7889
	store %Word32 %r7890, %Word32* %regW32_2
	; RW32(3): Word32  = Word32_equal (RW32(2): Word32, 0x0)
	%r7891 = load %Word32, %Word32* %regW32_2
	%r7893 = icmp eq %Word32 %r7891, 0
	%r7892 = zext i1 %r7893 to %Word32
	store %Word32 %r7892, %Word32* %regW32_3
	; switch {test = RW32(3): Word32, default = None, cases = ((0x0, L_668), (0x1, L_669))}
	%r7894 = load %Word32, %Word32* %regW32_3
	%r7895 = trunc %Word32 %r7894 to i1
	br i1 %r7895, label %L_669, label %L_668

L_666:
	%r7896 = load %Word64, %Word64* @CReturnW64
	store %Word64 %r7896, %Word64* %regW64_1
	; RW32(2): Word32  = Word64_equal (RW64(1): Word64, 0xFFFFFFFFFFFFFFFF)
	%r7897 = load %Word64, %Word64* %regW64_1
	%r7899 = icmp eq %Word64 %r7897, 18446744073709551615
	%r7898 = zext i1 %r7899 to %Word32
	store %Word32 %r7898, %Word32* %regW32_2
	; switch {test = RW32(2): Word32, default = None, cases = ((0x0, L_667), (0x1, L_670))}
	%r7900 = load %Word32, %Word32* %regW32_2
	%r7901 = trunc %Word32 %r7900 to i1
	br i1 %r7901, label %L_670, label %L_667

L_665:
	; RW32(2): Word32  = Word32_add (OW32 (<GCState>, 68): Word32, 0x1)
	%r7902 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7903 = getelementptr inbounds i8, %Pointer %r7902, i32 68
	%r7904 = bitcast %Pointer %r7903 to %Word32*
	%r7905 = load %Word32, %Word32* %r7904
	%r7906 = add %Word32 %r7905, 1
	store %Word32 %r7906, %Word32* %regW32_2
	; OW32 (<GCState>, 68): Word32  = RW32(2): Word32
	%r7907 = load %Word32, %Word32* %regW32_2
	%r7908 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7909 = getelementptr inbounds i8, %Pointer %r7908, i32 68
	%r7910 = bitcast %Pointer %r7909 to %Word32*
	store %Word32 %r7907, %Word32* %r7910
	; CCall {args = (0x1, RP(1): Objptr (opt_11), RW32(1): Word32, RW64(2): Word64), frameInfo = None, func = {args = (Word32, Objptr (opt_11), Word32, Word64), convention = cdecl, kind = Impure, prototype = {args = (Int32, Objptr, Int32, Word64), res = Some Int64}, return = Word64, symbolScope = private, target = Posix_IO_writeChar8Arr}, return = Some L_666}
	; GetOperands
	%r7911 = load %Objptr, %Objptr* %regP_1
	%r7912 = load %Word32, %Word32* %regW32_1
	%r7913 = load %Word64, %Word64* %regW64_2
	; Call
	%r7914 = call %Word64 @Posix_IO_writeChar8Arr(%Word32 1, %Objptr %r7911, %Word32 %r7912, %Word64 %r7913)
	store %Word64 %r7914, %Word64* @CReturnW64
	br label %L_666

L_664:
	; Goto L_611
	br label %L_611

L_663:
	; Push(-16)
	%r7915 = load %Pointer, %Pointer* %stackTop
	%r7916 = getelementptr inbounds i8, %Pointer %r7915, i32 -16
	store %Pointer %r7916, %Pointer* %stackTop
	; Goto L_645
	br label %L_645

L_662:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 101}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_663}
	; GetOperands
	%r7917 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7918 = load %Pointer, %Pointer* %stackTop
	%r7919 = getelementptr inbounds i8, %Pointer %r7918, i32 8
	%r7920 = bitcast %Pointer %r7919 to %uintptr_t*
	store %uintptr_t 101, %uintptr_t* %r7920
	; Push(16)
	%r7921 = load %Pointer, %Pointer* %stackTop
	%r7922 = getelementptr inbounds i8, %Pointer %r7921, i32 16
	store %Pointer %r7922, %Pointer* %stackTop
	; FlushFrontier
	%r7923 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7924 = getelementptr inbounds i8, %Pointer %r7923, i32 0
	%r7925 = bitcast %Pointer %r7924 to %Pointer*
	%r7926 = load %Pointer, %Pointer* %frontier
	store %Pointer %r7926, %Pointer* %r7925
	; FlushStackTop
	%r7927 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7928 = getelementptr inbounds i8, %Pointer %r7927, i32 16
	%r7929 = bitcast %Pointer %r7928 to %Pointer*
	%r7930 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r7930, %Pointer* %r7929
	; Call
	call void @GC_collect(%Pointer %r7917, %Word64 0, %Word32 0)
	; CacheFrontier
	%r7931 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7932 = getelementptr inbounds i8, %Pointer %r7931, i32 0
	%r7933 = bitcast %Pointer %r7932 to %Pointer*
	%r7934 = load %Pointer, %Pointer* %r7933
	store %Pointer %r7934, %Pointer* %frontier
	; CacheStackTop
	%r7935 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7936 = getelementptr inbounds i8, %Pointer %r7935, i32 16
	%r7937 = bitcast %Pointer %r7936 to %Pointer*
	%r7938 = load %Pointer, %Pointer* %r7937
	store %Pointer %r7938, %Pointer* %stackTop
	br label %L_663

L_661:
	; RP(0): Objptr (opt_3)  = glob {index = 132, isRoot = true, ty = Objptr (opt_3)}
	%r7939 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 132
	%r7940 = load %Objptr, %Objptr* %r7939
	store %Objptr %r7940, %Objptr* %regP_0
	; Goto L_655
	br label %L_655

L_660:
	; Goto L_632
	br label %L_632

L_659:
	; SP(24): Objptr (opt_11)  = glob {index = 22, isRoot = true, ty = Objptr (opt_11)}
	%r7941 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 22
	%r7942 = load %Objptr, %Objptr* %r7941
	%r7943 = load %Pointer, %Pointer* %stackTop
	%r7944 = getelementptr inbounds i8, %Pointer %r7943, i32 24
	%r7945 = bitcast %Pointer %r7944 to %Objptr*
	store %Objptr %r7942, %Objptr* %r7945
	; Goto L_join_9
	br label %L_join_9

L_658:
	; RW32(0): Word32  = WordU64_extdToWord32 (RW64(0): Word64)
	%r7946 = load %Word64, %Word64* %regW64_0
	%r7947 = trunc %Word64 %r7946 to %Word32
	store %Word32 %r7947, %Word32* %regW32_0
	; RW64(1): Word64  = WordS32_extdToWord64 (RW32(0): Word32)
	%r7948 = load %Word32, %Word32* %regW32_0
	%r7949 = sext %Word32 %r7948 to %Word64
	store %Word64 %r7949, %Word64* %regW64_1
	; RW8(0): Word8  = XW8 (SQ(8): CPointer, RW64(1): Word64, 1, 0): Word8
	%r7950 = load %Pointer, %Pointer* %stackTop
	%r7951 = getelementptr inbounds i8, %Pointer %r7950, i32 8
	%r7952 = bitcast %Pointer %r7951 to %CPointer*
	%r7953 = load %CPointer, %CPointer* %r7952
	%r7954 = load %Word64, %Word64* %regW64_1
	%r7955 = mul nsw %Word64 %r7954, 1
	%r7956 = add nsw %Word64 %r7955, 0
	%r7957 = getelementptr inbounds i8, %CPointer %r7953, %Word64 %r7956
	%r7958 = bitcast %CPointer %r7957 to %Word8*
	%r7959 = load %Word8, %Word8* %r7958
	store %Word8 %r7959, %Word8* %regW8_0
	; XW8 (SP(24): Objptr (opt_11), RW64(0): Word64, 1, 0): Word8  = RW8(0): Word8
	%r7960 = load %Word8, %Word8* %regW8_0
	%r7961 = load %Pointer, %Pointer* %stackTop
	%r7962 = getelementptr inbounds i8, %Pointer %r7961, i32 24
	%r7963 = bitcast %Pointer %r7962 to %Objptr*
	%r7964 = load %Objptr, %Objptr* %r7963
	%r7965 = load %Word64, %Word64* %regW64_0
	%r7966 = mul nsw %Word64 %r7965, 1
	%r7967 = add nsw %Word64 %r7966, 0
	%r7968 = getelementptr inbounds i8, %Objptr %r7964, %Word64 %r7967
	%r7969 = bitcast %Objptr %r7968 to %Word8*
	store %Word8 %r7960, %Word8* %r7969
	; RW64(2): Word64  = Word64_add (RW64(0): Word64, 0x1)
	%r7970 = load %Word64, %Word64* %regW64_0
	%r7971 = add %Word64 %r7970, 1
	store %Word64 %r7971, %Word64* %regW64_2
	; RW64(0): Word64  = RW64(2): Word64
	%r7972 = load %Word64, %Word64* %regW64_2
	store %Word64 %r7972, %Word64* %regW64_0
	; Goto loop_37
	br label %loop_37

L_657:
	; Push(-40)
	%r7973 = load %Pointer, %Pointer* %stackTop
	%r7974 = getelementptr inbounds i8, %Pointer %r7973, i32 -40
	store %Pointer %r7974, %Pointer* %stackTop
	; Goto L_654
	br label %L_654

L_656:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 100}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_657}
	; GetOperands
	%r7975 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7976 = load %Pointer, %Pointer* %stackTop
	%r7977 = getelementptr inbounds i8, %Pointer %r7976, i32 32
	%r7978 = bitcast %Pointer %r7977 to %uintptr_t*
	store %uintptr_t 100, %uintptr_t* %r7978
	; Push(40)
	%r7979 = load %Pointer, %Pointer* %stackTop
	%r7980 = getelementptr inbounds i8, %Pointer %r7979, i32 40
	store %Pointer %r7980, %Pointer* %stackTop
	; FlushFrontier
	%r7981 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7982 = getelementptr inbounds i8, %Pointer %r7981, i32 0
	%r7983 = bitcast %Pointer %r7982 to %Pointer*
	%r7984 = load %Pointer, %Pointer* %frontier
	store %Pointer %r7984, %Pointer* %r7983
	; FlushStackTop
	%r7985 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7986 = getelementptr inbounds i8, %Pointer %r7985, i32 16
	%r7987 = bitcast %Pointer %r7986 to %Pointer*
	%r7988 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r7988, %Pointer* %r7987
	; Call
	call void @GC_collect(%Pointer %r7975, %Word64 0, %Word32 0)
	; CacheFrontier
	%r7989 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7990 = getelementptr inbounds i8, %Pointer %r7989, i32 0
	%r7991 = bitcast %Pointer %r7990 to %Pointer*
	%r7992 = load %Pointer, %Pointer* %r7991
	store %Pointer %r7992, %Pointer* %frontier
	; CacheStackTop
	%r7993 = bitcast %struct.GC_state* @gcState to %Pointer
	%r7994 = getelementptr inbounds i8, %Pointer %r7993, i32 16
	%r7995 = bitcast %Pointer %r7994 to %Pointer*
	%r7996 = load %Pointer, %Pointer* %r7995
	store %Pointer %r7996, %Pointer* %stackTop
	br label %L_657

L_655:
	; RW64(0): [Word32, Bits32]  = WordU32_extdToWord64 (SW32(0): Word32)
	%r7997 = load %Pointer, %Pointer* %stackTop
	%r7998 = getelementptr inbounds i8, %Pointer %r7997, i32 0
	%r7999 = bitcast %Pointer %r7998 to %Word32*
	%r8000 = load %Word32, %Word32* %r7999
	%r8001 = zext %Word32 %r8000 to %Word64
	store %Word64 %r8001, %Word64* %regW64_0
	; RW64(1): [Word32, Bits32]  = Word64_lshift (RW64(0): [Word32, Bits32], 0x1)
	%r8002 = load %Word64, %Word64* %regW64_0
	%r8003 = zext %Word32 1 to %Word64
	%r8004 = shl %Word64 %r8002, %r8003
	store %Word64 %r8004, %Word64* %regW64_1
	; RW64(2): [Word32, Bits32]  = Word64_orb (RW64(1): [Word32, Bits32], 0x1)
	%r8005 = load %Word64, %Word64* %regW64_1
	%r8006 = or %Word64 %r8005, 1
	store %Word64 %r8006, %Word64* %regW64_2
	; CW64 (<Frontier>)  = 0x43
	%r8007 = load %Pointer, %Pointer* %frontier
	%r8008 = bitcast %Pointer %r8007 to %Word64*
	store %Word64 67, %Word64* %r8008
	; RQ(51): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r8009 = load %Pointer, %Pointer* %frontier
	%r8011 = ptrtoint %Pointer %r8009 to %uintptr_t
	%r8012 = add %uintptr_t %r8011, 8
	%r8010 = inttoptr %uintptr_t %r8012 to %Pointer
	store %CPointer %r8010, %CPointer* %regQ_51
	; RP(1): Objptr (opt_33)  = Cast (RQ(51): CPointer, Objptr (opt_33))
	%r8013 = load %CPointer, %CPointer* %regQ_51
	%r8014 = bitcast %CPointer %r8013 to %Objptr
	store %Objptr %r8014, %Objptr* %regP_1
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r8015 = load %Pointer, %Pointer* %frontier
	%r8017 = ptrtoint %Pointer %r8015 to %uintptr_t
	%r8018 = add %uintptr_t %r8017, 24
	%r8016 = inttoptr %uintptr_t %r8018 to %Pointer
	store %Pointer %r8016, %Pointer* %frontier
	; OW64 (RP(1): Objptr (opt_33), 0): [Word1, Bits63]  = Cast (RW64(2): [Word32, Bits32], [Word1, Bits63])
	%r8019 = load %Word64, %Word64* %regW64_2
	%r8020 = bitcast %Word64 %r8019 to %Word64
	%r8021 = load %Objptr, %Objptr* %regP_1
	%r8022 = getelementptr inbounds i8, %Objptr %r8021, i32 0
	%r8023 = bitcast %Objptr %r8022 to %Word64*
	store %Word64 %r8020, %Word64* %r8023
	; OP (RP(1): Objptr (opt_33), 8): Objptr (opt_3)  = RP(0): Objptr (opt_3)
	%r8024 = load %Objptr, %Objptr* %regP_0
	%r8025 = load %Objptr, %Objptr* %regP_1
	%r8026 = getelementptr inbounds i8, %Objptr %r8025, i32 8
	%r8027 = bitcast %Objptr %r8026 to %Objptr*
	store %Objptr %r8024, %Objptr* %r8027
	; glob {index = 0, isRoot = false, ty = Objptr (opt_34, opt_33, opt_32, opt_31)}  = Cast (RP(1): Objptr (opt_33), Objptr (opt_34, opt_33, opt_32, opt_31))
	%r8028 = load %Objptr, %Objptr* %regP_1
	%r8029 = bitcast %Objptr %r8028 to %Objptr
	%r8030 = getelementptr inbounds [1 x %Objptr], [1 x %Objptr]* @globalObjptrNonRoot, i32 0, i32 0
	store %Objptr %r8029, %Objptr* %r8030
	; Raise
	%r8031 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8032 = getelementptr inbounds i8, %Pointer %r8031, i32 1616
	%r8033 = bitcast %Pointer %r8032 to %Pointer*
	%r8034 = load %Pointer, %Pointer* %r8033
	%r8035 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8036 = getelementptr inbounds i8, %Pointer %r8035, i32 32
	%r8037 = bitcast %Pointer %r8036 to i32*
	%r8038 = load i32, i32* %r8037
	%r8039 = getelementptr inbounds i8, %Pointer %r8034, i32 %r8038
	store %Pointer %r8039, %Pointer* %stackTop
	%r8040 = load %Pointer, %Pointer* %stackTop
	%r8041 = getelementptr inbounds i8, %Pointer %r8040, i32 -8
	%r8042 = bitcast %Pointer %r8041 to %uintptr_t*
	%r8043 = load %uintptr_t, %uintptr_t* %r8042
	store %uintptr_t %r8043, %uintptr_t* %l_nextFun
	br label %top

L_654:
	; OW64 (SP(24): Objptr (opt_11), ~8): Word64  = 0x7
	%r8044 = load %Pointer, %Pointer* %stackTop
	%r8045 = getelementptr inbounds i8, %Pointer %r8044, i32 24
	%r8046 = bitcast %Pointer %r8045 to %Objptr*
	%r8047 = load %Objptr, %Objptr* %r8046
	%r8048 = getelementptr inbounds i8, %Objptr %r8047, i32 -8
	%r8049 = bitcast %Objptr %r8048 to %Word64*
	store %Word64 7, %Word64* %r8049
	; RP(0): Objptr (opt_3)  = Cast (SP(24): Objptr (opt_11), Objptr (opt_3))
	%r8050 = load %Pointer, %Pointer* %stackTop
	%r8051 = getelementptr inbounds i8, %Pointer %r8050, i32 24
	%r8052 = bitcast %Pointer %r8051 to %Objptr*
	%r8053 = load %Objptr, %Objptr* %r8052
	%r8054 = bitcast %Objptr %r8053 to %Objptr
	store %Objptr %r8054, %Objptr* %regP_0
	; Goto L_655
	br label %L_655

L_653:
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r8055 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8056 = getelementptr inbounds i8, %Pointer %r8055, i32 8
	%r8057 = bitcast %Pointer %r8056 to %CPointer*
	%r8058 = load %CPointer, %CPointer* %r8057
	%r8059 = load %Pointer, %Pointer* %frontier
	%r8061 = icmp ult %Pointer %r8058, %r8059
	%r8060 = zext i1 %r8061 to %Word32
	store %Word32 %r8060, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_654), (0x1, L_656))}
	%r8062 = load %Word32, %Word32* %regW32_0
	%r8063 = trunc %Word32 %r8062 to i1
	br i1 %r8063, label %L_656, label %L_654

loop_37:
	; RW32(0): Word32  = WordS64_lt (RW64(0): Word64, SW64(16): Word64)
	%r8064 = load %Word64, %Word64* %regW64_0
	%r8065 = load %Pointer, %Pointer* %stackTop
	%r8066 = getelementptr inbounds i8, %Pointer %r8065, i32 16
	%r8067 = bitcast %Pointer %r8066 to %Word64*
	%r8068 = load %Word64, %Word64* %r8067
	%r8070 = icmp slt %Word64 %r8064, %r8068
	%r8069 = zext i1 %r8070 to %Word32
	store %Word32 %r8069, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_653), (0x1, L_658))}
	%r8071 = load %Word32, %Word32* %regW32_0
	%r8072 = trunc %Word32 %r8071 to i1
	br i1 %r8072, label %L_658, label %L_653

L_join_9:
	; RW64(0): Word64  = 0x0
	store %Word64 0, %Word64* %regW64_0
	; Goto loop_37
	br label %loop_37

L_652:
	; Push(-32)
	%r8073 = load %Pointer, %Pointer* %stackTop
	%r8074 = getelementptr inbounds i8, %Pointer %r8073, i32 -32
	store %Pointer %r8074, %Pointer* %stackTop
	%r8075 = load %Objptr, %Objptr* @CReturnP
	store %Objptr %r8075, %Objptr* %regP_0
	; SP(24): Objptr (opt_11)  = RP(0): Objptr (opt_11)
	%r8076 = load %Objptr, %Objptr* %regP_0
	%r8077 = load %Pointer, %Pointer* %stackTop
	%r8078 = getelementptr inbounds i8, %Pointer %r8077, i32 24
	%r8079 = bitcast %Pointer %r8078 to %Objptr*
	store %Objptr %r8076, %Objptr* %r8079
	; Goto L_join_9
	br label %L_join_9

L_651:
	; CCall {args = (<GCState>, 0x0, SW64(16): Word64, 0x17), frameInfo = Some {frameLayoutsIndex = 99}, func = {args = (GCState, Word64, Word64, Word64), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int64, Word64), res = Some Objptr}, return = Objptr (opt_11), symbolScope = private, target = GC_arrayAllocate}, return = Some L_652}
	; GetOperands
	%r8080 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8081 = load %Pointer, %Pointer* %stackTop
	%r8082 = getelementptr inbounds i8, %Pointer %r8081, i32 16
	%r8083 = bitcast %Pointer %r8082 to %Word64*
	%r8084 = load %Word64, %Word64* %r8083
	%r8085 = load %Pointer, %Pointer* %stackTop
	%r8086 = getelementptr inbounds i8, %Pointer %r8085, i32 24
	%r8087 = bitcast %Pointer %r8086 to %uintptr_t*
	store %uintptr_t 99, %uintptr_t* %r8087
	; Push(32)
	%r8088 = load %Pointer, %Pointer* %stackTop
	%r8089 = getelementptr inbounds i8, %Pointer %r8088, i32 32
	store %Pointer %r8089, %Pointer* %stackTop
	; FlushFrontier
	%r8090 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8091 = getelementptr inbounds i8, %Pointer %r8090, i32 0
	%r8092 = bitcast %Pointer %r8091 to %Pointer*
	%r8093 = load %Pointer, %Pointer* %frontier
	store %Pointer %r8093, %Pointer* %r8092
	; FlushStackTop
	%r8094 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8095 = getelementptr inbounds i8, %Pointer %r8094, i32 16
	%r8096 = bitcast %Pointer %r8095 to %Pointer*
	%r8097 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r8097, %Pointer* %r8096
	; Call
	%r8098 = call %Objptr @GC_arrayAllocate(%Pointer %r8080, %Word64 0, %Word64 %r8084, %Word64 23)
	store %Objptr %r8098, %Objptr* @CReturnP
	; CacheFrontier
	%r8099 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8100 = getelementptr inbounds i8, %Pointer %r8099, i32 0
	%r8101 = bitcast %Pointer %r8100 to %Pointer*
	%r8102 = load %Pointer, %Pointer* %r8101
	store %Pointer %r8102, %Pointer* %frontier
	; CacheStackTop
	%r8103 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8104 = getelementptr inbounds i8, %Pointer %r8103, i32 16
	%r8105 = bitcast %Pointer %r8104 to %Pointer*
	%r8106 = load %Pointer, %Pointer* %r8105
	store %Pointer %r8106, %Pointer* %stackTop
	br label %L_652

L_650:
	; RW32(0): Word32  = Word64_equal (0x0, SW64(16): Word64)
	%r8107 = load %Pointer, %Pointer* %stackTop
	%r8108 = getelementptr inbounds i8, %Pointer %r8107, i32 16
	%r8109 = bitcast %Pointer %r8108 to %Word64*
	%r8110 = load %Word64, %Word64* %r8109
	%r8112 = icmp eq %Word64 0, %r8110
	%r8111 = zext i1 %r8112 to %Word32
	store %Word32 %r8111, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_651), (0x1, L_659))}
	%r8113 = load %Word32, %Word32* %regW32_0
	%r8114 = trunc %Word32 %r8113 to i1
	br i1 %r8114, label %L_659, label %L_651

L_649:
	; RW32(0): Word32  = WordU64_lt (0x7FFFFFFF, SW64(16): Word64)
	%r8115 = load %Pointer, %Pointer* %stackTop
	%r8116 = getelementptr inbounds i8, %Pointer %r8115, i32 16
	%r8117 = bitcast %Pointer %r8116 to %Word64*
	%r8118 = load %Word64, %Word64* %r8117
	%r8120 = icmp ult %Word64 2147483647, %r8118
	%r8119 = zext i1 %r8120 to %Word32
	store %Word32 %r8119, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_650), (0x1, L_660))}
	%r8121 = load %Word32, %Word32* %regW32_0
	%r8122 = trunc %Word32 %r8121 to i1
	br i1 %r8122, label %L_660, label %L_650

L_648:
	; RW32(1): Word32  = Word32_add (RW32(0): Word32, 0x1)
	%r8123 = load %Word32, %Word32* %regW32_0
	%r8124 = add %Word32 %r8123, 1
	store %Word32 %r8124, %Word32* %regW32_1
	; RW32(0): Word32  = RW32(1): Word32
	%r8125 = load %Word32, %Word32* %regW32_1
	store %Word32 %r8125, %Word32* %regW32_0
	; Goto loop_36
	br label %loop_36

loop_36:
	; SW64(16): Word64  = WordS32_extdToWord64 (RW32(0): Word32)
	%r8126 = load %Word32, %Word32* %regW32_0
	%r8127 = sext %Word32 %r8126 to %Word64
	%r8128 = load %Pointer, %Pointer* %stackTop
	%r8129 = getelementptr inbounds i8, %Pointer %r8128, i32 16
	%r8130 = bitcast %Pointer %r8129 to %Word64*
	store %Word64 %r8127, %Word64* %r8130
	; RW8(0): Word8  = XW8 (SQ(8): CPointer, SW64(16): Word64, 1, 0): Word8
	%r8131 = load %Pointer, %Pointer* %stackTop
	%r8132 = getelementptr inbounds i8, %Pointer %r8131, i32 8
	%r8133 = bitcast %Pointer %r8132 to %CPointer*
	%r8134 = load %CPointer, %CPointer* %r8133
	%r8135 = load %Pointer, %Pointer* %stackTop
	%r8136 = getelementptr inbounds i8, %Pointer %r8135, i32 16
	%r8137 = bitcast %Pointer %r8136 to %Word64*
	%r8138 = load %Word64, %Word64* %r8137
	%r8139 = mul nsw %Word64 %r8138, 1
	%r8140 = add nsw %Word64 %r8139, 0
	%r8141 = getelementptr inbounds i8, %CPointer %r8134, %Word64 %r8140
	%r8142 = bitcast %CPointer %r8141 to %Word8*
	%r8143 = load %Word8, %Word8* %r8142
	store %Word8 %r8143, %Word8* %regW8_0
	; switch {test = RW8(0): Word8, default = Some L_648, cases = ((0x0, L_649))}
	%r8144 = load %Word8, %Word8* %regW8_0
	switch %Word8 %r8144, label %L_648 [
		%Word8 0, label %L_649
	]

L_647:
	; RW32(0): Word32  = 0x0
	store %Word32 0, %Word32* %regW32_0
	; Goto loop_36
	br label %loop_36

L_646:
	%r8145 = load %Word64, %Word64* @CReturnW64
	store %Word64 %r8145, %Word64* %regW64_0
	; SQ(8): CPointer  = CPointer_fromWord (RW64(0): Word64)
	%r8146 = load %Word64, %Word64* %regW64_0
	%r8147 = inttoptr %uintptr_t %r8146 to %Pointer
	%r8148 = load %Pointer, %Pointer* %stackTop
	%r8149 = getelementptr inbounds i8, %Pointer %r8148, i32 8
	%r8150 = bitcast %Pointer %r8149 to %CPointer*
	store %CPointer %r8147, %CPointer* %r8150
	; RW32(0): Word32  = CPointer_equal (SQ(8): CPointer, NULL)
	%r8151 = load %Pointer, %Pointer* %stackTop
	%r8152 = getelementptr inbounds i8, %Pointer %r8151, i32 8
	%r8153 = bitcast %Pointer %r8152 to %CPointer*
	%r8154 = load %CPointer, %CPointer* %r8153
	%r8156 = icmp eq %Pointer %r8154, null
	%r8155 = zext i1 %r8156 to %Word32
	store %Word32 %r8155, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_647), (0x1, L_661))}
	%r8157 = load %Word32, %Word32* %regW32_0
	%r8158 = trunc %Word32 %r8157 to i1
	br i1 %r8158, label %L_661, label %L_647

L_645:
	; CCall {args = (SW32(0): Word32), frameInfo = None, func = {args = (Word32), convention = cdecl, kind = Impure, prototype = {args = (Int32), res = Some Word64}, return = Word64, symbolScope = private, target = Posix_Error_strError}, return = Some L_646}
	; GetOperands
	%r8159 = load %Pointer, %Pointer* %stackTop
	%r8160 = getelementptr inbounds i8, %Pointer %r8159, i32 0
	%r8161 = bitcast %Pointer %r8160 to %Word32*
	%r8162 = load %Word32, %Word32* %r8161
	; Call
	%r8163 = call %Word64 @Posix_Error_strError(%Word32 %r8162)
	store %Word64 %r8163, %Word64* @CReturnW64
	br label %L_646

L_644:
	; RW32(0): Word32  = Word32_add (OW32 (<GCState>, 68): Word32, 0xFFFFFFFF)
	%r8164 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8165 = getelementptr inbounds i8, %Pointer %r8164, i32 68
	%r8166 = bitcast %Pointer %r8165 to %Word32*
	%r8167 = load %Word32, %Word32* %r8166
	%r8168 = add %Word32 %r8167, 4294967295
	store %Word32 %r8168, %Word32* %regW32_0
	; OW32 (<GCState>, 68): Word32  = RW32(0): Word32
	%r8169 = load %Word32, %Word32* %regW32_0
	%r8170 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8171 = getelementptr inbounds i8, %Pointer %r8170, i32 68
	%r8172 = bitcast %Pointer %r8171 to %Word32*
	store %Word32 %r8169, %Word32* %r8172
	; RW32(1): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r8173 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8174 = getelementptr inbounds i8, %Pointer %r8173, i32 8
	%r8175 = bitcast %Pointer %r8174 to %CPointer*
	%r8176 = load %CPointer, %CPointer* %r8175
	%r8177 = load %Pointer, %Pointer* %frontier
	%r8179 = icmp ult %Pointer %r8176, %r8177
	%r8178 = zext i1 %r8179 to %Word32
	store %Word32 %r8178, %Word32* %regW32_1
	; switch {test = RW32(1): Word32, default = None, cases = ((0x0, L_645), (0x1, L_662))}
	%r8180 = load %Word32, %Word32* %regW32_1
	%r8181 = trunc %Word32 %r8180 to i1
	br i1 %r8181, label %L_662, label %L_645

L_643:
	%r8183 = load %Pointer, %Pointer* %stackTop
	%r8184 = getelementptr inbounds i8, %Pointer %r8183, i32 0
	%r8185 = bitcast %Pointer %r8184 to %Word32*
	%r8182 = load %Word32, %Word32* @CReturnW32
	store %Word32 %r8182, %Word32* %r8185
	; RW32(0): Word32  = OW32 (<GCState>, 68): Word32
	%r8186 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8187 = getelementptr inbounds i8, %Pointer %r8186, i32 68
	%r8188 = bitcast %Pointer %r8187 to %Word32*
	%r8189 = load %Word32, %Word32* %r8188
	store %Word32 %r8189, %Word32* %regW32_0
	; RW32(1): Word32  = Word32_equal (RW32(0): Word32, 0x0)
	%r8190 = load %Word32, %Word32* %regW32_0
	%r8192 = icmp eq %Word32 %r8190, 0
	%r8191 = zext i1 %r8192 to %Word32
	store %Word32 %r8191, %Word32* %regW32_1
	; switch {test = RW32(1): Word32, default = None, cases = ((0x0, L_644), (0x1, L_664))}
	%r8193 = load %Word32, %Word32* %regW32_1
	%r8194 = trunc %Word32 %r8193 to i1
	br i1 %r8194, label %L_664, label %L_644

L_642:
	; CCall {args = (), frameInfo = None, func = {args = (), convention = cdecl, kind = Impure, prototype = {args = (), res = Some Int32}, return = Word32, symbolScope = private, target = Posix_Error_getErrno}, return = Some L_643}
	; GetOperands
	; Call
	%r8195 = call %Word32 @Posix_Error_getErrno()
	store %Word32 %r8195, %Word32* @CReturnW32
	br label %L_643

L_641:
	; Goto L_611
	br label %L_611

L_640:
	; RW32(2): Word32  = Word32_add (OW32 (<GCState>, 68): Word32, 0xFFFFFFFF)
	%r8196 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8197 = getelementptr inbounds i8, %Pointer %r8196, i32 68
	%r8198 = bitcast %Pointer %r8197 to %Word32*
	%r8199 = load %Word32, %Word32* %r8198
	%r8200 = add %Word32 %r8199, 4294967295
	store %Word32 %r8200, %Word32* %regW32_2
	; OW32 (<GCState>, 68): Word32  = RW32(2): Word32
	%r8201 = load %Word32, %Word32* %regW32_2
	%r8202 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8203 = getelementptr inbounds i8, %Pointer %r8202, i32 68
	%r8204 = bitcast %Pointer %r8203 to %Word32*
	store %Word32 %r8201, %Word32* %r8204
	; Goto x_1
	br label %x_1

L_639:
	; RW32(2): Word32  = OW32 (<GCState>, 68): Word32
	%r8205 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8206 = getelementptr inbounds i8, %Pointer %r8205, i32 68
	%r8207 = bitcast %Pointer %r8206 to %Word32*
	%r8208 = load %Word32, %Word32* %r8207
	store %Word32 %r8208, %Word32* %regW32_2
	; RW32(3): Word32  = Word32_equal (RW32(2): Word32, 0x0)
	%r8209 = load %Word32, %Word32* %regW32_2
	%r8211 = icmp eq %Word32 %r8209, 0
	%r8210 = zext i1 %r8211 to %Word32
	store %Word32 %r8210, %Word32* %regW32_3
	; switch {test = RW32(3): Word32, default = None, cases = ((0x0, L_640), (0x1, L_641))}
	%r8212 = load %Word32, %Word32* %regW32_3
	%r8213 = trunc %Word32 %r8212 to i1
	br i1 %r8213, label %L_641, label %L_640

L_638:
	%r8214 = load %Word64, %Word64* @CReturnW64
	store %Word64 %r8214, %Word64* %regW64_1
	; RW32(2): Word32  = Word64_equal (RW64(1): Word64, 0xFFFFFFFFFFFFFFFF)
	%r8215 = load %Word64, %Word64* %regW64_1
	%r8217 = icmp eq %Word64 %r8215, 18446744073709551615
	%r8216 = zext i1 %r8217 to %Word32
	store %Word32 %r8216, %Word32* %regW32_2
	; switch {test = RW32(2): Word32, default = None, cases = ((0x0, L_639), (0x1, L_642))}
	%r8218 = load %Word32, %Word32* %regW32_2
	%r8219 = trunc %Word32 %r8218 to i1
	br i1 %r8219, label %L_642, label %L_639

L_637:
	; RW32(2): Word32  = Word32_add (OW32 (<GCState>, 68): Word32, 0x1)
	%r8220 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8221 = getelementptr inbounds i8, %Pointer %r8220, i32 68
	%r8222 = bitcast %Pointer %r8221 to %Word32*
	%r8223 = load %Word32, %Word32* %r8222
	%r8224 = add %Word32 %r8223, 1
	store %Word32 %r8224, %Word32* %regW32_2
	; OW32 (<GCState>, 68): Word32  = RW32(2): Word32
	%r8225 = load %Word32, %Word32* %regW32_2
	%r8226 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8227 = getelementptr inbounds i8, %Pointer %r8226, i32 68
	%r8228 = bitcast %Pointer %r8227 to %Word32*
	store %Word32 %r8225, %Word32* %r8228
	; CCall {args = (0x1, RP(1): Objptr (opt_11), RW32(1): Word32, RW64(2): Word64), frameInfo = None, func = {args = (Word32, Objptr (opt_11), Word32, Word64), convention = cdecl, kind = Impure, prototype = {args = (Int32, Objptr, Int32, Word64), res = Some Int64}, return = Word64, symbolScope = private, target = Posix_IO_writeChar8Arr}, return = Some L_638}
	; GetOperands
	%r8229 = load %Objptr, %Objptr* %regP_1
	%r8230 = load %Word32, %Word32* %regW32_1
	%r8231 = load %Word64, %Word64* %regW64_2
	; Call
	%r8232 = call %Word64 @Posix_IO_writeChar8Arr(%Word32 1, %Objptr %r8229, %Word32 %r8230, %Word64 %r8231)
	store %Word64 %r8232, %Word64* @CReturnW64
	br label %L_638

L_636:
	; RW32(2): Word32  = OW32 (<GCState>, 68): Word32
	%r8233 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8234 = getelementptr inbounds i8, %Pointer %r8233, i32 68
	%r8235 = bitcast %Pointer %r8234 to %Word32*
	%r8236 = load %Word32, %Word32* %r8235
	store %Word32 %r8236, %Word32* %regW32_2
	; RW32(3): Word32  = Word32_equal (RW32(2): Word32, 0x0)
	%r8237 = load %Word32, %Word32* %regW32_2
	%r8239 = icmp eq %Word32 %r8237, 0
	%r8238 = zext i1 %r8239 to %Word32
	store %Word32 %r8238, %Word32* %regW32_3
	; switch {test = RW32(3): Word32, default = None, cases = ((0x0, L_637), (0x1, L_665))}
	%r8240 = load %Word32, %Word32* %regW32_3
	%r8241 = trunc %Word32 %r8240 to i1
	br i1 %r8241, label %L_665, label %L_637

L_635:
	; Push(-16)
	%r8242 = load %Pointer, %Pointer* %stackTop
	%r8243 = getelementptr inbounds i8, %Pointer %r8242, i32 -16
	store %Pointer %r8243, %Pointer* %stackTop
	; Goto L_616
	br label %L_616

L_634:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 98}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_635}
	; GetOperands
	%r8244 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8245 = load %Pointer, %Pointer* %stackTop
	%r8246 = getelementptr inbounds i8, %Pointer %r8245, i32 8
	%r8247 = bitcast %Pointer %r8246 to %uintptr_t*
	store %uintptr_t 98, %uintptr_t* %r8247
	; Push(16)
	%r8248 = load %Pointer, %Pointer* %stackTop
	%r8249 = getelementptr inbounds i8, %Pointer %r8248, i32 16
	store %Pointer %r8249, %Pointer* %stackTop
	; FlushFrontier
	%r8250 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8251 = getelementptr inbounds i8, %Pointer %r8250, i32 0
	%r8252 = bitcast %Pointer %r8251 to %Pointer*
	%r8253 = load %Pointer, %Pointer* %frontier
	store %Pointer %r8253, %Pointer* %r8252
	; FlushStackTop
	%r8254 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8255 = getelementptr inbounds i8, %Pointer %r8254, i32 16
	%r8256 = bitcast %Pointer %r8255 to %Pointer*
	%r8257 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r8257, %Pointer* %r8256
	; Call
	call void @GC_collect(%Pointer %r8244, %Word64 0, %Word32 0)
	; CacheFrontier
	%r8258 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8259 = getelementptr inbounds i8, %Pointer %r8258, i32 0
	%r8260 = bitcast %Pointer %r8259 to %Pointer*
	%r8261 = load %Pointer, %Pointer* %r8260
	store %Pointer %r8261, %Pointer* %frontier
	; CacheStackTop
	%r8262 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8263 = getelementptr inbounds i8, %Pointer %r8262, i32 16
	%r8264 = bitcast %Pointer %r8263 to %Pointer*
	%r8265 = load %Pointer, %Pointer* %r8264
	store %Pointer %r8265, %Pointer* %stackTop
	br label %L_635

L_633:
	; RP(0): Objptr (opt_3)  = glob {index = 132, isRoot = true, ty = Objptr (opt_3)}
	%r8266 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 132
	%r8267 = load %Objptr, %Objptr* %r8266
	store %Objptr %r8267, %Objptr* %regP_0
	; Goto L_626
	br label %L_626

L_632:
	; glob {index = 0, isRoot = false, ty = Objptr (opt_34, opt_33, opt_32, opt_31)}  = Cast (0x2, Objptr (opt_34, opt_33, opt_32, opt_31))
	%r8268 = inttoptr %Word64 2 to %Objptr
	%r8269 = getelementptr inbounds [1 x %Objptr], [1 x %Objptr]* @globalObjptrNonRoot, i32 0, i32 0
	store %Objptr %r8268, %Objptr* %r8269
	; Raise
	%r8270 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8271 = getelementptr inbounds i8, %Pointer %r8270, i32 1616
	%r8272 = bitcast %Pointer %r8271 to %Pointer*
	%r8273 = load %Pointer, %Pointer* %r8272
	%r8274 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8275 = getelementptr inbounds i8, %Pointer %r8274, i32 32
	%r8276 = bitcast %Pointer %r8275 to i32*
	%r8277 = load i32, i32* %r8276
	%r8278 = getelementptr inbounds i8, %Pointer %r8273, i32 %r8277
	store %Pointer %r8278, %Pointer* %stackTop
	%r8279 = load %Pointer, %Pointer* %stackTop
	%r8280 = getelementptr inbounds i8, %Pointer %r8279, i32 -8
	%r8281 = bitcast %Pointer %r8280 to %uintptr_t*
	%r8282 = load %uintptr_t, %uintptr_t* %r8281
	store %uintptr_t %r8282, %uintptr_t* %l_nextFun
	br label %top

L_631:
	; Goto L_632
	br label %L_632

L_630:
	; SP(24): Objptr (opt_11)  = glob {index = 22, isRoot = true, ty = Objptr (opt_11)}
	%r8283 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 22
	%r8284 = load %Objptr, %Objptr* %r8283
	%r8285 = load %Pointer, %Pointer* %stackTop
	%r8286 = getelementptr inbounds i8, %Pointer %r8285, i32 24
	%r8287 = bitcast %Pointer %r8286 to %Objptr*
	store %Objptr %r8284, %Objptr* %r8287
	; Goto L_join_8
	br label %L_join_8

L_629:
	; RW32(0): Word32  = WordU64_extdToWord32 (RW64(0): Word64)
	%r8288 = load %Word64, %Word64* %regW64_0
	%r8289 = trunc %Word64 %r8288 to %Word32
	store %Word32 %r8289, %Word32* %regW32_0
	; RW64(1): Word64  = WordS32_extdToWord64 (RW32(0): Word32)
	%r8290 = load %Word32, %Word32* %regW32_0
	%r8291 = sext %Word32 %r8290 to %Word64
	store %Word64 %r8291, %Word64* %regW64_1
	; RW8(0): Word8  = XW8 (SQ(8): CPointer, RW64(1): Word64, 1, 0): Word8
	%r8292 = load %Pointer, %Pointer* %stackTop
	%r8293 = getelementptr inbounds i8, %Pointer %r8292, i32 8
	%r8294 = bitcast %Pointer %r8293 to %CPointer*
	%r8295 = load %CPointer, %CPointer* %r8294
	%r8296 = load %Word64, %Word64* %regW64_1
	%r8297 = mul nsw %Word64 %r8296, 1
	%r8298 = add nsw %Word64 %r8297, 0
	%r8299 = getelementptr inbounds i8, %CPointer %r8295, %Word64 %r8298
	%r8300 = bitcast %CPointer %r8299 to %Word8*
	%r8301 = load %Word8, %Word8* %r8300
	store %Word8 %r8301, %Word8* %regW8_0
	; XW8 (SP(24): Objptr (opt_11), RW64(0): Word64, 1, 0): Word8  = RW8(0): Word8
	%r8302 = load %Word8, %Word8* %regW8_0
	%r8303 = load %Pointer, %Pointer* %stackTop
	%r8304 = getelementptr inbounds i8, %Pointer %r8303, i32 24
	%r8305 = bitcast %Pointer %r8304 to %Objptr*
	%r8306 = load %Objptr, %Objptr* %r8305
	%r8307 = load %Word64, %Word64* %regW64_0
	%r8308 = mul nsw %Word64 %r8307, 1
	%r8309 = add nsw %Word64 %r8308, 0
	%r8310 = getelementptr inbounds i8, %Objptr %r8306, %Word64 %r8309
	%r8311 = bitcast %Objptr %r8310 to %Word8*
	store %Word8 %r8302, %Word8* %r8311
	; RW64(2): Word64  = Word64_add (RW64(0): Word64, 0x1)
	%r8312 = load %Word64, %Word64* %regW64_0
	%r8313 = add %Word64 %r8312, 1
	store %Word64 %r8313, %Word64* %regW64_2
	; RW64(0): Word64  = RW64(2): Word64
	%r8314 = load %Word64, %Word64* %regW64_2
	store %Word64 %r8314, %Word64* %regW64_0
	; Goto loop_35
	br label %loop_35

L_628:
	; Push(-40)
	%r8315 = load %Pointer, %Pointer* %stackTop
	%r8316 = getelementptr inbounds i8, %Pointer %r8315, i32 -40
	store %Pointer %r8316, %Pointer* %stackTop
	; Goto L_625
	br label %L_625

L_627:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 97}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_628}
	; GetOperands
	%r8317 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8318 = load %Pointer, %Pointer* %stackTop
	%r8319 = getelementptr inbounds i8, %Pointer %r8318, i32 32
	%r8320 = bitcast %Pointer %r8319 to %uintptr_t*
	store %uintptr_t 97, %uintptr_t* %r8320
	; Push(40)
	%r8321 = load %Pointer, %Pointer* %stackTop
	%r8322 = getelementptr inbounds i8, %Pointer %r8321, i32 40
	store %Pointer %r8322, %Pointer* %stackTop
	; FlushFrontier
	%r8323 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8324 = getelementptr inbounds i8, %Pointer %r8323, i32 0
	%r8325 = bitcast %Pointer %r8324 to %Pointer*
	%r8326 = load %Pointer, %Pointer* %frontier
	store %Pointer %r8326, %Pointer* %r8325
	; FlushStackTop
	%r8327 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8328 = getelementptr inbounds i8, %Pointer %r8327, i32 16
	%r8329 = bitcast %Pointer %r8328 to %Pointer*
	%r8330 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r8330, %Pointer* %r8329
	; Call
	call void @GC_collect(%Pointer %r8317, %Word64 0, %Word32 0)
	; CacheFrontier
	%r8331 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8332 = getelementptr inbounds i8, %Pointer %r8331, i32 0
	%r8333 = bitcast %Pointer %r8332 to %Pointer*
	%r8334 = load %Pointer, %Pointer* %r8333
	store %Pointer %r8334, %Pointer* %frontier
	; CacheStackTop
	%r8335 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8336 = getelementptr inbounds i8, %Pointer %r8335, i32 16
	%r8337 = bitcast %Pointer %r8336 to %Pointer*
	%r8338 = load %Pointer, %Pointer* %r8337
	store %Pointer %r8338, %Pointer* %stackTop
	br label %L_628

L_626:
	; RW64(0): [Word32, Bits32]  = WordU32_extdToWord64 (SW32(0): Word32)
	%r8339 = load %Pointer, %Pointer* %stackTop
	%r8340 = getelementptr inbounds i8, %Pointer %r8339, i32 0
	%r8341 = bitcast %Pointer %r8340 to %Word32*
	%r8342 = load %Word32, %Word32* %r8341
	%r8343 = zext %Word32 %r8342 to %Word64
	store %Word64 %r8343, %Word64* %regW64_0
	; RW64(1): [Word32, Bits32]  = Word64_lshift (RW64(0): [Word32, Bits32], 0x1)
	%r8344 = load %Word64, %Word64* %regW64_0
	%r8345 = zext %Word32 1 to %Word64
	%r8346 = shl %Word64 %r8344, %r8345
	store %Word64 %r8346, %Word64* %regW64_1
	; RW64(2): [Word32, Bits32]  = Word64_orb (RW64(1): [Word32, Bits32], 0x1)
	%r8347 = load %Word64, %Word64* %regW64_1
	%r8348 = or %Word64 %r8347, 1
	store %Word64 %r8348, %Word64* %regW64_2
	; CW64 (<Frontier>)  = 0x43
	%r8349 = load %Pointer, %Pointer* %frontier
	%r8350 = bitcast %Pointer %r8349 to %Word64*
	store %Word64 67, %Word64* %r8350
	; RQ(50): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r8351 = load %Pointer, %Pointer* %frontier
	%r8353 = ptrtoint %Pointer %r8351 to %uintptr_t
	%r8354 = add %uintptr_t %r8353, 8
	%r8352 = inttoptr %uintptr_t %r8354 to %Pointer
	store %CPointer %r8352, %CPointer* %regQ_50
	; RP(1): Objptr (opt_33)  = Cast (RQ(50): CPointer, Objptr (opt_33))
	%r8355 = load %CPointer, %CPointer* %regQ_50
	%r8356 = bitcast %CPointer %r8355 to %Objptr
	store %Objptr %r8356, %Objptr* %regP_1
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r8357 = load %Pointer, %Pointer* %frontier
	%r8359 = ptrtoint %Pointer %r8357 to %uintptr_t
	%r8360 = add %uintptr_t %r8359, 24
	%r8358 = inttoptr %uintptr_t %r8360 to %Pointer
	store %Pointer %r8358, %Pointer* %frontier
	; OW64 (RP(1): Objptr (opt_33), 0): [Word1, Bits63]  = Cast (RW64(2): [Word32, Bits32], [Word1, Bits63])
	%r8361 = load %Word64, %Word64* %regW64_2
	%r8362 = bitcast %Word64 %r8361 to %Word64
	%r8363 = load %Objptr, %Objptr* %regP_1
	%r8364 = getelementptr inbounds i8, %Objptr %r8363, i32 0
	%r8365 = bitcast %Objptr %r8364 to %Word64*
	store %Word64 %r8362, %Word64* %r8365
	; OP (RP(1): Objptr (opt_33), 8): Objptr (opt_3)  = RP(0): Objptr (opt_3)
	%r8366 = load %Objptr, %Objptr* %regP_0
	%r8367 = load %Objptr, %Objptr* %regP_1
	%r8368 = getelementptr inbounds i8, %Objptr %r8367, i32 8
	%r8369 = bitcast %Objptr %r8368 to %Objptr*
	store %Objptr %r8366, %Objptr* %r8369
	; glob {index = 0, isRoot = false, ty = Objptr (opt_34, opt_33, opt_32, opt_31)}  = Cast (RP(1): Objptr (opt_33), Objptr (opt_34, opt_33, opt_32, opt_31))
	%r8370 = load %Objptr, %Objptr* %regP_1
	%r8371 = bitcast %Objptr %r8370 to %Objptr
	%r8372 = getelementptr inbounds [1 x %Objptr], [1 x %Objptr]* @globalObjptrNonRoot, i32 0, i32 0
	store %Objptr %r8371, %Objptr* %r8372
	; Raise
	%r8373 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8374 = getelementptr inbounds i8, %Pointer %r8373, i32 1616
	%r8375 = bitcast %Pointer %r8374 to %Pointer*
	%r8376 = load %Pointer, %Pointer* %r8375
	%r8377 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8378 = getelementptr inbounds i8, %Pointer %r8377, i32 32
	%r8379 = bitcast %Pointer %r8378 to i32*
	%r8380 = load i32, i32* %r8379
	%r8381 = getelementptr inbounds i8, %Pointer %r8376, i32 %r8380
	store %Pointer %r8381, %Pointer* %stackTop
	%r8382 = load %Pointer, %Pointer* %stackTop
	%r8383 = getelementptr inbounds i8, %Pointer %r8382, i32 -8
	%r8384 = bitcast %Pointer %r8383 to %uintptr_t*
	%r8385 = load %uintptr_t, %uintptr_t* %r8384
	store %uintptr_t %r8385, %uintptr_t* %l_nextFun
	br label %top

L_625:
	; OW64 (SP(24): Objptr (opt_11), ~8): Word64  = 0x7
	%r8386 = load %Pointer, %Pointer* %stackTop
	%r8387 = getelementptr inbounds i8, %Pointer %r8386, i32 24
	%r8388 = bitcast %Pointer %r8387 to %Objptr*
	%r8389 = load %Objptr, %Objptr* %r8388
	%r8390 = getelementptr inbounds i8, %Objptr %r8389, i32 -8
	%r8391 = bitcast %Objptr %r8390 to %Word64*
	store %Word64 7, %Word64* %r8391
	; RP(0): Objptr (opt_3)  = Cast (SP(24): Objptr (opt_11), Objptr (opt_3))
	%r8392 = load %Pointer, %Pointer* %stackTop
	%r8393 = getelementptr inbounds i8, %Pointer %r8392, i32 24
	%r8394 = bitcast %Pointer %r8393 to %Objptr*
	%r8395 = load %Objptr, %Objptr* %r8394
	%r8396 = bitcast %Objptr %r8395 to %Objptr
	store %Objptr %r8396, %Objptr* %regP_0
	; Goto L_626
	br label %L_626

L_624:
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r8397 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8398 = getelementptr inbounds i8, %Pointer %r8397, i32 8
	%r8399 = bitcast %Pointer %r8398 to %CPointer*
	%r8400 = load %CPointer, %CPointer* %r8399
	%r8401 = load %Pointer, %Pointer* %frontier
	%r8403 = icmp ult %Pointer %r8400, %r8401
	%r8402 = zext i1 %r8403 to %Word32
	store %Word32 %r8402, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_625), (0x1, L_627))}
	%r8404 = load %Word32, %Word32* %regW32_0
	%r8405 = trunc %Word32 %r8404 to i1
	br i1 %r8405, label %L_627, label %L_625

loop_35:
	; RW32(0): Word32  = WordS64_lt (RW64(0): Word64, SW64(16): Word64)
	%r8406 = load %Word64, %Word64* %regW64_0
	%r8407 = load %Pointer, %Pointer* %stackTop
	%r8408 = getelementptr inbounds i8, %Pointer %r8407, i32 16
	%r8409 = bitcast %Pointer %r8408 to %Word64*
	%r8410 = load %Word64, %Word64* %r8409
	%r8412 = icmp slt %Word64 %r8406, %r8410
	%r8411 = zext i1 %r8412 to %Word32
	store %Word32 %r8411, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_624), (0x1, L_629))}
	%r8413 = load %Word32, %Word32* %regW32_0
	%r8414 = trunc %Word32 %r8413 to i1
	br i1 %r8414, label %L_629, label %L_624

L_join_8:
	; RW64(0): Word64  = 0x0
	store %Word64 0, %Word64* %regW64_0
	; Goto loop_35
	br label %loop_35

L_623:
	; Push(-32)
	%r8415 = load %Pointer, %Pointer* %stackTop
	%r8416 = getelementptr inbounds i8, %Pointer %r8415, i32 -32
	store %Pointer %r8416, %Pointer* %stackTop
	%r8417 = load %Objptr, %Objptr* @CReturnP
	store %Objptr %r8417, %Objptr* %regP_0
	; SP(24): Objptr (opt_11)  = RP(0): Objptr (opt_11)
	%r8418 = load %Objptr, %Objptr* %regP_0
	%r8419 = load %Pointer, %Pointer* %stackTop
	%r8420 = getelementptr inbounds i8, %Pointer %r8419, i32 24
	%r8421 = bitcast %Pointer %r8420 to %Objptr*
	store %Objptr %r8418, %Objptr* %r8421
	; Goto L_join_8
	br label %L_join_8

L_622:
	; CCall {args = (<GCState>, 0x0, SW64(16): Word64, 0x17), frameInfo = Some {frameLayoutsIndex = 96}, func = {args = (GCState, Word64, Word64, Word64), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int64, Word64), res = Some Objptr}, return = Objptr (opt_11), symbolScope = private, target = GC_arrayAllocate}, return = Some L_623}
	; GetOperands
	%r8422 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8423 = load %Pointer, %Pointer* %stackTop
	%r8424 = getelementptr inbounds i8, %Pointer %r8423, i32 16
	%r8425 = bitcast %Pointer %r8424 to %Word64*
	%r8426 = load %Word64, %Word64* %r8425
	%r8427 = load %Pointer, %Pointer* %stackTop
	%r8428 = getelementptr inbounds i8, %Pointer %r8427, i32 24
	%r8429 = bitcast %Pointer %r8428 to %uintptr_t*
	store %uintptr_t 96, %uintptr_t* %r8429
	; Push(32)
	%r8430 = load %Pointer, %Pointer* %stackTop
	%r8431 = getelementptr inbounds i8, %Pointer %r8430, i32 32
	store %Pointer %r8431, %Pointer* %stackTop
	; FlushFrontier
	%r8432 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8433 = getelementptr inbounds i8, %Pointer %r8432, i32 0
	%r8434 = bitcast %Pointer %r8433 to %Pointer*
	%r8435 = load %Pointer, %Pointer* %frontier
	store %Pointer %r8435, %Pointer* %r8434
	; FlushStackTop
	%r8436 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8437 = getelementptr inbounds i8, %Pointer %r8436, i32 16
	%r8438 = bitcast %Pointer %r8437 to %Pointer*
	%r8439 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r8439, %Pointer* %r8438
	; Call
	%r8440 = call %Objptr @GC_arrayAllocate(%Pointer %r8422, %Word64 0, %Word64 %r8426, %Word64 23)
	store %Objptr %r8440, %Objptr* @CReturnP
	; CacheFrontier
	%r8441 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8442 = getelementptr inbounds i8, %Pointer %r8441, i32 0
	%r8443 = bitcast %Pointer %r8442 to %Pointer*
	%r8444 = load %Pointer, %Pointer* %r8443
	store %Pointer %r8444, %Pointer* %frontier
	; CacheStackTop
	%r8445 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8446 = getelementptr inbounds i8, %Pointer %r8445, i32 16
	%r8447 = bitcast %Pointer %r8446 to %Pointer*
	%r8448 = load %Pointer, %Pointer* %r8447
	store %Pointer %r8448, %Pointer* %stackTop
	br label %L_623

L_621:
	; RW32(0): Word32  = Word64_equal (0x0, SW64(16): Word64)
	%r8449 = load %Pointer, %Pointer* %stackTop
	%r8450 = getelementptr inbounds i8, %Pointer %r8449, i32 16
	%r8451 = bitcast %Pointer %r8450 to %Word64*
	%r8452 = load %Word64, %Word64* %r8451
	%r8454 = icmp eq %Word64 0, %r8452
	%r8453 = zext i1 %r8454 to %Word32
	store %Word32 %r8453, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_622), (0x1, L_630))}
	%r8455 = load %Word32, %Word32* %regW32_0
	%r8456 = trunc %Word32 %r8455 to i1
	br i1 %r8456, label %L_630, label %L_622

L_620:
	; RW32(0): Word32  = WordU64_lt (0x7FFFFFFF, SW64(16): Word64)
	%r8457 = load %Pointer, %Pointer* %stackTop
	%r8458 = getelementptr inbounds i8, %Pointer %r8457, i32 16
	%r8459 = bitcast %Pointer %r8458 to %Word64*
	%r8460 = load %Word64, %Word64* %r8459
	%r8462 = icmp ult %Word64 2147483647, %r8460
	%r8461 = zext i1 %r8462 to %Word32
	store %Word32 %r8461, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_621), (0x1, L_631))}
	%r8463 = load %Word32, %Word32* %regW32_0
	%r8464 = trunc %Word32 %r8463 to i1
	br i1 %r8464, label %L_631, label %L_621

L_619:
	; RW32(1): Word32  = Word32_add (RW32(0): Word32, 0x1)
	%r8465 = load %Word32, %Word32* %regW32_0
	%r8466 = add %Word32 %r8465, 1
	store %Word32 %r8466, %Word32* %regW32_1
	; RW32(0): Word32  = RW32(1): Word32
	%r8467 = load %Word32, %Word32* %regW32_1
	store %Word32 %r8467, %Word32* %regW32_0
	; Goto loop_34
	br label %loop_34

loop_34:
	; SW64(16): Word64  = WordS32_extdToWord64 (RW32(0): Word32)
	%r8468 = load %Word32, %Word32* %regW32_0
	%r8469 = sext %Word32 %r8468 to %Word64
	%r8470 = load %Pointer, %Pointer* %stackTop
	%r8471 = getelementptr inbounds i8, %Pointer %r8470, i32 16
	%r8472 = bitcast %Pointer %r8471 to %Word64*
	store %Word64 %r8469, %Word64* %r8472
	; RW8(0): Word8  = XW8 (SQ(8): CPointer, SW64(16): Word64, 1, 0): Word8
	%r8473 = load %Pointer, %Pointer* %stackTop
	%r8474 = getelementptr inbounds i8, %Pointer %r8473, i32 8
	%r8475 = bitcast %Pointer %r8474 to %CPointer*
	%r8476 = load %CPointer, %CPointer* %r8475
	%r8477 = load %Pointer, %Pointer* %stackTop
	%r8478 = getelementptr inbounds i8, %Pointer %r8477, i32 16
	%r8479 = bitcast %Pointer %r8478 to %Word64*
	%r8480 = load %Word64, %Word64* %r8479
	%r8481 = mul nsw %Word64 %r8480, 1
	%r8482 = add nsw %Word64 %r8481, 0
	%r8483 = getelementptr inbounds i8, %CPointer %r8476, %Word64 %r8482
	%r8484 = bitcast %CPointer %r8483 to %Word8*
	%r8485 = load %Word8, %Word8* %r8484
	store %Word8 %r8485, %Word8* %regW8_0
	; switch {test = RW8(0): Word8, default = Some L_619, cases = ((0x0, L_620))}
	%r8486 = load %Word8, %Word8* %regW8_0
	switch %Word8 %r8486, label %L_619 [
		%Word8 0, label %L_620
	]

L_618:
	; RW32(0): Word32  = 0x0
	store %Word32 0, %Word32* %regW32_0
	; Goto loop_34
	br label %loop_34

L_617:
	%r8487 = load %Word64, %Word64* @CReturnW64
	store %Word64 %r8487, %Word64* %regW64_0
	; SQ(8): CPointer  = CPointer_fromWord (RW64(0): Word64)
	%r8488 = load %Word64, %Word64* %regW64_0
	%r8489 = inttoptr %uintptr_t %r8488 to %Pointer
	%r8490 = load %Pointer, %Pointer* %stackTop
	%r8491 = getelementptr inbounds i8, %Pointer %r8490, i32 8
	%r8492 = bitcast %Pointer %r8491 to %CPointer*
	store %CPointer %r8489, %CPointer* %r8492
	; RW32(0): Word32  = CPointer_equal (SQ(8): CPointer, NULL)
	%r8493 = load %Pointer, %Pointer* %stackTop
	%r8494 = getelementptr inbounds i8, %Pointer %r8493, i32 8
	%r8495 = bitcast %Pointer %r8494 to %CPointer*
	%r8496 = load %CPointer, %CPointer* %r8495
	%r8498 = icmp eq %Pointer %r8496, null
	%r8497 = zext i1 %r8498 to %Word32
	store %Word32 %r8497, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_618), (0x1, L_633))}
	%r8499 = load %Word32, %Word32* %regW32_0
	%r8500 = trunc %Word32 %r8499 to i1
	br i1 %r8500, label %L_633, label %L_618

L_616:
	; CCall {args = (SW32(0): Word32), frameInfo = None, func = {args = (Word32), convention = cdecl, kind = Impure, prototype = {args = (Int32), res = Some Word64}, return = Word64, symbolScope = private, target = Posix_Error_strError}, return = Some L_617}
	; GetOperands
	%r8501 = load %Pointer, %Pointer* %stackTop
	%r8502 = getelementptr inbounds i8, %Pointer %r8501, i32 0
	%r8503 = bitcast %Pointer %r8502 to %Word32*
	%r8504 = load %Word32, %Word32* %r8503
	; Call
	%r8505 = call %Word64 @Posix_Error_strError(%Word32 %r8504)
	store %Word64 %r8505, %Word64* @CReturnW64
	br label %L_617

L_615:
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r8506 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8507 = getelementptr inbounds i8, %Pointer %r8506, i32 8
	%r8508 = bitcast %Pointer %r8507 to %CPointer*
	%r8509 = load %CPointer, %CPointer* %r8508
	%r8510 = load %Pointer, %Pointer* %frontier
	%r8512 = icmp ult %Pointer %r8509, %r8510
	%r8511 = zext i1 %r8512 to %Word32
	store %Word32 %r8511, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_616), (0x1, L_634))}
	%r8513 = load %Word32, %Word32* %regW32_0
	%r8514 = trunc %Word32 %r8513 to i1
	br i1 %r8514, label %L_634, label %L_616

loop_33:
	; RW32(2): Word32  = Word32_equal (SW32(0): Word32, 0x4)
	%r8515 = load %Pointer, %Pointer* %stackTop
	%r8516 = getelementptr inbounds i8, %Pointer %r8515, i32 0
	%r8517 = bitcast %Pointer %r8516 to %Word32*
	%r8518 = load %Word32, %Word32* %r8517
	%r8520 = icmp eq %Word32 %r8518, 4
	%r8519 = zext i1 %r8520 to %Word32
	store %Word32 %r8519, %Word32* %regW32_2
	; switch {test = RW32(2): Word32, default = None, cases = ((0x0, L_615), (0x1, L_636))}
	%r8521 = load %Word32, %Word32* %regW32_2
	%r8522 = trunc %Word32 %r8521 to i1
	br i1 %r8522, label %L_636, label %L_615

L_614:
	; RW32(3): Word32  = Word32_add (OW32 (<GCState>, 68): Word32, 0xFFFFFFFF)
	%r8523 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8524 = getelementptr inbounds i8, %Pointer %r8523, i32 68
	%r8525 = bitcast %Pointer %r8524 to %Word32*
	%r8526 = load %Word32, %Word32* %r8525
	%r8527 = add %Word32 %r8526, 4294967295
	store %Word32 %r8527, %Word32* %regW32_3
	; OW32 (<GCState>, 68): Word32  = RW32(3): Word32
	%r8528 = load %Word32, %Word32* %regW32_3
	%r8529 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8530 = getelementptr inbounds i8, %Pointer %r8529, i32 68
	%r8531 = bitcast %Pointer %r8530 to %Word32*
	store %Word32 %r8528, %Word32* %r8531
	; SW32(0): Word32  = RW32(2): Word32
	%r8532 = load %Word32, %Word32* %regW32_2
	%r8533 = load %Pointer, %Pointer* %stackTop
	%r8534 = getelementptr inbounds i8, %Pointer %r8533, i32 0
	%r8535 = bitcast %Pointer %r8534 to %Word32*
	store %Word32 %r8532, %Word32* %r8535
	; Goto loop_33
	br label %loop_33

L_613:
	%r8536 = load %Word32, %Word32* @CReturnW32
	store %Word32 %r8536, %Word32* %regW32_2
	; RW32(3): Word32  = OW32 (<GCState>, 68): Word32
	%r8537 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8538 = getelementptr inbounds i8, %Pointer %r8537, i32 68
	%r8539 = bitcast %Pointer %r8538 to %Word32*
	%r8540 = load %Word32, %Word32* %r8539
	store %Word32 %r8540, %Word32* %regW32_3
	; RW32(4): Word32  = Word32_equal (RW32(3): Word32, 0x0)
	%r8541 = load %Word32, %Word32* %regW32_3
	%r8543 = icmp eq %Word32 %r8541, 0
	%r8542 = zext i1 %r8543 to %Word32
	store %Word32 %r8542, %Word32* %regW32_4
	; switch {test = RW32(4): Word32, default = None, cases = ((0x0, L_614), (0x1, L_674))}
	%r8544 = load %Word32, %Word32* %regW32_4
	%r8545 = trunc %Word32 %r8544 to i1
	br i1 %r8545, label %L_674, label %L_614

L_612:
	; CCall {args = (), frameInfo = None, func = {args = (), convention = cdecl, kind = Impure, prototype = {args = (), res = Some Int32}, return = Word32, symbolScope = private, target = Posix_Error_getErrno}, return = Some L_613}
	; GetOperands
	; Call
	%r8546 = call %Word32 @Posix_Error_getErrno()
	store %Word32 %r8546, %Word32* @CReturnW32
	br label %L_613

L_611:
	; glob {index = 0, isRoot = false, ty = Objptr (opt_34, opt_33, opt_32, opt_31)}  = Cast (glob {index = 9, isRoot = true, ty = Objptr (opt_31)}, Objptr (opt_34, opt_33, opt_32, opt_31))
	%r8547 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 9
	%r8548 = load %Objptr, %Objptr* %r8547
	%r8549 = bitcast %Objptr %r8548 to %Objptr
	%r8550 = getelementptr inbounds [1 x %Objptr], [1 x %Objptr]* @globalObjptrNonRoot, i32 0, i32 0
	store %Objptr %r8549, %Objptr* %r8550
	; Raise
	%r8551 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8552 = getelementptr inbounds i8, %Pointer %r8551, i32 1616
	%r8553 = bitcast %Pointer %r8552 to %Pointer*
	%r8554 = load %Pointer, %Pointer* %r8553
	%r8555 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8556 = getelementptr inbounds i8, %Pointer %r8555, i32 32
	%r8557 = bitcast %Pointer %r8556 to i32*
	%r8558 = load i32, i32* %r8557
	%r8559 = getelementptr inbounds i8, %Pointer %r8554, i32 %r8558
	store %Pointer %r8559, %Pointer* %stackTop
	%r8560 = load %Pointer, %Pointer* %stackTop
	%r8561 = getelementptr inbounds i8, %Pointer %r8560, i32 -8
	%r8562 = bitcast %Pointer %r8561 to %uintptr_t*
	%r8563 = load %uintptr_t, %uintptr_t* %r8562
	store %uintptr_t %r8563, %uintptr_t* %l_nextFun
	br label %top

L_610:
	; Goto L_611
	br label %L_611

L_609:
	; glob {index = 0, isRoot = false, ty = Objptr (opt_34, opt_33, opt_32, opt_31)}  = Cast (glob {index = 13, isRoot = true, ty = Objptr (opt_32)}, Objptr (opt_34, opt_33, opt_32, opt_31))
	%r8564 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 13
	%r8565 = load %Objptr, %Objptr* %r8564
	%r8566 = bitcast %Objptr %r8565 to %Objptr
	%r8567 = getelementptr inbounds [1 x %Objptr], [1 x %Objptr]* @globalObjptrNonRoot, i32 0, i32 0
	store %Objptr %r8566, %Objptr* %r8567
	; Raise
	%r8568 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8569 = getelementptr inbounds i8, %Pointer %r8568, i32 1616
	%r8570 = bitcast %Pointer %r8569 to %Pointer*
	%r8571 = load %Pointer, %Pointer* %r8570
	%r8572 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8573 = getelementptr inbounds i8, %Pointer %r8572, i32 32
	%r8574 = bitcast %Pointer %r8573 to i32*
	%r8575 = load i32, i32* %r8574
	%r8576 = getelementptr inbounds i8, %Pointer %r8571, i32 %r8575
	store %Pointer %r8576, %Pointer* %stackTop
	%r8577 = load %Pointer, %Pointer* %stackTop
	%r8578 = getelementptr inbounds i8, %Pointer %r8577, i32 -8
	%r8579 = bitcast %Pointer %r8578 to %uintptr_t*
	%r8580 = load %uintptr_t, %uintptr_t* %r8579
	store %uintptr_t %r8580, %uintptr_t* %l_nextFun
	br label %top

L_608:
	; RW32(1): Word32  = RW32(3): Word32
	%r8581 = load %Word32, %Word32* %regW32_3
	store %Word32 %r8581, %Word32* %regW32_1
	; Goto loop_32
	br label %loop_32

L_607:
	; Arith {prim = WordS32_addCheck, args = (RW32(1): Word32, RW32(2): Word32), dst = RW32(3): Word32, overflow = L_596, success = L_608}
	%r8582 = load %Word32, %Word32* %regW32_1
	%r8583 = load %Word32, %Word32* %regW32_2
	%r8584 = call {%Word32, i1} @llvm.sadd.with.overflow.i32(%Word32 %r8582, %Word32 %r8583)
	%r8585 = extractvalue {%Word32, i1} %r8584, 0
	%r8586 = extractvalue {%Word32, i1} %r8584, 1
	store %Word32 %r8585, %Word32* %regW32_3
	br i1 %r8586, label %L_596, label %L_608

L_606:
	; OW64 (RP(2): Objptr (opt_12), 0): Word64  = RW64(3): Word64
	%r8587 = load %Word64, %Word64* %regW64_3
	%r8588 = load %Objptr, %Objptr* %regP_2
	%r8589 = getelementptr inbounds i8, %Objptr %r8588, i32 0
	%r8590 = bitcast %Objptr %r8589 to %Word64*
	store %Word64 %r8587, %Word64* %r8590
	; RW32(3): Word32  = Word32_equal (RW32(2): Word32, 0x0)
	%r8591 = load %Word32, %Word32* %regW32_2
	%r8593 = icmp eq %Word32 %r8591, 0
	%r8592 = zext i1 %r8593 to %Word32
	store %Word32 %r8592, %Word32* %regW32_3
	; switch {test = RW32(3): Word32, default = None, cases = ((0x0, L_607), (0x1, L_609))}
	%r8594 = load %Word32, %Word32* %regW32_3
	%r8595 = trunc %Word32 %r8594 to i1
	br i1 %r8595, label %L_609, label %L_607

L_605:
	; RW64(1): Word64  = OW64 (RP(2): Objptr (opt_12), 0): Word64
	%r8596 = load %Objptr, %Objptr* %regP_2
	%r8597 = getelementptr inbounds i8, %Objptr %r8596, i32 0
	%r8598 = bitcast %Objptr %r8597 to %Word64*
	%r8599 = load %Word64, %Word64* %r8598
	store %Word64 %r8599, %Word64* %regW64_1
	; Arith {prim = WordS64_addCheck, args = (RW64(1): Word64, RW64(2): Word64), dst = RW64(3): Word64, overflow = L_596, success = L_606}
	%r8600 = load %Word64, %Word64* %regW64_1
	%r8601 = load %Word64, %Word64* %regW64_2
	%r8602 = call {%Word64, i1} @llvm.sadd.with.overflow.i64(%Word64 %r8600, %Word64 %r8601)
	%r8603 = extractvalue {%Word64, i1} %r8602, 0
	%r8604 = extractvalue {%Word64, i1} %r8602, 1
	store %Word64 %r8603, %Word64* %regW64_3
	br i1 %r8604, label %L_596, label %L_606

L_604:
	; Goto L_596
	br label %L_596

x_1:
	; RW32(2): Word32  = WordU64_extdToWord32 (RW64(1): Word64)
	%r8605 = load %Word64, %Word64* %regW64_1
	%r8606 = trunc %Word64 %r8605 to %Word32
	store %Word32 %r8606, %Word32* %regW32_2
	; RW64(2): Word64  = WordS32_extdToWord64 (RW32(2): Word32)
	%r8607 = load %Word32, %Word32* %regW32_2
	%r8608 = sext %Word32 %r8607 to %Word64
	store %Word64 %r8608, %Word64* %regW64_2
	; RW32(3): Word32  = Word64_equal (RW64(2): Word64, RW64(1): Word64)
	%r8609 = load %Word64, %Word64* %regW64_2
	%r8610 = load %Word64, %Word64* %regW64_1
	%r8612 = icmp eq %Word64 %r8609, %r8610
	%r8611 = zext i1 %r8612 to %Word32
	store %Word32 %r8611, %Word32* %regW32_3
	; switch {test = RW32(3): Word32, default = None, cases = ((0x0, L_604), (0x1, L_605))}
	%r8613 = load %Word32, %Word32* %regW32_3
	%r8614 = trunc %Word32 %r8613 to i1
	br i1 %r8614, label %L_605, label %L_604

L_603:
	; RW32(2): Word32  = Word32_add (OW32 (<GCState>, 68): Word32, 0xFFFFFFFF)
	%r8615 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8616 = getelementptr inbounds i8, %Pointer %r8615, i32 68
	%r8617 = bitcast %Pointer %r8616 to %Word32*
	%r8618 = load %Word32, %Word32* %r8617
	%r8619 = add %Word32 %r8618, 4294967295
	store %Word32 %r8619, %Word32* %regW32_2
	; OW32 (<GCState>, 68): Word32  = RW32(2): Word32
	%r8620 = load %Word32, %Word32* %regW32_2
	%r8621 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8622 = getelementptr inbounds i8, %Pointer %r8621, i32 68
	%r8623 = bitcast %Pointer %r8622 to %Word32*
	store %Word32 %r8620, %Word32* %r8623
	; Goto x_1
	br label %x_1

L_602:
	; RW32(2): Word32  = OW32 (<GCState>, 68): Word32
	%r8624 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8625 = getelementptr inbounds i8, %Pointer %r8624, i32 68
	%r8626 = bitcast %Pointer %r8625 to %Word32*
	%r8627 = load %Word32, %Word32* %r8626
	store %Word32 %r8627, %Word32* %regW32_2
	; RW32(3): Word32  = Word32_equal (RW32(2): Word32, 0x0)
	%r8628 = load %Word32, %Word32* %regW32_2
	%r8630 = icmp eq %Word32 %r8628, 0
	%r8629 = zext i1 %r8630 to %Word32
	store %Word32 %r8629, %Word32* %regW32_3
	; switch {test = RW32(3): Word32, default = None, cases = ((0x0, L_603), (0x1, L_610))}
	%r8631 = load %Word32, %Word32* %regW32_3
	%r8632 = trunc %Word32 %r8631 to i1
	br i1 %r8632, label %L_610, label %L_603

L_601:
	%r8633 = load %Word64, %Word64* @CReturnW64
	store %Word64 %r8633, %Word64* %regW64_1
	; RW32(2): Word32  = Word64_equal (RW64(1): Word64, 0xFFFFFFFFFFFFFFFF)
	%r8634 = load %Word64, %Word64* %regW64_1
	%r8636 = icmp eq %Word64 %r8634, 18446744073709551615
	%r8635 = zext i1 %r8636 to %Word32
	store %Word32 %r8635, %Word32* %regW32_2
	; switch {test = RW32(2): Word32, default = None, cases = ((0x0, L_602), (0x1, L_612))}
	%r8637 = load %Word32, %Word32* %regW32_2
	%r8638 = trunc %Word32 %r8637 to i1
	br i1 %r8638, label %L_612, label %L_602

L_600:
	; RW32(2): Word32  = Word32_add (OW32 (<GCState>, 68): Word32, 0x1)
	%r8639 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8640 = getelementptr inbounds i8, %Pointer %r8639, i32 68
	%r8641 = bitcast %Pointer %r8640 to %Word32*
	%r8642 = load %Word32, %Word32* %r8641
	%r8643 = add %Word32 %r8642, 1
	store %Word32 %r8643, %Word32* %regW32_2
	; OW32 (<GCState>, 68): Word32  = RW32(2): Word32
	%r8644 = load %Word32, %Word32* %regW32_2
	%r8645 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8646 = getelementptr inbounds i8, %Pointer %r8645, i32 68
	%r8647 = bitcast %Pointer %r8646 to %Word32*
	store %Word32 %r8644, %Word32* %r8647
	; CCall {args = (0x1, RP(1): Objptr (opt_11), RW32(1): Word32, RW64(2): Word64), frameInfo = None, func = {args = (Word32, Objptr (opt_11), Word32, Word64), convention = cdecl, kind = Impure, prototype = {args = (Int32, Objptr, Int32, Word64), res = Some Int64}, return = Word64, symbolScope = private, target = Posix_IO_writeChar8Arr}, return = Some L_601}
	; GetOperands
	%r8648 = load %Objptr, %Objptr* %regP_1
	%r8649 = load %Word32, %Word32* %regW32_1
	%r8650 = load %Word64, %Word64* %regW64_2
	; Call
	%r8651 = call %Word64 @Posix_IO_writeChar8Arr(%Word32 1, %Objptr %r8648, %Word32 %r8649, %Word64 %r8650)
	store %Word64 %r8651, %Word64* @CReturnW64
	br label %L_601

L_599:
	; RP(2): Objptr (opt_12)  = OP (RP(0): Objptr (opt_14), 8): Objptr (opt_12)
	%r8652 = load %Objptr, %Objptr* %regP_0
	%r8653 = getelementptr inbounds i8, %Objptr %r8652, i32 8
	%r8654 = bitcast %Objptr %r8653 to %Objptr*
	%r8655 = load %Objptr, %Objptr* %r8654
	store %Objptr %r8655, %Objptr* %regP_2
	; RP(3): Objptr (opt_13)  = OP (RP(0): Objptr (opt_14), 0): Objptr (opt_13)
	%r8656 = load %Objptr, %Objptr* %regP_0
	%r8657 = getelementptr inbounds i8, %Objptr %r8656, i32 0
	%r8658 = bitcast %Objptr %r8657 to %Objptr*
	%r8659 = load %Objptr, %Objptr* %r8658
	store %Objptr %r8659, %Objptr* %regP_3
	; RW32(2): Word32  = OW32 (RP(3): Objptr (opt_13), 0): Word32
	%r8660 = load %Objptr, %Objptr* %regP_3
	%r8661 = getelementptr inbounds i8, %Objptr %r8660, i32 0
	%r8662 = bitcast %Objptr %r8661 to %Word32*
	%r8663 = load %Word32, %Word32* %r8662
	store %Word32 %r8663, %Word32* %regW32_2
	; switch {test = RW32(2): Word32, default = None, cases = ((0x0, L_600), (0x1, L_675))}
	%r8664 = load %Word32, %Word32* %regW32_2
	%r8665 = trunc %Word32 %r8664 to i1
	br i1 %r8665, label %L_675, label %L_600

L_598:
	; RW64(3): Word64  = Word64_sub (RW64(0): Word64, RW64(1): Word64)
	%r8666 = load %Word64, %Word64* %regW64_0
	%r8667 = load %Word64, %Word64* %regW64_1
	%r8668 = sub %Word64 %r8666, %r8667
	store %Word64 %r8668, %Word64* %regW64_3
	; RW32(2): Word32  = WordU64_lt (RW64(3): Word64, RW64(2): Word64)
	%r8669 = load %Word64, %Word64* %regW64_3
	%r8670 = load %Word64, %Word64* %regW64_2
	%r8672 = icmp ult %Word64 %r8669, %r8670
	%r8671 = zext i1 %r8672 to %Word32
	store %Word32 %r8671, %Word32* %regW32_2
	; switch {test = RW32(2): Word32, default = None, cases = ((0x0, L_599), (0x1, L_676))}
	%r8673 = load %Word32, %Word32* %regW32_2
	%r8674 = trunc %Word32 %r8673 to i1
	br i1 %r8674, label %L_676, label %L_599

L_597:
	; RW64(1): Word64  = WordS32_extdToWord64 (RW32(1): Word32)
	%r8675 = load %Word32, %Word32* %regW32_1
	%r8676 = sext %Word32 %r8675 to %Word64
	store %Word64 %r8676, %Word64* %regW64_1
	; RW64(2): Word64  = WordS32_extdToWord64 (RW32(2): Word32)
	%r8677 = load %Word32, %Word32* %regW32_2
	%r8678 = sext %Word32 %r8677 to %Word64
	store %Word64 %r8678, %Word64* %regW64_2
	; RW32(3): Word32  = WordU64_lt (RW64(0): Word64, RW64(1): Word64)
	%r8679 = load %Word64, %Word64* %regW64_0
	%r8680 = load %Word64, %Word64* %regW64_1
	%r8682 = icmp ult %Word64 %r8679, %r8680
	%r8681 = zext i1 %r8682 to %Word32
	store %Word32 %r8681, %Word32* %regW32_3
	; switch {test = RW32(3): Word32, default = None, cases = ((0x0, L_598), (0x1, L_678))}
	%r8683 = load %Word32, %Word32* %regW32_3
	%r8684 = trunc %Word32 %r8683 to i1
	br i1 %r8684, label %L_678, label %L_598

L_596:
	; glob {index = 0, isRoot = false, ty = Objptr (opt_34, opt_33, opt_32, opt_31)}  = Cast (0x1, Objptr (opt_34, opt_33, opt_32, opt_31))
	%r8685 = inttoptr %Word64 1 to %Objptr
	%r8686 = getelementptr inbounds [1 x %Objptr], [1 x %Objptr]* @globalObjptrNonRoot, i32 0, i32 0
	store %Objptr %r8685, %Objptr* %r8686
	; Raise
	%r8687 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8688 = getelementptr inbounds i8, %Pointer %r8687, i32 1616
	%r8689 = bitcast %Pointer %r8688 to %Pointer*
	%r8690 = load %Pointer, %Pointer* %r8689
	%r8691 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8692 = getelementptr inbounds i8, %Pointer %r8691, i32 32
	%r8693 = bitcast %Pointer %r8692 to i32*
	%r8694 = load i32, i32* %r8693
	%r8695 = getelementptr inbounds i8, %Pointer %r8690, i32 %r8694
	store %Pointer %r8695, %Pointer* %stackTop
	%r8696 = load %Pointer, %Pointer* %stackTop
	%r8697 = getelementptr inbounds i8, %Pointer %r8696, i32 -8
	%r8698 = bitcast %Pointer %r8697 to %uintptr_t*
	%r8699 = load %uintptr_t, %uintptr_t* %r8698
	store %uintptr_t %r8699, %uintptr_t* %l_nextFun
	br label %top

L_595:
	; Arith {prim = WordS32_subCheck, args = (RW32(0): Word32, RW32(1): Word32), dst = RW32(2): Word32, overflow = L_596, success = L_597}
	%r8700 = load %Word32, %Word32* %regW32_0
	%r8701 = load %Word32, %Word32* %regW32_1
	%r8702 = call {%Word32, i1} @llvm.ssub.with.overflow.i32(%Word32 %r8700, %Word32 %r8701)
	%r8703 = extractvalue {%Word32, i1} %r8702, 0
	%r8704 = extractvalue {%Word32, i1} %r8702, 1
	store %Word32 %r8703, %Word32* %regW32_2
	br i1 %r8704, label %L_596, label %L_597

loop_32:
	; RW32(2): Word32  = Word32_equal (RW32(1): Word32, RW32(0): Word32)
	%r8705 = load %Word32, %Word32* %regW32_1
	%r8706 = load %Word32, %Word32* %regW32_0
	%r8708 = icmp eq %Word32 %r8705, %r8706
	%r8707 = zext i1 %r8708 to %Word32
	store %Word32 %r8707, %Word32* %regW32_2
	; switch {test = RW32(2): Word32, default = None, cases = ((0x0, L_595), (0x1, L_679))}
	%r8709 = load %Word32, %Word32* %regW32_2
	%r8710 = trunc %Word32 %r8709 to i1
	br i1 %r8710, label %L_679, label %L_595

L_594:
	; RP(0): Objptr (opt_14)  = OP (SP(8): Objptr (opt_15), 8): Objptr (opt_14)
	%r8711 = load %Pointer, %Pointer* %stackTop
	%r8712 = getelementptr inbounds i8, %Pointer %r8711, i32 8
	%r8713 = bitcast %Pointer %r8712 to %Objptr*
	%r8714 = load %Objptr, %Objptr* %r8713
	%r8715 = getelementptr inbounds i8, %Objptr %r8714, i32 8
	%r8716 = bitcast %Objptr %r8715 to %Objptr*
	%r8717 = load %Objptr, %Objptr* %r8716
	store %Objptr %r8717, %Objptr* %regP_0
	; RW32(1): Word32  = 0x0
	store %Word32 0, %Word32* %regW32_1
	; Goto loop_32
	br label %loop_32

L_593:
	; RP(0): Objptr (opt_10)  = OP (SP(0): Objptr (opt_30), 0): Objptr (opt_10)
	%r8718 = load %Pointer, %Pointer* %stackTop
	%r8719 = getelementptr inbounds i8, %Pointer %r8718, i32 0
	%r8720 = bitcast %Pointer %r8719 to %Objptr*
	%r8721 = load %Objptr, %Objptr* %r8720
	%r8722 = getelementptr inbounds i8, %Objptr %r8721, i32 0
	%r8723 = bitcast %Objptr %r8722 to %Objptr*
	%r8724 = load %Objptr, %Objptr* %r8723
	store %Objptr %r8724, %Objptr* %regP_0
	; RP(1): Objptr (opt_11)  = OP (SP(0): Objptr (opt_30), 8): Objptr (opt_11)
	%r8725 = load %Pointer, %Pointer* %stackTop
	%r8726 = getelementptr inbounds i8, %Pointer %r8725, i32 0
	%r8727 = bitcast %Pointer %r8726 to %Objptr*
	%r8728 = load %Objptr, %Objptr* %r8727
	%r8729 = getelementptr inbounds i8, %Objptr %r8728, i32 8
	%r8730 = bitcast %Objptr %r8729 to %Objptr*
	%r8731 = load %Objptr, %Objptr* %r8730
	store %Objptr %r8731, %Objptr* %regP_1
	; RW32(0): Word32  = OW32 (RP(0): Objptr (opt_10), 0): Word32
	%r8732 = load %Objptr, %Objptr* %regP_0
	%r8733 = getelementptr inbounds i8, %Objptr %r8732, i32 0
	%r8734 = bitcast %Objptr %r8733 to %Word32*
	%r8735 = load %Word32, %Word32* %r8734
	store %Word32 %r8735, %Word32* %regW32_0
	; OW32 (RP(0): Objptr (opt_10), 0): Word32  = 0x0
	%r8736 = load %Objptr, %Objptr* %regP_0
	%r8737 = getelementptr inbounds i8, %Objptr %r8736, i32 0
	%r8738 = bitcast %Objptr %r8737 to %Word32*
	store %Word32 0, %Word32* %r8738
	; RW64(0): Word64  = OW64 (RP(1): Objptr (opt_11), ~16): Word64
	%r8739 = load %Objptr, %Objptr* %regP_1
	%r8740 = getelementptr inbounds i8, %Objptr %r8739, i32 -16
	%r8741 = bitcast %Objptr %r8740 to %Word64*
	%r8742 = load %Word64, %Word64* %r8741
	store %Word64 %r8742, %Word64* %regW64_0
	; RW64(1): Word64  = WordS32_extdToWord64 (RW32(0): Word32)
	%r8743 = load %Word32, %Word32* %regW32_0
	%r8744 = sext %Word32 %r8743 to %Word64
	store %Word64 %r8744, %Word64* %regW64_1
	; RW32(1): Word32  = WordU64_lt (RW64(0): Word64, RW64(1): Word64)
	%r8745 = load %Word64, %Word64* %regW64_0
	%r8746 = load %Word64, %Word64* %regW64_1
	%r8748 = icmp ult %Word64 %r8745, %r8746
	%r8747 = zext i1 %r8748 to %Word32
	store %Word32 %r8747, %Word32* %regW32_1
	; switch {test = RW32(1): Word32, default = None, cases = ((0x0, L_594), (0x1, L_680))}
	%r8749 = load %Word32, %Word32* %regW32_1
	%r8750 = trunc %Word32 %r8749 to i1
	br i1 %r8750, label %L_680, label %L_594

L_592:
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 24): CPointer, <StackTop>)
	%r8751 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8752 = getelementptr inbounds i8, %Pointer %r8751, i32 24
	%r8753 = bitcast %Pointer %r8752 to %CPointer*
	%r8754 = load %CPointer, %CPointer* %r8753
	%r8755 = load %Pointer, %Pointer* %stackTop
	%r8757 = icmp ult %Pointer %r8754, %r8755
	%r8756 = zext i1 %r8757 to %Word32
	store %Word32 %r8756, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_593), (0x1, L_681))}
	%r8758 = load %Word32, %Word32* %regW32_0
	%r8759 = trunc %Word32 %r8758 to i1
	br i1 %r8759, label %L_681, label %L_593

flushBuf_0:
	; Goto L_592
	br label %L_592

L_591:
	; Push(-40)
	%r8760 = load %Pointer, %Pointer* %stackTop
	%r8761 = getelementptr inbounds i8, %Pointer %r8760, i32 -40
	store %Pointer %r8761, %Pointer* %stackTop
	; Goto L_405
	br label %L_405

L_590:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 95}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_591}
	; GetOperands
	%r8762 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8763 = load %Pointer, %Pointer* %stackTop
	%r8764 = getelementptr inbounds i8, %Pointer %r8763, i32 32
	%r8765 = bitcast %Pointer %r8764 to %uintptr_t*
	store %uintptr_t 95, %uintptr_t* %r8765
	; Push(40)
	%r8766 = load %Pointer, %Pointer* %stackTop
	%r8767 = getelementptr inbounds i8, %Pointer %r8766, i32 40
	store %Pointer %r8767, %Pointer* %stackTop
	; FlushFrontier
	%r8768 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8769 = getelementptr inbounds i8, %Pointer %r8768, i32 0
	%r8770 = bitcast %Pointer %r8769 to %Pointer*
	%r8771 = load %Pointer, %Pointer* %frontier
	store %Pointer %r8771, %Pointer* %r8770
	; FlushStackTop
	%r8772 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8773 = getelementptr inbounds i8, %Pointer %r8772, i32 16
	%r8774 = bitcast %Pointer %r8773 to %Pointer*
	%r8775 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r8775, %Pointer* %r8774
	; Call
	call void @GC_collect(%Pointer %r8762, %Word64 0, %Word32 0)
	; CacheFrontier
	%r8776 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8777 = getelementptr inbounds i8, %Pointer %r8776, i32 0
	%r8778 = bitcast %Pointer %r8777 to %Pointer*
	%r8779 = load %Pointer, %Pointer* %r8778
	store %Pointer %r8779, %Pointer* %frontier
	; CacheStackTop
	%r8780 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8781 = getelementptr inbounds i8, %Pointer %r8780, i32 16
	%r8782 = bitcast %Pointer %r8781 to %Pointer*
	%r8783 = load %Pointer, %Pointer* %r8782
	store %Pointer %r8783, %Pointer* %stackTop
	br label %L_591

L_589:
	; Push(-104)
	%r8784 = load %Pointer, %Pointer* %stackTop
	%r8785 = getelementptr inbounds i8, %Pointer %r8784, i32 -104
	store %Pointer %r8785, %Pointer* %stackTop
	; Goto L_571
	br label %L_571

L_588:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 94}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_589}
	; GetOperands
	%r8786 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8787 = load %Pointer, %Pointer* %stackTop
	%r8788 = getelementptr inbounds i8, %Pointer %r8787, i32 96
	%r8789 = bitcast %Pointer %r8788 to %uintptr_t*
	store %uintptr_t 94, %uintptr_t* %r8789
	; Push(104)
	%r8790 = load %Pointer, %Pointer* %stackTop
	%r8791 = getelementptr inbounds i8, %Pointer %r8790, i32 104
	store %Pointer %r8791, %Pointer* %stackTop
	; FlushFrontier
	%r8792 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8793 = getelementptr inbounds i8, %Pointer %r8792, i32 0
	%r8794 = bitcast %Pointer %r8793 to %Pointer*
	%r8795 = load %Pointer, %Pointer* %frontier
	store %Pointer %r8795, %Pointer* %r8794
	; FlushStackTop
	%r8796 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8797 = getelementptr inbounds i8, %Pointer %r8796, i32 16
	%r8798 = bitcast %Pointer %r8797 to %Pointer*
	%r8799 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r8799, %Pointer* %r8798
	; Call
	call void @GC_collect(%Pointer %r8786, %Word64 0, %Word32 0)
	; CacheFrontier
	%r8800 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8801 = getelementptr inbounds i8, %Pointer %r8800, i32 0
	%r8802 = bitcast %Pointer %r8801 to %Pointer*
	%r8803 = load %Pointer, %Pointer* %r8802
	store %Pointer %r8803, %Pointer* %frontier
	; CacheStackTop
	%r8804 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8805 = getelementptr inbounds i8, %Pointer %r8804, i32 16
	%r8806 = bitcast %Pointer %r8805 to %Pointer*
	%r8807 = load %Pointer, %Pointer* %r8806
	store %Pointer %r8807, %Pointer* %stackTop
	br label %L_589

L_587:
	; Goto L_524
	br label %L_524

L_586:
	; Goto L_524
	br label %L_524

L_585:
	; Push(-80)
	%r8808 = load %Pointer, %Pointer* %stackTop
	%r8809 = getelementptr inbounds i8, %Pointer %r8808, i32 -80
	store %Pointer %r8809, %Pointer* %stackTop
	; Goto L_583
	br label %L_583

L_584:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 93}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_585}
	; GetOperands
	%r8810 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8811 = load %Pointer, %Pointer* %stackTop
	%r8812 = getelementptr inbounds i8, %Pointer %r8811, i32 72
	%r8813 = bitcast %Pointer %r8812 to %uintptr_t*
	store %uintptr_t 93, %uintptr_t* %r8813
	; Push(80)
	%r8814 = load %Pointer, %Pointer* %stackTop
	%r8815 = getelementptr inbounds i8, %Pointer %r8814, i32 80
	store %Pointer %r8815, %Pointer* %stackTop
	; FlushFrontier
	%r8816 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8817 = getelementptr inbounds i8, %Pointer %r8816, i32 0
	%r8818 = bitcast %Pointer %r8817 to %Pointer*
	%r8819 = load %Pointer, %Pointer* %frontier
	store %Pointer %r8819, %Pointer* %r8818
	; FlushStackTop
	%r8820 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8821 = getelementptr inbounds i8, %Pointer %r8820, i32 16
	%r8822 = bitcast %Pointer %r8821 to %Pointer*
	%r8823 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r8823, %Pointer* %r8822
	; Call
	call void @GC_collect(%Pointer %r8810, %Word64 0, %Word32 0)
	; CacheFrontier
	%r8824 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8825 = getelementptr inbounds i8, %Pointer %r8824, i32 0
	%r8826 = bitcast %Pointer %r8825 to %Pointer*
	%r8827 = load %Pointer, %Pointer* %r8826
	store %Pointer %r8827, %Pointer* %frontier
	; CacheStackTop
	%r8828 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8829 = getelementptr inbounds i8, %Pointer %r8828, i32 16
	%r8830 = bitcast %Pointer %r8829 to %Pointer*
	%r8831 = load %Pointer, %Pointer* %r8830
	store %Pointer %r8831, %Pointer* %stackTop
	br label %L_585

L_583:
	; Goto L_577
	br label %L_577

L_582:
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r8832 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8833 = getelementptr inbounds i8, %Pointer %r8832, i32 8
	%r8834 = bitcast %Pointer %r8833 to %CPointer*
	%r8835 = load %CPointer, %CPointer* %r8834
	%r8836 = load %Pointer, %Pointer* %frontier
	%r8838 = icmp ult %Pointer %r8835, %r8836
	%r8837 = zext i1 %r8838 to %Word32
	store %Word32 %r8837, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_583), (0x1, L_584))}
	%r8839 = load %Word32, %Word32* %regW32_0
	%r8840 = trunc %Word32 %r8839 to i1
	br i1 %r8840, label %L_584, label %L_583

L_581:
	; RW64(1): Word64  = Word64_add (RW64(0): Word64, SW64(40): Word64)
	%r8841 = load %Word64, %Word64* %regW64_0
	%r8842 = load %Pointer, %Pointer* %stackTop
	%r8843 = getelementptr inbounds i8, %Pointer %r8842, i32 40
	%r8844 = bitcast %Pointer %r8843 to %Word64*
	%r8845 = load %Word64, %Word64* %r8844
	%r8846 = add %Word64 %r8841, %r8845
	store %Word64 %r8846, %Word64* %regW64_1
	; RW8(0): Word8  = XW8 (SP(0): Objptr (opt_3), RW64(0): Word64, 1, 0): Word8
	%r8847 = load %Pointer, %Pointer* %stackTop
	%r8848 = getelementptr inbounds i8, %Pointer %r8847, i32 0
	%r8849 = bitcast %Pointer %r8848 to %Objptr*
	%r8850 = load %Objptr, %Objptr* %r8849
	%r8851 = load %Word64, %Word64* %regW64_0
	%r8852 = mul nsw %Word64 %r8851, 1
	%r8853 = add nsw %Word64 %r8852, 0
	%r8854 = getelementptr inbounds i8, %Objptr %r8850, %Word64 %r8853
	%r8855 = bitcast %Objptr %r8854 to %Word8*
	%r8856 = load %Word8, %Word8* %r8855
	store %Word8 %r8856, %Word8* %regW8_0
	; XW8 (SP(56): Objptr (opt_11), RW64(1): Word64, 1, 0): Word8  = RW8(0): Word8
	%r8857 = load %Word8, %Word8* %regW8_0
	%r8858 = load %Pointer, %Pointer* %stackTop
	%r8859 = getelementptr inbounds i8, %Pointer %r8858, i32 56
	%r8860 = bitcast %Pointer %r8859 to %Objptr*
	%r8861 = load %Objptr, %Objptr* %r8860
	%r8862 = load %Word64, %Word64* %regW64_1
	%r8863 = mul nsw %Word64 %r8862, 1
	%r8864 = add nsw %Word64 %r8863, 0
	%r8865 = getelementptr inbounds i8, %Objptr %r8861, %Word64 %r8864
	%r8866 = bitcast %Objptr %r8865 to %Word8*
	store %Word8 %r8857, %Word8* %r8866
	; RW64(2): Word64  = Word64_add (RW64(0): Word64, 0x1)
	%r8867 = load %Word64, %Word64* %regW64_0
	%r8868 = add %Word64 %r8867, 1
	store %Word64 %r8868, %Word64* %regW64_2
	; RW64(0): Word64  = RW64(2): Word64
	%r8869 = load %Word64, %Word64* %regW64_2
	store %Word64 %r8869, %Word64* %regW64_0
	; Goto loop_31
	br label %loop_31

loop_31:
	; RW32(0): Word32  = WordS64_lt (SW64(88): Word64, RW64(0): Word64)
	%r8870 = load %Pointer, %Pointer* %stackTop
	%r8871 = getelementptr inbounds i8, %Pointer %r8870, i32 88
	%r8872 = bitcast %Pointer %r8871 to %Word64*
	%r8873 = load %Word64, %Word64* %r8872
	%r8874 = load %Word64, %Word64* %regW64_0
	%r8876 = icmp slt %Word64 %r8873, %r8874
	%r8875 = zext i1 %r8876 to %Word32
	store %Word32 %r8875, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_581), (0x1, L_582))}
	%r8877 = load %Word32, %Word32* %regW32_0
	%r8878 = trunc %Word32 %r8877 to i1
	br i1 %r8878, label %L_582, label %L_581

L_580:
	; RW64(0): Word64  = 0x0
	store %Word64 0, %Word64* %regW64_0
	; Goto loop_31
	br label %loop_31

L_579:
	; Push(-88)
	%r8879 = load %Pointer, %Pointer* %stackTop
	%r8880 = getelementptr inbounds i8, %Pointer %r8879, i32 -88
	store %Pointer %r8880, %Pointer* %stackTop
	; Goto L_575
	br label %L_575

L_578:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 92}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_579}
	; GetOperands
	%r8881 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8882 = load %Pointer, %Pointer* %stackTop
	%r8883 = getelementptr inbounds i8, %Pointer %r8882, i32 80
	%r8884 = bitcast %Pointer %r8883 to %uintptr_t*
	store %uintptr_t 92, %uintptr_t* %r8884
	; Push(88)
	%r8885 = load %Pointer, %Pointer* %stackTop
	%r8886 = getelementptr inbounds i8, %Pointer %r8885, i32 88
	store %Pointer %r8886, %Pointer* %stackTop
	; FlushFrontier
	%r8887 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8888 = getelementptr inbounds i8, %Pointer %r8887, i32 0
	%r8889 = bitcast %Pointer %r8888 to %Pointer*
	%r8890 = load %Pointer, %Pointer* %frontier
	store %Pointer %r8890, %Pointer* %r8889
	; FlushStackTop
	%r8891 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8892 = getelementptr inbounds i8, %Pointer %r8891, i32 16
	%r8893 = bitcast %Pointer %r8892 to %Pointer*
	%r8894 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r8894, %Pointer* %r8893
	; Call
	call void @GC_collect(%Pointer %r8881, %Word64 0, %Word32 0)
	; CacheFrontier
	%r8895 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8896 = getelementptr inbounds i8, %Pointer %r8895, i32 0
	%r8897 = bitcast %Pointer %r8896 to %Pointer*
	%r8898 = load %Pointer, %Pointer* %r8897
	store %Pointer %r8898, %Pointer* %frontier
	; CacheStackTop
	%r8899 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8900 = getelementptr inbounds i8, %Pointer %r8899, i32 16
	%r8901 = bitcast %Pointer %r8900 to %Pointer*
	%r8902 = load %Pointer, %Pointer* %r8901
	store %Pointer %r8902, %Pointer* %stackTop
	br label %L_579

L_577:
	; OW32 (SP(48): Objptr (opt_10), 0): Word32  = SW32(68): Word32
	%r8903 = load %Pointer, %Pointer* %stackTop
	%r8904 = getelementptr inbounds i8, %Pointer %r8903, i32 68
	%r8905 = bitcast %Pointer %r8904 to %Word32*
	%r8906 = load %Word32, %Word32* %r8905
	%r8907 = load %Pointer, %Pointer* %stackTop
	%r8908 = getelementptr inbounds i8, %Pointer %r8907, i32 48
	%r8909 = bitcast %Pointer %r8908 to %Objptr*
	%r8910 = load %Objptr, %Objptr* %r8909
	%r8911 = getelementptr inbounds i8, %Objptr %r8910, i32 0
	%r8912 = bitcast %Objptr %r8911 to %Word32*
	store %Word32 %r8906, %Word32* %r8912
	; Goto L_527
	br label %L_527

L_576:
	; Push(-80)
	%r8913 = load %Pointer, %Pointer* %stackTop
	%r8914 = getelementptr inbounds i8, %Pointer %r8913, i32 -80
	store %Pointer %r8914, %Pointer* %stackTop
	; Goto L_577
	br label %L_577

L_575:
	; CCall {args = (<GCState>, SP(56): Objptr (opt_11), SW64(40): Word64, SP(0): Objptr (opt_3), 0x0, SW64(72): Word64), frameInfo = Some {frameLayoutsIndex = 91}, func = {args = (GCState, Objptr (opt_11), Word64, Objptr (opt_3), Word64, Word64), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Objptr, Int64, Objptr, Int64, Int64), res = None}, return = Bits0, symbolScope = private, target = GC_arrayCopy}, return = Some L_576}
	; GetOperands
	%r8915 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8916 = load %Pointer, %Pointer* %stackTop
	%r8917 = getelementptr inbounds i8, %Pointer %r8916, i32 56
	%r8918 = bitcast %Pointer %r8917 to %Objptr*
	%r8919 = load %Objptr, %Objptr* %r8918
	%r8920 = load %Pointer, %Pointer* %stackTop
	%r8921 = getelementptr inbounds i8, %Pointer %r8920, i32 40
	%r8922 = bitcast %Pointer %r8921 to %Word64*
	%r8923 = load %Word64, %Word64* %r8922
	%r8924 = load %Pointer, %Pointer* %stackTop
	%r8925 = getelementptr inbounds i8, %Pointer %r8924, i32 0
	%r8926 = bitcast %Pointer %r8925 to %Objptr*
	%r8927 = load %Objptr, %Objptr* %r8926
	%r8928 = load %Pointer, %Pointer* %stackTop
	%r8929 = getelementptr inbounds i8, %Pointer %r8928, i32 72
	%r8930 = bitcast %Pointer %r8929 to %Word64*
	%r8931 = load %Word64, %Word64* %r8930
	%r8932 = load %Pointer, %Pointer* %stackTop
	%r8933 = getelementptr inbounds i8, %Pointer %r8932, i32 72
	%r8934 = bitcast %Pointer %r8933 to %uintptr_t*
	store %uintptr_t 91, %uintptr_t* %r8934
	; Push(80)
	%r8935 = load %Pointer, %Pointer* %stackTop
	%r8936 = getelementptr inbounds i8, %Pointer %r8935, i32 80
	store %Pointer %r8936, %Pointer* %stackTop
	; FlushFrontier
	%r8937 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8938 = getelementptr inbounds i8, %Pointer %r8937, i32 0
	%r8939 = bitcast %Pointer %r8938 to %Pointer*
	%r8940 = load %Pointer, %Pointer* %frontier
	store %Pointer %r8940, %Pointer* %r8939
	; FlushStackTop
	%r8941 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8942 = getelementptr inbounds i8, %Pointer %r8941, i32 16
	%r8943 = bitcast %Pointer %r8942 to %Pointer*
	%r8944 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r8944, %Pointer* %r8943
	; Call
	call void @GC_arrayCopy(%Pointer %r8915, %Objptr %r8919, %Word64 %r8923, %Objptr %r8927, %Word64 0, %Word64 %r8931)
	; CacheFrontier
	%r8945 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8946 = getelementptr inbounds i8, %Pointer %r8945, i32 0
	%r8947 = bitcast %Pointer %r8946 to %Pointer*
	%r8948 = load %Pointer, %Pointer* %r8947
	store %Pointer %r8948, %Pointer* %frontier
	; CacheStackTop
	%r8949 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8950 = getelementptr inbounds i8, %Pointer %r8949, i32 16
	%r8951 = bitcast %Pointer %r8950 to %Pointer*
	%r8952 = load %Pointer, %Pointer* %r8951
	store %Pointer %r8952, %Pointer* %stackTop
	br label %L_576

L_574:
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r8953 = bitcast %struct.GC_state* @gcState to %Pointer
	%r8954 = getelementptr inbounds i8, %Pointer %r8953, i32 8
	%r8955 = bitcast %Pointer %r8954 to %CPointer*
	%r8956 = load %CPointer, %CPointer* %r8955
	%r8957 = load %Pointer, %Pointer* %frontier
	%r8959 = icmp ult %Pointer %r8956, %r8957
	%r8958 = zext i1 %r8959 to %Word32
	store %Word32 %r8958, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_575), (0x1, L_578))}
	%r8960 = load %Word32, %Word32* %regW32_0
	%r8961 = trunc %Word32 %r8960 to i1
	br i1 %r8961, label %L_578, label %L_575

L_573:
	; RW32(0): Word32  = WordS64_lt (SW64(72): Word64, 0x5)
	%r8962 = load %Pointer, %Pointer* %stackTop
	%r8963 = getelementptr inbounds i8, %Pointer %r8962, i32 72
	%r8964 = bitcast %Pointer %r8963 to %Word64*
	%r8965 = load %Word64, %Word64* %r8964
	%r8967 = icmp slt %Word64 %r8965, 5
	%r8966 = zext i1 %r8967 to %Word32
	store %Word32 %r8966, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_574), (0x1, L_580))}
	%r8968 = load %Word32, %Word32* %regW32_0
	%r8969 = trunc %Word32 %r8968 to i1
	br i1 %r8969, label %L_580, label %L_574

L_572:
	; RW64(0): Word64  = Word64_add (SW64(40): Word64, SW64(72): Word64)
	%r8970 = load %Pointer, %Pointer* %stackTop
	%r8971 = getelementptr inbounds i8, %Pointer %r8970, i32 40
	%r8972 = bitcast %Pointer %r8971 to %Word64*
	%r8973 = load %Word64, %Word64* %r8972
	%r8974 = load %Pointer, %Pointer* %stackTop
	%r8975 = getelementptr inbounds i8, %Pointer %r8974, i32 72
	%r8976 = bitcast %Pointer %r8975 to %Word64*
	%r8977 = load %Word64, %Word64* %r8976
	%r8978 = add %Word64 %r8973, %r8977
	store %Word64 %r8978, %Word64* %regW64_0
	; RW32(0): Word32  = WordU64_lt (SW64(80): Word64, RW64(0): Word64)
	%r8979 = load %Pointer, %Pointer* %stackTop
	%r8980 = getelementptr inbounds i8, %Pointer %r8979, i32 80
	%r8981 = bitcast %Pointer %r8980 to %Word64*
	%r8982 = load %Word64, %Word64* %r8981
	%r8983 = load %Word64, %Word64* %regW64_0
	%r8985 = icmp ult %Word64 %r8982, %r8983
	%r8984 = zext i1 %r8985 to %Word32
	store %Word32 %r8984, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_573), (0x1, L_586))}
	%r8986 = load %Word32, %Word32* %regW32_0
	%r8987 = trunc %Word32 %r8986 to i1
	br i1 %r8987, label %L_586, label %L_573

L_571:
	; SW64(40): Word64  = WordS32_extdToWord64 (SW32(64): Word32)
	%r8988 = load %Pointer, %Pointer* %stackTop
	%r8989 = getelementptr inbounds i8, %Pointer %r8988, i32 64
	%r8990 = bitcast %Pointer %r8989 to %Word32*
	%r8991 = load %Word32, %Word32* %r8990
	%r8992 = sext %Word32 %r8991 to %Word64
	%r8993 = load %Pointer, %Pointer* %stackTop
	%r8994 = getelementptr inbounds i8, %Pointer %r8993, i32 40
	%r8995 = bitcast %Pointer %r8994 to %Word64*
	store %Word64 %r8992, %Word64* %r8995
	; RW32(0): Word32  = WordU64_lt (SW64(80): Word64, SW64(40): Word64)
	%r8996 = load %Pointer, %Pointer* %stackTop
	%r8997 = getelementptr inbounds i8, %Pointer %r8996, i32 80
	%r8998 = bitcast %Pointer %r8997 to %Word64*
	%r8999 = load %Word64, %Word64* %r8998
	%r9000 = load %Pointer, %Pointer* %stackTop
	%r9001 = getelementptr inbounds i8, %Pointer %r9000, i32 40
	%r9002 = bitcast %Pointer %r9001 to %Word64*
	%r9003 = load %Word64, %Word64* %r9002
	%r9005 = icmp ult %Word64 %r8999, %r9003
	%r9004 = zext i1 %r9005 to %Word32
	store %Word32 %r9004, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_572), (0x1, L_587))}
	%r9006 = load %Word32, %Word32* %regW32_0
	%r9007 = trunc %Word32 %r9006 to i1
	br i1 %r9007, label %L_587, label %L_572

L_570:
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r9008 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9009 = getelementptr inbounds i8, %Pointer %r9008, i32 8
	%r9010 = bitcast %Pointer %r9009 to %CPointer*
	%r9011 = load %CPointer, %CPointer* %r9010
	%r9012 = load %Pointer, %Pointer* %frontier
	%r9014 = icmp ult %Pointer %r9011, %r9012
	%r9013 = zext i1 %r9014 to %Word32
	store %Word32 %r9013, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_571), (0x1, L_588))}
	%r9015 = load %Word32, %Word32* %regW32_0
	%r9016 = trunc %Word32 %r9015 to i1
	br i1 %r9016, label %L_588, label %L_571

L_569:
	; Goto L_565
	br label %L_565

L_568:
	; RW64(1): Word64  = Word64_add (RW64(0): Word64, 0x1)
	%r9017 = load %Word64, %Word64* %regW64_0
	%r9018 = add %Word64 %r9017, 1
	store %Word64 %r9018, %Word64* %regW64_1
	; RW64(0): Word64  = RW64(1): Word64
	%r9019 = load %Word64, %Word64* %regW64_1
	store %Word64 %r9019, %Word64* %regW64_0
	; Goto loop_30
	br label %loop_30

L_567:
	; RW8(0): Word8  = XW8 (SP(0): Objptr (opt_3), RW64(0): Word64, 1, 0): Word8
	%r9020 = load %Pointer, %Pointer* %stackTop
	%r9021 = getelementptr inbounds i8, %Pointer %r9020, i32 0
	%r9022 = bitcast %Pointer %r9021 to %Objptr*
	%r9023 = load %Objptr, %Objptr* %r9022
	%r9024 = load %Word64, %Word64* %regW64_0
	%r9025 = mul nsw %Word64 %r9024, 1
	%r9026 = add nsw %Word64 %r9025, 0
	%r9027 = getelementptr inbounds i8, %Objptr %r9023, %Word64 %r9026
	%r9028 = bitcast %Objptr %r9027 to %Word8*
	%r9029 = load %Word8, %Word8* %r9028
	store %Word8 %r9029, %Word8* %regW8_0
	; RW32(0): Word32  = Word8_equal (RW8(0): Word8, 0xA)
	%r9030 = load %Word8, %Word8* %regW8_0
	%r9032 = icmp eq %Word8 %r9030, 10
	%r9031 = zext i1 %r9032 to %Word32
	store %Word32 %r9031, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_568), (0x1, L_569))}
	%r9033 = load %Word32, %Word32* %regW32_0
	%r9034 = trunc %Word32 %r9033 to i1
	br i1 %r9034, label %L_569, label %L_568

loop_30:
	; RW32(0): Word32  = WordS64_lt (SW64(88): Word64, RW64(0): Word64)
	%r9035 = load %Pointer, %Pointer* %stackTop
	%r9036 = getelementptr inbounds i8, %Pointer %r9035, i32 88
	%r9037 = bitcast %Pointer %r9036 to %Word64*
	%r9038 = load %Word64, %Word64* %r9037
	%r9039 = load %Word64, %Word64* %regW64_0
	%r9041 = icmp slt %Word64 %r9038, %r9039
	%r9040 = zext i1 %r9041 to %Word32
	store %Word32 %r9040, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_567), (0x1, L_570))}
	%r9042 = load %Word32, %Word32* %regW32_0
	%r9043 = trunc %Word32 %r9042 to i1
	br i1 %r9043, label %L_570, label %L_567

L_566:
	; SW64(88): Word64  = Word64_sub (SW64(72): Word64, 0x1)
	%r9044 = load %Pointer, %Pointer* %stackTop
	%r9045 = getelementptr inbounds i8, %Pointer %r9044, i32 72
	%r9046 = bitcast %Pointer %r9045 to %Word64*
	%r9047 = load %Word64, %Word64* %r9046
	%r9048 = sub %Word64 %r9047, 1
	%r9049 = load %Pointer, %Pointer* %stackTop
	%r9050 = getelementptr inbounds i8, %Pointer %r9049, i32 88
	%r9051 = bitcast %Pointer %r9050 to %Word64*
	store %Word64 %r9048, %Word64* %r9051
	; RW64(0): Word64  = 0x0
	store %Word64 0, %Word64* %regW64_0
	; Goto loop_30
	br label %loop_30

L_565:
	; SQ(16): Label L_537  = L_537
	%r9052 = inttoptr %Word32 86 to %CPointer
	%r9053 = load %Pointer, %Pointer* %stackTop
	%r9054 = getelementptr inbounds i8, %Pointer %r9053, i32 16
	%r9055 = bitcast %Pointer %r9054 to %CPointer*
	store %CPointer %r9052, %CPointer* %r9055
	; RQ(49): CPointer  = CPointer_add (<StackTop>, 0x18)
	%r9056 = load %Pointer, %Pointer* %stackTop
	%r9058 = ptrtoint %Pointer %r9056 to %uintptr_t
	%r9059 = add %uintptr_t %r9058, 24
	%r9057 = inttoptr %uintptr_t %r9059 to %Pointer
	store %CPointer %r9057, %CPointer* %regQ_49
	; RW64(10): Word64  = CPointer_diff (RQ(49): CPointer, OQ (<GCState>, 1616): CPointer)
	%r9060 = load %CPointer, %CPointer* %regQ_49
	%r9061 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9062 = getelementptr inbounds i8, %Pointer %r9061, i32 1616
	%r9063 = bitcast %Pointer %r9062 to %CPointer*
	%r9064 = load %CPointer, %CPointer* %r9063
	%r9066 = ptrtoint %Pointer %r9060 to %uintptr_t
	%r9067 = ptrtoint %Pointer %r9064 to %uintptr_t
	%r9065 = sub %uintptr_t %r9066, %r9067
	store %Word64 %r9065, %Word64* %regW64_10
	; OW64 (<GCState>, 32): ExnStack  = Cast (RW64(10): Word64, ExnStack)
	%r9068 = load %Word64, %Word64* %regW64_10
	%r9069 = bitcast %Word64 %r9068 to %Word64
	%r9070 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9071 = getelementptr inbounds i8, %Pointer %r9070, i32 32
	%r9072 = bitcast %Pointer %r9071 to %Word64*
	store %Word64 %r9069, %Word64* %r9072
	; SP(56): Objptr (opt_30)  = RP(0): Objptr (opt_30)
	%r9073 = load %Objptr, %Objptr* %regP_0
	%r9074 = load %Pointer, %Pointer* %stackTop
	%r9075 = getelementptr inbounds i8, %Pointer %r9074, i32 56
	%r9076 = bitcast %Pointer %r9075 to %Objptr*
	store %Objptr %r9073, %Objptr* %r9076
	; SP(64): Objptr (opt_15)  = SP(40): Objptr (opt_15)
	%r9077 = load %Pointer, %Pointer* %stackTop
	%r9078 = getelementptr inbounds i8, %Pointer %r9077, i32 40
	%r9079 = bitcast %Pointer %r9078 to %Objptr*
	%r9080 = load %Objptr, %Objptr* %r9079
	%r9081 = load %Pointer, %Pointer* %stackTop
	%r9082 = getelementptr inbounds i8, %Pointer %r9081, i32 64
	%r9083 = bitcast %Pointer %r9082 to %Objptr*
	store %Objptr %r9080, %Objptr* %r9083
	%r9084 = load %Pointer, %Pointer* %stackTop
	%r9085 = getelementptr inbounds i8, %Pointer %r9084, i32 48
	%r9086 = bitcast %Pointer %r9085 to %uintptr_t*
	store %uintptr_t 67, %uintptr_t* %r9086
	; Push(56)
	%r9087 = load %Pointer, %Pointer* %stackTop
	%r9088 = getelementptr inbounds i8, %Pointer %r9087, i32 56
	store %Pointer %r9088, %Pointer* %stackTop
	br label %flushBuf_0

L_564:
	; Goto L_565
	br label %L_565

L_563:
	; RW32(1): Word32  = WordS32_lt (SW32(68): Word32, RW32(0): Word32)
	%r9089 = load %Pointer, %Pointer* %stackTop
	%r9090 = getelementptr inbounds i8, %Pointer %r9089, i32 68
	%r9091 = bitcast %Pointer %r9090 to %Word32*
	%r9092 = load %Word32, %Word32* %r9091
	%r9093 = load %Word32, %Word32* %regW32_0
	%r9095 = icmp slt %Word32 %r9092, %r9093
	%r9094 = zext i1 %r9095 to %Word32
	store %Word32 %r9094, %Word32* %regW32_1
	; switch {test = RW32(1): Word32, default = None, cases = ((0x0, L_564), (0x1, L_566))}
	%r9096 = load %Word32, %Word32* %regW32_1
	%r9097 = trunc %Word32 %r9096 to i1
	br i1 %r9097, label %L_566, label %L_564

L_562:
	; Goto L_408
	br label %L_408

L_561:
	; SW64(80): Word64  = OW64 (SP(56): Objptr (opt_11), ~16): Word64
	%r9098 = load %Pointer, %Pointer* %stackTop
	%r9099 = getelementptr inbounds i8, %Pointer %r9098, i32 56
	%r9100 = bitcast %Pointer %r9099 to %Objptr*
	%r9101 = load %Objptr, %Objptr* %r9100
	%r9102 = getelementptr inbounds i8, %Objptr %r9101, i32 -16
	%r9103 = bitcast %Objptr %r9102 to %Word64*
	%r9104 = load %Word64, %Word64* %r9103
	%r9105 = load %Pointer, %Pointer* %stackTop
	%r9106 = getelementptr inbounds i8, %Pointer %r9105, i32 80
	%r9107 = bitcast %Pointer %r9106 to %Word64*
	store %Word64 %r9104, %Word64* %r9107
	; RW32(0): Word32  = WordU64_extdToWord32 (SW64(80): Word64)
	%r9108 = load %Pointer, %Pointer* %stackTop
	%r9109 = getelementptr inbounds i8, %Pointer %r9108, i32 80
	%r9110 = bitcast %Pointer %r9109 to %Word64*
	%r9111 = load %Word64, %Word64* %r9110
	%r9112 = trunc %Word64 %r9111 to %Word32
	store %Word32 %r9112, %Word32* %regW32_0
	; RW64(0): Word64  = WordS32_extdToWord64 (RW32(0): Word32)
	%r9113 = load %Word32, %Word32* %regW32_0
	%r9114 = sext %Word32 %r9113 to %Word64
	store %Word64 %r9114, %Word64* %regW64_0
	; RW32(1): Word32  = Word64_equal (RW64(0): Word64, SW64(80): Word64)
	%r9115 = load %Word64, %Word64* %regW64_0
	%r9116 = load %Pointer, %Pointer* %stackTop
	%r9117 = getelementptr inbounds i8, %Pointer %r9116, i32 80
	%r9118 = bitcast %Pointer %r9117 to %Word64*
	%r9119 = load %Word64, %Word64* %r9118
	%r9121 = icmp eq %Word64 %r9115, %r9119
	%r9120 = zext i1 %r9121 to %Word32
	store %Word32 %r9120, %Word32* %regW32_1
	; switch {test = RW32(1): Word32, default = None, cases = ((0x0, L_562), (0x1, L_563))}
	%r9122 = load %Word32, %Word32* %regW32_1
	%r9123 = trunc %Word32 %r9122 to i1
	br i1 %r9123, label %L_563, label %L_562

L_560:
	; Arith {prim = WordS32_addCheck, args = (SW32(64): Word32, RW32(0): Word32), dst = SW32(68): Word32, overflow = L_411, success = L_561}
	%r9124 = load %Pointer, %Pointer* %stackTop
	%r9125 = getelementptr inbounds i8, %Pointer %r9124, i32 64
	%r9126 = bitcast %Pointer %r9125 to %Word32*
	%r9127 = load %Word32, %Word32* %r9126
	%r9128 = load %Word32, %Word32* %regW32_0
	%r9129 = call {%Word32, i1} @llvm.sadd.with.overflow.i32(%Word32 %r9127, %Word32 %r9128)
	%r9130 = extractvalue {%Word32, i1} %r9129, 0
	%r9131 = extractvalue {%Word32, i1} %r9129, 1
	%r9132 = load %Pointer, %Pointer* %stackTop
	%r9133 = getelementptr inbounds i8, %Pointer %r9132, i32 68
	%r9134 = bitcast %Pointer %r9133 to %Word32*
	store %Word32 %r9130, %Word32* %r9134
	br i1 %r9131, label %L_411, label %L_561

L_559:
	; Goto L_408
	br label %L_408

L_558:
	; SP(48): Objptr (opt_10)  = OP (Cast (RP(1): Objptr (opt_41, opt_40), Objptr (opt_41)), 8): Objptr (opt_10)
	%r9135 = load %Objptr, %Objptr* %regP_1
	%r9136 = bitcast %Objptr %r9135 to %Objptr
	%r9137 = getelementptr inbounds i8, %Objptr %r9136, i32 8
	%r9138 = bitcast %Objptr %r9137 to %Objptr*
	%r9139 = load %Objptr, %Objptr* %r9138
	%r9140 = load %Pointer, %Pointer* %stackTop
	%r9141 = getelementptr inbounds i8, %Pointer %r9140, i32 48
	%r9142 = bitcast %Pointer %r9141 to %Objptr*
	store %Objptr %r9139, %Objptr* %r9142
	; SP(56): Objptr (opt_11)  = OP (Cast (RP(1): Objptr (opt_41, opt_40), Objptr (opt_41)), 0): Objptr (opt_11)
	%r9143 = load %Objptr, %Objptr* %regP_1
	%r9144 = bitcast %Objptr %r9143 to %Objptr
	%r9145 = getelementptr inbounds i8, %Objptr %r9144, i32 0
	%r9146 = bitcast %Objptr %r9145 to %Objptr*
	%r9147 = load %Objptr, %Objptr* %r9146
	%r9148 = load %Pointer, %Pointer* %stackTop
	%r9149 = getelementptr inbounds i8, %Pointer %r9148, i32 56
	%r9150 = bitcast %Pointer %r9149 to %Objptr*
	store %Objptr %r9147, %Objptr* %r9150
	; CW64 (<Frontier>)  = 0x3D
	%r9151 = load %Pointer, %Pointer* %frontier
	%r9152 = bitcast %Pointer %r9151 to %Word64*
	store %Word64 61, %Word64* %r9152
	; RQ(48): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r9153 = load %Pointer, %Pointer* %frontier
	%r9155 = ptrtoint %Pointer %r9153 to %uintptr_t
	%r9156 = add %uintptr_t %r9155, 8
	%r9154 = inttoptr %uintptr_t %r9156 to %Pointer
	store %CPointer %r9154, %CPointer* %regQ_48
	; RP(0): Objptr (opt_30)  = Cast (RQ(48): CPointer, Objptr (opt_30))
	%r9157 = load %CPointer, %CPointer* %regQ_48
	%r9158 = bitcast %CPointer %r9157 to %Objptr
	store %Objptr %r9158, %Objptr* %regP_0
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r9159 = load %Pointer, %Pointer* %frontier
	%r9161 = ptrtoint %Pointer %r9159 to %uintptr_t
	%r9162 = add %uintptr_t %r9161, 24
	%r9160 = inttoptr %uintptr_t %r9162 to %Pointer
	store %Pointer %r9160, %Pointer* %frontier
	; OP (RP(0): Objptr (opt_30), 0): Objptr (opt_10)  = SP(48): Objptr (opt_10)
	%r9163 = load %Pointer, %Pointer* %stackTop
	%r9164 = getelementptr inbounds i8, %Pointer %r9163, i32 48
	%r9165 = bitcast %Pointer %r9164 to %Objptr*
	%r9166 = load %Objptr, %Objptr* %r9165
	%r9167 = load %Objptr, %Objptr* %regP_0
	%r9168 = getelementptr inbounds i8, %Objptr %r9167, i32 0
	%r9169 = bitcast %Objptr %r9168 to %Objptr*
	store %Objptr %r9166, %Objptr* %r9169
	; OP (RP(0): Objptr (opt_30), 8): Objptr (opt_11)  = SP(56): Objptr (opt_11)
	%r9170 = load %Pointer, %Pointer* %stackTop
	%r9171 = getelementptr inbounds i8, %Pointer %r9170, i32 56
	%r9172 = bitcast %Pointer %r9171 to %Objptr*
	%r9173 = load %Objptr, %Objptr* %r9172
	%r9174 = load %Objptr, %Objptr* %regP_0
	%r9175 = getelementptr inbounds i8, %Objptr %r9174, i32 8
	%r9176 = bitcast %Objptr %r9175 to %Objptr*
	store %Objptr %r9173, %Objptr* %r9176
	; SW32(64): Word32  = OW32 (SP(48): Objptr (opt_10), 0): Word32
	%r9177 = load %Pointer, %Pointer* %stackTop
	%r9178 = getelementptr inbounds i8, %Pointer %r9177, i32 48
	%r9179 = bitcast %Pointer %r9178 to %Objptr*
	%r9180 = load %Objptr, %Objptr* %r9179
	%r9181 = getelementptr inbounds i8, %Objptr %r9180, i32 0
	%r9182 = bitcast %Objptr %r9181 to %Word32*
	%r9183 = load %Word32, %Word32* %r9182
	%r9184 = load %Pointer, %Pointer* %stackTop
	%r9185 = getelementptr inbounds i8, %Pointer %r9184, i32 64
	%r9186 = bitcast %Pointer %r9185 to %Word32*
	store %Word32 %r9183, %Word32* %r9186
	; SW64(72): Word64  = OW64 (SP(0): Objptr (opt_3), ~16): Word64
	%r9187 = load %Pointer, %Pointer* %stackTop
	%r9188 = getelementptr inbounds i8, %Pointer %r9187, i32 0
	%r9189 = bitcast %Pointer %r9188 to %Objptr*
	%r9190 = load %Objptr, %Objptr* %r9189
	%r9191 = getelementptr inbounds i8, %Objptr %r9190, i32 -16
	%r9192 = bitcast %Objptr %r9191 to %Word64*
	%r9193 = load %Word64, %Word64* %r9192
	%r9194 = load %Pointer, %Pointer* %stackTop
	%r9195 = getelementptr inbounds i8, %Pointer %r9194, i32 72
	%r9196 = bitcast %Pointer %r9195 to %Word64*
	store %Word64 %r9193, %Word64* %r9196
	; RW32(0): Word32  = WordU64_extdToWord32 (SW64(72): Word64)
	%r9197 = load %Pointer, %Pointer* %stackTop
	%r9198 = getelementptr inbounds i8, %Pointer %r9197, i32 72
	%r9199 = bitcast %Pointer %r9198 to %Word64*
	%r9200 = load %Word64, %Word64* %r9199
	%r9201 = trunc %Word64 %r9200 to %Word32
	store %Word32 %r9201, %Word32* %regW32_0
	; RW64(0): Word64  = WordS32_extdToWord64 (RW32(0): Word32)
	%r9202 = load %Word32, %Word32* %regW32_0
	%r9203 = sext %Word32 %r9202 to %Word64
	store %Word64 %r9203, %Word64* %regW64_0
	; RW32(1): Word32  = Word64_equal (RW64(0): Word64, SW64(72): Word64)
	%r9204 = load %Word64, %Word64* %regW64_0
	%r9205 = load %Pointer, %Pointer* %stackTop
	%r9206 = getelementptr inbounds i8, %Pointer %r9205, i32 72
	%r9207 = bitcast %Pointer %r9206 to %Word64*
	%r9208 = load %Word64, %Word64* %r9207
	%r9210 = icmp eq %Word64 %r9204, %r9208
	%r9209 = zext i1 %r9210 to %Word32
	store %Word32 %r9209, %Word32* %regW32_1
	; switch {test = RW32(1): Word32, default = None, cases = ((0x0, L_559), (0x1, L_560))}
	%r9211 = load %Word32, %Word32* %regW32_1
	%r9212 = trunc %Word32 %r9211 to i1
	br i1 %r9212, label %L_560, label %L_559

L_557:
	; Goto L_524
	br label %L_524

L_556:
	; Goto L_524
	br label %L_524

L_555:
	; Push(-80)
	%r9213 = load %Pointer, %Pointer* %stackTop
	%r9214 = getelementptr inbounds i8, %Pointer %r9213, i32 -80
	store %Pointer %r9214, %Pointer* %stackTop
	; Goto L_553
	br label %L_553

L_554:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 90}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_555}
	; GetOperands
	%r9215 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9216 = load %Pointer, %Pointer* %stackTop
	%r9217 = getelementptr inbounds i8, %Pointer %r9216, i32 72
	%r9218 = bitcast %Pointer %r9217 to %uintptr_t*
	store %uintptr_t 90, %uintptr_t* %r9218
	; Push(80)
	%r9219 = load %Pointer, %Pointer* %stackTop
	%r9220 = getelementptr inbounds i8, %Pointer %r9219, i32 80
	store %Pointer %r9220, %Pointer* %stackTop
	; FlushFrontier
	%r9221 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9222 = getelementptr inbounds i8, %Pointer %r9221, i32 0
	%r9223 = bitcast %Pointer %r9222 to %Pointer*
	%r9224 = load %Pointer, %Pointer* %frontier
	store %Pointer %r9224, %Pointer* %r9223
	; FlushStackTop
	%r9225 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9226 = getelementptr inbounds i8, %Pointer %r9225, i32 16
	%r9227 = bitcast %Pointer %r9226 to %Pointer*
	%r9228 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r9228, %Pointer* %r9227
	; Call
	call void @GC_collect(%Pointer %r9215, %Word64 0, %Word32 0)
	; CacheFrontier
	%r9229 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9230 = getelementptr inbounds i8, %Pointer %r9229, i32 0
	%r9231 = bitcast %Pointer %r9230 to %Pointer*
	%r9232 = load %Pointer, %Pointer* %r9231
	store %Pointer %r9232, %Pointer* %frontier
	; CacheStackTop
	%r9233 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9234 = getelementptr inbounds i8, %Pointer %r9233, i32 16
	%r9235 = bitcast %Pointer %r9234 to %Pointer*
	%r9236 = load %Pointer, %Pointer* %r9235
	store %Pointer %r9236, %Pointer* %stackTop
	br label %L_555

L_553:
	; Goto L_547
	br label %L_547

L_552:
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r9237 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9238 = getelementptr inbounds i8, %Pointer %r9237, i32 8
	%r9239 = bitcast %Pointer %r9238 to %CPointer*
	%r9240 = load %CPointer, %CPointer* %r9239
	%r9241 = load %Pointer, %Pointer* %frontier
	%r9243 = icmp ult %Pointer %r9240, %r9241
	%r9242 = zext i1 %r9243 to %Word32
	store %Word32 %r9242, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_553), (0x1, L_554))}
	%r9244 = load %Word32, %Word32* %regW32_0
	%r9245 = trunc %Word32 %r9244 to i1
	br i1 %r9245, label %L_554, label %L_553

L_551:
	; RW64(2): Word64  = Word64_add (RW64(1): Word64, SW64(40): Word64)
	%r9246 = load %Word64, %Word64* %regW64_1
	%r9247 = load %Pointer, %Pointer* %stackTop
	%r9248 = getelementptr inbounds i8, %Pointer %r9247, i32 40
	%r9249 = bitcast %Pointer %r9248 to %Word64*
	%r9250 = load %Word64, %Word64* %r9249
	%r9251 = add %Word64 %r9246, %r9250
	store %Word64 %r9251, %Word64* %regW64_2
	; RW8(0): Word8  = XW8 (SP(0): Objptr (opt_3), RW64(1): Word64, 1, 0): Word8
	%r9252 = load %Pointer, %Pointer* %stackTop
	%r9253 = getelementptr inbounds i8, %Pointer %r9252, i32 0
	%r9254 = bitcast %Pointer %r9253 to %Objptr*
	%r9255 = load %Objptr, %Objptr* %r9254
	%r9256 = load %Word64, %Word64* %regW64_1
	%r9257 = mul nsw %Word64 %r9256, 1
	%r9258 = add nsw %Word64 %r9257, 0
	%r9259 = getelementptr inbounds i8, %Objptr %r9255, %Word64 %r9258
	%r9260 = bitcast %Objptr %r9259 to %Word8*
	%r9261 = load %Word8, %Word8* %r9260
	store %Word8 %r9261, %Word8* %regW8_0
	; XW8 (SP(48): Objptr (opt_11), RW64(2): Word64, 1, 0): Word8  = RW8(0): Word8
	%r9262 = load %Word8, %Word8* %regW8_0
	%r9263 = load %Pointer, %Pointer* %stackTop
	%r9264 = getelementptr inbounds i8, %Pointer %r9263, i32 48
	%r9265 = bitcast %Pointer %r9264 to %Objptr*
	%r9266 = load %Objptr, %Objptr* %r9265
	%r9267 = load %Word64, %Word64* %regW64_2
	%r9268 = mul nsw %Word64 %r9267, 1
	%r9269 = add nsw %Word64 %r9268, 0
	%r9270 = getelementptr inbounds i8, %Objptr %r9266, %Word64 %r9269
	%r9271 = bitcast %Objptr %r9270 to %Word8*
	store %Word8 %r9262, %Word8* %r9271
	; RW64(3): Word64  = Word64_add (RW64(1): Word64, 0x1)
	%r9272 = load %Word64, %Word64* %regW64_1
	%r9273 = add %Word64 %r9272, 1
	store %Word64 %r9273, %Word64* %regW64_3
	; RW64(1): Word64  = RW64(3): Word64
	%r9274 = load %Word64, %Word64* %regW64_3
	store %Word64 %r9274, %Word64* %regW64_1
	; Goto loop_29
	br label %loop_29

loop_29:
	; RW32(0): Word32  = WordS64_lt (RW64(0): Word64, RW64(1): Word64)
	%r9275 = load %Word64, %Word64* %regW64_0
	%r9276 = load %Word64, %Word64* %regW64_1
	%r9278 = icmp slt %Word64 %r9275, %r9276
	%r9277 = zext i1 %r9278 to %Word32
	store %Word32 %r9277, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_551), (0x1, L_552))}
	%r9279 = load %Word32, %Word32* %regW32_0
	%r9280 = trunc %Word32 %r9279 to i1
	br i1 %r9280, label %L_552, label %L_551

L_550:
	; RW64(0): Word64  = Word64_sub (SW64(56): Word64, 0x1)
	%r9281 = load %Pointer, %Pointer* %stackTop
	%r9282 = getelementptr inbounds i8, %Pointer %r9281, i32 56
	%r9283 = bitcast %Pointer %r9282 to %Word64*
	%r9284 = load %Word64, %Word64* %r9283
	%r9285 = sub %Word64 %r9284, 1
	store %Word64 %r9285, %Word64* %regW64_0
	; RW64(1): Word64  = 0x0
	store %Word64 0, %Word64* %regW64_1
	; Goto loop_29
	br label %loop_29

L_549:
	; Push(-80)
	%r9286 = load %Pointer, %Pointer* %stackTop
	%r9287 = getelementptr inbounds i8, %Pointer %r9286, i32 -80
	store %Pointer %r9287, %Pointer* %stackTop
	; Goto L_545
	br label %L_545

L_548:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 89}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_549}
	; GetOperands
	%r9288 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9289 = load %Pointer, %Pointer* %stackTop
	%r9290 = getelementptr inbounds i8, %Pointer %r9289, i32 72
	%r9291 = bitcast %Pointer %r9290 to %uintptr_t*
	store %uintptr_t 89, %uintptr_t* %r9291
	; Push(80)
	%r9292 = load %Pointer, %Pointer* %stackTop
	%r9293 = getelementptr inbounds i8, %Pointer %r9292, i32 80
	store %Pointer %r9293, %Pointer* %stackTop
	; FlushFrontier
	%r9294 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9295 = getelementptr inbounds i8, %Pointer %r9294, i32 0
	%r9296 = bitcast %Pointer %r9295 to %Pointer*
	%r9297 = load %Pointer, %Pointer* %frontier
	store %Pointer %r9297, %Pointer* %r9296
	; FlushStackTop
	%r9298 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9299 = getelementptr inbounds i8, %Pointer %r9298, i32 16
	%r9300 = bitcast %Pointer %r9299 to %Pointer*
	%r9301 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r9301, %Pointer* %r9300
	; Call
	call void @GC_collect(%Pointer %r9288, %Word64 0, %Word32 0)
	; CacheFrontier
	%r9302 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9303 = getelementptr inbounds i8, %Pointer %r9302, i32 0
	%r9304 = bitcast %Pointer %r9303 to %Pointer*
	%r9305 = load %Pointer, %Pointer* %r9304
	store %Pointer %r9305, %Pointer* %frontier
	; CacheStackTop
	%r9306 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9307 = getelementptr inbounds i8, %Pointer %r9306, i32 16
	%r9308 = bitcast %Pointer %r9307 to %Pointer*
	%r9309 = load %Pointer, %Pointer* %r9308
	store %Pointer %r9309, %Pointer* %stackTop
	br label %L_549

L_547:
	; OW32 (glob {index = 14, isRoot = true, ty = Objptr (opt_10)}, 0): Word32  = SW32(64): Word32
	%r9310 = load %Pointer, %Pointer* %stackTop
	%r9311 = getelementptr inbounds i8, %Pointer %r9310, i32 64
	%r9312 = bitcast %Pointer %r9311 to %Word32*
	%r9313 = load %Word32, %Word32* %r9312
	%r9314 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 14
	%r9315 = load %Objptr, %Objptr* %r9314
	%r9316 = getelementptr inbounds i8, %Objptr %r9315, i32 0
	%r9317 = bitcast %Objptr %r9316 to %Word32*
	store %Word32 %r9313, %Word32* %r9317
	; Goto L_527
	br label %L_527

L_546:
	; Push(-80)
	%r9318 = load %Pointer, %Pointer* %stackTop
	%r9319 = getelementptr inbounds i8, %Pointer %r9318, i32 -80
	store %Pointer %r9319, %Pointer* %stackTop
	; Goto L_547
	br label %L_547

L_545:
	; CCall {args = (<GCState>, SP(48): Objptr (opt_11), SW64(40): Word64, SP(0): Objptr (opt_3), 0x0, SW64(56): Word64), frameInfo = Some {frameLayoutsIndex = 88}, func = {args = (GCState, Objptr (opt_11), Word64, Objptr (opt_3), Word64, Word64), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Objptr, Int64, Objptr, Int64, Int64), res = None}, return = Bits0, symbolScope = private, target = GC_arrayCopy}, return = Some L_546}
	; GetOperands
	%r9320 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9321 = load %Pointer, %Pointer* %stackTop
	%r9322 = getelementptr inbounds i8, %Pointer %r9321, i32 48
	%r9323 = bitcast %Pointer %r9322 to %Objptr*
	%r9324 = load %Objptr, %Objptr* %r9323
	%r9325 = load %Pointer, %Pointer* %stackTop
	%r9326 = getelementptr inbounds i8, %Pointer %r9325, i32 40
	%r9327 = bitcast %Pointer %r9326 to %Word64*
	%r9328 = load %Word64, %Word64* %r9327
	%r9329 = load %Pointer, %Pointer* %stackTop
	%r9330 = getelementptr inbounds i8, %Pointer %r9329, i32 0
	%r9331 = bitcast %Pointer %r9330 to %Objptr*
	%r9332 = load %Objptr, %Objptr* %r9331
	%r9333 = load %Pointer, %Pointer* %stackTop
	%r9334 = getelementptr inbounds i8, %Pointer %r9333, i32 56
	%r9335 = bitcast %Pointer %r9334 to %Word64*
	%r9336 = load %Word64, %Word64* %r9335
	%r9337 = load %Pointer, %Pointer* %stackTop
	%r9338 = getelementptr inbounds i8, %Pointer %r9337, i32 72
	%r9339 = bitcast %Pointer %r9338 to %uintptr_t*
	store %uintptr_t 88, %uintptr_t* %r9339
	; Push(80)
	%r9340 = load %Pointer, %Pointer* %stackTop
	%r9341 = getelementptr inbounds i8, %Pointer %r9340, i32 80
	store %Pointer %r9341, %Pointer* %stackTop
	; FlushFrontier
	%r9342 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9343 = getelementptr inbounds i8, %Pointer %r9342, i32 0
	%r9344 = bitcast %Pointer %r9343 to %Pointer*
	%r9345 = load %Pointer, %Pointer* %frontier
	store %Pointer %r9345, %Pointer* %r9344
	; FlushStackTop
	%r9346 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9347 = getelementptr inbounds i8, %Pointer %r9346, i32 16
	%r9348 = bitcast %Pointer %r9347 to %Pointer*
	%r9349 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r9349, %Pointer* %r9348
	; Call
	call void @GC_arrayCopy(%Pointer %r9320, %Objptr %r9324, %Word64 %r9328, %Objptr %r9332, %Word64 0, %Word64 %r9336)
	; CacheFrontier
	%r9350 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9351 = getelementptr inbounds i8, %Pointer %r9350, i32 0
	%r9352 = bitcast %Pointer %r9351 to %Pointer*
	%r9353 = load %Pointer, %Pointer* %r9352
	store %Pointer %r9353, %Pointer* %frontier
	; CacheStackTop
	%r9354 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9355 = getelementptr inbounds i8, %Pointer %r9354, i32 16
	%r9356 = bitcast %Pointer %r9355 to %Pointer*
	%r9357 = load %Pointer, %Pointer* %r9356
	store %Pointer %r9357, %Pointer* %stackTop
	br label %L_546

L_544:
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r9358 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9359 = getelementptr inbounds i8, %Pointer %r9358, i32 8
	%r9360 = bitcast %Pointer %r9359 to %CPointer*
	%r9361 = load %CPointer, %CPointer* %r9360
	%r9362 = load %Pointer, %Pointer* %frontier
	%r9364 = icmp ult %Pointer %r9361, %r9362
	%r9363 = zext i1 %r9364 to %Word32
	store %Word32 %r9363, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_545), (0x1, L_548))}
	%r9365 = load %Word32, %Word32* %regW32_0
	%r9366 = trunc %Word32 %r9365 to i1
	br i1 %r9366, label %L_548, label %L_545

L_543:
	; RW32(0): Word32  = WordS64_lt (SW64(56): Word64, 0x5)
	%r9367 = load %Pointer, %Pointer* %stackTop
	%r9368 = getelementptr inbounds i8, %Pointer %r9367, i32 56
	%r9369 = bitcast %Pointer %r9368 to %Word64*
	%r9370 = load %Word64, %Word64* %r9369
	%r9372 = icmp slt %Word64 %r9370, 5
	%r9371 = zext i1 %r9372 to %Word32
	store %Word32 %r9371, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_544), (0x1, L_550))}
	%r9373 = load %Word32, %Word32* %regW32_0
	%r9374 = trunc %Word32 %r9373 to i1
	br i1 %r9374, label %L_550, label %L_544

L_542:
	; RW64(1): Word64  = Word64_add (SW64(40): Word64, SW64(56): Word64)
	%r9375 = load %Pointer, %Pointer* %stackTop
	%r9376 = getelementptr inbounds i8, %Pointer %r9375, i32 40
	%r9377 = bitcast %Pointer %r9376 to %Word64*
	%r9378 = load %Word64, %Word64* %r9377
	%r9379 = load %Pointer, %Pointer* %stackTop
	%r9380 = getelementptr inbounds i8, %Pointer %r9379, i32 56
	%r9381 = bitcast %Pointer %r9380 to %Word64*
	%r9382 = load %Word64, %Word64* %r9381
	%r9383 = add %Word64 %r9378, %r9382
	store %Word64 %r9383, %Word64* %regW64_1
	; RW32(0): Word32  = WordU64_lt (RW64(0): Word64, RW64(1): Word64)
	%r9384 = load %Word64, %Word64* %regW64_0
	%r9385 = load %Word64, %Word64* %regW64_1
	%r9387 = icmp ult %Word64 %r9384, %r9385
	%r9386 = zext i1 %r9387 to %Word32
	store %Word32 %r9386, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_543), (0x1, L_556))}
	%r9388 = load %Word32, %Word32* %regW32_0
	%r9389 = trunc %Word32 %r9388 to i1
	br i1 %r9389, label %L_556, label %L_543

L_541:
	; SW64(40): Word64  = WordS32_extdToWord64 (RW32(0): Word32)
	%r9390 = load %Word32, %Word32* %regW32_0
	%r9391 = sext %Word32 %r9390 to %Word64
	%r9392 = load %Pointer, %Pointer* %stackTop
	%r9393 = getelementptr inbounds i8, %Pointer %r9392, i32 40
	%r9394 = bitcast %Pointer %r9393 to %Word64*
	store %Word64 %r9391, %Word64* %r9394
	; RW32(1): Word32  = WordU64_lt (RW64(0): Word64, SW64(40): Word64)
	%r9395 = load %Word64, %Word64* %regW64_0
	%r9396 = load %Pointer, %Pointer* %stackTop
	%r9397 = getelementptr inbounds i8, %Pointer %r9396, i32 40
	%r9398 = bitcast %Pointer %r9397 to %Word64*
	%r9399 = load %Word64, %Word64* %r9398
	%r9401 = icmp ult %Word64 %r9395, %r9399
	%r9400 = zext i1 %r9401 to %Word32
	store %Word32 %r9400, %Word32* %regW32_1
	; switch {test = RW32(1): Word32, default = None, cases = ((0x0, L_542), (0x1, L_557))}
	%r9402 = load %Word32, %Word32* %regW32_1
	%r9403 = trunc %Word32 %r9402 to i1
	br i1 %r9403, label %L_557, label %L_542

L_540:
	; Push(-48)
	%r9404 = load %Pointer, %Pointer* %stackTop
	%r9405 = getelementptr inbounds i8, %Pointer %r9404, i32 -48
	store %Pointer %r9405, %Pointer* %stackTop
	; Goto L_538
	br label %L_538

L_539:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 87}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_540}
	; GetOperands
	%r9406 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9407 = load %Pointer, %Pointer* %stackTop
	%r9408 = getelementptr inbounds i8, %Pointer %r9407, i32 40
	%r9409 = bitcast %Pointer %r9408 to %uintptr_t*
	store %uintptr_t 87, %uintptr_t* %r9409
	; Push(48)
	%r9410 = load %Pointer, %Pointer* %stackTop
	%r9411 = getelementptr inbounds i8, %Pointer %r9410, i32 48
	store %Pointer %r9411, %Pointer* %stackTop
	; FlushFrontier
	%r9412 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9413 = getelementptr inbounds i8, %Pointer %r9412, i32 0
	%r9414 = bitcast %Pointer %r9413 to %Pointer*
	%r9415 = load %Pointer, %Pointer* %frontier
	store %Pointer %r9415, %Pointer* %r9414
	; FlushStackTop
	%r9416 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9417 = getelementptr inbounds i8, %Pointer %r9416, i32 16
	%r9418 = bitcast %Pointer %r9417 to %Pointer*
	%r9419 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r9419, %Pointer* %r9418
	; Call
	call void @GC_collect(%Pointer %r9406, %Word64 0, %Word32 0)
	; CacheFrontier
	%r9420 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9421 = getelementptr inbounds i8, %Pointer %r9420, i32 0
	%r9422 = bitcast %Pointer %r9421 to %Pointer*
	%r9423 = load %Pointer, %Pointer* %r9422
	store %Pointer %r9423, %Pointer* %frontier
	; CacheStackTop
	%r9424 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9425 = getelementptr inbounds i8, %Pointer %r9424, i32 16
	%r9426 = bitcast %Pointer %r9425 to %Pointer*
	%r9427 = load %Pointer, %Pointer* %r9426
	store %Pointer %r9427, %Pointer* %stackTop
	br label %L_540

L_538:
	; RP(0): Objptr (opt_34, opt_33, opt_32, opt_31)  = SP(0): Objptr (opt_34, opt_33, opt_32, opt_31)
	%r9428 = load %Pointer, %Pointer* %stackTop
	%r9429 = getelementptr inbounds i8, %Pointer %r9428, i32 0
	%r9430 = bitcast %Pointer %r9429 to %Objptr*
	%r9431 = load %Objptr, %Objptr* %r9430
	store %Objptr %r9431, %Objptr* %regP_0
	; Goto L_409
	br label %L_409

L_537:
	; Push(-24)
	%r9432 = load %Pointer, %Pointer* %stackTop
	%r9433 = getelementptr inbounds i8, %Pointer %r9432, i32 -24
	store %Pointer %r9433, %Pointer* %stackTop
	; SP(0): Objptr (opt_34, opt_33, opt_32, opt_31)  = glob {index = 0, isRoot = false, ty = Objptr (opt_34, opt_33, opt_32, opt_31)}
	%r9434 = getelementptr inbounds [1 x %Objptr], [1 x %Objptr]* @globalObjptrNonRoot, i32 0, i32 0
	%r9435 = load %Objptr, %Objptr* %r9434
	%r9436 = load %Pointer, %Pointer* %stackTop
	%r9437 = getelementptr inbounds i8, %Pointer %r9436, i32 0
	%r9438 = bitcast %Pointer %r9437 to %Objptr*
	store %Objptr %r9435, %Objptr* %r9438
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r9439 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9440 = getelementptr inbounds i8, %Pointer %r9439, i32 8
	%r9441 = bitcast %Pointer %r9440 to %CPointer*
	%r9442 = load %CPointer, %CPointer* %r9441
	%r9443 = load %Pointer, %Pointer* %frontier
	%r9445 = icmp ult %Pointer %r9442, %r9443
	%r9444 = zext i1 %r9445 to %Word32
	store %Word32 %r9444, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_538), (0x1, L_539))}
	%r9446 = load %Word32, %Word32* %regW32_0
	%r9447 = trunc %Word32 %r9446 to i1
	br i1 %r9447, label %L_539, label %L_538

L_536:
	; Push(-56)
	%r9448 = load %Pointer, %Pointer* %stackTop
	%r9449 = getelementptr inbounds i8, %Pointer %r9448, i32 -56
	store %Pointer %r9449, %Pointer* %stackTop
	; Goto L_416
	br label %L_416

L_535:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 85}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_536}
	; GetOperands
	%r9450 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9451 = load %Pointer, %Pointer* %stackTop
	%r9452 = getelementptr inbounds i8, %Pointer %r9451, i32 48
	%r9453 = bitcast %Pointer %r9452 to %uintptr_t*
	store %uintptr_t 85, %uintptr_t* %r9453
	; Push(56)
	%r9454 = load %Pointer, %Pointer* %stackTop
	%r9455 = getelementptr inbounds i8, %Pointer %r9454, i32 56
	store %Pointer %r9455, %Pointer* %stackTop
	; FlushFrontier
	%r9456 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9457 = getelementptr inbounds i8, %Pointer %r9456, i32 0
	%r9458 = bitcast %Pointer %r9457 to %Pointer*
	%r9459 = load %Pointer, %Pointer* %frontier
	store %Pointer %r9459, %Pointer* %r9458
	; FlushStackTop
	%r9460 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9461 = getelementptr inbounds i8, %Pointer %r9460, i32 16
	%r9462 = bitcast %Pointer %r9461 to %Pointer*
	%r9463 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r9463, %Pointer* %r9462
	; Call
	call void @GC_collect(%Pointer %r9450, %Word64 0, %Word32 0)
	; CacheFrontier
	%r9464 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9465 = getelementptr inbounds i8, %Pointer %r9464, i32 0
	%r9466 = bitcast %Pointer %r9465 to %Pointer*
	%r9467 = load %Pointer, %Pointer* %r9466
	store %Pointer %r9467, %Pointer* %frontier
	; CacheStackTop
	%r9468 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9469 = getelementptr inbounds i8, %Pointer %r9468, i32 16
	%r9470 = bitcast %Pointer %r9469 to %Pointer*
	%r9471 = load %Pointer, %Pointer* %r9470
	store %Pointer %r9471, %Pointer* %stackTop
	br label %L_536

L_534:
	; RP(0): Objptr (opt_10)  = OP (Cast (RP(2): Objptr (opt_41, opt_40), Objptr (opt_41)), 8): Objptr (opt_10)
	%r9472 = load %Objptr, %Objptr* %regP_2
	%r9473 = bitcast %Objptr %r9472 to %Objptr
	%r9474 = getelementptr inbounds i8, %Objptr %r9473, i32 8
	%r9475 = bitcast %Objptr %r9474 to %Objptr*
	%r9476 = load %Objptr, %Objptr* %r9475
	store %Objptr %r9476, %Objptr* %regP_0
	; RP(3): Objptr (opt_11)  = OP (Cast (RP(2): Objptr (opt_41, opt_40), Objptr (opt_41)), 0): Objptr (opt_11)
	%r9477 = load %Objptr, %Objptr* %regP_2
	%r9478 = bitcast %Objptr %r9477 to %Objptr
	%r9479 = getelementptr inbounds i8, %Objptr %r9478, i32 0
	%r9480 = bitcast %Objptr %r9479 to %Objptr*
	%r9481 = load %Objptr, %Objptr* %r9480
	store %Objptr %r9481, %Objptr* %regP_3
	; CW64 (<Frontier>)  = 0x3D
	%r9482 = load %Pointer, %Pointer* %frontier
	%r9483 = bitcast %Pointer %r9482 to %Word64*
	store %Word64 61, %Word64* %r9483
	; RQ(47): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r9484 = load %Pointer, %Pointer* %frontier
	%r9486 = ptrtoint %Pointer %r9484 to %uintptr_t
	%r9487 = add %uintptr_t %r9486, 8
	%r9485 = inttoptr %uintptr_t %r9487 to %Pointer
	store %CPointer %r9485, %CPointer* %regQ_47
	; RP(4): Objptr (opt_30)  = Cast (RQ(47): CPointer, Objptr (opt_30))
	%r9488 = load %CPointer, %CPointer* %regQ_47
	%r9489 = bitcast %CPointer %r9488 to %Objptr
	store %Objptr %r9489, %Objptr* %regP_4
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r9490 = load %Pointer, %Pointer* %frontier
	%r9492 = ptrtoint %Pointer %r9490 to %uintptr_t
	%r9493 = add %uintptr_t %r9492, 24
	%r9491 = inttoptr %uintptr_t %r9493 to %Pointer
	store %Pointer %r9491, %Pointer* %frontier
	; OP (RP(4): Objptr (opt_30), 0): Objptr (opt_10)  = RP(0): Objptr (opt_10)
	%r9494 = load %Objptr, %Objptr* %regP_0
	%r9495 = load %Objptr, %Objptr* %regP_4
	%r9496 = getelementptr inbounds i8, %Objptr %r9495, i32 0
	%r9497 = bitcast %Objptr %r9496 to %Objptr*
	store %Objptr %r9494, %Objptr* %r9497
	; OP (RP(4): Objptr (opt_30), 8): Objptr (opt_11)  = RP(3): Objptr (opt_11)
	%r9498 = load %Objptr, %Objptr* %regP_3
	%r9499 = load %Objptr, %Objptr* %regP_4
	%r9500 = getelementptr inbounds i8, %Objptr %r9499, i32 8
	%r9501 = bitcast %Objptr %r9500 to %Objptr*
	store %Objptr %r9498, %Objptr* %r9501
	; OW64 (<GCState>, 32): ExnStack  = SW64(24): ExnStack
	%r9502 = load %Pointer, %Pointer* %stackTop
	%r9503 = getelementptr inbounds i8, %Pointer %r9502, i32 24
	%r9504 = bitcast %Pointer %r9503 to %Word64*
	%r9505 = load %Word64, %Word64* %r9504
	%r9506 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9507 = getelementptr inbounds i8, %Pointer %r9506, i32 32
	%r9508 = bitcast %Pointer %r9507 to %Word64*
	store %Word64 %r9505, %Word64* %r9508
	; SP(0): Objptr (opt_30)  = RP(4): Objptr (opt_30)
	%r9509 = load %Objptr, %Objptr* %regP_4
	%r9510 = load %Pointer, %Pointer* %stackTop
	%r9511 = getelementptr inbounds i8, %Pointer %r9510, i32 0
	%r9512 = bitcast %Pointer %r9511 to %Objptr*
	store %Objptr %r9509, %Objptr* %r9512
	; SP(8): Objptr (opt_15)  = RP(1): Objptr (opt_15)
	%r9513 = load %Objptr, %Objptr* %regP_1
	%r9514 = load %Pointer, %Pointer* %stackTop
	%r9515 = getelementptr inbounds i8, %Pointer %r9514, i32 8
	%r9516 = bitcast %Pointer %r9515 to %Objptr*
	store %Objptr %r9513, %Objptr* %r9516
	br label %flushBuf_0

L_533:
	; Push(-40)
	%r9517 = load %Pointer, %Pointer* %stackTop
	%r9518 = getelementptr inbounds i8, %Pointer %r9517, i32 -40
	store %Pointer %r9518, %Pointer* %stackTop
	; Goto L_531
	br label %L_531

L_532:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 84}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_533}
	; GetOperands
	%r9519 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9520 = load %Pointer, %Pointer* %stackTop
	%r9521 = getelementptr inbounds i8, %Pointer %r9520, i32 32
	%r9522 = bitcast %Pointer %r9521 to %uintptr_t*
	store %uintptr_t 84, %uintptr_t* %r9522
	; Push(40)
	%r9523 = load %Pointer, %Pointer* %stackTop
	%r9524 = getelementptr inbounds i8, %Pointer %r9523, i32 40
	store %Pointer %r9524, %Pointer* %stackTop
	; FlushFrontier
	%r9525 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9526 = getelementptr inbounds i8, %Pointer %r9525, i32 0
	%r9527 = bitcast %Pointer %r9526 to %Pointer*
	%r9528 = load %Pointer, %Pointer* %frontier
	store %Pointer %r9528, %Pointer* %r9527
	; FlushStackTop
	%r9529 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9530 = getelementptr inbounds i8, %Pointer %r9529, i32 16
	%r9531 = bitcast %Pointer %r9530 to %Pointer*
	%r9532 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r9532, %Pointer* %r9531
	; Call
	call void @GC_collect(%Pointer %r9519, %Word64 0, %Word32 0)
	; CacheFrontier
	%r9533 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9534 = getelementptr inbounds i8, %Pointer %r9533, i32 0
	%r9535 = bitcast %Pointer %r9534 to %Pointer*
	%r9536 = load %Pointer, %Pointer* %r9535
	store %Pointer %r9536, %Pointer* %frontier
	; CacheStackTop
	%r9537 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9538 = getelementptr inbounds i8, %Pointer %r9537, i32 16
	%r9539 = bitcast %Pointer %r9538 to %Pointer*
	%r9540 = load %Pointer, %Pointer* %r9539
	store %Pointer %r9540, %Pointer* %stackTop
	br label %L_533

L_531:
	; RP(0): Objptr (opt_15)  = OP (SP(0): Objptr (opt_18), 0): Objptr (opt_15)
	%r9541 = load %Pointer, %Pointer* %stackTop
	%r9542 = getelementptr inbounds i8, %Pointer %r9541, i32 0
	%r9543 = bitcast %Pointer %r9542 to %Objptr*
	%r9544 = load %Objptr, %Objptr* %r9543
	%r9545 = getelementptr inbounds i8, %Objptr %r9544, i32 0
	%r9546 = bitcast %Objptr %r9545 to %Objptr*
	%r9547 = load %Objptr, %Objptr* %r9546
	store %Objptr %r9547, %Objptr* %regP_0
	; RP(1): Objptr (opt_3)  = OP (RP(0): Objptr (opt_15), 16): Objptr (opt_3)
	%r9548 = load %Objptr, %Objptr* %regP_0
	%r9549 = getelementptr inbounds i8, %Objptr %r9548, i32 16
	%r9550 = bitcast %Objptr %r9549 to %Objptr*
	%r9551 = load %Objptr, %Objptr* %r9550
	store %Objptr %r9551, %Objptr* %regP_1
	; CW64 (<Frontier>)  = 0x45
	%r9552 = load %Pointer, %Pointer* %frontier
	%r9553 = bitcast %Pointer %r9552 to %Word64*
	store %Word64 69, %Word64* %r9553
	; RQ(46): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r9554 = load %Pointer, %Pointer* %frontier
	%r9556 = ptrtoint %Pointer %r9554 to %uintptr_t
	%r9557 = add %uintptr_t %r9556, 8
	%r9555 = inttoptr %uintptr_t %r9557 to %Pointer
	store %CPointer %r9555, %CPointer* %regQ_46
	; RP(2): Objptr (opt_34)  = Cast (RQ(46): CPointer, Objptr (opt_34))
	%r9558 = load %CPointer, %CPointer* %regQ_46
	%r9559 = bitcast %CPointer %r9558 to %Objptr
	store %Objptr %r9559, %Objptr* %regP_2
	; <Frontier>  = CPointer_add (<Frontier>, 0x20)
	%r9560 = load %Pointer, %Pointer* %frontier
	%r9562 = ptrtoint %Pointer %r9560 to %uintptr_t
	%r9563 = add %uintptr_t %r9562, 32
	%r9561 = inttoptr %uintptr_t %r9563 to %Pointer
	store %Pointer %r9561, %Pointer* %frontier
	; OP (RP(2): Objptr (opt_34), 0): Objptr (opt_34, opt_33, opt_32, opt_31)  = SP(8): Objptr (opt_34, opt_33, opt_32, opt_31)
	%r9564 = load %Pointer, %Pointer* %stackTop
	%r9565 = getelementptr inbounds i8, %Pointer %r9564, i32 8
	%r9566 = bitcast %Pointer %r9565 to %Objptr*
	%r9567 = load %Objptr, %Objptr* %r9566
	%r9568 = load %Objptr, %Objptr* %regP_2
	%r9569 = getelementptr inbounds i8, %Objptr %r9568, i32 0
	%r9570 = bitcast %Objptr %r9569 to %Objptr*
	store %Objptr %r9567, %Objptr* %r9570
	; OP (RP(2): Objptr (opt_34), 8): Objptr (opt_3)  = glob {index = 134, isRoot = true, ty = Objptr (opt_3)}
	%r9571 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 134
	%r9572 = load %Objptr, %Objptr* %r9571
	%r9573 = load %Objptr, %Objptr* %regP_2
	%r9574 = getelementptr inbounds i8, %Objptr %r9573, i32 8
	%r9575 = bitcast %Objptr %r9574 to %Objptr*
	store %Objptr %r9572, %Objptr* %r9575
	; OP (RP(2): Objptr (opt_34), 16): Objptr (opt_3)  = RP(1): Objptr (opt_3)
	%r9576 = load %Objptr, %Objptr* %regP_1
	%r9577 = load %Objptr, %Objptr* %regP_2
	%r9578 = getelementptr inbounds i8, %Objptr %r9577, i32 16
	%r9579 = bitcast %Objptr %r9578 to %Objptr*
	store %Objptr %r9576, %Objptr* %r9579
	; OW64 (<GCState>, 32): ExnStack  = SW64(24): ExnStack
	%r9580 = load %Pointer, %Pointer* %stackTop
	%r9581 = getelementptr inbounds i8, %Pointer %r9580, i32 24
	%r9582 = bitcast %Pointer %r9581 to %Word64*
	%r9583 = load %Word64, %Word64* %r9582
	%r9584 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9585 = getelementptr inbounds i8, %Pointer %r9584, i32 32
	%r9586 = bitcast %Pointer %r9585 to %Word64*
	store %Word64 %r9583, %Word64* %r9586
	; glob {index = 0, isRoot = false, ty = Objptr (opt_34, opt_33, opt_32, opt_31)}  = Cast (RP(2): Objptr (opt_34), Objptr (opt_34, opt_33, opt_32, opt_31))
	%r9587 = load %Objptr, %Objptr* %regP_2
	%r9588 = bitcast %Objptr %r9587 to %Objptr
	%r9589 = getelementptr inbounds [1 x %Objptr], [1 x %Objptr]* @globalObjptrNonRoot, i32 0, i32 0
	store %Objptr %r9588, %Objptr* %r9589
	; Raise
	%r9590 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9591 = getelementptr inbounds i8, %Pointer %r9590, i32 1616
	%r9592 = bitcast %Pointer %r9591 to %Pointer*
	%r9593 = load %Pointer, %Pointer* %r9592
	%r9594 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9595 = getelementptr inbounds i8, %Pointer %r9594, i32 32
	%r9596 = bitcast %Pointer %r9595 to i32*
	%r9597 = load i32, i32* %r9596
	%r9598 = getelementptr inbounds i8, %Pointer %r9593, i32 %r9597
	store %Pointer %r9598, %Pointer* %stackTop
	%r9599 = load %Pointer, %Pointer* %stackTop
	%r9600 = getelementptr inbounds i8, %Pointer %r9599, i32 -8
	%r9601 = bitcast %Pointer %r9600 to %uintptr_t*
	%r9602 = load %uintptr_t, %uintptr_t* %r9601
	store %uintptr_t %r9602, %uintptr_t* %l_nextFun
	br label %top

L_530:
	; Push(-24)
	%r9603 = load %Pointer, %Pointer* %stackTop
	%r9604 = getelementptr inbounds i8, %Pointer %r9603, i32 -24
	store %Pointer %r9604, %Pointer* %stackTop
	; SP(8): Objptr (opt_34, opt_33, opt_32, opt_31)  = glob {index = 0, isRoot = false, ty = Objptr (opt_34, opt_33, opt_32, opt_31)}
	%r9605 = getelementptr inbounds [1 x %Objptr], [1 x %Objptr]* @globalObjptrNonRoot, i32 0, i32 0
	%r9606 = load %Objptr, %Objptr* %r9605
	%r9607 = load %Pointer, %Pointer* %stackTop
	%r9608 = getelementptr inbounds i8, %Pointer %r9607, i32 8
	%r9609 = bitcast %Pointer %r9608 to %Objptr*
	store %Objptr %r9606, %Objptr* %r9609
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r9610 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9611 = getelementptr inbounds i8, %Pointer %r9610, i32 8
	%r9612 = bitcast %Pointer %r9611 to %CPointer*
	%r9613 = load %CPointer, %CPointer* %r9612
	%r9614 = load %Pointer, %Pointer* %frontier
	%r9616 = icmp ult %Pointer %r9613, %r9614
	%r9615 = zext i1 %r9616 to %Word32
	store %Word32 %r9615, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_531), (0x1, L_532))}
	%r9617 = load %Word32, %Word32* %regW32_0
	%r9618 = trunc %Word32 %r9617 to i1
	br i1 %r9618, label %L_532, label %L_531

L_529:
	; Push(-40)
	%r9619 = load %Pointer, %Pointer* %stackTop
	%r9620 = getelementptr inbounds i8, %Pointer %r9619, i32 -40
	store %Pointer %r9620, %Pointer* %stackTop
	; OW64 (<GCState>, 32): ExnStack  = SW64(24): ExnStack
	%r9621 = load %Pointer, %Pointer* %stackTop
	%r9622 = getelementptr inbounds i8, %Pointer %r9621, i32 24
	%r9623 = bitcast %Pointer %r9622 to %Word64*
	%r9624 = load %Word64, %Word64* %r9623
	%r9625 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9626 = getelementptr inbounds i8, %Pointer %r9625, i32 32
	%r9627 = bitcast %Pointer %r9626 to %Word64*
	store %Word64 %r9624, %Word64* %r9627
	; Return
	%r9628 = load %Pointer, %Pointer* %stackTop
	%r9629 = getelementptr inbounds i8, %Pointer %r9628, i32 -8
	%r9630 = bitcast %Pointer %r9629 to %uintptr_t*
	%r9631 = load %uintptr_t, %uintptr_t* %r9630
	store %uintptr_t %r9631, %uintptr_t* %l_nextFun
	br label %top

L_528:
	; RP(0): Objptr (opt_10)  = OP (Cast (RP(2): Objptr (opt_41, opt_40), Objptr (opt_40)), 8): Objptr (opt_10)
	%r9632 = load %Objptr, %Objptr* %regP_2
	%r9633 = bitcast %Objptr %r9632 to %Objptr
	%r9634 = getelementptr inbounds i8, %Objptr %r9633, i32 8
	%r9635 = bitcast %Objptr %r9634 to %Objptr*
	%r9636 = load %Objptr, %Objptr* %r9635
	store %Objptr %r9636, %Objptr* %regP_0
	; RP(3): Objptr (opt_11)  = OP (Cast (RP(2): Objptr (opt_41, opt_40), Objptr (opt_40)), 0): Objptr (opt_11)
	%r9637 = load %Objptr, %Objptr* %regP_2
	%r9638 = bitcast %Objptr %r9637 to %Objptr
	%r9639 = getelementptr inbounds i8, %Objptr %r9638, i32 0
	%r9640 = bitcast %Objptr %r9639 to %Objptr*
	%r9641 = load %Objptr, %Objptr* %r9640
	store %Objptr %r9641, %Objptr* %regP_3
	; CW64 (<Frontier>)  = 0x3D
	%r9642 = load %Pointer, %Pointer* %frontier
	%r9643 = bitcast %Pointer %r9642 to %Word64*
	store %Word64 61, %Word64* %r9643
	; RQ(45): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r9644 = load %Pointer, %Pointer* %frontier
	%r9646 = ptrtoint %Pointer %r9644 to %uintptr_t
	%r9647 = add %uintptr_t %r9646, 8
	%r9645 = inttoptr %uintptr_t %r9647 to %Pointer
	store %CPointer %r9645, %CPointer* %regQ_45
	; RP(4): Objptr (opt_30)  = Cast (RQ(45): CPointer, Objptr (opt_30))
	%r9648 = load %CPointer, %CPointer* %regQ_45
	%r9649 = bitcast %CPointer %r9648 to %Objptr
	store %Objptr %r9649, %Objptr* %regP_4
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r9650 = load %Pointer, %Pointer* %frontier
	%r9652 = ptrtoint %Pointer %r9650 to %uintptr_t
	%r9653 = add %uintptr_t %r9652, 24
	%r9651 = inttoptr %uintptr_t %r9653 to %Pointer
	store %Pointer %r9651, %Pointer* %frontier
	; OP (RP(4): Objptr (opt_30), 0): Objptr (opt_10)  = RP(0): Objptr (opt_10)
	%r9654 = load %Objptr, %Objptr* %regP_0
	%r9655 = load %Objptr, %Objptr* %regP_4
	%r9656 = getelementptr inbounds i8, %Objptr %r9655, i32 0
	%r9657 = bitcast %Objptr %r9656 to %Objptr*
	store %Objptr %r9654, %Objptr* %r9657
	; OP (RP(4): Objptr (opt_30), 8): Objptr (opt_11)  = RP(3): Objptr (opt_11)
	%r9658 = load %Objptr, %Objptr* %regP_3
	%r9659 = load %Objptr, %Objptr* %regP_4
	%r9660 = getelementptr inbounds i8, %Objptr %r9659, i32 8
	%r9661 = bitcast %Objptr %r9660 to %Objptr*
	store %Objptr %r9658, %Objptr* %r9661
	; SQ(16): Label L_530  = L_530
	%r9662 = inttoptr %Word32 83 to %CPointer
	%r9663 = load %Pointer, %Pointer* %stackTop
	%r9664 = getelementptr inbounds i8, %Pointer %r9663, i32 16
	%r9665 = bitcast %Pointer %r9664 to %CPointer*
	store %CPointer %r9662, %CPointer* %r9665
	; RQ(44): CPointer  = CPointer_add (<StackTop>, 0x18)
	%r9666 = load %Pointer, %Pointer* %stackTop
	%r9668 = ptrtoint %Pointer %r9666 to %uintptr_t
	%r9669 = add %uintptr_t %r9668, 24
	%r9667 = inttoptr %uintptr_t %r9669 to %Pointer
	store %CPointer %r9667, %CPointer* %regQ_44
	; RW64(9): Word64  = CPointer_diff (RQ(44): CPointer, OQ (<GCState>, 1616): CPointer)
	%r9670 = load %CPointer, %CPointer* %regQ_44
	%r9671 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9672 = getelementptr inbounds i8, %Pointer %r9671, i32 1616
	%r9673 = bitcast %Pointer %r9672 to %CPointer*
	%r9674 = load %CPointer, %CPointer* %r9673
	%r9676 = ptrtoint %Pointer %r9670 to %uintptr_t
	%r9677 = ptrtoint %Pointer %r9674 to %uintptr_t
	%r9675 = sub %uintptr_t %r9676, %r9677
	store %Word64 %r9675, %Word64* %regW64_9
	; OW64 (<GCState>, 32): ExnStack  = Cast (RW64(9): Word64, ExnStack)
	%r9678 = load %Word64, %Word64* %regW64_9
	%r9679 = bitcast %Word64 %r9678 to %Word64
	%r9680 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9681 = getelementptr inbounds i8, %Pointer %r9680, i32 32
	%r9682 = bitcast %Pointer %r9681 to %Word64*
	store %Word64 %r9679, %Word64* %r9682
	; SP(40): Objptr (opt_30)  = RP(4): Objptr (opt_30)
	%r9683 = load %Objptr, %Objptr* %regP_4
	%r9684 = load %Pointer, %Pointer* %stackTop
	%r9685 = getelementptr inbounds i8, %Pointer %r9684, i32 40
	%r9686 = bitcast %Pointer %r9685 to %Objptr*
	store %Objptr %r9683, %Objptr* %r9686
	; SP(48): Objptr (opt_15)  = RP(1): Objptr (opt_15)
	%r9687 = load %Objptr, %Objptr* %regP_1
	%r9688 = load %Pointer, %Pointer* %stackTop
	%r9689 = getelementptr inbounds i8, %Pointer %r9688, i32 48
	%r9690 = bitcast %Pointer %r9689 to %Objptr*
	store %Objptr %r9687, %Objptr* %r9690
	%r9691 = load %Pointer, %Pointer* %stackTop
	%r9692 = getelementptr inbounds i8, %Pointer %r9691, i32 32
	%r9693 = bitcast %Pointer %r9692 to %uintptr_t*
	store %uintptr_t 82, %uintptr_t* %r9693
	; Push(40)
	%r9694 = load %Pointer, %Pointer* %stackTop
	%r9695 = getelementptr inbounds i8, %Pointer %r9694, i32 40
	store %Pointer %r9695, %Pointer* %stackTop
	br label %flushBuf_0

L_527:
	; SP(0): Objptr (opt_18)  = OP (SP(8): Objptr (opt_27), 0): Objptr (opt_18)
	%r9696 = load %Pointer, %Pointer* %stackTop
	%r9697 = getelementptr inbounds i8, %Pointer %r9696, i32 8
	%r9698 = bitcast %Pointer %r9697 to %Objptr*
	%r9699 = load %Objptr, %Objptr* %r9698
	%r9700 = getelementptr inbounds i8, %Objptr %r9699, i32 0
	%r9701 = bitcast %Objptr %r9700 to %Objptr*
	%r9702 = load %Objptr, %Objptr* %r9701
	%r9703 = load %Pointer, %Pointer* %stackTop
	%r9704 = getelementptr inbounds i8, %Pointer %r9703, i32 0
	%r9705 = bitcast %Pointer %r9704 to %Objptr*
	store %Objptr %r9702, %Objptr* %r9705
	; RP(0): Objptr (opt_16)  = OP (SP(0): Objptr (opt_18), 16): Objptr (opt_16)
	%r9706 = load %Pointer, %Pointer* %stackTop
	%r9707 = getelementptr inbounds i8, %Pointer %r9706, i32 0
	%r9708 = bitcast %Pointer %r9707 to %Objptr*
	%r9709 = load %Objptr, %Objptr* %r9708
	%r9710 = getelementptr inbounds i8, %Objptr %r9709, i32 16
	%r9711 = bitcast %Objptr %r9710 to %Objptr*
	%r9712 = load %Objptr, %Objptr* %r9711
	store %Objptr %r9712, %Objptr* %regP_0
	; RP(1): Objptr (opt_15)  = OP (SP(0): Objptr (opt_18), 24): Objptr (opt_15)
	%r9713 = load %Pointer, %Pointer* %stackTop
	%r9714 = getelementptr inbounds i8, %Pointer %r9713, i32 0
	%r9715 = bitcast %Pointer %r9714 to %Objptr*
	%r9716 = load %Objptr, %Objptr* %r9715
	%r9717 = getelementptr inbounds i8, %Objptr %r9716, i32 24
	%r9718 = bitcast %Objptr %r9717 to %Objptr*
	%r9719 = load %Objptr, %Objptr* %r9718
	store %Objptr %r9719, %Objptr* %regP_1
	; RP(2): Objptr (opt_41, opt_40)  = OP (RP(0): Objptr (opt_16), 0): Objptr (opt_41, opt_40)
	%r9720 = load %Objptr, %Objptr* %regP_0
	%r9721 = getelementptr inbounds i8, %Objptr %r9720, i32 0
	%r9722 = bitcast %Objptr %r9721 to %Objptr*
	%r9723 = load %Objptr, %Objptr* %r9722
	store %Objptr %r9723, %Objptr* %regP_2
	; RW64(0): Word64  = WordU64_rshift (OW64 (RP(2): Objptr (opt_41, opt_40), ~8): Word64, 0x1)
	%r9724 = load %Objptr, %Objptr* %regP_2
	%r9725 = getelementptr inbounds i8, %Objptr %r9724, i32 -8
	%r9726 = bitcast %Objptr %r9725 to %Word64*
	%r9727 = load %Word64, %Word64* %r9726
	%r9728 = zext %Word32 1 to %Word64
	%r9729 = lshr %Word64 %r9727, %r9728
	store %Word64 %r9729, %Word64* %regW64_0
	; switch {test = RW64(0): Word64, default = None, cases = ((0x28, L_528), (0x29, L_534))}
	%r9730 = load %Word64, %Word64* %regW64_0
	switch %Word64 %r9730, label %L_528 [
		%Word64 41, label %L_534
	]

L_526:
	; Goto L_527
	br label %L_527

L_525:
	; Goto L_524
	br label %L_524

L_524:
	; RP(0): Objptr (opt_34, opt_33, opt_32, opt_31)  = Cast (0x3, Objptr (opt_34, opt_33, opt_32, opt_31))
	%r9731 = inttoptr %Word64 3 to %Objptr
	store %Objptr %r9731, %Objptr* %regP_0
	; Goto L_409
	br label %L_409

L_523:
	; Goto L_524
	br label %L_524

L_522:
	; RP(0): Objptr (opt_34, opt_33, opt_32, opt_31)  = Cast (0x6, Objptr (opt_34, opt_33, opt_32, opt_31))
	%r9732 = inttoptr %Word64 6 to %Objptr
	store %Objptr %r9732, %Objptr* %regP_0
	; Goto L_409
	br label %L_409

L_521:
	; Push(-96)
	%r9733 = load %Pointer, %Pointer* %stackTop
	%r9734 = getelementptr inbounds i8, %Pointer %r9733, i32 -96
	store %Pointer %r9734, %Pointer* %stackTop
	; Goto L_424
	br label %L_424

L_520:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 81}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_521}
	; GetOperands
	%r9735 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9736 = load %Pointer, %Pointer* %stackTop
	%r9737 = getelementptr inbounds i8, %Pointer %r9736, i32 88
	%r9738 = bitcast %Pointer %r9737 to %uintptr_t*
	store %uintptr_t 81, %uintptr_t* %r9738
	; Push(96)
	%r9739 = load %Pointer, %Pointer* %stackTop
	%r9740 = getelementptr inbounds i8, %Pointer %r9739, i32 96
	store %Pointer %r9740, %Pointer* %stackTop
	; FlushFrontier
	%r9741 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9742 = getelementptr inbounds i8, %Pointer %r9741, i32 0
	%r9743 = bitcast %Pointer %r9742 to %Pointer*
	%r9744 = load %Pointer, %Pointer* %frontier
	store %Pointer %r9744, %Pointer* %r9743
	; FlushStackTop
	%r9745 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9746 = getelementptr inbounds i8, %Pointer %r9745, i32 16
	%r9747 = bitcast %Pointer %r9746 to %Pointer*
	%r9748 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r9748, %Pointer* %r9747
	; Call
	call void @GC_collect(%Pointer %r9735, %Word64 0, %Word32 0)
	; CacheFrontier
	%r9749 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9750 = getelementptr inbounds i8, %Pointer %r9749, i32 0
	%r9751 = bitcast %Pointer %r9750 to %Pointer*
	%r9752 = load %Pointer, %Pointer* %r9751
	store %Pointer %r9752, %Pointer* %frontier
	; CacheStackTop
	%r9753 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9754 = getelementptr inbounds i8, %Pointer %r9753, i32 16
	%r9755 = bitcast %Pointer %r9754 to %Pointer*
	%r9756 = load %Pointer, %Pointer* %r9755
	store %Pointer %r9756, %Pointer* %stackTop
	br label %L_521

L_519:
	; Push(-96)
	%r9757 = load %Pointer, %Pointer* %stackTop
	%r9758 = getelementptr inbounds i8, %Pointer %r9757, i32 -96
	store %Pointer %r9758, %Pointer* %stackTop
	; Goto L_437
	br label %L_437

L_518:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 80}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_519}
	; GetOperands
	%r9759 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9760 = load %Pointer, %Pointer* %stackTop
	%r9761 = getelementptr inbounds i8, %Pointer %r9760, i32 88
	%r9762 = bitcast %Pointer %r9761 to %uintptr_t*
	store %uintptr_t 80, %uintptr_t* %r9762
	; Push(96)
	%r9763 = load %Pointer, %Pointer* %stackTop
	%r9764 = getelementptr inbounds i8, %Pointer %r9763, i32 96
	store %Pointer %r9764, %Pointer* %stackTop
	; FlushFrontier
	%r9765 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9766 = getelementptr inbounds i8, %Pointer %r9765, i32 0
	%r9767 = bitcast %Pointer %r9766 to %Pointer*
	%r9768 = load %Pointer, %Pointer* %frontier
	store %Pointer %r9768, %Pointer* %r9767
	; FlushStackTop
	%r9769 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9770 = getelementptr inbounds i8, %Pointer %r9769, i32 16
	%r9771 = bitcast %Pointer %r9770 to %Pointer*
	%r9772 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r9772, %Pointer* %r9771
	; Call
	call void @GC_collect(%Pointer %r9759, %Word64 0, %Word32 0)
	; CacheFrontier
	%r9773 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9774 = getelementptr inbounds i8, %Pointer %r9773, i32 0
	%r9775 = bitcast %Pointer %r9774 to %Pointer*
	%r9776 = load %Pointer, %Pointer* %r9775
	store %Pointer %r9776, %Pointer* %frontier
	; CacheStackTop
	%r9777 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9778 = getelementptr inbounds i8, %Pointer %r9777, i32 16
	%r9779 = bitcast %Pointer %r9778 to %Pointer*
	%r9780 = load %Pointer, %Pointer* %r9779
	store %Pointer %r9780, %Pointer* %stackTop
	br label %L_519

L_517:
	; Goto L_435
	br label %L_435

L_516:
	; Push(-96)
	%r9781 = load %Pointer, %Pointer* %stackTop
	%r9782 = getelementptr inbounds i8, %Pointer %r9781, i32 -96
	store %Pointer %r9782, %Pointer* %stackTop
	; Goto L_503
	br label %L_503

L_515:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 79}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_516}
	; GetOperands
	%r9783 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9784 = load %Pointer, %Pointer* %stackTop
	%r9785 = getelementptr inbounds i8, %Pointer %r9784, i32 88
	%r9786 = bitcast %Pointer %r9785 to %uintptr_t*
	store %uintptr_t 79, %uintptr_t* %r9786
	; Push(96)
	%r9787 = load %Pointer, %Pointer* %stackTop
	%r9788 = getelementptr inbounds i8, %Pointer %r9787, i32 96
	store %Pointer %r9788, %Pointer* %stackTop
	; FlushFrontier
	%r9789 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9790 = getelementptr inbounds i8, %Pointer %r9789, i32 0
	%r9791 = bitcast %Pointer %r9790 to %Pointer*
	%r9792 = load %Pointer, %Pointer* %frontier
	store %Pointer %r9792, %Pointer* %r9791
	; FlushStackTop
	%r9793 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9794 = getelementptr inbounds i8, %Pointer %r9793, i32 16
	%r9795 = bitcast %Pointer %r9794 to %Pointer*
	%r9796 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r9796, %Pointer* %r9795
	; Call
	call void @GC_collect(%Pointer %r9783, %Word64 0, %Word32 0)
	; CacheFrontier
	%r9797 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9798 = getelementptr inbounds i8, %Pointer %r9797, i32 0
	%r9799 = bitcast %Pointer %r9798 to %Pointer*
	%r9800 = load %Pointer, %Pointer* %r9799
	store %Pointer %r9800, %Pointer* %frontier
	; CacheStackTop
	%r9801 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9802 = getelementptr inbounds i8, %Pointer %r9801, i32 16
	%r9803 = bitcast %Pointer %r9802 to %Pointer*
	%r9804 = load %Pointer, %Pointer* %r9803
	store %Pointer %r9804, %Pointer* %stackTop
	br label %L_516

L_514:
	; Push(-96)
	%r9805 = load %Pointer, %Pointer* %stackTop
	%r9806 = getelementptr inbounds i8, %Pointer %r9805, i32 -96
	store %Pointer %r9806, %Pointer* %stackTop
	; Goto L_509
	br label %L_509

L_513:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 78}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_514}
	; GetOperands
	%r9807 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9808 = load %Pointer, %Pointer* %stackTop
	%r9809 = getelementptr inbounds i8, %Pointer %r9808, i32 88
	%r9810 = bitcast %Pointer %r9809 to %uintptr_t*
	store %uintptr_t 78, %uintptr_t* %r9810
	; Push(96)
	%r9811 = load %Pointer, %Pointer* %stackTop
	%r9812 = getelementptr inbounds i8, %Pointer %r9811, i32 96
	store %Pointer %r9812, %Pointer* %stackTop
	; FlushFrontier
	%r9813 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9814 = getelementptr inbounds i8, %Pointer %r9813, i32 0
	%r9815 = bitcast %Pointer %r9814 to %Pointer*
	%r9816 = load %Pointer, %Pointer* %frontier
	store %Pointer %r9816, %Pointer* %r9815
	; FlushStackTop
	%r9817 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9818 = getelementptr inbounds i8, %Pointer %r9817, i32 16
	%r9819 = bitcast %Pointer %r9818 to %Pointer*
	%r9820 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r9820, %Pointer* %r9819
	; Call
	call void @GC_collect(%Pointer %r9807, %Word64 0, %Word32 0)
	; CacheFrontier
	%r9821 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9822 = getelementptr inbounds i8, %Pointer %r9821, i32 0
	%r9823 = bitcast %Pointer %r9822 to %Pointer*
	%r9824 = load %Pointer, %Pointer* %r9823
	store %Pointer %r9824, %Pointer* %frontier
	; CacheStackTop
	%r9825 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9826 = getelementptr inbounds i8, %Pointer %r9825, i32 16
	%r9827 = bitcast %Pointer %r9826 to %Pointer*
	%r9828 = load %Pointer, %Pointer* %r9827
	store %Pointer %r9828, %Pointer* %stackTop
	br label %L_514

L_512:
	; Goto L_435
	br label %L_435

L_511:
	; RW32(1): Word32  = Word32_add (OW32 (<GCState>, 68): Word32, 0xFFFFFFFF)
	%r9829 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9830 = getelementptr inbounds i8, %Pointer %r9829, i32 68
	%r9831 = bitcast %Pointer %r9830 to %Word32*
	%r9832 = load %Word32, %Word32* %r9831
	%r9833 = add %Word32 %r9832, 4294967295
	store %Word32 %r9833, %Word32* %regW32_1
	; OW32 (<GCState>, 68): Word32  = RW32(1): Word32
	%r9834 = load %Word32, %Word32* %regW32_1
	%r9835 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9836 = getelementptr inbounds i8, %Pointer %r9835, i32 68
	%r9837 = bitcast %Pointer %r9836 to %Word32*
	store %Word32 %r9834, %Word32* %r9837
	; SW32(44): Word32  = RW32(0): Word32
	%r9838 = load %Word32, %Word32* %regW32_0
	%r9839 = load %Pointer, %Pointer* %stackTop
	%r9840 = getelementptr inbounds i8, %Pointer %r9839, i32 44
	%r9841 = bitcast %Pointer %r9840 to %Word32*
	store %Word32 %r9838, %Word32* %r9841
	; Goto loop_24
	br label %loop_24

L_510:
	%r9842 = load %Word32, %Word32* @CReturnW32
	store %Word32 %r9842, %Word32* %regW32_0
	; RW32(1): Word32  = OW32 (<GCState>, 68): Word32
	%r9843 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9844 = getelementptr inbounds i8, %Pointer %r9843, i32 68
	%r9845 = bitcast %Pointer %r9844 to %Word32*
	%r9846 = load %Word32, %Word32* %r9845
	store %Word32 %r9846, %Word32* %regW32_1
	; RW32(2): Word32  = Word32_equal (RW32(1): Word32, 0x0)
	%r9847 = load %Word32, %Word32* %regW32_1
	%r9849 = icmp eq %Word32 %r9847, 0
	%r9848 = zext i1 %r9849 to %Word32
	store %Word32 %r9848, %Word32* %regW32_2
	; switch {test = RW32(2): Word32, default = None, cases = ((0x0, L_511), (0x1, L_512))}
	%r9850 = load %Word32, %Word32* %regW32_2
	%r9851 = trunc %Word32 %r9850 to i1
	br i1 %r9851, label %L_512, label %L_511

L_509:
	; CCall {args = (), frameInfo = None, func = {args = (), convention = cdecl, kind = Impure, prototype = {args = (), res = Some Int32}, return = Word32, symbolScope = private, target = Posix_Error_getErrno}, return = Some L_510}
	; GetOperands
	; Call
	%r9852 = call %Word32 @Posix_Error_getErrno()
	store %Word32 %r9852, %Word32* @CReturnW32
	br label %L_510

L_508:
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r9853 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9854 = getelementptr inbounds i8, %Pointer %r9853, i32 8
	%r9855 = bitcast %Pointer %r9854 to %CPointer*
	%r9856 = load %CPointer, %CPointer* %r9855
	%r9857 = load %Pointer, %Pointer* %frontier
	%r9859 = icmp ult %Pointer %r9856, %r9857
	%r9858 = zext i1 %r9859 to %Word32
	store %Word32 %r9858, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_509), (0x1, L_513))}
	%r9860 = load %Word32, %Word32* %regW32_0
	%r9861 = trunc %Word32 %r9860 to i1
	br i1 %r9861, label %L_513, label %L_509

L_507:
	; Goto L_435
	br label %L_435

L_506:
	; RW32(0): Word32  = Word32_add (OW32 (<GCState>, 68): Word32, 0xFFFFFFFF)
	%r9862 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9863 = getelementptr inbounds i8, %Pointer %r9862, i32 68
	%r9864 = bitcast %Pointer %r9863 to %Word32*
	%r9865 = load %Word32, %Word32* %r9864
	%r9866 = add %Word32 %r9865, 4294967295
	store %Word32 %r9866, %Word32* %regW32_0
	; OW32 (<GCState>, 68): Word32  = RW32(0): Word32
	%r9867 = load %Word32, %Word32* %regW32_0
	%r9868 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9869 = getelementptr inbounds i8, %Pointer %r9868, i32 68
	%r9870 = bitcast %Pointer %r9869 to %Word32*
	store %Word32 %r9867, %Word32* %r9870
	; Goto x_0
	br label %x_0

L_505:
	; RW32(0): Word32  = OW32 (<GCState>, 68): Word32
	%r9871 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9872 = getelementptr inbounds i8, %Pointer %r9871, i32 68
	%r9873 = bitcast %Pointer %r9872 to %Word32*
	%r9874 = load %Word32, %Word32* %r9873
	store %Word32 %r9874, %Word32* %regW32_0
	; RW32(1): Word32  = Word32_equal (RW32(0): Word32, 0x0)
	%r9875 = load %Word32, %Word32* %regW32_0
	%r9877 = icmp eq %Word32 %r9875, 0
	%r9876 = zext i1 %r9877 to %Word32
	store %Word32 %r9876, %Word32* %regW32_1
	; switch {test = RW32(1): Word32, default = None, cases = ((0x0, L_506), (0x1, L_507))}
	%r9878 = load %Word32, %Word32* %regW32_1
	%r9879 = trunc %Word32 %r9878 to i1
	br i1 %r9879, label %L_507, label %L_506

L_504:
	%r9880 = load %Word64, %Word64* @CReturnW64
	store %Word64 %r9880, %Word64* %regW64_0
	; RW32(0): Word32  = Word64_equal (RW64(0): Word64, 0xFFFFFFFFFFFFFFFF)
	%r9881 = load %Word64, %Word64* %regW64_0
	%r9883 = icmp eq %Word64 %r9881, 18446744073709551615
	%r9882 = zext i1 %r9883 to %Word32
	store %Word32 %r9882, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_505), (0x1, L_508))}
	%r9884 = load %Word32, %Word32* %regW32_0
	%r9885 = trunc %Word32 %r9884 to i1
	br i1 %r9885, label %L_508, label %L_505

L_503:
	; CCall {args = (0x1, SP(0): Objptr (opt_3), SW32(40): Word32, SW64(72): Word64), frameInfo = None, func = {args = (Word32, Objptr (opt_3), Word32, Word64), convention = cdecl, kind = Impure, prototype = {args = (Int32, Objptr, Int32, Word64), res = Some Int64}, return = Word64, symbolScope = private, target = Posix_IO_writeChar8Vec}, return = Some L_504}
	; GetOperands
	%r9886 = load %Pointer, %Pointer* %stackTop
	%r9887 = getelementptr inbounds i8, %Pointer %r9886, i32 0
	%r9888 = bitcast %Pointer %r9887 to %Objptr*
	%r9889 = load %Objptr, %Objptr* %r9888
	%r9890 = load %Pointer, %Pointer* %stackTop
	%r9891 = getelementptr inbounds i8, %Pointer %r9890, i32 40
	%r9892 = bitcast %Pointer %r9891 to %Word32*
	%r9893 = load %Word32, %Word32* %r9892
	%r9894 = load %Pointer, %Pointer* %stackTop
	%r9895 = getelementptr inbounds i8, %Pointer %r9894, i32 72
	%r9896 = bitcast %Pointer %r9895 to %Word64*
	%r9897 = load %Word64, %Word64* %r9896
	; Call
	%r9898 = call %Word64 @Posix_IO_writeChar8Vec(%Word32 1, %Objptr %r9889, %Word32 %r9893, %Word64 %r9897)
	store %Word64 %r9898, %Word64* @CReturnW64
	br label %L_504

L_502:
	; RW32(0): Word32  = Word32_add (OW32 (<GCState>, 68): Word32, 0x1)
	%r9899 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9900 = getelementptr inbounds i8, %Pointer %r9899, i32 68
	%r9901 = bitcast %Pointer %r9900 to %Word32*
	%r9902 = load %Word32, %Word32* %r9901
	%r9903 = add %Word32 %r9902, 1
	store %Word32 %r9903, %Word32* %regW32_0
	; OW32 (<GCState>, 68): Word32  = RW32(0): Word32
	%r9904 = load %Word32, %Word32* %regW32_0
	%r9905 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9906 = getelementptr inbounds i8, %Pointer %r9905, i32 68
	%r9907 = bitcast %Pointer %r9906 to %Word32*
	store %Word32 %r9904, %Word32* %r9907
	; RW32(1): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r9908 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9909 = getelementptr inbounds i8, %Pointer %r9908, i32 8
	%r9910 = bitcast %Pointer %r9909 to %CPointer*
	%r9911 = load %CPointer, %CPointer* %r9910
	%r9912 = load %Pointer, %Pointer* %frontier
	%r9914 = icmp ult %Pointer %r9911, %r9912
	%r9913 = zext i1 %r9914 to %Word32
	store %Word32 %r9913, %Word32* %regW32_1
	; switch {test = RW32(1): Word32, default = None, cases = ((0x0, L_503), (0x1, L_515))}
	%r9915 = load %Word32, %Word32* %regW32_1
	%r9916 = trunc %Word32 %r9915 to i1
	br i1 %r9916, label %L_515, label %L_503

L_501:
	; Push(-96)
	%r9917 = load %Pointer, %Pointer* %stackTop
	%r9918 = getelementptr inbounds i8, %Pointer %r9917, i32 -96
	store %Pointer %r9918, %Pointer* %stackTop
	; Goto L_466
	br label %L_466

L_500:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 77}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_501}
	; GetOperands
	%r9919 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9920 = load %Pointer, %Pointer* %stackTop
	%r9921 = getelementptr inbounds i8, %Pointer %r9920, i32 88
	%r9922 = bitcast %Pointer %r9921 to %uintptr_t*
	store %uintptr_t 77, %uintptr_t* %r9922
	; Push(96)
	%r9923 = load %Pointer, %Pointer* %stackTop
	%r9924 = getelementptr inbounds i8, %Pointer %r9923, i32 96
	store %Pointer %r9924, %Pointer* %stackTop
	; FlushFrontier
	%r9925 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9926 = getelementptr inbounds i8, %Pointer %r9925, i32 0
	%r9927 = bitcast %Pointer %r9926 to %Pointer*
	%r9928 = load %Pointer, %Pointer* %frontier
	store %Pointer %r9928, %Pointer* %r9927
	; FlushStackTop
	%r9929 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9930 = getelementptr inbounds i8, %Pointer %r9929, i32 16
	%r9931 = bitcast %Pointer %r9930 to %Pointer*
	%r9932 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r9932, %Pointer* %r9931
	; Call
	call void @GC_collect(%Pointer %r9919, %Word64 0, %Word32 0)
	; CacheFrontier
	%r9933 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9934 = getelementptr inbounds i8, %Pointer %r9933, i32 0
	%r9935 = bitcast %Pointer %r9934 to %Pointer*
	%r9936 = load %Pointer, %Pointer* %r9935
	store %Pointer %r9936, %Pointer* %frontier
	; CacheStackTop
	%r9937 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9938 = getelementptr inbounds i8, %Pointer %r9937, i32 16
	%r9939 = bitcast %Pointer %r9938 to %Pointer*
	%r9940 = load %Pointer, %Pointer* %r9939
	store %Pointer %r9940, %Pointer* %stackTop
	br label %L_501

L_499:
	; Push(-48)
	%r9941 = load %Pointer, %Pointer* %stackTop
	%r9942 = getelementptr inbounds i8, %Pointer %r9941, i32 -48
	store %Pointer %r9942, %Pointer* %stackTop
	; Goto L_472
	br label %L_472

L_498:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 76}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_499}
	; GetOperands
	%r9943 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9944 = load %Pointer, %Pointer* %stackTop
	%r9945 = getelementptr inbounds i8, %Pointer %r9944, i32 40
	%r9946 = bitcast %Pointer %r9945 to %uintptr_t*
	store %uintptr_t 76, %uintptr_t* %r9946
	; Push(48)
	%r9947 = load %Pointer, %Pointer* %stackTop
	%r9948 = getelementptr inbounds i8, %Pointer %r9947, i32 48
	store %Pointer %r9948, %Pointer* %stackTop
	; FlushFrontier
	%r9949 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9950 = getelementptr inbounds i8, %Pointer %r9949, i32 0
	%r9951 = bitcast %Pointer %r9950 to %Pointer*
	%r9952 = load %Pointer, %Pointer* %frontier
	store %Pointer %r9952, %Pointer* %r9951
	; FlushStackTop
	%r9953 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9954 = getelementptr inbounds i8, %Pointer %r9953, i32 16
	%r9955 = bitcast %Pointer %r9954 to %Pointer*
	%r9956 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r9956, %Pointer* %r9955
	; Call
	call void @GC_collect(%Pointer %r9943, %Word64 0, %Word32 0)
	; CacheFrontier
	%r9957 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9958 = getelementptr inbounds i8, %Pointer %r9957, i32 0
	%r9959 = bitcast %Pointer %r9958 to %Pointer*
	%r9960 = load %Pointer, %Pointer* %r9959
	store %Pointer %r9960, %Pointer* %frontier
	; CacheStackTop
	%r9961 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9962 = getelementptr inbounds i8, %Pointer %r9961, i32 16
	%r9963 = bitcast %Pointer %r9962 to %Pointer*
	%r9964 = load %Pointer, %Pointer* %r9963
	store %Pointer %r9964, %Pointer* %stackTop
	br label %L_499

L_497:
	; Goto L_435
	br label %L_435

L_496:
	; Push(-48)
	%r9965 = load %Pointer, %Pointer* %stackTop
	%r9966 = getelementptr inbounds i8, %Pointer %r9965, i32 -48
	store %Pointer %r9966, %Pointer* %stackTop
	; Goto L_475
	br label %L_475

L_495:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 75}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_496}
	; GetOperands
	%r9967 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9968 = load %Pointer, %Pointer* %stackTop
	%r9969 = getelementptr inbounds i8, %Pointer %r9968, i32 40
	%r9970 = bitcast %Pointer %r9969 to %uintptr_t*
	store %uintptr_t 75, %uintptr_t* %r9970
	; Push(48)
	%r9971 = load %Pointer, %Pointer* %stackTop
	%r9972 = getelementptr inbounds i8, %Pointer %r9971, i32 48
	store %Pointer %r9972, %Pointer* %stackTop
	; FlushFrontier
	%r9973 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9974 = getelementptr inbounds i8, %Pointer %r9973, i32 0
	%r9975 = bitcast %Pointer %r9974 to %Pointer*
	%r9976 = load %Pointer, %Pointer* %frontier
	store %Pointer %r9976, %Pointer* %r9975
	; FlushStackTop
	%r9977 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9978 = getelementptr inbounds i8, %Pointer %r9977, i32 16
	%r9979 = bitcast %Pointer %r9978 to %Pointer*
	%r9980 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r9980, %Pointer* %r9979
	; Call
	call void @GC_collect(%Pointer %r9967, %Word64 0, %Word32 0)
	; CacheFrontier
	%r9981 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9982 = getelementptr inbounds i8, %Pointer %r9981, i32 0
	%r9983 = bitcast %Pointer %r9982 to %Pointer*
	%r9984 = load %Pointer, %Pointer* %r9983
	store %Pointer %r9984, %Pointer* %frontier
	; CacheStackTop
	%r9985 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9986 = getelementptr inbounds i8, %Pointer %r9985, i32 16
	%r9987 = bitcast %Pointer %r9986 to %Pointer*
	%r9988 = load %Pointer, %Pointer* %r9987
	store %Pointer %r9988, %Pointer* %stackTop
	br label %L_496

L_494:
	; RP(0): Objptr (opt_3)  = glob {index = 132, isRoot = true, ty = Objptr (opt_3)}
	%r9989 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 132
	%r9990 = load %Objptr, %Objptr* %r9989
	store %Objptr %r9990, %Objptr* %regP_0
	; Goto L_486
	br label %L_486

L_493:
	; Push(-56)
	%r9991 = load %Pointer, %Pointer* %stackTop
	%r9992 = getelementptr inbounds i8, %Pointer %r9991, i32 -56
	store %Pointer %r9992, %Pointer* %stackTop
	; Goto L_480
	br label %L_480

L_492:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 74}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_493}
	; GetOperands
	%r9993 = bitcast %struct.GC_state* @gcState to %Pointer
	%r9994 = load %Pointer, %Pointer* %stackTop
	%r9995 = getelementptr inbounds i8, %Pointer %r9994, i32 48
	%r9996 = bitcast %Pointer %r9995 to %uintptr_t*
	store %uintptr_t 74, %uintptr_t* %r9996
	; Push(56)
	%r9997 = load %Pointer, %Pointer* %stackTop
	%r9998 = getelementptr inbounds i8, %Pointer %r9997, i32 56
	store %Pointer %r9998, %Pointer* %stackTop
	; FlushFrontier
	%r9999 = bitcast %struct.GC_state* @gcState to %Pointer
	%r10000 = getelementptr inbounds i8, %Pointer %r9999, i32 0
	%r10001 = bitcast %Pointer %r10000 to %Pointer*
	%r10002 = load %Pointer, %Pointer* %frontier
	store %Pointer %r10002, %Pointer* %r10001
	; FlushStackTop
	%r10003 = bitcast %struct.GC_state* @gcState to %Pointer
	%r10004 = getelementptr inbounds i8, %Pointer %r10003, i32 16
	%r10005 = bitcast %Pointer %r10004 to %Pointer*
	%r10006 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r10006, %Pointer* %r10005
	; Call
	call void @GC_collect(%Pointer %r9993, %Word64 0, %Word32 0)
	; CacheFrontier
	%r10007 = bitcast %struct.GC_state* @gcState to %Pointer
	%r10008 = getelementptr inbounds i8, %Pointer %r10007, i32 0
	%r10009 = bitcast %Pointer %r10008 to %Pointer*
	%r10010 = load %Pointer, %Pointer* %r10009
	store %Pointer %r10010, %Pointer* %frontier
	; CacheStackTop
	%r10011 = bitcast %struct.GC_state* @gcState to %Pointer
	%r10012 = getelementptr inbounds i8, %Pointer %r10011, i32 16
	%r10013 = bitcast %Pointer %r10012 to %Pointer*
	%r10014 = load %Pointer, %Pointer* %r10013
	store %Pointer %r10014, %Pointer* %stackTop
	br label %L_493

L_491:
	; Goto L_458
	br label %L_458

L_490:
	; SP(48): Objptr (opt_11)  = glob {index = 22, isRoot = true, ty = Objptr (opt_11)}
	%r10015 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 22
	%r10016 = load %Objptr, %Objptr* %r10015
	%r10017 = load %Pointer, %Pointer* %stackTop
	%r10018 = getelementptr inbounds i8, %Pointer %r10017, i32 48
	%r10019 = bitcast %Pointer %r10018 to %Objptr*
	store %Objptr %r10016, %Objptr* %r10019
	; Goto L_join_7
	br label %L_join_7

L_489:
	; RW32(0): Word32  = WordU64_extdToWord32 (RW64(0): Word64)
	%r10020 = load %Word64, %Word64* %regW64_0
	%r10021 = trunc %Word64 %r10020 to %Word32
	store %Word32 %r10021, %Word32* %regW32_0
	; RW64(1): Word64  = WordS32_extdToWord64 (RW32(0): Word32)
	%r10022 = load %Word32, %Word32* %regW32_0
	%r10023 = sext %Word32 %r10022 to %Word64
	store %Word64 %r10023, %Word64* %regW64_1
	; RW8(0): Word8  = XW8 (SQ(8): CPointer, RW64(1): Word64, 1, 0): Word8
	%r10024 = load %Pointer, %Pointer* %stackTop
	%r10025 = getelementptr inbounds i8, %Pointer %r10024, i32 8
	%r10026 = bitcast %Pointer %r10025 to %CPointer*
	%r10027 = load %CPointer, %CPointer* %r10026
	%r10028 = load %Word64, %Word64* %regW64_1
	%r10029 = mul nsw %Word64 %r10028, 1
	%r10030 = add nsw %Word64 %r10029, 0
	%r10031 = getelementptr inbounds i8, %CPointer %r10027, %Word64 %r10030
	%r10032 = bitcast %CPointer %r10031 to %Word8*
	%r10033 = load %Word8, %Word8* %r10032
	store %Word8 %r10033, %Word8* %regW8_0
	; XW8 (SP(48): Objptr (opt_11), RW64(0): Word64, 1, 0): Word8  = RW8(0): Word8
	%r10034 = load %Word8, %Word8* %regW8_0
	%r10035 = load %Pointer, %Pointer* %stackTop
	%r10036 = getelementptr inbounds i8, %Pointer %r10035, i32 48
	%r10037 = bitcast %Pointer %r10036 to %Objptr*
	%r10038 = load %Objptr, %Objptr* %r10037
	%r10039 = load %Word64, %Word64* %regW64_0
	%r10040 = mul nsw %Word64 %r10039, 1
	%r10041 = add nsw %Word64 %r10040, 0
	%r10042 = getelementptr inbounds i8, %Objptr %r10038, %Word64 %r10041
	%r10043 = bitcast %Objptr %r10042 to %Word8*
	store %Word8 %r10034, %Word8* %r10043
	; RW64(2): Word64  = Word64_add (RW64(0): Word64, 0x1)
	%r10044 = load %Word64, %Word64* %regW64_0
	%r10045 = add %Word64 %r10044, 1
	store %Word64 %r10045, %Word64* %regW64_2
	; RW64(0): Word64  = RW64(2): Word64
	%r10046 = load %Word64, %Word64* %regW64_2
	store %Word64 %r10046, %Word64* %regW64_0
	; Goto loop_28
	br label %loop_28

L_488:
	; Push(-64)
	%r10047 = load %Pointer, %Pointer* %stackTop
	%r10048 = getelementptr inbounds i8, %Pointer %r10047, i32 -64
	store %Pointer %r10048, %Pointer* %stackTop
	; Goto L_485
	br label %L_485

L_487:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 73}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_488}
	; GetOperands
	%r10049 = bitcast %struct.GC_state* @gcState to %Pointer
	%r10050 = load %Pointer, %Pointer* %stackTop
	%r10051 = getelementptr inbounds i8, %Pointer %r10050, i32 56
	%r10052 = bitcast %Pointer %r10051 to %uintptr_t*
	store %uintptr_t 73, %uintptr_t* %r10052
	; Push(64)
	%r10053 = load %Pointer, %Pointer* %stackTop
	%r10054 = getelementptr inbounds i8, %Pointer %r10053, i32 64
	store %Pointer %r10054, %Pointer* %stackTop
	; FlushFrontier
	%r10055 = bitcast %struct.GC_state* @gcState to %Pointer
	%r10056 = getelementptr inbounds i8, %Pointer %r10055, i32 0
	%r10057 = bitcast %Pointer %r10056 to %Pointer*
	%r10058 = load %Pointer, %Pointer* %frontier
	store %Pointer %r10058, %Pointer* %r10057
	; FlushStackTop
	%r10059 = bitcast %struct.GC_state* @gcState to %Pointer
	%r10060 = getelementptr inbounds i8, %Pointer %r10059, i32 16
	%r10061 = bitcast %Pointer %r10060 to %Pointer*
	%r10062 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r10062, %Pointer* %r10061
	; Call
	call void @GC_collect(%Pointer %r10049, %Word64 0, %Word32 0)
	; CacheFrontier
	%r10063 = bitcast %struct.GC_state* @gcState to %Pointer
	%r10064 = getelementptr inbounds i8, %Pointer %r10063, i32 0
	%r10065 = bitcast %Pointer %r10064 to %Pointer*
	%r10066 = load %Pointer, %Pointer* %r10065
	store %Pointer %r10066, %Pointer* %frontier
	; CacheStackTop
	%r10067 = bitcast %struct.GC_state* @gcState to %Pointer
	%r10068 = getelementptr inbounds i8, %Pointer %r10067, i32 16
	%r10069 = bitcast %Pointer %r10068 to %Pointer*
	%r10070 = load %Pointer, %Pointer* %r10069
	store %Pointer %r10070, %Pointer* %stackTop
	br label %L_488

L_486:
	; RW64(0): [Word32, Bits32]  = WordU32_extdToWord64 (SW32(0): Word32)
	%r10071 = load %Pointer, %Pointer* %stackTop
	%r10072 = getelementptr inbounds i8, %Pointer %r10071, i32 0
	%r10073 = bitcast %Pointer %r10072 to %Word32*
	%r10074 = load %Word32, %Word32* %r10073
	%r10075 = zext %Word32 %r10074 to %Word64
	store %Word64 %r10075, %Word64* %regW64_0
	; RW64(1): [Word32, Bits32]  = Word64_lshift (RW64(0): [Word32, Bits32], 0x1)
	%r10076 = load %Word64, %Word64* %regW64_0
	%r10077 = zext %Word32 1 to %Word64
	%r10078 = shl %Word64 %r10076, %r10077
	store %Word64 %r10078, %Word64* %regW64_1
	; RW64(2): [Word32, Bits32]  = Word64_orb (RW64(1): [Word32, Bits32], 0x1)
	%r10079 = load %Word64, %Word64* %regW64_1
	%r10080 = or %Word64 %r10079, 1
	store %Word64 %r10080, %Word64* %regW64_2
	; CW64 (<Frontier>)  = 0x43
	%r10081 = load %Pointer, %Pointer* %frontier
	%r10082 = bitcast %Pointer %r10081 to %Word64*
	store %Word64 67, %Word64* %r10082
	; RQ(43): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r10083 = load %Pointer, %Pointer* %frontier
	%r10085 = ptrtoint %Pointer %r10083 to %uintptr_t
	%r10086 = add %uintptr_t %r10085, 8
	%r10084 = inttoptr %uintptr_t %r10086 to %Pointer
	store %CPointer %r10084, %CPointer* %regQ_43
	; RP(1): Objptr (opt_33)  = Cast (RQ(43): CPointer, Objptr (opt_33))
	%r10087 = load %CPointer, %CPointer* %regQ_43
	%r10088 = bitcast %CPointer %r10087 to %Objptr
	store %Objptr %r10088, %Objptr* %regP_1
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r10089 = load %Pointer, %Pointer* %frontier
	%r10091 = ptrtoint %Pointer %r10089 to %uintptr_t
	%r10092 = add %uintptr_t %r10091, 24
	%r10090 = inttoptr %uintptr_t %r10092 to %Pointer
	store %Pointer %r10090, %Pointer* %frontier
	; OW64 (RP(1): Objptr (opt_33), 0): [Word1, Bits63]  = Cast (RW64(2): [Word32, Bits32], [Word1, Bits63])
	%r10093 = load %Word64, %Word64* %regW64_2
	%r10094 = bitcast %Word64 %r10093 to %Word64
	%r10095 = load %Objptr, %Objptr* %regP_1
	%r10096 = getelementptr inbounds i8, %Objptr %r10095, i32 0
	%r10097 = bitcast %Objptr %r10096 to %Word64*
	store %Word64 %r10094, %Word64* %r10097
	; OP (RP(1): Objptr (opt_33), 8): Objptr (opt_3)  = RP(0): Objptr (opt_3)
	%r10098 = load %Objptr, %Objptr* %regP_0
	%r10099 = load %Objptr, %Objptr* %regP_1
	%r10100 = getelementptr inbounds i8, %Objptr %r10099, i32 8
	%r10101 = bitcast %Objptr %r10100 to %Objptr*
	store %Objptr %r10098, %Objptr* %r10101
	; RP(0): Objptr (opt_34, opt_33, opt_32, opt_31)  = Cast (RP(1): Objptr (opt_33), Objptr (opt_34, opt_33, opt_32, opt_31))
	%r10102 = load %Objptr, %Objptr* %regP_1
	%r10103 = bitcast %Objptr %r10102 to %Objptr
	store %Objptr %r10103, %Objptr* %regP_0
	; Goto L_409
	br label %L_409

L_485:
	; OW64 (SP(48): Objptr (opt_11), ~8): Word64  = 0x7
	%r10104 = load %Pointer, %Pointer* %stackTop
	%r10105 = getelementptr inbounds i8, %Pointer %r10104, i32 48
	%r10106 = bitcast %Pointer %r10105 to %Objptr*
	%r10107 = load %Objptr, %Objptr* %r10106
	%r10108 = getelementptr inbounds i8, %Objptr %r10107, i32 -8
	%r10109 = bitcast %Objptr %r10108 to %Word64*
	store %Word64 7, %Word64* %r10109
	; RP(0): Objptr (opt_3)  = Cast (SP(48): Objptr (opt_11), Objptr (opt_3))
	%r10110 = load %Pointer, %Pointer* %stackTop
	%r10111 = getelementptr inbounds i8, %Pointer %r10110, i32 48
	%r10112 = bitcast %Pointer %r10111 to %Objptr*
	%r10113 = load %Objptr, %Objptr* %r10112
	%r10114 = bitcast %Objptr %r10113 to %Objptr
	store %Objptr %r10114, %Objptr* %regP_0
	; Goto L_486
	br label %L_486

L_484:
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r10115 = bitcast %struct.GC_state* @gcState to %Pointer
	%r10116 = getelementptr inbounds i8, %Pointer %r10115, i32 8
	%r10117 = bitcast %Pointer %r10116 to %CPointer*
	%r10118 = load %CPointer, %CPointer* %r10117
	%r10119 = load %Pointer, %Pointer* %frontier
	%r10121 = icmp ult %Pointer %r10118, %r10119
	%r10120 = zext i1 %r10121 to %Word32
	store %Word32 %r10120, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_485), (0x1, L_487))}
	%r10122 = load %Word32, %Word32* %regW32_0
	%r10123 = trunc %Word32 %r10122 to i1
	br i1 %r10123, label %L_487, label %L_485

loop_28:
	; RW32(0): Word32  = WordS64_lt (RW64(0): Word64, SW64(40): Word64)
	%r10124 = load %Word64, %Word64* %regW64_0
	%r10125 = load %Pointer, %Pointer* %stackTop
	%r10126 = getelementptr inbounds i8, %Pointer %r10125, i32 40
	%r10127 = bitcast %Pointer %r10126 to %Word64*
	%r10128 = load %Word64, %Word64* %r10127
	%r10130 = icmp slt %Word64 %r10124, %r10128
	%r10129 = zext i1 %r10130 to %Word32
	store %Word32 %r10129, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_484), (0x1, L_489))}
	%r10131 = load %Word32, %Word32* %regW32_0
	%r10132 = trunc %Word32 %r10131 to i1
	br i1 %r10132, label %L_489, label %L_484

L_join_7:
	; RW64(0): Word64  = 0x0
	store %Word64 0, %Word64* %regW64_0
	; Goto loop_28
	br label %loop_28

L_483:
	; Push(-56)
	%r10133 = load %Pointer, %Pointer* %stackTop
	%r10134 = getelementptr inbounds i8, %Pointer %r10133, i32 -56
	store %Pointer %r10134, %Pointer* %stackTop
	%r10135 = load %Objptr, %Objptr* @CReturnP
	store %Objptr %r10135, %Objptr* %regP_0
	; SP(48): Objptr (opt_11)  = RP(0): Objptr (opt_11)
	%r10136 = load %Objptr, %Objptr* %regP_0
	%r10137 = load %Pointer, %Pointer* %stackTop
	%r10138 = getelementptr inbounds i8, %Pointer %r10137, i32 48
	%r10139 = bitcast %Pointer %r10138 to %Objptr*
	store %Objptr %r10136, %Objptr* %r10139
	; Goto L_join_7
	br label %L_join_7

L_482:
	; CCall {args = (<GCState>, 0x0, SW64(40): Word64, 0x17), frameInfo = Some {frameLayoutsIndex = 72}, func = {args = (GCState, Word64, Word64, Word64), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int64, Word64), res = Some Objptr}, return = Objptr (opt_11), symbolScope = private, target = GC_arrayAllocate}, return = Some L_483}
	; GetOperands
	%r10140 = bitcast %struct.GC_state* @gcState to %Pointer
	%r10141 = load %Pointer, %Pointer* %stackTop
	%r10142 = getelementptr inbounds i8, %Pointer %r10141, i32 40
	%r10143 = bitcast %Pointer %r10142 to %Word64*
	%r10144 = load %Word64, %Word64* %r10143
	%r10145 = load %Pointer, %Pointer* %stackTop
	%r10146 = getelementptr inbounds i8, %Pointer %r10145, i32 48
	%r10147 = bitcast %Pointer %r10146 to %uintptr_t*
	store %uintptr_t 72, %uintptr_t* %r10147
	; Push(56)
	%r10148 = load %Pointer, %Pointer* %stackTop
	%r10149 = getelementptr inbounds i8, %Pointer %r10148, i32 56
	store %Pointer %r10149, %Pointer* %stackTop
	; FlushFrontier
	%r10150 = bitcast %struct.GC_state* @gcState to %Pointer
	%r10151 = getelementptr inbounds i8, %Pointer %r10150, i32 0
	%r10152 = bitcast %Pointer %r10151 to %Pointer*
	%r10153 = load %Pointer, %Pointer* %frontier
	store %Pointer %r10153, %Pointer* %r10152
	; FlushStackTop
	%r10154 = bitcast %struct.GC_state* @gcState to %Pointer
	%r10155 = getelementptr inbounds i8, %Pointer %r10154, i32 16
	%r10156 = bitcast %Pointer %r10155 to %Pointer*
	%r10157 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r10157, %Pointer* %r10156
	; Call
	%r10158 = call %Objptr @GC_arrayAllocate(%Pointer %r10140, %Word64 0, %Word64 %r10144, %Word64 23)
	store %Objptr %r10158, %Objptr* @CReturnP
	; CacheFrontier
	%r10159 = bitcast %struct.GC_state* @gcState to %Pointer
	%r10160 = getelementptr inbounds i8, %Pointer %r10159, i32 0
	%r10161 = bitcast %Pointer %r10160 to %Pointer*
	%r10162 = load %Pointer, %Pointer* %r10161
	store %Pointer %r10162, %Pointer* %frontier
	; CacheStackTop
	%r10163 = bitcast %struct.GC_state* @gcState to %Pointer
	%r10164 = getelementptr inbounds i8, %Pointer %r10163, i32 16
	%r10165 = bitcast %Pointer %r10164 to %Pointer*
	%r10166 = load %Pointer, %Pointer* %r10165
	store %Pointer %r10166, %Pointer* %stackTop
	br label %L_483

L_481:
	; RW32(0): Word32  = Word64_equal (0x0, SW64(40): Word64)
	%r10167 = load %Pointer, %Pointer* %stackTop
	%r10168 = getelementptr inbounds i8, %Pointer %r10167, i32 40
	%r10169 = bitcast %Pointer %r10168 to %Word64*
	%r10170 = load %Word64, %Word64* %r10169
	%r10172 = icmp eq %Word64 0, %r10170
	%r10171 = zext i1 %r10172 to %Word32
	store %Word32 %r10171, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_482), (0x1, L_490))}
	%r10173 = load %Word32, %Word32* %regW32_0
	%r10174 = trunc %Word32 %r10173 to i1
	br i1 %r10174, label %L_490, label %L_482

L_480:
	; RW32(0): Word32  = WordU64_lt (0x7FFFFFFF, SW64(40): Word64)
	%r10175 = load %Pointer, %Pointer* %stackTop
	%r10176 = getelementptr inbounds i8, %Pointer %r10175, i32 40
	%r10177 = bitcast %Pointer %r10176 to %Word64*
	%r10178 = load %Word64, %Word64* %r10177
	%r10180 = icmp ult %Word64 2147483647, %r10178
	%r10179 = zext i1 %r10180 to %Word32
	store %Word32 %r10179, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_481), (0x1, L_491))}
	%r10181 = load %Word32, %Word32* %regW32_0
	%r10182 = trunc %Word32 %r10181 to i1
	br i1 %r10182, label %L_491, label %L_481

L_479:
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r10183 = bitcast %struct.GC_state* @gcState to %Pointer
	%r10184 = getelementptr inbounds i8, %Pointer %r10183, i32 8
	%r10185 = bitcast %Pointer %r10184 to %CPointer*
	%r10186 = load %CPointer, %CPointer* %r10185
	%r10187 = load %Pointer, %Pointer* %frontier
	%r10189 = icmp ult %Pointer %r10186, %r10187
	%r10188 = zext i1 %r10189 to %Word32
	store %Word32 %r10188, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_480), (0x1, L_492))}
	%r10190 = load %Word32, %Word32* %regW32_0
	%r10191 = trunc %Word32 %r10190 to i1
	br i1 %r10191, label %L_492, label %L_480

L_478:
	; RW32(1): Word32  = Word32_add (RW32(0): Word32, 0x1)
	%r10192 = load %Word32, %Word32* %regW32_0
	%r10193 = add %Word32 %r10192, 1
	store %Word32 %r10193, %Word32* %regW32_1
	; RW32(0): Word32  = RW32(1): Word32
	%r10194 = load %Word32, %Word32* %regW32_1
	store %Word32 %r10194, %Word32* %regW32_0
	; Goto loop_27
	br label %loop_27

loop_27:
	; SW64(40): Word64  = WordS32_extdToWord64 (RW32(0): Word32)
	%r10195 = load %Word32, %Word32* %regW32_0
	%r10196 = sext %Word32 %r10195 to %Word64
	%r10197 = load %Pointer, %Pointer* %stackTop
	%r10198 = getelementptr inbounds i8, %Pointer %r10197, i32 40
	%r10199 = bitcast %Pointer %r10198 to %Word64*
	store %Word64 %r10196, %Word64* %r10199
	; RW8(0): Word8  = XW8 (SQ(8): CPointer, SW64(40): Word64, 1, 0): Word8
	%r10200 = load %Pointer, %Pointer* %stackTop
	%r10201 = getelementptr inbounds i8, %Pointer %r10200, i32 8
	%r10202 = bitcast %Pointer %r10201 to %CPointer*
	%r10203 = load %CPointer, %CPointer* %r10202
	%r10204 = load %Pointer, %Pointer* %stackTop
	%r10205 = getelementptr inbounds i8, %Pointer %r10204, i32 40
	%r10206 = bitcast %Pointer %r10205 to %Word64*
	%r10207 = load %Word64, %Word64* %r10206
	%r10208 = mul nsw %Word64 %r10207, 1
	%r10209 = add nsw %Word64 %r10208, 0
	%r10210 = getelementptr inbounds i8, %CPointer %r10203, %Word64 %r10209
	%r10211 = bitcast %CPointer %r10210 to %Word8*
	%r10212 = load %Word8, %Word8* %r10211
	store %Word8 %r10212, %Word8* %regW8_0
	; switch {test = RW8(0): Word8, default = Some L_478, cases = ((0x0, L_479))}
	%r10213 = load %Word8, %Word8* %regW8_0
	switch %Word8 %r10213, label %L_478 [
		%Word8 0, label %L_479
	]

L_477:
	; RW32(0): Word32  = 0x0
	store %Word32 0, %Word32* %regW32_0
	; Goto loop_27
	br label %loop_27

L_476:
	%r10214 = load %Word64, %Word64* @CReturnW64
	store %Word64 %r10214, %Word64* %regW64_0
	; SQ(8): CPointer  = CPointer_fromWord (RW64(0): Word64)
	%r10215 = load %Word64, %Word64* %regW64_0
	%r10216 = inttoptr %uintptr_t %r10215 to %Pointer
	%r10217 = load %Pointer, %Pointer* %stackTop
	%r10218 = getelementptr inbounds i8, %Pointer %r10217, i32 8
	%r10219 = bitcast %Pointer %r10218 to %CPointer*
	store %CPointer %r10216, %CPointer* %r10219
	; RW32(0): Word32  = CPointer_equal (SQ(8): CPointer, NULL)
	%r10220 = load %Pointer, %Pointer* %stackTop
	%r10221 = getelementptr inbounds i8, %Pointer %r10220, i32 8
	%r10222 = bitcast %Pointer %r10221 to %CPointer*
	%r10223 = load %CPointer, %CPointer* %r10222
	%r10225 = icmp eq %Pointer %r10223, null
	%r10224 = zext i1 %r10225 to %Word32
	store %Word32 %r10224, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_477), (0x1, L_494))}
	%r10226 = load %Word32, %Word32* %regW32_0
	%r10227 = trunc %Word32 %r10226 to i1
	br i1 %r10227, label %L_494, label %L_477

L_475:
	; CCall {args = (SW32(0): Word32), frameInfo = None, func = {args = (Word32), convention = cdecl, kind = Impure, prototype = {args = (Int32), res = Some Word64}, return = Word64, symbolScope = private, target = Posix_Error_strError}, return = Some L_476}
	; GetOperands
	%r10228 = load %Pointer, %Pointer* %stackTop
	%r10229 = getelementptr inbounds i8, %Pointer %r10228, i32 0
	%r10230 = bitcast %Pointer %r10229 to %Word32*
	%r10231 = load %Word32, %Word32* %r10230
	; Call
	%r10232 = call %Word64 @Posix_Error_strError(%Word32 %r10231)
	store %Word64 %r10232, %Word64* @CReturnW64
	br label %L_476

L_474:
	; RW32(0): Word32  = Word32_add (OW32 (<GCState>, 68): Word32, 0xFFFFFFFF)
	%r10233 = bitcast %struct.GC_state* @gcState to %Pointer
	%r10234 = getelementptr inbounds i8, %Pointer %r10233, i32 68
	%r10235 = bitcast %Pointer %r10234 to %Word32*
	%r10236 = load %Word32, %Word32* %r10235
	%r10237 = add %Word32 %r10236, 4294967295
	store %Word32 %r10237, %Word32* %regW32_0
	; OW32 (<GCState>, 68): Word32  = RW32(0): Word32
	%r10238 = load %Word32, %Word32* %regW32_0
	%r10239 = bitcast %struct.GC_state* @gcState to %Pointer
	%r10240 = getelementptr inbounds i8, %Pointer %r10239, i32 68
	%r10241 = bitcast %Pointer %r10240 to %Word32*
	store %Word32 %r10238, %Word32* %r10241
	; RW32(1): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r10242 = bitcast %struct.GC_state* @gcState to %Pointer
	%r10243 = getelementptr inbounds i8, %Pointer %r10242, i32 8
	%r10244 = bitcast %Pointer %r10243 to %CPointer*
	%r10245 = load %CPointer, %CPointer* %r10244
	%r10246 = load %Pointer, %Pointer* %frontier
	%r10248 = icmp ult %Pointer %r10245, %r10246
	%r10247 = zext i1 %r10248 to %Word32
	store %Word32 %r10247, %Word32* %regW32_1
	; switch {test = RW32(1): Word32, default = None, cases = ((0x0, L_475), (0x1, L_495))}
	%r10249 = load %Word32, %Word32* %regW32_1
	%r10250 = trunc %Word32 %r10249 to i1
	br i1 %r10250, label %L_495, label %L_475

L_473:
	%r10252 = load %Pointer, %Pointer* %stackTop
	%r10253 = getelementptr inbounds i8, %Pointer %r10252, i32 0
	%r10254 = bitcast %Pointer %r10253 to %Word32*
	%r10251 = load %Word32, %Word32* @CReturnW32
	store %Word32 %r10251, %Word32* %r10254
	; RW32(0): Word32  = OW32 (<GCState>, 68): Word32
	%r10255 = bitcast %struct.GC_state* @gcState to %Pointer
	%r10256 = getelementptr inbounds i8, %Pointer %r10255, i32 68
	%r10257 = bitcast %Pointer %r10256 to %Word32*
	%r10258 = load %Word32, %Word32* %r10257
	store %Word32 %r10258, %Word32* %regW32_0
	; RW32(1): Word32  = Word32_equal (RW32(0): Word32, 0x0)
	%r10259 = load %Word32, %Word32* %regW32_0
	%r10261 = icmp eq %Word32 %r10259, 0
	%r10260 = zext i1 %r10261 to %Word32
	store %Word32 %r10260, %Word32* %regW32_1
	; switch {test = RW32(1): Word32, default = None, cases = ((0x0, L_474), (0x1, L_497))}
	%r10262 = load %Word32, %Word32* %regW32_1
	%r10263 = trunc %Word32 %r10262 to i1
	br i1 %r10263, label %L_497, label %L_474

L_472:
	; CCall {args = (), frameInfo = None, func = {args = (), convention = cdecl, kind = Impure, prototype = {args = (), res = Some Int32}, return = Word32, symbolScope = private, target = Posix_Error_getErrno}, return = Some L_473}
	; GetOperands
	; Call
	%r10264 = call %Word32 @Posix_Error_getErrno()
	store %Word32 %r10264, %Word32* @CReturnW32
	br label %L_473

L_471:
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r10265 = bitcast %struct.GC_state* @gcState to %Pointer
	%r10266 = getelementptr inbounds i8, %Pointer %r10265, i32 8
	%r10267 = bitcast %Pointer %r10266 to %CPointer*
	%r10268 = load %CPointer, %CPointer* %r10267
	%r10269 = load %Pointer, %Pointer* %frontier
	%r10271 = icmp ult %Pointer %r10268, %r10269
	%r10270 = zext i1 %r10271 to %Word32
	store %Word32 %r10270, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_472), (0x1, L_498))}
	%r10272 = load %Word32, %Word32* %regW32_0
	%r10273 = trunc %Word32 %r10272 to i1
	br i1 %r10273, label %L_498, label %L_472

L_470:
	; Goto L_435
	br label %L_435

L_469:
	; RW32(0): Word32  = Word32_add (OW32 (<GCState>, 68): Word32, 0xFFFFFFFF)
	%r10274 = bitcast %struct.GC_state* @gcState to %Pointer
	%r10275 = getelementptr inbounds i8, %Pointer %r10274, i32 68
	%r10276 = bitcast %Pointer %r10275 to %Word32*
	%r10277 = load %Word32, %Word32* %r10276
	%r10278 = add %Word32 %r10277, 4294967295
	store %Word32 %r10278, %Word32* %regW32_0
	; OW32 (<GCState>, 68): Word32  = RW32(0): Word32
	%r10279 = load %Word32, %Word32* %regW32_0
	%r10280 = bitcast %struct.GC_state* @gcState to %Pointer
	%r10281 = getelementptr inbounds i8, %Pointer %r10280, i32 68
	%r10282 = bitcast %Pointer %r10281 to %Word32*
	store %Word32 %r10279, %Word32* %r10282
	; Goto x_0
	br label %x_0

L_468:
	; RW32(0): Word32  = OW32 (<GCState>, 68): Word32
	%r10283 = bitcast %struct.GC_state* @gcState to %Pointer
	%r10284 = getelementptr inbounds i8, %Pointer %r10283, i32 68
	%r10285 = bitcast %Pointer %r10284 to %Word32*
	%r10286 = load %Word32, %Word32* %r10285
	store %Word32 %r10286, %Word32* %regW32_0
	; RW32(1): Word32  = Word32_equal (RW32(0): Word32, 0x0)
	%r10287 = load %Word32, %Word32* %regW32_0
	%r10289 = icmp eq %Word32 %r10287, 0
	%r10288 = zext i1 %r10289 to %Word32
	store %Word32 %r10288, %Word32* %regW32_1
	; switch {test = RW32(1): Word32, default = None, cases = ((0x0, L_469), (0x1, L_470))}
	%r10290 = load %Word32, %Word32* %regW32_1
	%r10291 = trunc %Word32 %r10290 to i1
	br i1 %r10291, label %L_470, label %L_469

L_467:
	%r10292 = load %Word64, %Word64* @CReturnW64
	store %Word64 %r10292, %Word64* %regW64_0
	; RW32(0): Word32  = Word64_equal (RW64(0): Word64, 0xFFFFFFFFFFFFFFFF)
	%r10293 = load %Word64, %Word64* %regW64_0
	%r10295 = icmp eq %Word64 %r10293, 18446744073709551615
	%r10294 = zext i1 %r10295 to %Word32
	store %Word32 %r10294, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_468), (0x1, L_471))}
	%r10296 = load %Word32, %Word32* %regW32_0
	%r10297 = trunc %Word32 %r10296 to i1
	br i1 %r10297, label %L_471, label %L_468

L_466:
	; CCall {args = (0x1, SP(0): Objptr (opt_3), SW32(40): Word32, SW64(72): Word64), frameInfo = None, func = {args = (Word32, Objptr (opt_3), Word32, Word64), convention = cdecl, kind = Impure, prototype = {args = (Int32, Objptr, Int32, Word64), res = Some Int64}, return = Word64, symbolScope = private, target = Posix_IO_writeChar8Vec}, return = Some L_467}
	; GetOperands
	%r10298 = load %Pointer, %Pointer* %stackTop
	%r10299 = getelementptr inbounds i8, %Pointer %r10298, i32 0
	%r10300 = bitcast %Pointer %r10299 to %Objptr*
	%r10301 = load %Objptr, %Objptr* %r10300
	%r10302 = load %Pointer, %Pointer* %stackTop
	%r10303 = getelementptr inbounds i8, %Pointer %r10302, i32 40
	%r10304 = bitcast %Pointer %r10303 to %Word32*
	%r10305 = load %Word32, %Word32* %r10304
	%r10306 = load %Pointer, %Pointer* %stackTop
	%r10307 = getelementptr inbounds i8, %Pointer %r10306, i32 72
	%r10308 = bitcast %Pointer %r10307 to %Word64*
	%r10309 = load %Word64, %Word64* %r10308
	; Call
	%r10310 = call %Word64 @Posix_IO_writeChar8Vec(%Word32 1, %Objptr %r10301, %Word32 %r10305, %Word64 %r10309)
	store %Word64 %r10310, %Word64* @CReturnW64
	br label %L_467

L_465:
	; RW32(0): Word32  = Word32_add (OW32 (<GCState>, 68): Word32, 0x1)
	%r10311 = bitcast %struct.GC_state* @gcState to %Pointer
	%r10312 = getelementptr inbounds i8, %Pointer %r10311, i32 68
	%r10313 = bitcast %Pointer %r10312 to %Word32*
	%r10314 = load %Word32, %Word32* %r10313
	%r10315 = add %Word32 %r10314, 1
	store %Word32 %r10315, %Word32* %regW32_0
	; OW32 (<GCState>, 68): Word32  = RW32(0): Word32
	%r10316 = load %Word32, %Word32* %regW32_0
	%r10317 = bitcast %struct.GC_state* @gcState to %Pointer
	%r10318 = getelementptr inbounds i8, %Pointer %r10317, i32 68
	%r10319 = bitcast %Pointer %r10318 to %Word32*
	store %Word32 %r10316, %Word32* %r10319
	; RW32(1): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r10320 = bitcast %struct.GC_state* @gcState to %Pointer
	%r10321 = getelementptr inbounds i8, %Pointer %r10320, i32 8
	%r10322 = bitcast %Pointer %r10321 to %CPointer*
	%r10323 = load %CPointer, %CPointer* %r10322
	%r10324 = load %Pointer, %Pointer* %frontier
	%r10326 = icmp ult %Pointer %r10323, %r10324
	%r10325 = zext i1 %r10326 to %Word32
	store %Word32 %r10325, %Word32* %regW32_1
	; switch {test = RW32(1): Word32, default = None, cases = ((0x0, L_466), (0x1, L_500))}
	%r10327 = load %Word32, %Word32* %regW32_1
	%r10328 = trunc %Word32 %r10327 to i1
	br i1 %r10328, label %L_500, label %L_466

L_464:
	; RW32(0): Word32  = OW32 (<GCState>, 68): Word32
	%r10329 = bitcast %struct.GC_state* @gcState to %Pointer
	%r10330 = getelementptr inbounds i8, %Pointer %r10329, i32 68
	%r10331 = bitcast %Pointer %r10330 to %Word32*
	%r10332 = load %Word32, %Word32* %r10331
	store %Word32 %r10332, %Word32* %regW32_0
	; RW32(1): Word32  = Word32_equal (RW32(0): Word32, 0x0)
	%r10333 = load %Word32, %Word32* %regW32_0
	%r10335 = icmp eq %Word32 %r10333, 0
	%r10334 = zext i1 %r10335 to %Word32
	store %Word32 %r10334, %Word32* %regW32_1
	; switch {test = RW32(1): Word32, default = None, cases = ((0x0, L_465), (0x1, L_502))}
	%r10336 = load %Word32, %Word32* %regW32_1
	%r10337 = trunc %Word32 %r10336 to i1
	br i1 %r10337, label %L_502, label %L_465

L_463:
	; Push(-56)
	%r10338 = load %Pointer, %Pointer* %stackTop
	%r10339 = getelementptr inbounds i8, %Pointer %r10338, i32 -56
	store %Pointer %r10339, %Pointer* %stackTop
	; Goto L_441
	br label %L_441

L_462:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 71}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_463}
	; GetOperands
	%r10340 = bitcast %struct.GC_state* @gcState to %Pointer
	%r10341 = load %Pointer, %Pointer* %stackTop
	%r10342 = getelementptr inbounds i8, %Pointer %r10341, i32 48
	%r10343 = bitcast %Pointer %r10342 to %uintptr_t*
	store %uintptr_t 71, %uintptr_t* %r10343
	; Push(56)
	%r10344 = load %Pointer, %Pointer* %stackTop
	%r10345 = getelementptr inbounds i8, %Pointer %r10344, i32 56
	store %Pointer %r10345, %Pointer* %stackTop
	; FlushFrontier
	%r10346 = bitcast %struct.GC_state* @gcState to %Pointer
	%r10347 = getelementptr inbounds i8, %Pointer %r10346, i32 0
	%r10348 = bitcast %Pointer %r10347 to %Pointer*
	%r10349 = load %Pointer, %Pointer* %frontier
	store %Pointer %r10349, %Pointer* %r10348
	; FlushStackTop
	%r10350 = bitcast %struct.GC_state* @gcState to %Pointer
	%r10351 = getelementptr inbounds i8, %Pointer %r10350, i32 16
	%r10352 = bitcast %Pointer %r10351 to %Pointer*
	%r10353 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r10353, %Pointer* %r10352
	; Call
	call void @GC_collect(%Pointer %r10340, %Word64 0, %Word32 0)
	; CacheFrontier
	%r10354 = bitcast %struct.GC_state* @gcState to %Pointer
	%r10355 = getelementptr inbounds i8, %Pointer %r10354, i32 0
	%r10356 = bitcast %Pointer %r10355 to %Pointer*
	%r10357 = load %Pointer, %Pointer* %r10356
	store %Pointer %r10357, %Pointer* %frontier
	; CacheStackTop
	%r10358 = bitcast %struct.GC_state* @gcState to %Pointer
	%r10359 = getelementptr inbounds i8, %Pointer %r10358, i32 16
	%r10360 = bitcast %Pointer %r10359 to %Pointer*
	%r10361 = load %Pointer, %Pointer* %r10360
	store %Pointer %r10361, %Pointer* %stackTop
	br label %L_463

L_461:
	; RP(0): Objptr (opt_3)  = glob {index = 132, isRoot = true, ty = Objptr (opt_3)}
	%r10362 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 132
	%r10363 = load %Objptr, %Objptr* %r10362
	store %Objptr %r10363, %Objptr* %regP_0
	; Goto L_452
	br label %L_452

L_460:
	; Push(-56)
	%r10364 = load %Pointer, %Pointer* %stackTop
	%r10365 = getelementptr inbounds i8, %Pointer %r10364, i32 -56
	store %Pointer %r10365, %Pointer* %stackTop
	; Goto L_446
	br label %L_446

L_459:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 70}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_460}
	; GetOperands
	%r10366 = bitcast %struct.GC_state* @gcState to %Pointer
	%r10367 = load %Pointer, %Pointer* %stackTop
	%r10368 = getelementptr inbounds i8, %Pointer %r10367, i32 48
	%r10369 = bitcast %Pointer %r10368 to %uintptr_t*
	store %uintptr_t 70, %uintptr_t* %r10369
	; Push(56)
	%r10370 = load %Pointer, %Pointer* %stackTop
	%r10371 = getelementptr inbounds i8, %Pointer %r10370, i32 56
	store %Pointer %r10371, %Pointer* %stackTop
	; FlushFrontier
	%r10372 = bitcast %struct.GC_state* @gcState to %Pointer
	%r10373 = getelementptr inbounds i8, %Pointer %r10372, i32 0
	%r10374 = bitcast %Pointer %r10373 to %Pointer*
	%r10375 = load %Pointer, %Pointer* %frontier
	store %Pointer %r10375, %Pointer* %r10374
	; FlushStackTop
	%r10376 = bitcast %struct.GC_state* @gcState to %Pointer
	%r10377 = getelementptr inbounds i8, %Pointer %r10376, i32 16
	%r10378 = bitcast %Pointer %r10377 to %Pointer*
	%r10379 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r10379, %Pointer* %r10378
	; Call
	call void @GC_collect(%Pointer %r10366, %Word64 0, %Word32 0)
	; CacheFrontier
	%r10380 = bitcast %struct.GC_state* @gcState to %Pointer
	%r10381 = getelementptr inbounds i8, %Pointer %r10380, i32 0
	%r10382 = bitcast %Pointer %r10381 to %Pointer*
	%r10383 = load %Pointer, %Pointer* %r10382
	store %Pointer %r10383, %Pointer* %frontier
	; CacheStackTop
	%r10384 = bitcast %struct.GC_state* @gcState to %Pointer
	%r10385 = getelementptr inbounds i8, %Pointer %r10384, i32 16
	%r10386 = bitcast %Pointer %r10385 to %Pointer*
	%r10387 = load %Pointer, %Pointer* %r10386
	store %Pointer %r10387, %Pointer* %stackTop
	br label %L_460

L_458:
	; RP(0): Objptr (opt_34, opt_33, opt_32, opt_31)  = Cast (0x2, Objptr (opt_34, opt_33, opt_32, opt_31))
	%r10388 = inttoptr %Word64 2 to %Objptr
	store %Objptr %r10388, %Objptr* %regP_0
	; Goto L_409
	br label %L_409

L_457:
	; Goto L_458
	br label %L_458

L_456:
	; SP(48): Objptr (opt_11)  = glob {index = 22, isRoot = true, ty = Objptr (opt_11)}
	%r10389 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 22
	%r10390 = load %Objptr, %Objptr* %r10389
	%r10391 = load %Pointer, %Pointer* %stackTop
	%r10392 = getelementptr inbounds i8, %Pointer %r10391, i32 48
	%r10393 = bitcast %Pointer %r10392 to %Objptr*
	store %Objptr %r10390, %Objptr* %r10393
	; Goto L_join_6
	br label %L_join_6

L_455:
	; RW32(0): Word32  = WordU64_extdToWord32 (RW64(0): Word64)
	%r10394 = load %Word64, %Word64* %regW64_0
	%r10395 = trunc %Word64 %r10394 to %Word32
	store %Word32 %r10395, %Word32* %regW32_0
	; RW64(1): Word64  = WordS32_extdToWord64 (RW32(0): Word32)
	%r10396 = load %Word32, %Word32* %regW32_0
	%r10397 = sext %Word32 %r10396 to %Word64
	store %Word64 %r10397, %Word64* %regW64_1
	; RW8(0): Word8  = XW8 (SQ(0): CPointer, RW64(1): Word64, 1, 0): Word8
	%r10398 = load %Pointer, %Pointer* %stackTop
	%r10399 = getelementptr inbounds i8, %Pointer %r10398, i32 0
	%r10400 = bitcast %Pointer %r10399 to %CPointer*
	%r10401 = load %CPointer, %CPointer* %r10400
	%r10402 = load %Word64, %Word64* %regW64_1
	%r10403 = mul nsw %Word64 %r10402, 1
	%r10404 = add nsw %Word64 %r10403, 0
	%r10405 = getelementptr inbounds i8, %CPointer %r10401, %Word64 %r10404
	%r10406 = bitcast %CPointer %r10405 to %Word8*
	%r10407 = load %Word8, %Word8* %r10406
	store %Word8 %r10407, %Word8* %regW8_0
	; XW8 (SP(48): Objptr (opt_11), RW64(0): Word64, 1, 0): Word8  = RW8(0): Word8
	%r10408 = load %Word8, %Word8* %regW8_0
	%r10409 = load %Pointer, %Pointer* %stackTop
	%r10410 = getelementptr inbounds i8, %Pointer %r10409, i32 48
	%r10411 = bitcast %Pointer %r10410 to %Objptr*
	%r10412 = load %Objptr, %Objptr* %r10411
	%r10413 = load %Word64, %Word64* %regW64_0
	%r10414 = mul nsw %Word64 %r10413, 1
	%r10415 = add nsw %Word64 %r10414, 0
	%r10416 = getelementptr inbounds i8, %Objptr %r10412, %Word64 %r10415
	%r10417 = bitcast %Objptr %r10416 to %Word8*
	store %Word8 %r10408, %Word8* %r10417
	; RW64(2): Word64  = Word64_add (RW64(0): Word64, 0x1)
	%r10418 = load %Word64, %Word64* %regW64_0
	%r10419 = add %Word64 %r10418, 1
	store %Word64 %r10419, %Word64* %regW64_2
	; RW64(0): Word64  = RW64(2): Word64
	%r10420 = load %Word64, %Word64* %regW64_2
	store %Word64 %r10420, %Word64* %regW64_0
	; Goto loop_26
	br label %loop_26

L_454:
	; Push(-64)
	%r10421 = load %Pointer, %Pointer* %stackTop
	%r10422 = getelementptr inbounds i8, %Pointer %r10421, i32 -64
	store %Pointer %r10422, %Pointer* %stackTop
	; Goto L_451
	br label %L_451

L_453:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 69}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_454}
	; GetOperands
	%r10423 = bitcast %struct.GC_state* @gcState to %Pointer
	%r10424 = load %Pointer, %Pointer* %stackTop
	%r10425 = getelementptr inbounds i8, %Pointer %r10424, i32 56
	%r10426 = bitcast %Pointer %r10425 to %uintptr_t*
	store %uintptr_t 69, %uintptr_t* %r10426
	; Push(64)
	%r10427 = load %Pointer, %Pointer* %stackTop
	%r10428 = getelementptr inbounds i8, %Pointer %r10427, i32 64
	store %Pointer %r10428, %Pointer* %stackTop
	; FlushFrontier
	%r10429 = bitcast %struct.GC_state* @gcState to %Pointer
	%r10430 = getelementptr inbounds i8, %Pointer %r10429, i32 0
	%r10431 = bitcast %Pointer %r10430 to %Pointer*
	%r10432 = load %Pointer, %Pointer* %frontier
	store %Pointer %r10432, %Pointer* %r10431
	; FlushStackTop
	%r10433 = bitcast %struct.GC_state* @gcState to %Pointer
	%r10434 = getelementptr inbounds i8, %Pointer %r10433, i32 16
	%r10435 = bitcast %Pointer %r10434 to %Pointer*
	%r10436 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r10436, %Pointer* %r10435
	; Call
	call void @GC_collect(%Pointer %r10423, %Word64 0, %Word32 0)
	; CacheFrontier
	%r10437 = bitcast %struct.GC_state* @gcState to %Pointer
	%r10438 = getelementptr inbounds i8, %Pointer %r10437, i32 0
	%r10439 = bitcast %Pointer %r10438 to %Pointer*
	%r10440 = load %Pointer, %Pointer* %r10439
	store %Pointer %r10440, %Pointer* %frontier
	; CacheStackTop
	%r10441 = bitcast %struct.GC_state* @gcState to %Pointer
	%r10442 = getelementptr inbounds i8, %Pointer %r10441, i32 16
	%r10443 = bitcast %Pointer %r10442 to %Pointer*
	%r10444 = load %Pointer, %Pointer* %r10443
	store %Pointer %r10444, %Pointer* %stackTop
	br label %L_454

L_452:
	; RW64(0): [Word32, Bits32]  = WordU32_extdToWord64 (SW32(44): Word32)
	%r10445 = load %Pointer, %Pointer* %stackTop
	%r10446 = getelementptr inbounds i8, %Pointer %r10445, i32 44
	%r10447 = bitcast %Pointer %r10446 to %Word32*
	%r10448 = load %Word32, %Word32* %r10447
	%r10449 = zext %Word32 %r10448 to %Word64
	store %Word64 %r10449, %Word64* %regW64_0
	; RW64(1): [Word32, Bits32]  = Word64_lshift (RW64(0): [Word32, Bits32], 0x1)
	%r10450 = load %Word64, %Word64* %regW64_0
	%r10451 = zext %Word32 1 to %Word64
	%r10452 = shl %Word64 %r10450, %r10451
	store %Word64 %r10452, %Word64* %regW64_1
	; RW64(2): [Word32, Bits32]  = Word64_orb (RW64(1): [Word32, Bits32], 0x1)
	%r10453 = load %Word64, %Word64* %regW64_1
	%r10454 = or %Word64 %r10453, 1
	store %Word64 %r10454, %Word64* %regW64_2
	; CW64 (<Frontier>)  = 0x43
	%r10455 = load %Pointer, %Pointer* %frontier
	%r10456 = bitcast %Pointer %r10455 to %Word64*
	store %Word64 67, %Word64* %r10456
	; RQ(42): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r10457 = load %Pointer, %Pointer* %frontier
	%r10459 = ptrtoint %Pointer %r10457 to %uintptr_t
	%r10460 = add %uintptr_t %r10459, 8
	%r10458 = inttoptr %uintptr_t %r10460 to %Pointer
	store %CPointer %r10458, %CPointer* %regQ_42
	; RP(1): Objptr (opt_33)  = Cast (RQ(42): CPointer, Objptr (opt_33))
	%r10461 = load %CPointer, %CPointer* %regQ_42
	%r10462 = bitcast %CPointer %r10461 to %Objptr
	store %Objptr %r10462, %Objptr* %regP_1
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r10463 = load %Pointer, %Pointer* %frontier
	%r10465 = ptrtoint %Pointer %r10463 to %uintptr_t
	%r10466 = add %uintptr_t %r10465, 24
	%r10464 = inttoptr %uintptr_t %r10466 to %Pointer
	store %Pointer %r10464, %Pointer* %frontier
	; OW64 (RP(1): Objptr (opt_33), 0): [Word1, Bits63]  = Cast (RW64(2): [Word32, Bits32], [Word1, Bits63])
	%r10467 = load %Word64, %Word64* %regW64_2
	%r10468 = bitcast %Word64 %r10467 to %Word64
	%r10469 = load %Objptr, %Objptr* %regP_1
	%r10470 = getelementptr inbounds i8, %Objptr %r10469, i32 0
	%r10471 = bitcast %Objptr %r10470 to %Word64*
	store %Word64 %r10468, %Word64* %r10471
	; OP (RP(1): Objptr (opt_33), 8): Objptr (opt_3)  = RP(0): Objptr (opt_3)
	%r10472 = load %Objptr, %Objptr* %regP_0
	%r10473 = load %Objptr, %Objptr* %regP_1
	%r10474 = getelementptr inbounds i8, %Objptr %r10473, i32 8
	%r10475 = bitcast %Objptr %r10474 to %Objptr*
	store %Objptr %r10472, %Objptr* %r10475
	; RP(0): Objptr (opt_34, opt_33, opt_32, opt_31)  = Cast (RP(1): Objptr (opt_33), Objptr (opt_34, opt_33, opt_32, opt_31))
	%r10476 = load %Objptr, %Objptr* %regP_1
	%r10477 = bitcast %Objptr %r10476 to %Objptr
	store %Objptr %r10477, %Objptr* %regP_0
	; Goto L_409
	br label %L_409

L_451:
	; OW64 (SP(48): Objptr (opt_11), ~8): Word64  = 0x7
	%r10478 = load %Pointer, %Pointer* %stackTop
	%r10479 = getelementptr inbounds i8, %Pointer %r10478, i32 48
	%r10480 = bitcast %Pointer %r10479 to %Objptr*
	%r10481 = load %Objptr, %Objptr* %r10480
	%r10482 = getelementptr inbounds i8, %Objptr %r10481, i32 -8
	%r10483 = bitcast %Objptr %r10482 to %Word64*
	store %Word64 7, %Word64* %r10483
	; RP(0): Objptr (opt_3)  = Cast (SP(48): Objptr (opt_11), Objptr (opt_3))
	%r10484 = load %Pointer, %Pointer* %stackTop
	%r10485 = getelementptr inbounds i8, %Pointer %r10484, i32 48
	%r10486 = bitcast %Pointer %r10485 to %Objptr*
	%r10487 = load %Objptr, %Objptr* %r10486
	%r10488 = bitcast %Objptr %r10487 to %Objptr
	store %Objptr %r10488, %Objptr* %regP_0
	; Goto L_452
	br label %L_452

L_450:
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r10489 = bitcast %struct.GC_state* @gcState to %Pointer
	%r10490 = getelementptr inbounds i8, %Pointer %r10489, i32 8
	%r10491 = bitcast %Pointer %r10490 to %CPointer*
	%r10492 = load %CPointer, %CPointer* %r10491
	%r10493 = load %Pointer, %Pointer* %frontier
	%r10495 = icmp ult %Pointer %r10492, %r10493
	%r10494 = zext i1 %r10495 to %Word32
	store %Word32 %r10494, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_451), (0x1, L_453))}
	%r10496 = load %Word32, %Word32* %regW32_0
	%r10497 = trunc %Word32 %r10496 to i1
	br i1 %r10497, label %L_453, label %L_451

loop_26:
	; RW32(0): Word32  = WordS64_lt (RW64(0): Word64, SW64(8): Word64)
	%r10498 = load %Word64, %Word64* %regW64_0
	%r10499 = load %Pointer, %Pointer* %stackTop
	%r10500 = getelementptr inbounds i8, %Pointer %r10499, i32 8
	%r10501 = bitcast %Pointer %r10500 to %Word64*
	%r10502 = load %Word64, %Word64* %r10501
	%r10504 = icmp slt %Word64 %r10498, %r10502
	%r10503 = zext i1 %r10504 to %Word32
	store %Word32 %r10503, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_450), (0x1, L_455))}
	%r10505 = load %Word32, %Word32* %regW32_0
	%r10506 = trunc %Word32 %r10505 to i1
	br i1 %r10506, label %L_455, label %L_450

L_join_6:
	; RW64(0): Word64  = 0x0
	store %Word64 0, %Word64* %regW64_0
	; Goto loop_26
	br label %loop_26

L_449:
	; Push(-56)
	%r10507 = load %Pointer, %Pointer* %stackTop
	%r10508 = getelementptr inbounds i8, %Pointer %r10507, i32 -56
	store %Pointer %r10508, %Pointer* %stackTop
	%r10509 = load %Objptr, %Objptr* @CReturnP
	store %Objptr %r10509, %Objptr* %regP_0
	; SP(48): Objptr (opt_11)  = RP(0): Objptr (opt_11)
	%r10510 = load %Objptr, %Objptr* %regP_0
	%r10511 = load %Pointer, %Pointer* %stackTop
	%r10512 = getelementptr inbounds i8, %Pointer %r10511, i32 48
	%r10513 = bitcast %Pointer %r10512 to %Objptr*
	store %Objptr %r10510, %Objptr* %r10513
	; Goto L_join_6
	br label %L_join_6

L_448:
	; CCall {args = (<GCState>, 0x0, SW64(8): Word64, 0x17), frameInfo = Some {frameLayoutsIndex = 68}, func = {args = (GCState, Word64, Word64, Word64), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int64, Word64), res = Some Objptr}, return = Objptr (opt_11), symbolScope = private, target = GC_arrayAllocate}, return = Some L_449}
	; GetOperands
	%r10514 = bitcast %struct.GC_state* @gcState to %Pointer
	%r10515 = load %Pointer, %Pointer* %stackTop
	%r10516 = getelementptr inbounds i8, %Pointer %r10515, i32 8
	%r10517 = bitcast %Pointer %r10516 to %Word64*
	%r10518 = load %Word64, %Word64* %r10517
	%r10519 = load %Pointer, %Pointer* %stackTop
	%r10520 = getelementptr inbounds i8, %Pointer %r10519, i32 48
	%r10521 = bitcast %Pointer %r10520 to %uintptr_t*
	store %uintptr_t 68, %uintptr_t* %r10521
	; Push(56)
	%r10522 = load %Pointer, %Pointer* %stackTop
	%r10523 = getelementptr inbounds i8, %Pointer %r10522, i32 56
	store %Pointer %r10523, %Pointer* %stackTop
	; FlushFrontier
	%r10524 = bitcast %struct.GC_state* @gcState to %Pointer
	%r10525 = getelementptr inbounds i8, %Pointer %r10524, i32 0
	%r10526 = bitcast %Pointer %r10525 to %Pointer*
	%r10527 = load %Pointer, %Pointer* %frontier
	store %Pointer %r10527, %Pointer* %r10526
	; FlushStackTop
	%r10528 = bitcast %struct.GC_state* @gcState to %Pointer
	%r10529 = getelementptr inbounds i8, %Pointer %r10528, i32 16
	%r10530 = bitcast %Pointer %r10529 to %Pointer*
	%r10531 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r10531, %Pointer* %r10530
	; Call
	%r10532 = call %Objptr @GC_arrayAllocate(%Pointer %r10514, %Word64 0, %Word64 %r10518, %Word64 23)
	store %Objptr %r10532, %Objptr* @CReturnP
	; CacheFrontier
	%r10533 = bitcast %struct.GC_state* @gcState to %Pointer
	%r10534 = getelementptr inbounds i8, %Pointer %r10533, i32 0
	%r10535 = bitcast %Pointer %r10534 to %Pointer*
	%r10536 = load %Pointer, %Pointer* %r10535
	store %Pointer %r10536, %Pointer* %frontier
	; CacheStackTop
	%r10537 = bitcast %struct.GC_state* @gcState to %Pointer
	%r10538 = getelementptr inbounds i8, %Pointer %r10537, i32 16
	%r10539 = bitcast %Pointer %r10538 to %Pointer*
	%r10540 = load %Pointer, %Pointer* %r10539
	store %Pointer %r10540, %Pointer* %stackTop
	br label %L_449

L_447:
	; RW32(0): Word32  = Word64_equal (0x0, SW64(8): Word64)
	%r10541 = load %Pointer, %Pointer* %stackTop
	%r10542 = getelementptr inbounds i8, %Pointer %r10541, i32 8
	%r10543 = bitcast %Pointer %r10542 to %Word64*
	%r10544 = load %Word64, %Word64* %r10543
	%r10546 = icmp eq %Word64 0, %r10544
	%r10545 = zext i1 %r10546 to %Word32
	store %Word32 %r10545, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_448), (0x1, L_456))}
	%r10547 = load %Word32, %Word32* %regW32_0
	%r10548 = trunc %Word32 %r10547 to i1
	br i1 %r10548, label %L_456, label %L_448

L_446:
	; RW32(0): Word32  = WordU64_lt (0x7FFFFFFF, SW64(8): Word64)
	%r10549 = load %Pointer, %Pointer* %stackTop
	%r10550 = getelementptr inbounds i8, %Pointer %r10549, i32 8
	%r10551 = bitcast %Pointer %r10550 to %Word64*
	%r10552 = load %Word64, %Word64* %r10551
	%r10554 = icmp ult %Word64 2147483647, %r10552
	%r10553 = zext i1 %r10554 to %Word32
	store %Word32 %r10553, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_447), (0x1, L_457))}
	%r10555 = load %Word32, %Word32* %regW32_0
	%r10556 = trunc %Word32 %r10555 to i1
	br i1 %r10556, label %L_457, label %L_447

L_445:
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r10557 = bitcast %struct.GC_state* @gcState to %Pointer
	%r10558 = getelementptr inbounds i8, %Pointer %r10557, i32 8
	%r10559 = bitcast %Pointer %r10558 to %CPointer*
	%r10560 = load %CPointer, %CPointer* %r10559
	%r10561 = load %Pointer, %Pointer* %frontier
	%r10563 = icmp ult %Pointer %r10560, %r10561
	%r10562 = zext i1 %r10563 to %Word32
	store %Word32 %r10562, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_446), (0x1, L_459))}
	%r10564 = load %Word32, %Word32* %regW32_0
	%r10565 = trunc %Word32 %r10564 to i1
	br i1 %r10565, label %L_459, label %L_446

L_444:
	; RW32(1): Word32  = Word32_add (RW32(0): Word32, 0x1)
	%r10566 = load %Word32, %Word32* %regW32_0
	%r10567 = add %Word32 %r10566, 1
	store %Word32 %r10567, %Word32* %regW32_1
	; RW32(0): Word32  = RW32(1): Word32
	%r10568 = load %Word32, %Word32* %regW32_1
	store %Word32 %r10568, %Word32* %regW32_0
	; Goto loop_25
	br label %loop_25

loop_25:
	; SW64(8): Word64  = WordS32_extdToWord64 (RW32(0): Word32)
	%r10569 = load %Word32, %Word32* %regW32_0
	%r10570 = sext %Word32 %r10569 to %Word64
	%r10571 = load %Pointer, %Pointer* %stackTop
	%r10572 = getelementptr inbounds i8, %Pointer %r10571, i32 8
	%r10573 = bitcast %Pointer %r10572 to %Word64*
	store %Word64 %r10570, %Word64* %r10573
	; RW8(0): Word8  = XW8 (SQ(0): CPointer, SW64(8): Word64, 1, 0): Word8
	%r10574 = load %Pointer, %Pointer* %stackTop
	%r10575 = getelementptr inbounds i8, %Pointer %r10574, i32 0
	%r10576 = bitcast %Pointer %r10575 to %CPointer*
	%r10577 = load %CPointer, %CPointer* %r10576
	%r10578 = load %Pointer, %Pointer* %stackTop
	%r10579 = getelementptr inbounds i8, %Pointer %r10578, i32 8
	%r10580 = bitcast %Pointer %r10579 to %Word64*
	%r10581 = load %Word64, %Word64* %r10580
	%r10582 = mul nsw %Word64 %r10581, 1
	%r10583 = add nsw %Word64 %r10582, 0
	%r10584 = getelementptr inbounds i8, %CPointer %r10577, %Word64 %r10583
	%r10585 = bitcast %CPointer %r10584 to %Word8*
	%r10586 = load %Word8, %Word8* %r10585
	store %Word8 %r10586, %Word8* %regW8_0
	; switch {test = RW8(0): Word8, default = Some L_444, cases = ((0x0, L_445))}
	%r10587 = load %Word8, %Word8* %regW8_0
	switch %Word8 %r10587, label %L_444 [
		%Word8 0, label %L_445
	]

L_443:
	; RW32(0): Word32  = 0x0
	store %Word32 0, %Word32* %regW32_0
	; Goto loop_25
	br label %loop_25

L_442:
	%r10588 = load %Word64, %Word64* @CReturnW64
	store %Word64 %r10588, %Word64* %regW64_0
	; SQ(0): CPointer  = CPointer_fromWord (RW64(0): Word64)
	%r10589 = load %Word64, %Word64* %regW64_0
	%r10590 = inttoptr %uintptr_t %r10589 to %Pointer
	%r10591 = load %Pointer, %Pointer* %stackTop
	%r10592 = getelementptr inbounds i8, %Pointer %r10591, i32 0
	%r10593 = bitcast %Pointer %r10592 to %CPointer*
	store %CPointer %r10590, %CPointer* %r10593
	; RW32(0): Word32  = CPointer_equal (SQ(0): CPointer, NULL)
	%r10594 = load %Pointer, %Pointer* %stackTop
	%r10595 = getelementptr inbounds i8, %Pointer %r10594, i32 0
	%r10596 = bitcast %Pointer %r10595 to %CPointer*
	%r10597 = load %CPointer, %CPointer* %r10596
	%r10599 = icmp eq %Pointer %r10597, null
	%r10598 = zext i1 %r10599 to %Word32
	store %Word32 %r10598, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_443), (0x1, L_461))}
	%r10600 = load %Word32, %Word32* %regW32_0
	%r10601 = trunc %Word32 %r10600 to i1
	br i1 %r10601, label %L_461, label %L_443

L_441:
	; CCall {args = (SW32(44): Word32), frameInfo = None, func = {args = (Word32), convention = cdecl, kind = Impure, prototype = {args = (Int32), res = Some Word64}, return = Word64, symbolScope = private, target = Posix_Error_strError}, return = Some L_442}
	; GetOperands
	%r10602 = load %Pointer, %Pointer* %stackTop
	%r10603 = getelementptr inbounds i8, %Pointer %r10602, i32 44
	%r10604 = bitcast %Pointer %r10603 to %Word32*
	%r10605 = load %Word32, %Word32* %r10604
	; Call
	%r10606 = call %Word64 @Posix_Error_strError(%Word32 %r10605)
	store %Word64 %r10606, %Word64* @CReturnW64
	br label %L_442

L_440:
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r10607 = bitcast %struct.GC_state* @gcState to %Pointer
	%r10608 = getelementptr inbounds i8, %Pointer %r10607, i32 8
	%r10609 = bitcast %Pointer %r10608 to %CPointer*
	%r10610 = load %CPointer, %CPointer* %r10609
	%r10611 = load %Pointer, %Pointer* %frontier
	%r10613 = icmp ult %Pointer %r10610, %r10611
	%r10612 = zext i1 %r10613 to %Word32
	store %Word32 %r10612, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_441), (0x1, L_462))}
	%r10614 = load %Word32, %Word32* %regW32_0
	%r10615 = trunc %Word32 %r10614 to i1
	br i1 %r10615, label %L_462, label %L_441

loop_24:
	; RW32(0): Word32  = Word32_equal (SW32(44): Word32, 0x4)
	%r10616 = load %Pointer, %Pointer* %stackTop
	%r10617 = getelementptr inbounds i8, %Pointer %r10616, i32 44
	%r10618 = bitcast %Pointer %r10617 to %Word32*
	%r10619 = load %Word32, %Word32* %r10618
	%r10621 = icmp eq %Word32 %r10619, 4
	%r10620 = zext i1 %r10621 to %Word32
	store %Word32 %r10620, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_440), (0x1, L_464))}
	%r10622 = load %Word32, %Word32* %regW32_0
	%r10623 = trunc %Word32 %r10622 to i1
	br i1 %r10623, label %L_464, label %L_440

L_439:
	; RW32(1): Word32  = Word32_add (OW32 (<GCState>, 68): Word32, 0xFFFFFFFF)
	%r10624 = bitcast %struct.GC_state* @gcState to %Pointer
	%r10625 = getelementptr inbounds i8, %Pointer %r10624, i32 68
	%r10626 = bitcast %Pointer %r10625 to %Word32*
	%r10627 = load %Word32, %Word32* %r10626
	%r10628 = add %Word32 %r10627, 4294967295
	store %Word32 %r10628, %Word32* %regW32_1
	; OW32 (<GCState>, 68): Word32  = RW32(1): Word32
	%r10629 = load %Word32, %Word32* %regW32_1
	%r10630 = bitcast %struct.GC_state* @gcState to %Pointer
	%r10631 = getelementptr inbounds i8, %Pointer %r10630, i32 68
	%r10632 = bitcast %Pointer %r10631 to %Word32*
	store %Word32 %r10629, %Word32* %r10632
	; SW32(44): Word32  = RW32(0): Word32
	%r10633 = load %Word32, %Word32* %regW32_0
	%r10634 = load %Pointer, %Pointer* %stackTop
	%r10635 = getelementptr inbounds i8, %Pointer %r10634, i32 44
	%r10636 = bitcast %Pointer %r10635 to %Word32*
	store %Word32 %r10633, %Word32* %r10636
	; Goto loop_24
	br label %loop_24

L_438:
	%r10637 = load %Word32, %Word32* @CReturnW32
	store %Word32 %r10637, %Word32* %regW32_0
	; RW32(1): Word32  = OW32 (<GCState>, 68): Word32
	%r10638 = bitcast %struct.GC_state* @gcState to %Pointer
	%r10639 = getelementptr inbounds i8, %Pointer %r10638, i32 68
	%r10640 = bitcast %Pointer %r10639 to %Word32*
	%r10641 = load %Word32, %Word32* %r10640
	store %Word32 %r10641, %Word32* %regW32_1
	; RW32(2): Word32  = Word32_equal (RW32(1): Word32, 0x0)
	%r10642 = load %Word32, %Word32* %regW32_1
	%r10644 = icmp eq %Word32 %r10642, 0
	%r10643 = zext i1 %r10644 to %Word32
	store %Word32 %r10643, %Word32* %regW32_2
	; switch {test = RW32(2): Word32, default = None, cases = ((0x0, L_439), (0x1, L_517))}
	%r10645 = load %Word32, %Word32* %regW32_2
	%r10646 = trunc %Word32 %r10645 to i1
	br i1 %r10646, label %L_517, label %L_439

L_437:
	; CCall {args = (), frameInfo = None, func = {args = (), convention = cdecl, kind = Impure, prototype = {args = (), res = Some Int32}, return = Word32, symbolScope = private, target = Posix_Error_getErrno}, return = Some L_438}
	; GetOperands
	; Call
	%r10647 = call %Word32 @Posix_Error_getErrno()
	store %Word32 %r10647, %Word32* @CReturnW32
	br label %L_438

L_436:
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r10648 = bitcast %struct.GC_state* @gcState to %Pointer
	%r10649 = getelementptr inbounds i8, %Pointer %r10648, i32 8
	%r10650 = bitcast %Pointer %r10649 to %CPointer*
	%r10651 = load %CPointer, %CPointer* %r10650
	%r10652 = load %Pointer, %Pointer* %frontier
	%r10654 = icmp ult %Pointer %r10651, %r10652
	%r10653 = zext i1 %r10654 to %Word32
	store %Word32 %r10653, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_437), (0x1, L_518))}
	%r10655 = load %Word32, %Word32* %regW32_0
	%r10656 = trunc %Word32 %r10655 to i1
	br i1 %r10656, label %L_518, label %L_437

L_435:
	; RP(0): Objptr (opt_34, opt_33, opt_32, opt_31)  = Cast (glob {index = 9, isRoot = true, ty = Objptr (opt_31)}, Objptr (opt_34, opt_33, opt_32, opt_31))
	%r10657 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 9
	%r10658 = load %Objptr, %Objptr* %r10657
	%r10659 = bitcast %Objptr %r10658 to %Objptr
	store %Objptr %r10659, %Objptr* %regP_0
	; Goto L_409
	br label %L_409

L_434:
	; Goto L_435
	br label %L_435

L_433:
	; RP(0): Objptr (opt_34, opt_33, opt_32, opt_31)  = Cast (glob {index = 13, isRoot = true, ty = Objptr (opt_32)}, Objptr (opt_34, opt_33, opt_32, opt_31))
	%r10660 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 13
	%r10661 = load %Objptr, %Objptr* %r10660
	%r10662 = bitcast %Objptr %r10661 to %Objptr
	store %Objptr %r10662, %Objptr* %regP_0
	; Goto L_409
	br label %L_409

L_432:
	; SW32(40): Word32  = RW32(1): Word32
	%r10663 = load %Word32, %Word32* %regW32_1
	%r10664 = load %Pointer, %Pointer* %stackTop
	%r10665 = getelementptr inbounds i8, %Pointer %r10664, i32 40
	%r10666 = bitcast %Pointer %r10665 to %Word32*
	store %Word32 %r10663, %Word32* %r10666
	; Goto loop_23
	br label %loop_23

L_431:
	; Arith {prim = WordS32_addCheck, args = (SW32(40): Word32, RW32(0): Word32), dst = RW32(1): Word32, overflow = L_411, success = L_432}
	%r10667 = load %Pointer, %Pointer* %stackTop
	%r10668 = getelementptr inbounds i8, %Pointer %r10667, i32 40
	%r10669 = bitcast %Pointer %r10668 to %Word32*
	%r10670 = load %Word32, %Word32* %r10669
	%r10671 = load %Word32, %Word32* %regW32_0
	%r10672 = call {%Word32, i1} @llvm.sadd.with.overflow.i32(%Word32 %r10670, %Word32 %r10671)
	%r10673 = extractvalue {%Word32, i1} %r10672, 0
	%r10674 = extractvalue {%Word32, i1} %r10672, 1
	store %Word32 %r10673, %Word32* %regW32_1
	br i1 %r10674, label %L_411, label %L_432

L_430:
	; OW64 (SP(80): Objptr (opt_12), 0): Word64  = RW64(2): Word64
	%r10675 = load %Word64, %Word64* %regW64_2
	%r10676 = load %Pointer, %Pointer* %stackTop
	%r10677 = getelementptr inbounds i8, %Pointer %r10676, i32 80
	%r10678 = bitcast %Pointer %r10677 to %Objptr*
	%r10679 = load %Objptr, %Objptr* %r10678
	%r10680 = getelementptr inbounds i8, %Objptr %r10679, i32 0
	%r10681 = bitcast %Objptr %r10680 to %Word64*
	store %Word64 %r10675, %Word64* %r10681
	; RW32(1): Word32  = Word32_equal (RW32(0): Word32, 0x0)
	%r10682 = load %Word32, %Word32* %regW32_0
	%r10684 = icmp eq %Word32 %r10682, 0
	%r10683 = zext i1 %r10684 to %Word32
	store %Word32 %r10683, %Word32* %regW32_1
	; switch {test = RW32(1): Word32, default = None, cases = ((0x0, L_431), (0x1, L_433))}
	%r10685 = load %Word32, %Word32* %regW32_1
	%r10686 = trunc %Word32 %r10685 to i1
	br i1 %r10686, label %L_433, label %L_431

L_429:
	; RW64(0): Word64  = OW64 (SP(80): Objptr (opt_12), 0): Word64
	%r10687 = load %Pointer, %Pointer* %stackTop
	%r10688 = getelementptr inbounds i8, %Pointer %r10687, i32 80
	%r10689 = bitcast %Pointer %r10688 to %Objptr*
	%r10690 = load %Objptr, %Objptr* %r10689
	%r10691 = getelementptr inbounds i8, %Objptr %r10690, i32 0
	%r10692 = bitcast %Objptr %r10691 to %Word64*
	%r10693 = load %Word64, %Word64* %r10692
	store %Word64 %r10693, %Word64* %regW64_0
	; Arith {prim = WordS64_addCheck, args = (RW64(0): Word64, RW64(1): Word64), dst = RW64(2): Word64, overflow = L_411, success = L_430}
	%r10694 = load %Word64, %Word64* %regW64_0
	%r10695 = load %Word64, %Word64* %regW64_1
	%r10696 = call {%Word64, i1} @llvm.sadd.with.overflow.i64(%Word64 %r10694, %Word64 %r10695)
	%r10697 = extractvalue {%Word64, i1} %r10696, 0
	%r10698 = extractvalue {%Word64, i1} %r10696, 1
	store %Word64 %r10697, %Word64* %regW64_2
	br i1 %r10698, label %L_411, label %L_430

L_428:
	; Goto L_411
	br label %L_411

x_0:
	; RW32(0): Word32  = WordU64_extdToWord32 (RW64(0): Word64)
	%r10699 = load %Word64, %Word64* %regW64_0
	%r10700 = trunc %Word64 %r10699 to %Word32
	store %Word32 %r10700, %Word32* %regW32_0
	; RW64(1): Word64  = WordS32_extdToWord64 (RW32(0): Word32)
	%r10701 = load %Word32, %Word32* %regW32_0
	%r10702 = sext %Word32 %r10701 to %Word64
	store %Word64 %r10702, %Word64* %regW64_1
	; RW32(1): Word32  = Word64_equal (RW64(1): Word64, RW64(0): Word64)
	%r10703 = load %Word64, %Word64* %regW64_1
	%r10704 = load %Word64, %Word64* %regW64_0
	%r10706 = icmp eq %Word64 %r10703, %r10704
	%r10705 = zext i1 %r10706 to %Word32
	store %Word32 %r10705, %Word32* %regW32_1
	; switch {test = RW32(1): Word32, default = None, cases = ((0x0, L_428), (0x1, L_429))}
	%r10707 = load %Word32, %Word32* %regW32_1
	%r10708 = trunc %Word32 %r10707 to i1
	br i1 %r10708, label %L_429, label %L_428

L_427:
	; RW32(0): Word32  = Word32_add (OW32 (<GCState>, 68): Word32, 0xFFFFFFFF)
	%r10709 = bitcast %struct.GC_state* @gcState to %Pointer
	%r10710 = getelementptr inbounds i8, %Pointer %r10709, i32 68
	%r10711 = bitcast %Pointer %r10710 to %Word32*
	%r10712 = load %Word32, %Word32* %r10711
	%r10713 = add %Word32 %r10712, 4294967295
	store %Word32 %r10713, %Word32* %regW32_0
	; OW32 (<GCState>, 68): Word32  = RW32(0): Word32
	%r10714 = load %Word32, %Word32* %regW32_0
	%r10715 = bitcast %struct.GC_state* @gcState to %Pointer
	%r10716 = getelementptr inbounds i8, %Pointer %r10715, i32 68
	%r10717 = bitcast %Pointer %r10716 to %Word32*
	store %Word32 %r10714, %Word32* %r10717
	; Goto x_0
	br label %x_0

L_426:
	; RW32(0): Word32  = OW32 (<GCState>, 68): Word32
	%r10718 = bitcast %struct.GC_state* @gcState to %Pointer
	%r10719 = getelementptr inbounds i8, %Pointer %r10718, i32 68
	%r10720 = bitcast %Pointer %r10719 to %Word32*
	%r10721 = load %Word32, %Word32* %r10720
	store %Word32 %r10721, %Word32* %regW32_0
	; RW32(1): Word32  = Word32_equal (RW32(0): Word32, 0x0)
	%r10722 = load %Word32, %Word32* %regW32_0
	%r10724 = icmp eq %Word32 %r10722, 0
	%r10723 = zext i1 %r10724 to %Word32
	store %Word32 %r10723, %Word32* %regW32_1
	; switch {test = RW32(1): Word32, default = None, cases = ((0x0, L_427), (0x1, L_434))}
	%r10725 = load %Word32, %Word32* %regW32_1
	%r10726 = trunc %Word32 %r10725 to i1
	br i1 %r10726, label %L_434, label %L_427

L_425:
	%r10727 = load %Word64, %Word64* @CReturnW64
	store %Word64 %r10727, %Word64* %regW64_0
	; RW32(0): Word32  = Word64_equal (RW64(0): Word64, 0xFFFFFFFFFFFFFFFF)
	%r10728 = load %Word64, %Word64* %regW64_0
	%r10730 = icmp eq %Word64 %r10728, 18446744073709551615
	%r10729 = zext i1 %r10730 to %Word32
	store %Word32 %r10729, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_426), (0x1, L_436))}
	%r10731 = load %Word32, %Word32* %regW32_0
	%r10732 = trunc %Word32 %r10731 to i1
	br i1 %r10732, label %L_436, label %L_426

L_424:
	; CCall {args = (0x1, SP(0): Objptr (opt_3), SW32(40): Word32, SW64(72): Word64), frameInfo = None, func = {args = (Word32, Objptr (opt_3), Word32, Word64), convention = cdecl, kind = Impure, prototype = {args = (Int32, Objptr, Int32, Word64), res = Some Int64}, return = Word64, symbolScope = private, target = Posix_IO_writeChar8Vec}, return = Some L_425}
	; GetOperands
	%r10733 = load %Pointer, %Pointer* %stackTop
	%r10734 = getelementptr inbounds i8, %Pointer %r10733, i32 0
	%r10735 = bitcast %Pointer %r10734 to %Objptr*
	%r10736 = load %Objptr, %Objptr* %r10735
	%r10737 = load %Pointer, %Pointer* %stackTop
	%r10738 = getelementptr inbounds i8, %Pointer %r10737, i32 40
	%r10739 = bitcast %Pointer %r10738 to %Word32*
	%r10740 = load %Word32, %Word32* %r10739
	%r10741 = load %Pointer, %Pointer* %stackTop
	%r10742 = getelementptr inbounds i8, %Pointer %r10741, i32 72
	%r10743 = bitcast %Pointer %r10742 to %Word64*
	%r10744 = load %Word64, %Word64* %r10743
	; Call
	%r10745 = call %Word64 @Posix_IO_writeChar8Vec(%Word32 1, %Objptr %r10736, %Word32 %r10740, %Word64 %r10744)
	store %Word64 %r10745, %Word64* @CReturnW64
	br label %L_425

L_423:
	; RW32(0): Word32  = Word32_add (OW32 (<GCState>, 68): Word32, 0x1)
	%r10746 = bitcast %struct.GC_state* @gcState to %Pointer
	%r10747 = getelementptr inbounds i8, %Pointer %r10746, i32 68
	%r10748 = bitcast %Pointer %r10747 to %Word32*
	%r10749 = load %Word32, %Word32* %r10748
	%r10750 = add %Word32 %r10749, 1
	store %Word32 %r10750, %Word32* %regW32_0
	; OW32 (<GCState>, 68): Word32  = RW32(0): Word32
	%r10751 = load %Word32, %Word32* %regW32_0
	%r10752 = bitcast %struct.GC_state* @gcState to %Pointer
	%r10753 = getelementptr inbounds i8, %Pointer %r10752, i32 68
	%r10754 = bitcast %Pointer %r10753 to %Word32*
	store %Word32 %r10751, %Word32* %r10754
	; RW32(1): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r10755 = bitcast %struct.GC_state* @gcState to %Pointer
	%r10756 = getelementptr inbounds i8, %Pointer %r10755, i32 8
	%r10757 = bitcast %Pointer %r10756 to %CPointer*
	%r10758 = load %CPointer, %CPointer* %r10757
	%r10759 = load %Pointer, %Pointer* %frontier
	%r10761 = icmp ult %Pointer %r10758, %r10759
	%r10760 = zext i1 %r10761 to %Word32
	store %Word32 %r10760, %Word32* %regW32_1
	; switch {test = RW32(1): Word32, default = None, cases = ((0x0, L_424), (0x1, L_520))}
	%r10762 = load %Word32, %Word32* %regW32_1
	%r10763 = trunc %Word32 %r10762 to i1
	br i1 %r10763, label %L_520, label %L_424

L_422:
	; SP(80): Objptr (opt_12)  = OP (SP(56): Objptr (opt_14), 8): Objptr (opt_12)
	%r10764 = load %Pointer, %Pointer* %stackTop
	%r10765 = getelementptr inbounds i8, %Pointer %r10764, i32 56
	%r10766 = bitcast %Pointer %r10765 to %Objptr*
	%r10767 = load %Objptr, %Objptr* %r10766
	%r10768 = getelementptr inbounds i8, %Objptr %r10767, i32 8
	%r10769 = bitcast %Objptr %r10768 to %Objptr*
	%r10770 = load %Objptr, %Objptr* %r10769
	%r10771 = load %Pointer, %Pointer* %stackTop
	%r10772 = getelementptr inbounds i8, %Pointer %r10771, i32 80
	%r10773 = bitcast %Pointer %r10772 to %Objptr*
	store %Objptr %r10770, %Objptr* %r10773
	; RP(0): Objptr (opt_13)  = OP (SP(56): Objptr (opt_14), 0): Objptr (opt_13)
	%r10774 = load %Pointer, %Pointer* %stackTop
	%r10775 = getelementptr inbounds i8, %Pointer %r10774, i32 56
	%r10776 = bitcast %Pointer %r10775 to %Objptr*
	%r10777 = load %Objptr, %Objptr* %r10776
	%r10778 = getelementptr inbounds i8, %Objptr %r10777, i32 0
	%r10779 = bitcast %Objptr %r10778 to %Objptr*
	%r10780 = load %Objptr, %Objptr* %r10779
	store %Objptr %r10780, %Objptr* %regP_0
	; RW32(0): Word32  = OW32 (RP(0): Objptr (opt_13), 0): Word32
	%r10781 = load %Objptr, %Objptr* %regP_0
	%r10782 = getelementptr inbounds i8, %Objptr %r10781, i32 0
	%r10783 = bitcast %Objptr %r10782 to %Word32*
	%r10784 = load %Word32, %Word32* %r10783
	store %Word32 %r10784, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_423), (0x1, L_522))}
	%r10785 = load %Word32, %Word32* %regW32_0
	%r10786 = trunc %Word32 %r10785 to i1
	br i1 %r10786, label %L_522, label %L_423

L_421:
	; RW64(1): Word64  = Word64_sub (SW64(48): Word64, RW64(0): Word64)
	%r10787 = load %Pointer, %Pointer* %stackTop
	%r10788 = getelementptr inbounds i8, %Pointer %r10787, i32 48
	%r10789 = bitcast %Pointer %r10788 to %Word64*
	%r10790 = load %Word64, %Word64* %r10789
	%r10791 = load %Word64, %Word64* %regW64_0
	%r10792 = sub %Word64 %r10790, %r10791
	store %Word64 %r10792, %Word64* %regW64_1
	; RW32(0): Word32  = WordU64_lt (RW64(1): Word64, SW64(72): Word64)
	%r10793 = load %Word64, %Word64* %regW64_1
	%r10794 = load %Pointer, %Pointer* %stackTop
	%r10795 = getelementptr inbounds i8, %Pointer %r10794, i32 72
	%r10796 = bitcast %Pointer %r10795 to %Word64*
	%r10797 = load %Word64, %Word64* %r10796
	%r10799 = icmp ult %Word64 %r10793, %r10797
	%r10798 = zext i1 %r10799 to %Word32
	store %Word32 %r10798, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_422), (0x1, L_523))}
	%r10800 = load %Word32, %Word32* %regW32_0
	%r10801 = trunc %Word32 %r10800 to i1
	br i1 %r10801, label %L_523, label %L_422

L_420:
	; RW64(0): Word64  = WordS32_extdToWord64 (SW32(40): Word32)
	%r10802 = load %Pointer, %Pointer* %stackTop
	%r10803 = getelementptr inbounds i8, %Pointer %r10802, i32 40
	%r10804 = bitcast %Pointer %r10803 to %Word32*
	%r10805 = load %Word32, %Word32* %r10804
	%r10806 = sext %Word32 %r10805 to %Word64
	store %Word64 %r10806, %Word64* %regW64_0
	; SW64(72): Word64  = WordS32_extdToWord64 (RW32(0): Word32)
	%r10807 = load %Word32, %Word32* %regW32_0
	%r10808 = sext %Word32 %r10807 to %Word64
	%r10809 = load %Pointer, %Pointer* %stackTop
	%r10810 = getelementptr inbounds i8, %Pointer %r10809, i32 72
	%r10811 = bitcast %Pointer %r10810 to %Word64*
	store %Word64 %r10808, %Word64* %r10811
	; RW32(1): Word32  = WordU64_lt (SW64(48): Word64, RW64(0): Word64)
	%r10812 = load %Pointer, %Pointer* %stackTop
	%r10813 = getelementptr inbounds i8, %Pointer %r10812, i32 48
	%r10814 = bitcast %Pointer %r10813 to %Word64*
	%r10815 = load %Word64, %Word64* %r10814
	%r10816 = load %Word64, %Word64* %regW64_0
	%r10818 = icmp ult %Word64 %r10815, %r10816
	%r10817 = zext i1 %r10818 to %Word32
	store %Word32 %r10817, %Word32* %regW32_1
	; switch {test = RW32(1): Word32, default = None, cases = ((0x0, L_421), (0x1, L_525))}
	%r10819 = load %Word32, %Word32* %regW32_1
	%r10820 = trunc %Word32 %r10819 to i1
	br i1 %r10820, label %L_525, label %L_421

L_419:
	; Arith {prim = WordS32_subCheck, args = (SW32(64): Word32, SW32(40): Word32), dst = RW32(0): Word32, overflow = L_411, success = L_420}
	%r10821 = load %Pointer, %Pointer* %stackTop
	%r10822 = getelementptr inbounds i8, %Pointer %r10821, i32 64
	%r10823 = bitcast %Pointer %r10822 to %Word32*
	%r10824 = load %Word32, %Word32* %r10823
	%r10825 = load %Pointer, %Pointer* %stackTop
	%r10826 = getelementptr inbounds i8, %Pointer %r10825, i32 40
	%r10827 = bitcast %Pointer %r10826 to %Word32*
	%r10828 = load %Word32, %Word32* %r10827
	%r10829 = call {%Word32, i1} @llvm.ssub.with.overflow.i32(%Word32 %r10824, %Word32 %r10828)
	%r10830 = extractvalue {%Word32, i1} %r10829, 0
	%r10831 = extractvalue {%Word32, i1} %r10829, 1
	store %Word32 %r10830, %Word32* %regW32_0
	br i1 %r10831, label %L_411, label %L_420

loop_23:
	; RW32(0): Word32  = Word32_equal (SW32(40): Word32, SW32(64): Word32)
	%r10832 = load %Pointer, %Pointer* %stackTop
	%r10833 = getelementptr inbounds i8, %Pointer %r10832, i32 40
	%r10834 = bitcast %Pointer %r10833 to %Word32*
	%r10835 = load %Word32, %Word32* %r10834
	%r10836 = load %Pointer, %Pointer* %stackTop
	%r10837 = getelementptr inbounds i8, %Pointer %r10836, i32 64
	%r10838 = bitcast %Pointer %r10837 to %Word32*
	%r10839 = load %Word32, %Word32* %r10838
	%r10841 = icmp eq %Word32 %r10835, %r10839
	%r10840 = zext i1 %r10841 to %Word32
	store %Word32 %r10840, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_419), (0x1, L_526))}
	%r10842 = load %Word32, %Word32* %regW32_0
	%r10843 = trunc %Word32 %r10842 to i1
	br i1 %r10843, label %L_526, label %L_419

L_418:
	; SW32(40): Word32  = 0x0
	%r10844 = load %Pointer, %Pointer* %stackTop
	%r10845 = getelementptr inbounds i8, %Pointer %r10844, i32 40
	%r10846 = bitcast %Pointer %r10845 to %Word32*
	store %Word32 0, %Word32* %r10846
	; Goto loop_23
	br label %loop_23

L_417:
	; RP(0): Objptr (opt_34, opt_33, opt_32, opt_31)  = Cast (glob {index = 5, isRoot = true, ty = Objptr (opt_32)}, Objptr (opt_34, opt_33, opt_32, opt_31))
	%r10847 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 5
	%r10848 = load %Objptr, %Objptr* %r10847
	%r10849 = bitcast %Objptr %r10848 to %Objptr
	store %Objptr %r10849, %Objptr* %regP_0
	; Goto L_409
	br label %L_409

L_416:
	; SW64(48): Word64  = OW64 (SP(0): Objptr (opt_3), ~16): Word64
	%r10850 = load %Pointer, %Pointer* %stackTop
	%r10851 = getelementptr inbounds i8, %Pointer %r10850, i32 0
	%r10852 = bitcast %Pointer %r10851 to %Objptr*
	%r10853 = load %Objptr, %Objptr* %r10852
	%r10854 = getelementptr inbounds i8, %Objptr %r10853, i32 -16
	%r10855 = bitcast %Objptr %r10854 to %Word64*
	%r10856 = load %Word64, %Word64* %r10855
	%r10857 = load %Pointer, %Pointer* %stackTop
	%r10858 = getelementptr inbounds i8, %Pointer %r10857, i32 48
	%r10859 = bitcast %Pointer %r10858 to %Word64*
	store %Word64 %r10856, %Word64* %r10859
	; SP(56): Objptr (opt_14)  = OP (SP(40): Objptr (opt_15), 0): Objptr (opt_14)
	%r10860 = load %Pointer, %Pointer* %stackTop
	%r10861 = getelementptr inbounds i8, %Pointer %r10860, i32 40
	%r10862 = bitcast %Pointer %r10861 to %Objptr*
	%r10863 = load %Objptr, %Objptr* %r10862
	%r10864 = getelementptr inbounds i8, %Objptr %r10863, i32 0
	%r10865 = bitcast %Objptr %r10864 to %Objptr*
	%r10866 = load %Objptr, %Objptr* %r10865
	%r10867 = load %Pointer, %Pointer* %stackTop
	%r10868 = getelementptr inbounds i8, %Pointer %r10867, i32 56
	%r10869 = bitcast %Pointer %r10868 to %Objptr*
	store %Objptr %r10866, %Objptr* %r10869
	; SW32(64): Word32  = WordU64_extdToWord32 (SW64(48): Word64)
	%r10870 = load %Pointer, %Pointer* %stackTop
	%r10871 = getelementptr inbounds i8, %Pointer %r10870, i32 48
	%r10872 = bitcast %Pointer %r10871 to %Word64*
	%r10873 = load %Word64, %Word64* %r10872
	%r10874 = trunc %Word64 %r10873 to %Word32
	%r10875 = load %Pointer, %Pointer* %stackTop
	%r10876 = getelementptr inbounds i8, %Pointer %r10875, i32 64
	%r10877 = bitcast %Pointer %r10876 to %Word32*
	store %Word32 %r10874, %Word32* %r10877
	; RW64(0): Word64  = WordS32_extdToWord64 (SW32(64): Word32)
	%r10878 = load %Pointer, %Pointer* %stackTop
	%r10879 = getelementptr inbounds i8, %Pointer %r10878, i32 64
	%r10880 = bitcast %Pointer %r10879 to %Word32*
	%r10881 = load %Word32, %Word32* %r10880
	%r10882 = sext %Word32 %r10881 to %Word64
	store %Word64 %r10882, %Word64* %regW64_0
	; RW32(0): Word32  = Word64_equal (RW64(0): Word64, SW64(48): Word64)
	%r10883 = load %Word64, %Word64* %regW64_0
	%r10884 = load %Pointer, %Pointer* %stackTop
	%r10885 = getelementptr inbounds i8, %Pointer %r10884, i32 48
	%r10886 = bitcast %Pointer %r10885 to %Word64*
	%r10887 = load %Word64, %Word64* %r10886
	%r10889 = icmp eq %Word64 %r10883, %r10887
	%r10888 = zext i1 %r10889 to %Word32
	store %Word32 %r10888, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_417), (0x1, L_418))}
	%r10890 = load %Word32, %Word32* %regW32_0
	%r10891 = trunc %Word32 %r10890 to i1
	br i1 %r10891, label %L_418, label %L_417

put_0:
	; Push(-56)
	%r10892 = load %Pointer, %Pointer* %stackTop
	%r10893 = getelementptr inbounds i8, %Pointer %r10892, i32 -56
	store %Pointer %r10893, %Pointer* %stackTop
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r10894 = bitcast %struct.GC_state* @gcState to %Pointer
	%r10895 = getelementptr inbounds i8, %Pointer %r10894, i32 8
	%r10896 = bitcast %Pointer %r10895 to %CPointer*
	%r10897 = load %CPointer, %CPointer* %r10896
	%r10898 = load %Pointer, %Pointer* %frontier
	%r10900 = icmp ult %Pointer %r10897, %r10898
	%r10899 = zext i1 %r10900 to %Word32
	store %Word32 %r10899, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_416), (0x1, L_535))}
	%r10901 = load %Word32, %Word32* %regW32_0
	%r10902 = trunc %Word32 %r10901 to i1
	br i1 %r10902, label %L_535, label %L_416

L_415:
	; SQ(16): Label L_537  = L_537
	%r10903 = inttoptr %Word32 86 to %CPointer
	%r10904 = load %Pointer, %Pointer* %stackTop
	%r10905 = getelementptr inbounds i8, %Pointer %r10904, i32 16
	%r10906 = bitcast %Pointer %r10905 to %CPointer*
	store %CPointer %r10903, %CPointer* %r10906
	; RQ(41): CPointer  = CPointer_add (<StackTop>, 0x18)
	%r10907 = load %Pointer, %Pointer* %stackTop
	%r10909 = ptrtoint %Pointer %r10907 to %uintptr_t
	%r10910 = add %uintptr_t %r10909, 24
	%r10908 = inttoptr %uintptr_t %r10910 to %Pointer
	store %CPointer %r10908, %CPointer* %regQ_41
	; RW64(8): Word64  = CPointer_diff (RQ(41): CPointer, OQ (<GCState>, 1616): CPointer)
	%r10911 = load %CPointer, %CPointer* %regQ_41
	%r10912 = bitcast %struct.GC_state* @gcState to %Pointer
	%r10913 = getelementptr inbounds i8, %Pointer %r10912, i32 1616
	%r10914 = bitcast %Pointer %r10913 to %CPointer*
	%r10915 = load %CPointer, %CPointer* %r10914
	%r10917 = ptrtoint %Pointer %r10911 to %uintptr_t
	%r10918 = ptrtoint %Pointer %r10915 to %uintptr_t
	%r10916 = sub %uintptr_t %r10917, %r10918
	store %Word64 %r10916, %Word64* %regW64_8
	; OW64 (<GCState>, 32): ExnStack  = Cast (RW64(8): Word64, ExnStack)
	%r10919 = load %Word64, %Word64* %regW64_8
	%r10920 = bitcast %Word64 %r10919 to %Word64
	%r10921 = bitcast %struct.GC_state* @gcState to %Pointer
	%r10922 = getelementptr inbounds i8, %Pointer %r10921, i32 32
	%r10923 = bitcast %Pointer %r10922 to %Word64*
	store %Word64 %r10920, %Word64* %r10923
	; SP(56): Objptr (opt_30)  = RP(2): Objptr (opt_30)
	%r10924 = load %Objptr, %Objptr* %regP_2
	%r10925 = load %Pointer, %Pointer* %stackTop
	%r10926 = getelementptr inbounds i8, %Pointer %r10925, i32 56
	%r10927 = bitcast %Pointer %r10926 to %Objptr*
	store %Objptr %r10924, %Objptr* %r10927
	; SP(64): Objptr (opt_15)  = SP(40): Objptr (opt_15)
	%r10928 = load %Pointer, %Pointer* %stackTop
	%r10929 = getelementptr inbounds i8, %Pointer %r10928, i32 40
	%r10930 = bitcast %Pointer %r10929 to %Objptr*
	%r10931 = load %Objptr, %Objptr* %r10930
	%r10932 = load %Pointer, %Pointer* %stackTop
	%r10933 = getelementptr inbounds i8, %Pointer %r10932, i32 64
	%r10934 = bitcast %Pointer %r10933 to %Objptr*
	store %Objptr %r10931, %Objptr* %r10934
	%r10935 = load %Pointer, %Pointer* %stackTop
	%r10936 = getelementptr inbounds i8, %Pointer %r10935, i32 48
	%r10937 = bitcast %Pointer %r10936 to %uintptr_t*
	store %uintptr_t 67, %uintptr_t* %r10937
	; Push(56)
	%r10938 = load %Pointer, %Pointer* %stackTop
	%r10939 = getelementptr inbounds i8, %Pointer %r10938, i32 56
	store %Pointer %r10939, %Pointer* %stackTop
	br label %flushBuf_0

L_414:
	; RW32(2): Word32  = WordS32_lt (SW32(64): Word32, RW32(1): Word32)
	%r10940 = load %Pointer, %Pointer* %stackTop
	%r10941 = getelementptr inbounds i8, %Pointer %r10940, i32 64
	%r10942 = bitcast %Pointer %r10941 to %Word32*
	%r10943 = load %Word32, %Word32* %r10942
	%r10944 = load %Word32, %Word32* %regW32_1
	%r10946 = icmp slt %Word32 %r10943, %r10944
	%r10945 = zext i1 %r10946 to %Word32
	store %Word32 %r10945, %Word32* %regW32_2
	; switch {test = RW32(2): Word32, default = None, cases = ((0x0, L_415), (0x1, L_541))}
	%r10947 = load %Word32, %Word32* %regW32_2
	%r10948 = trunc %Word32 %r10947 to i1
	br i1 %r10948, label %L_541, label %L_415

L_413:
	; Goto L_408
	br label %L_408

L_412:
	; RW64(0): Word64  = OW64 (SP(48): Objptr (opt_11), ~16): Word64
	%r10949 = load %Pointer, %Pointer* %stackTop
	%r10950 = getelementptr inbounds i8, %Pointer %r10949, i32 48
	%r10951 = bitcast %Pointer %r10950 to %Objptr*
	%r10952 = load %Objptr, %Objptr* %r10951
	%r10953 = getelementptr inbounds i8, %Objptr %r10952, i32 -16
	%r10954 = bitcast %Objptr %r10953 to %Word64*
	%r10955 = load %Word64, %Word64* %r10954
	store %Word64 %r10955, %Word64* %regW64_0
	; RW32(1): Word32  = WordU64_extdToWord32 (RW64(0): Word64)
	%r10956 = load %Word64, %Word64* %regW64_0
	%r10957 = trunc %Word64 %r10956 to %Word32
	store %Word32 %r10957, %Word32* %regW32_1
	; RW64(1): Word64  = WordS32_extdToWord64 (RW32(1): Word32)
	%r10958 = load %Word32, %Word32* %regW32_1
	%r10959 = sext %Word32 %r10958 to %Word64
	store %Word64 %r10959, %Word64* %regW64_1
	; RW32(2): Word32  = Word64_equal (RW64(1): Word64, RW64(0): Word64)
	%r10960 = load %Word64, %Word64* %regW64_1
	%r10961 = load %Word64, %Word64* %regW64_0
	%r10963 = icmp eq %Word64 %r10960, %r10961
	%r10962 = zext i1 %r10963 to %Word32
	store %Word32 %r10962, %Word32* %regW32_2
	; switch {test = RW32(2): Word32, default = None, cases = ((0x0, L_413), (0x1, L_414))}
	%r10964 = load %Word32, %Word32* %regW32_2
	%r10965 = trunc %Word32 %r10964 to i1
	br i1 %r10965, label %L_414, label %L_413

L_411:
	; RP(0): Objptr (opt_34, opt_33, opt_32, opt_31)  = Cast (0x1, Objptr (opt_34, opt_33, opt_32, opt_31))
	%r10966 = inttoptr %Word64 1 to %Objptr
	store %Objptr %r10966, %Objptr* %regP_0
	; Goto L_409
	br label %L_409

L_410:
	; Arith {prim = WordS32_addCheck, args = (RW32(0): Word32, RW32(1): Word32), dst = SW32(64): Word32, overflow = L_411, success = L_412}
	%r10967 = load %Word32, %Word32* %regW32_0
	%r10968 = load %Word32, %Word32* %regW32_1
	%r10969 = call {%Word32, i1} @llvm.sadd.with.overflow.i32(%Word32 %r10967, %Word32 %r10968)
	%r10970 = extractvalue {%Word32, i1} %r10969, 0
	%r10971 = extractvalue {%Word32, i1} %r10969, 1
	%r10972 = load %Pointer, %Pointer* %stackTop
	%r10973 = getelementptr inbounds i8, %Pointer %r10972, i32 64
	%r10974 = bitcast %Pointer %r10973 to %Word32*
	store %Word32 %r10970, %Word32* %r10974
	br i1 %r10971, label %L_411, label %L_412

L_409:
	; RP(1): Objptr (opt_15)  = OP (SP(32): Objptr (opt_18), 0): Objptr (opt_15)
	%r10975 = load %Pointer, %Pointer* %stackTop
	%r10976 = getelementptr inbounds i8, %Pointer %r10975, i32 32
	%r10977 = bitcast %Pointer %r10976 to %Objptr*
	%r10978 = load %Objptr, %Objptr* %r10977
	%r10979 = getelementptr inbounds i8, %Objptr %r10978, i32 0
	%r10980 = bitcast %Objptr %r10979 to %Objptr*
	%r10981 = load %Objptr, %Objptr* %r10980
	store %Objptr %r10981, %Objptr* %regP_1
	; RP(2): Objptr (opt_3)  = OP (RP(1): Objptr (opt_15), 16): Objptr (opt_3)
	%r10982 = load %Objptr, %Objptr* %regP_1
	%r10983 = getelementptr inbounds i8, %Objptr %r10982, i32 16
	%r10984 = bitcast %Objptr %r10983 to %Objptr*
	%r10985 = load %Objptr, %Objptr* %r10984
	store %Objptr %r10985, %Objptr* %regP_2
	; CW64 (<Frontier>)  = 0x45
	%r10986 = load %Pointer, %Pointer* %frontier
	%r10987 = bitcast %Pointer %r10986 to %Word64*
	store %Word64 69, %Word64* %r10987
	; RQ(40): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r10988 = load %Pointer, %Pointer* %frontier
	%r10990 = ptrtoint %Pointer %r10988 to %uintptr_t
	%r10991 = add %uintptr_t %r10990, 8
	%r10989 = inttoptr %uintptr_t %r10991 to %Pointer
	store %CPointer %r10989, %CPointer* %regQ_40
	; RP(3): Objptr (opt_34)  = Cast (RQ(40): CPointer, Objptr (opt_34))
	%r10992 = load %CPointer, %CPointer* %regQ_40
	%r10993 = bitcast %CPointer %r10992 to %Objptr
	store %Objptr %r10993, %Objptr* %regP_3
	; <Frontier>  = CPointer_add (<Frontier>, 0x20)
	%r10994 = load %Pointer, %Pointer* %frontier
	%r10996 = ptrtoint %Pointer %r10994 to %uintptr_t
	%r10997 = add %uintptr_t %r10996, 32
	%r10995 = inttoptr %uintptr_t %r10997 to %Pointer
	store %Pointer %r10995, %Pointer* %frontier
	; OP (RP(3): Objptr (opt_34), 0): Objptr (opt_34, opt_33, opt_32, opt_31)  = RP(0): Objptr (opt_34, opt_33, opt_32, opt_31)
	%r10998 = load %Objptr, %Objptr* %regP_0
	%r10999 = load %Objptr, %Objptr* %regP_3
	%r11000 = getelementptr inbounds i8, %Objptr %r10999, i32 0
	%r11001 = bitcast %Objptr %r11000 to %Objptr*
	store %Objptr %r10998, %Objptr* %r11001
	; OP (RP(3): Objptr (opt_34), 8): Objptr (opt_3)  = glob {index = 133, isRoot = true, ty = Objptr (opt_3)}
	%r11002 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 133
	%r11003 = load %Objptr, %Objptr* %r11002
	%r11004 = load %Objptr, %Objptr* %regP_3
	%r11005 = getelementptr inbounds i8, %Objptr %r11004, i32 8
	%r11006 = bitcast %Objptr %r11005 to %Objptr*
	store %Objptr %r11003, %Objptr* %r11006
	; OP (RP(3): Objptr (opt_34), 16): Objptr (opt_3)  = RP(2): Objptr (opt_3)
	%r11007 = load %Objptr, %Objptr* %regP_2
	%r11008 = load %Objptr, %Objptr* %regP_3
	%r11009 = getelementptr inbounds i8, %Objptr %r11008, i32 16
	%r11010 = bitcast %Objptr %r11009 to %Objptr*
	store %Objptr %r11007, %Objptr* %r11010
	; OW64 (<GCState>, 32): ExnStack  = SW64(24): ExnStack
	%r11011 = load %Pointer, %Pointer* %stackTop
	%r11012 = getelementptr inbounds i8, %Pointer %r11011, i32 24
	%r11013 = bitcast %Pointer %r11012 to %Word64*
	%r11014 = load %Word64, %Word64* %r11013
	%r11015 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11016 = getelementptr inbounds i8, %Pointer %r11015, i32 32
	%r11017 = bitcast %Pointer %r11016 to %Word64*
	store %Word64 %r11014, %Word64* %r11017
	; glob {index = 0, isRoot = false, ty = Objptr (opt_34, opt_33, opt_32, opt_31)}  = Cast (RP(3): Objptr (opt_34), Objptr (opt_34, opt_33, opt_32, opt_31))
	%r11018 = load %Objptr, %Objptr* %regP_3
	%r11019 = bitcast %Objptr %r11018 to %Objptr
	%r11020 = getelementptr inbounds [1 x %Objptr], [1 x %Objptr]* @globalObjptrNonRoot, i32 0, i32 0
	store %Objptr %r11019, %Objptr* %r11020
	; Raise
	%r11021 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11022 = getelementptr inbounds i8, %Pointer %r11021, i32 1616
	%r11023 = bitcast %Pointer %r11022 to %Pointer*
	%r11024 = load %Pointer, %Pointer* %r11023
	%r11025 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11026 = getelementptr inbounds i8, %Pointer %r11025, i32 32
	%r11027 = bitcast %Pointer %r11026 to i32*
	%r11028 = load i32, i32* %r11027
	%r11029 = getelementptr inbounds i8, %Pointer %r11024, i32 %r11028
	store %Pointer %r11029, %Pointer* %stackTop
	%r11030 = load %Pointer, %Pointer* %stackTop
	%r11031 = getelementptr inbounds i8, %Pointer %r11030, i32 -8
	%r11032 = bitcast %Pointer %r11031 to %uintptr_t*
	%r11033 = load %uintptr_t, %uintptr_t* %r11032
	store %uintptr_t %r11033, %uintptr_t* %l_nextFun
	br label %top

L_408:
	; RP(0): Objptr (opt_34, opt_33, opt_32, opt_31)  = Cast (glob {index = 10, isRoot = true, ty = Objptr (opt_32)}, Objptr (opt_34, opt_33, opt_32, opt_31))
	%r11034 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 10
	%r11035 = load %Objptr, %Objptr* %r11034
	%r11036 = bitcast %Objptr %r11035 to %Objptr
	store %Objptr %r11036, %Objptr* %regP_0
	; Goto L_409
	br label %L_409

L_407:
	; Goto L_408
	br label %L_408

L_406:
	; RP(0): Objptr (opt_10)  = OP (Cast (RP(1): Objptr (opt_41, opt_40), Objptr (opt_40)), 8): Objptr (opt_10)
	%r11037 = load %Objptr, %Objptr* %regP_1
	%r11038 = bitcast %Objptr %r11037 to %Objptr
	%r11039 = getelementptr inbounds i8, %Objptr %r11038, i32 8
	%r11040 = bitcast %Objptr %r11039 to %Objptr*
	%r11041 = load %Objptr, %Objptr* %r11040
	store %Objptr %r11041, %Objptr* %regP_0
	; SP(48): Objptr (opt_11)  = OP (Cast (RP(1): Objptr (opt_41, opt_40), Objptr (opt_40)), 0): Objptr (opt_11)
	%r11042 = load %Objptr, %Objptr* %regP_1
	%r11043 = bitcast %Objptr %r11042 to %Objptr
	%r11044 = getelementptr inbounds i8, %Objptr %r11043, i32 0
	%r11045 = bitcast %Objptr %r11044 to %Objptr*
	%r11046 = load %Objptr, %Objptr* %r11045
	%r11047 = load %Pointer, %Pointer* %stackTop
	%r11048 = getelementptr inbounds i8, %Pointer %r11047, i32 48
	%r11049 = bitcast %Pointer %r11048 to %Objptr*
	store %Objptr %r11046, %Objptr* %r11049
	; CW64 (<Frontier>)  = 0x3D
	%r11050 = load %Pointer, %Pointer* %frontier
	%r11051 = bitcast %Pointer %r11050 to %Word64*
	store %Word64 61, %Word64* %r11051
	; RQ(39): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r11052 = load %Pointer, %Pointer* %frontier
	%r11054 = ptrtoint %Pointer %r11052 to %uintptr_t
	%r11055 = add %uintptr_t %r11054, 8
	%r11053 = inttoptr %uintptr_t %r11055 to %Pointer
	store %CPointer %r11053, %CPointer* %regQ_39
	; RP(2): Objptr (opt_30)  = Cast (RQ(39): CPointer, Objptr (opt_30))
	%r11056 = load %CPointer, %CPointer* %regQ_39
	%r11057 = bitcast %CPointer %r11056 to %Objptr
	store %Objptr %r11057, %Objptr* %regP_2
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r11058 = load %Pointer, %Pointer* %frontier
	%r11060 = ptrtoint %Pointer %r11058 to %uintptr_t
	%r11061 = add %uintptr_t %r11060, 24
	%r11059 = inttoptr %uintptr_t %r11061 to %Pointer
	store %Pointer %r11059, %Pointer* %frontier
	; OP (RP(2): Objptr (opt_30), 0): Objptr (opt_10)  = RP(0): Objptr (opt_10)
	%r11062 = load %Objptr, %Objptr* %regP_0
	%r11063 = load %Objptr, %Objptr* %regP_2
	%r11064 = getelementptr inbounds i8, %Objptr %r11063, i32 0
	%r11065 = bitcast %Objptr %r11064 to %Objptr*
	store %Objptr %r11062, %Objptr* %r11065
	; OP (RP(2): Objptr (opt_30), 8): Objptr (opt_11)  = SP(48): Objptr (opt_11)
	%r11066 = load %Pointer, %Pointer* %stackTop
	%r11067 = getelementptr inbounds i8, %Pointer %r11066, i32 48
	%r11068 = bitcast %Pointer %r11067 to %Objptr*
	%r11069 = load %Objptr, %Objptr* %r11068
	%r11070 = load %Objptr, %Objptr* %regP_2
	%r11071 = getelementptr inbounds i8, %Objptr %r11070, i32 8
	%r11072 = bitcast %Objptr %r11071 to %Objptr*
	store %Objptr %r11069, %Objptr* %r11072
	; RW32(0): Word32  = OW32 (glob {index = 14, isRoot = true, ty = Objptr (opt_10)}, 0): Word32
	%r11073 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 14
	%r11074 = load %Objptr, %Objptr* %r11073
	%r11075 = getelementptr inbounds i8, %Objptr %r11074, i32 0
	%r11076 = bitcast %Objptr %r11075 to %Word32*
	%r11077 = load %Word32, %Word32* %r11076
	store %Word32 %r11077, %Word32* %regW32_0
	; SW64(56): Word64  = OW64 (SP(0): Objptr (opt_3), ~16): Word64
	%r11078 = load %Pointer, %Pointer* %stackTop
	%r11079 = getelementptr inbounds i8, %Pointer %r11078, i32 0
	%r11080 = bitcast %Pointer %r11079 to %Objptr*
	%r11081 = load %Objptr, %Objptr* %r11080
	%r11082 = getelementptr inbounds i8, %Objptr %r11081, i32 -16
	%r11083 = bitcast %Objptr %r11082 to %Word64*
	%r11084 = load %Word64, %Word64* %r11083
	%r11085 = load %Pointer, %Pointer* %stackTop
	%r11086 = getelementptr inbounds i8, %Pointer %r11085, i32 56
	%r11087 = bitcast %Pointer %r11086 to %Word64*
	store %Word64 %r11084, %Word64* %r11087
	; RW32(1): Word32  = WordU64_extdToWord32 (SW64(56): Word64)
	%r11088 = load %Pointer, %Pointer* %stackTop
	%r11089 = getelementptr inbounds i8, %Pointer %r11088, i32 56
	%r11090 = bitcast %Pointer %r11089 to %Word64*
	%r11091 = load %Word64, %Word64* %r11090
	%r11092 = trunc %Word64 %r11091 to %Word32
	store %Word32 %r11092, %Word32* %regW32_1
	; RW64(0): Word64  = WordS32_extdToWord64 (RW32(1): Word32)
	%r11093 = load %Word32, %Word32* %regW32_1
	%r11094 = sext %Word32 %r11093 to %Word64
	store %Word64 %r11094, %Word64* %regW64_0
	; RW32(2): Word32  = Word64_equal (RW64(0): Word64, SW64(56): Word64)
	%r11095 = load %Word64, %Word64* %regW64_0
	%r11096 = load %Pointer, %Pointer* %stackTop
	%r11097 = getelementptr inbounds i8, %Pointer %r11096, i32 56
	%r11098 = bitcast %Pointer %r11097 to %Word64*
	%r11099 = load %Word64, %Word64* %r11098
	%r11101 = icmp eq %Word64 %r11095, %r11099
	%r11100 = zext i1 %r11101 to %Word32
	store %Word32 %r11100, %Word32* %regW32_2
	; switch {test = RW32(2): Word32, default = None, cases = ((0x0, L_407), (0x1, L_410))}
	%r11102 = load %Word32, %Word32* %regW32_2
	%r11103 = trunc %Word32 %r11102 to i1
	br i1 %r11103, label %L_410, label %L_407

L_405:
	; SP(32): Objptr (opt_18)  = OP (SP(8): Objptr (opt_27), 0): Objptr (opt_18)
	%r11104 = load %Pointer, %Pointer* %stackTop
	%r11105 = getelementptr inbounds i8, %Pointer %r11104, i32 8
	%r11106 = bitcast %Pointer %r11105 to %Objptr*
	%r11107 = load %Objptr, %Objptr* %r11106
	%r11108 = getelementptr inbounds i8, %Objptr %r11107, i32 0
	%r11109 = bitcast %Objptr %r11108 to %Objptr*
	%r11110 = load %Objptr, %Objptr* %r11109
	%r11111 = load %Pointer, %Pointer* %stackTop
	%r11112 = getelementptr inbounds i8, %Pointer %r11111, i32 32
	%r11113 = bitcast %Pointer %r11112 to %Objptr*
	store %Objptr %r11110, %Objptr* %r11113
	; RP(0): Objptr (opt_16)  = OP (SP(32): Objptr (opt_18), 16): Objptr (opt_16)
	%r11114 = load %Pointer, %Pointer* %stackTop
	%r11115 = getelementptr inbounds i8, %Pointer %r11114, i32 32
	%r11116 = bitcast %Pointer %r11115 to %Objptr*
	%r11117 = load %Objptr, %Objptr* %r11116
	%r11118 = getelementptr inbounds i8, %Objptr %r11117, i32 16
	%r11119 = bitcast %Objptr %r11118 to %Objptr*
	%r11120 = load %Objptr, %Objptr* %r11119
	store %Objptr %r11120, %Objptr* %regP_0
	; SP(40): Objptr (opt_15)  = OP (SP(32): Objptr (opt_18), 24): Objptr (opt_15)
	%r11121 = load %Pointer, %Pointer* %stackTop
	%r11122 = getelementptr inbounds i8, %Pointer %r11121, i32 32
	%r11123 = bitcast %Pointer %r11122 to %Objptr*
	%r11124 = load %Objptr, %Objptr* %r11123
	%r11125 = getelementptr inbounds i8, %Objptr %r11124, i32 24
	%r11126 = bitcast %Objptr %r11125 to %Objptr*
	%r11127 = load %Objptr, %Objptr* %r11126
	%r11128 = load %Pointer, %Pointer* %stackTop
	%r11129 = getelementptr inbounds i8, %Pointer %r11128, i32 40
	%r11130 = bitcast %Pointer %r11129 to %Objptr*
	store %Objptr %r11127, %Objptr* %r11130
	; RP(1): Objptr (opt_41, opt_40)  = OP (RP(0): Objptr (opt_16), 0): Objptr (opt_41, opt_40)
	%r11131 = load %Objptr, %Objptr* %regP_0
	%r11132 = getelementptr inbounds i8, %Objptr %r11131, i32 0
	%r11133 = bitcast %Objptr %r11132 to %Objptr*
	%r11134 = load %Objptr, %Objptr* %r11133
	store %Objptr %r11134, %Objptr* %regP_1
	; RW64(0): Word64  = WordU64_rshift (OW64 (RP(1): Objptr (opt_41, opt_40), ~8): Word64, 0x1)
	%r11135 = load %Objptr, %Objptr* %regP_1
	%r11136 = getelementptr inbounds i8, %Objptr %r11135, i32 -8
	%r11137 = bitcast %Objptr %r11136 to %Word64*
	%r11138 = load %Word64, %Word64* %r11137
	%r11139 = zext %Word32 1 to %Word64
	%r11140 = lshr %Word64 %r11138, %r11139
	store %Word64 %r11140, %Word64* %regW64_0
	; switch {test = RW64(0): Word64, default = None, cases = ((0x28, L_406), (0x29, L_558))}
	%r11141 = load %Word64, %Word64* %regW64_0
	switch %Word64 %r11141, label %L_406 [
		%Word64 41, label %L_558
	]

L_404:
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r11142 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11143 = getelementptr inbounds i8, %Pointer %r11142, i32 8
	%r11144 = bitcast %Pointer %r11143 to %CPointer*
	%r11145 = load %CPointer, %CPointer* %r11144
	%r11146 = load %Pointer, %Pointer* %frontier
	%r11148 = icmp ult %Pointer %r11145, %r11146
	%r11147 = zext i1 %r11148 to %Word32
	store %Word32 %r11147, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_405), (0x1, L_590))}
	%r11149 = load %Word32, %Word32* %regW32_0
	%r11150 = trunc %Word32 %r11149 to i1
	br i1 %r11150, label %L_590, label %L_405

L_403:
	; SW64(24): ExnStack  = OW64 (<GCState>, 32): ExnStack
	%r11151 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11152 = getelementptr inbounds i8, %Pointer %r11151, i32 32
	%r11153 = bitcast %Pointer %r11152 to %Word64*
	%r11154 = load %Word64, %Word64* %r11153
	%r11155 = load %Pointer, %Pointer* %stackTop
	%r11156 = getelementptr inbounds i8, %Pointer %r11155, i32 24
	%r11157 = bitcast %Pointer %r11156 to %Word64*
	store %Word64 %r11154, %Word64* %r11157
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 24): CPointer, <StackTop>)
	%r11158 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11159 = getelementptr inbounds i8, %Pointer %r11158, i32 24
	%r11160 = bitcast %Pointer %r11159 to %CPointer*
	%r11161 = load %CPointer, %CPointer* %r11160
	%r11162 = load %Pointer, %Pointer* %stackTop
	%r11164 = icmp ult %Pointer %r11161, %r11162
	%r11163 = zext i1 %r11164 to %Word32
	store %Word32 %r11163, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_404), (0x1, L_590))}
	%r11165 = load %Word32, %Word32* %regW32_0
	%r11166 = trunc %Word32 %r11165 to i1
	br i1 %r11166, label %L_590, label %L_404

print_5:
	; Goto L_403
	br label %L_403

L_402:
	; Push(-24)
	%r11167 = load %Pointer, %Pointer* %stackTop
	%r11168 = getelementptr inbounds i8, %Pointer %r11167, i32 -24
	store %Pointer %r11168, %Pointer* %stackTop
	; Goto L_10
	br label %L_10

L_401:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 66}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_402}
	; GetOperands
	%r11169 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11170 = load %Pointer, %Pointer* %stackTop
	%r11171 = getelementptr inbounds i8, %Pointer %r11170, i32 16
	%r11172 = bitcast %Pointer %r11171 to %uintptr_t*
	store %uintptr_t 66, %uintptr_t* %r11172
	; Push(24)
	%r11173 = load %Pointer, %Pointer* %stackTop
	%r11174 = getelementptr inbounds i8, %Pointer %r11173, i32 24
	store %Pointer %r11174, %Pointer* %stackTop
	; FlushFrontier
	%r11175 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11176 = getelementptr inbounds i8, %Pointer %r11175, i32 0
	%r11177 = bitcast %Pointer %r11176 to %Pointer*
	%r11178 = load %Pointer, %Pointer* %frontier
	store %Pointer %r11178, %Pointer* %r11177
	; FlushStackTop
	%r11179 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11180 = getelementptr inbounds i8, %Pointer %r11179, i32 16
	%r11181 = bitcast %Pointer %r11180 to %Pointer*
	%r11182 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r11182, %Pointer* %r11181
	; Call
	call void @GC_collect(%Pointer %r11169, %Word64 0, %Word32 0)
	; CacheFrontier
	%r11183 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11184 = getelementptr inbounds i8, %Pointer %r11183, i32 0
	%r11185 = bitcast %Pointer %r11184 to %Pointer*
	%r11186 = load %Pointer, %Pointer* %r11185
	store %Pointer %r11186, %Pointer* %frontier
	; CacheStackTop
	%r11187 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11188 = getelementptr inbounds i8, %Pointer %r11187, i32 16
	%r11189 = bitcast %Pointer %r11188 to %Pointer*
	%r11190 = load %Pointer, %Pointer* %r11189
	store %Pointer %r11190, %Pointer* %stackTop
	br label %L_402

L_400:
	; Push(-72)
	%r11191 = load %Pointer, %Pointer* %stackTop
	%r11192 = getelementptr inbounds i8, %Pointer %r11191, i32 -72
	store %Pointer %r11192, %Pointer* %stackTop
	; Goto L_11
	br label %L_11

L_399:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 65}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_400}
	; GetOperands
	%r11193 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11194 = load %Pointer, %Pointer* %stackTop
	%r11195 = getelementptr inbounds i8, %Pointer %r11194, i32 64
	%r11196 = bitcast %Pointer %r11195 to %uintptr_t*
	store %uintptr_t 65, %uintptr_t* %r11196
	; Push(72)
	%r11197 = load %Pointer, %Pointer* %stackTop
	%r11198 = getelementptr inbounds i8, %Pointer %r11197, i32 72
	store %Pointer %r11198, %Pointer* %stackTop
	; FlushFrontier
	%r11199 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11200 = getelementptr inbounds i8, %Pointer %r11199, i32 0
	%r11201 = bitcast %Pointer %r11200 to %Pointer*
	%r11202 = load %Pointer, %Pointer* %frontier
	store %Pointer %r11202, %Pointer* %r11201
	; FlushStackTop
	%r11203 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11204 = getelementptr inbounds i8, %Pointer %r11203, i32 16
	%r11205 = bitcast %Pointer %r11204 to %Pointer*
	%r11206 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r11206, %Pointer* %r11205
	; Call
	call void @GC_collect(%Pointer %r11193, %Word64 0, %Word32 0)
	; CacheFrontier
	%r11207 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11208 = getelementptr inbounds i8, %Pointer %r11207, i32 0
	%r11209 = bitcast %Pointer %r11208 to %Pointer*
	%r11210 = load %Pointer, %Pointer* %r11209
	store %Pointer %r11210, %Pointer* %frontier
	; CacheStackTop
	%r11211 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11212 = getelementptr inbounds i8, %Pointer %r11211, i32 16
	%r11213 = bitcast %Pointer %r11212 to %Pointer*
	%r11214 = load %Pointer, %Pointer* %r11213
	store %Pointer %r11214, %Pointer* %stackTop
	br label %L_400

L_398:
	; Push(-64)
	%r11215 = load %Pointer, %Pointer* %stackTop
	%r11216 = getelementptr inbounds i8, %Pointer %r11215, i32 -64
	store %Pointer %r11216, %Pointer* %stackTop
	; Goto L_33
	br label %L_33

L_397:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 64}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_398}
	; GetOperands
	%r11217 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11218 = load %Pointer, %Pointer* %stackTop
	%r11219 = getelementptr inbounds i8, %Pointer %r11218, i32 56
	%r11220 = bitcast %Pointer %r11219 to %uintptr_t*
	store %uintptr_t 64, %uintptr_t* %r11220
	; Push(64)
	%r11221 = load %Pointer, %Pointer* %stackTop
	%r11222 = getelementptr inbounds i8, %Pointer %r11221, i32 64
	store %Pointer %r11222, %Pointer* %stackTop
	; FlushFrontier
	%r11223 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11224 = getelementptr inbounds i8, %Pointer %r11223, i32 0
	%r11225 = bitcast %Pointer %r11224 to %Pointer*
	%r11226 = load %Pointer, %Pointer* %frontier
	store %Pointer %r11226, %Pointer* %r11225
	; FlushStackTop
	%r11227 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11228 = getelementptr inbounds i8, %Pointer %r11227, i32 16
	%r11229 = bitcast %Pointer %r11228 to %Pointer*
	%r11230 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r11230, %Pointer* %r11229
	; Call
	call void @GC_collect(%Pointer %r11217, %Word64 0, %Word32 0)
	; CacheFrontier
	%r11231 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11232 = getelementptr inbounds i8, %Pointer %r11231, i32 0
	%r11233 = bitcast %Pointer %r11232 to %Pointer*
	%r11234 = load %Pointer, %Pointer* %r11233
	store %Pointer %r11234, %Pointer* %frontier
	; CacheStackTop
	%r11235 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11236 = getelementptr inbounds i8, %Pointer %r11235, i32 16
	%r11237 = bitcast %Pointer %r11236 to %Pointer*
	%r11238 = load %Pointer, %Pointer* %r11237
	store %Pointer %r11238, %Pointer* %stackTop
	br label %L_398

L_396:
	; Goto L_40
	br label %L_40

L_395:
	; Push(-48)
	%r11239 = load %Pointer, %Pointer* %stackTop
	%r11240 = getelementptr inbounds i8, %Pointer %r11239, i32 -48
	store %Pointer %r11240, %Pointer* %stackTop
	; Goto L_39
	br label %L_39

L_394:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 63}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_395}
	; GetOperands
	%r11241 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11242 = load %Pointer, %Pointer* %stackTop
	%r11243 = getelementptr inbounds i8, %Pointer %r11242, i32 40
	%r11244 = bitcast %Pointer %r11243 to %uintptr_t*
	store %uintptr_t 63, %uintptr_t* %r11244
	; Push(48)
	%r11245 = load %Pointer, %Pointer* %stackTop
	%r11246 = getelementptr inbounds i8, %Pointer %r11245, i32 48
	store %Pointer %r11246, %Pointer* %stackTop
	; FlushFrontier
	%r11247 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11248 = getelementptr inbounds i8, %Pointer %r11247, i32 0
	%r11249 = bitcast %Pointer %r11248 to %Pointer*
	%r11250 = load %Pointer, %Pointer* %frontier
	store %Pointer %r11250, %Pointer* %r11249
	; FlushStackTop
	%r11251 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11252 = getelementptr inbounds i8, %Pointer %r11251, i32 16
	%r11253 = bitcast %Pointer %r11252 to %Pointer*
	%r11254 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r11254, %Pointer* %r11253
	; Call
	call void @GC_collect(%Pointer %r11241, %Word64 0, %Word32 0)
	; CacheFrontier
	%r11255 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11256 = getelementptr inbounds i8, %Pointer %r11255, i32 0
	%r11257 = bitcast %Pointer %r11256 to %Pointer*
	%r11258 = load %Pointer, %Pointer* %r11257
	store %Pointer %r11258, %Pointer* %frontier
	; CacheStackTop
	%r11259 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11260 = getelementptr inbounds i8, %Pointer %r11259, i32 16
	%r11261 = bitcast %Pointer %r11260 to %Pointer*
	%r11262 = load %Pointer, %Pointer* %r11261
	store %Pointer %r11262, %Pointer* %stackTop
	br label %L_395

L_393:
	; RW64(1): Word64  = Word64_add (RW64(0): Word64, 0x1)
	%r11263 = load %Word64, %Word64* %regW64_0
	%r11264 = add %Word64 %r11263, 1
	store %Word64 %r11264, %Word64* %regW64_1
	; RW64(0): Word64  = RW64(1): Word64
	%r11265 = load %Word64, %Word64* %regW64_1
	store %Word64 %r11265, %Word64* %regW64_0
	; Goto loop_1
	br label %loop_1

L_392:
	; RW64(1): Word64  = Word64_add (RW64(0): Word64, 0x1)
	%r11266 = load %Word64, %Word64* %regW64_0
	%r11267 = add %Word64 %r11266, 1
	store %Word64 %r11267, %Word64* %regW64_1
	; RW64(0): Word64  = RW64(1): Word64
	%r11268 = load %Word64, %Word64* %regW64_1
	store %Word64 %r11268, %Word64* %regW64_0
	; Goto loop_2
	br label %loop_2

L_391:
	; Goto L_390
	br label %L_390

L_390:
	; RW64(1): [Word1, Bits63]  = Cast (0x0, [Word1, Bits63])
	%r11269 = bitcast %Word64 0 to %Word64
	store %Word64 %r11269, %Word64* %regW64_1
	; Goto L_388
	br label %L_388

L_389:
	; Goto L_390
	br label %L_390

L_388:
	; XW64 (SP(48): Objptr (opt_23), RW64(0): Word64, 8, 0): [Word1, Bits63]  = RW64(1): [Word1, Bits63]
	%r11270 = load %Word64, %Word64* %regW64_1
	%r11271 = load %Pointer, %Pointer* %stackTop
	%r11272 = getelementptr inbounds i8, %Pointer %r11271, i32 48
	%r11273 = bitcast %Pointer %r11272 to %Objptr*
	%r11274 = load %Objptr, %Objptr* %r11273
	%r11275 = load %Word64, %Word64* %regW64_0
	%r11276 = mul nsw %Word64 %r11275, 8
	%r11277 = add nsw %Word64 %r11276, 0
	%r11278 = getelementptr inbounds i8, %Objptr %r11274, %Word64 %r11277
	%r11279 = bitcast %Objptr %r11278 to %Word64*
	store %Word64 %r11270, %Word64* %r11279
	; RW64(2): Word64  = Word64_add (RW64(0): Word64, 0x1)
	%r11280 = load %Word64, %Word64* %regW64_0
	%r11281 = add %Word64 %r11280, 1
	store %Word64 %r11281, %Word64* %regW64_2
	; RW64(0): Word64  = RW64(2): Word64
	%r11282 = load %Word64, %Word64* %regW64_2
	store %Word64 %r11282, %Word64* %regW64_0
	; Goto loop_3
	br label %loop_3

L_387:
	; RW32(0): Word32  = WordU8_extdToWord32 (RW8(0): Word8)
	%r11283 = load %Word8, %Word8* %regW8_0
	%r11284 = zext %Word8 %r11283 to %Word32
	store %Word32 %r11284, %Word32* %regW32_0
	; RW32(1): Word32  = Word32_sub (RW32(0): Word32, 0x30)
	%r11285 = load %Word32, %Word32* %regW32_0
	%r11286 = sub %Word32 %r11285, 48
	store %Word32 %r11286, %Word32* %regW32_1
	; RW64(1): [Word32, Bits32]  = WordU32_extdToWord64 (RW32(1): Word32)
	%r11287 = load %Word32, %Word32* %regW32_1
	%r11288 = zext %Word32 %r11287 to %Word64
	store %Word64 %r11288, %Word64* %regW64_1
	; RW64(2): [Word32, Bits32]  = Word64_lshift (RW64(1): [Word32, Bits32], 0x1)
	%r11289 = load %Word64, %Word64* %regW64_1
	%r11290 = zext %Word32 1 to %Word64
	%r11291 = shl %Word64 %r11289, %r11290
	store %Word64 %r11291, %Word64* %regW64_2
	; RW64(3): [Word32, Bits32]  = Word64_orb (RW64(2): [Word32, Bits32], 0x1)
	%r11292 = load %Word64, %Word64* %regW64_2
	%r11293 = or %Word64 %r11292, 1
	store %Word64 %r11293, %Word64* %regW64_3
	; RW64(1): [Word1, Bits63]  = Cast (RW64(3): [Word32, Bits32], [Word1, Bits63])
	%r11294 = load %Word64, %Word64* %regW64_3
	%r11295 = bitcast %Word64 %r11294 to %Word64
	store %Word64 %r11295, %Word64* %regW64_1
	; Goto L_388
	br label %L_388

L_386:
	; RW32(0): Word32  = WordU8_lt (0x39, RW8(0): Word8)
	%r11296 = load %Word8, %Word8* %regW8_0
	%r11298 = icmp ult %Word8 57, %r11296
	%r11297 = zext i1 %r11298 to %Word32
	store %Word32 %r11297, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_387), (0x1, L_389))}
	%r11299 = load %Word32, %Word32* %regW32_0
	%r11300 = trunc %Word32 %r11299 to i1
	br i1 %r11300, label %L_389, label %L_387

L_385:
	; RW8(0): Word8  = WordU64_extdToWord8 (RW64(0): Word64)
	%r11301 = load %Word64, %Word64* %regW64_0
	%r11302 = trunc %Word64 %r11301 to %Word8
	store %Word8 %r11302, %Word8* %regW8_0
	; RW32(0): Word32  = WordU8_lt (RW8(0): Word8, 0x30)
	%r11303 = load %Word8, %Word8* %regW8_0
	%r11305 = icmp ult %Word8 %r11303, 48
	%r11304 = zext i1 %r11305 to %Word32
	store %Word32 %r11304, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_386), (0x1, L_391))}
	%r11306 = load %Word32, %Word32* %regW32_0
	%r11307 = trunc %Word32 %r11306 to i1
	br i1 %r11307, label %L_391, label %L_386

L_384:
	; Goto L_381
	br label %L_381

L_383:
	; Goto L_379
	br label %L_379

L_382:
	; RP(1): Objptr (opt_36)  = OP (RP(0): Objptr (opt_36), 8): Objptr (opt_36)
	%r11308 = load %Objptr, %Objptr* %regP_0
	%r11309 = getelementptr inbounds i8, %Objptr %r11308, i32 8
	%r11310 = bitcast %Objptr %r11309 to %Objptr*
	%r11311 = load %Objptr, %Objptr* %r11310
	store %Objptr %r11311, %Objptr* %regP_1
	; RP(2): Objptr (opt_21)  = OP (RP(0): Objptr (opt_36), 0): Objptr (opt_21)
	%r11312 = load %Objptr, %Objptr* %regP_0
	%r11313 = getelementptr inbounds i8, %Objptr %r11312, i32 0
	%r11314 = bitcast %Objptr %r11313 to %Objptr*
	%r11315 = load %Objptr, %Objptr* %r11314
	store %Objptr %r11315, %Objptr* %regP_2
	; RP(0): Objptr (opt_36)  = RP(1): Objptr (opt_36)
	%r11316 = load %Objptr, %Objptr* %regP_1
	store %Objptr %r11316, %Objptr* %regP_0
	; RP(1): Objptr (opt_21)  = RP(2): Objptr (opt_21)
	%r11317 = load %Objptr, %Objptr* %regP_2
	store %Objptr %r11317, %Objptr* %regP_1
	; Goto L_376
	br label %L_376

L_381:
	; switch {test = Cast (RP(0): Objptr (opt_36), Bits64), default = Some L_382, cases = ((0x1, L_383))}
	%r11318 = load %Objptr, %Objptr* %regP_0
	%r11319 = ptrtoint %Objptr %r11318 to %Word64
	switch %Word64 %r11319, label %L_382 [
		%Word64 1, label %L_383
	]

L_380:
	; Goto L_381
	br label %L_381

L_379:
	; RW64(1): Word64  = Word64_add (RW64(0): Word64, 0x1)
	%r11320 = load %Word64, %Word64* %regW64_0
	%r11321 = add %Word64 %r11320, 1
	store %Word64 %r11321, %Word64* %regW64_1
	; RW64(0): Word64  = RW64(1): Word64
	%r11322 = load %Word64, %Word64* %regW64_1
	store %Word64 %r11322, %Word64* %regW64_0
	; Goto loop_4
	br label %loop_4

L_378:
	; Goto L_379
	br label %L_379

L_377:
	; RW32(0): Word32  = WordU8_lt (RW8(1): Word8, RW8(0): Word8)
	%r11323 = load %Word8, %Word8* %regW8_1
	%r11324 = load %Word8, %Word8* %regW8_0
	%r11326 = icmp ult %Word8 %r11323, %r11324
	%r11325 = zext i1 %r11326 to %Word32
	store %Word32 %r11325, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_378), (0x1, L_380))}
	%r11327 = load %Word32, %Word32* %regW32_0
	%r11328 = trunc %Word32 %r11327 to i1
	br i1 %r11328, label %L_380, label %L_378

L_376:
	; RW8(1): Word8  = OW8 (RP(1): Objptr (opt_21), 9): Word8
	%r11329 = load %Objptr, %Objptr* %regP_1
	%r11330 = getelementptr inbounds i8, %Objptr %r11329, i32 9
	%r11331 = bitcast %Objptr %r11330 to %Word8*
	%r11332 = load %Word8, %Word8* %r11331
	store %Word8 %r11332, %Word8* %regW8_1
	; RW8(2): Word8  = OW8 (RP(1): Objptr (opt_21), 8): Word8
	%r11333 = load %Objptr, %Objptr* %regP_1
	%r11334 = getelementptr inbounds i8, %Objptr %r11333, i32 8
	%r11335 = bitcast %Objptr %r11334 to %Word8*
	%r11336 = load %Word8, %Word8* %r11335
	store %Word8 %r11336, %Word8* %regW8_2
	; RW32(0): Word32  = WordU8_lt (RW8(0): Word8, RW8(2): Word8)
	%r11337 = load %Word8, %Word8* %regW8_0
	%r11338 = load %Word8, %Word8* %regW8_2
	%r11340 = icmp ult %Word8 %r11337, %r11338
	%r11339 = zext i1 %r11340 to %Word32
	store %Word32 %r11339, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_377), (0x1, L_384))}
	%r11341 = load %Word32, %Word32* %regW32_0
	%r11342 = trunc %Word32 %r11341 to i1
	br i1 %r11342, label %L_384, label %L_377

L_375:
	; RW8(0): Word8  = WordU64_extdToWord8 (RW64(0): Word64)
	%r11343 = load %Word64, %Word64* %regW64_0
	%r11344 = trunc %Word64 %r11343 to %Word8
	store %Word8 %r11344, %Word8* %regW8_0
	; RP(0): Objptr (opt_36)  = glob {index = 8, isRoot = true, ty = Objptr (opt_36)}
	%r11345 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 8
	%r11346 = load %Objptr, %Objptr* %r11345
	store %Objptr %r11346, %Objptr* %regP_0
	; RP(1): Objptr (opt_21)  = glob {index = 7, isRoot = true, ty = Objptr (opt_21)}
	%r11347 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 7
	%r11348 = load %Objptr, %Objptr* %r11347
	store %Objptr %r11348, %Objptr* %regP_1
	; Goto L_376
	br label %L_376

L_374:
	; Goto L_370
	br label %L_370

L_373:
	; Goto L_370
	br label %L_370

L_372:
	; Goto L_370
	br label %L_370

L_371:
	; Goto L_370
	br label %L_370

L_370:
	; RW32(0): Word32  = 0x1
	store %Word32 1, %Word32* %regW32_0
	; Goto L_368
	br label %L_368

L_369:
	; Goto L_370
	br label %L_370

L_368:
	; XW32 (SP(56): Objptr (opt_24), RW64(0): Word64, 4, 0): Word32  = RW32(0): Word32
	%r11349 = load %Word32, %Word32* %regW32_0
	%r11350 = load %Pointer, %Pointer* %stackTop
	%r11351 = getelementptr inbounds i8, %Pointer %r11350, i32 56
	%r11352 = bitcast %Pointer %r11351 to %Objptr*
	%r11353 = load %Objptr, %Objptr* %r11352
	%r11354 = load %Word64, %Word64* %regW64_0
	%r11355 = mul nsw %Word64 %r11354, 4
	%r11356 = add nsw %Word64 %r11355, 0
	%r11357 = getelementptr inbounds i8, %Objptr %r11353, %Word64 %r11356
	%r11358 = bitcast %Objptr %r11357 to %Word32*
	store %Word32 %r11349, %Word32* %r11358
	; RW64(1): Word64  = Word64_add (RW64(0): Word64, 0x1)
	%r11359 = load %Word64, %Word64* %regW64_0
	%r11360 = add %Word64 %r11359, 1
	store %Word64 %r11360, %Word64* %regW64_1
	; RW64(0): Word64  = RW64(1): Word64
	%r11361 = load %Word64, %Word64* %regW64_1
	store %Word64 %r11361, %Word64* %regW64_0
	; Goto loop_5
	br label %loop_5

L_367:
	; RW32(0): Word32  = Word8_equal (RW8(0): Word8, 0xC)
	%r11362 = load %Word8, %Word8* %regW8_0
	%r11364 = icmp eq %Word8 %r11362, 12
	%r11363 = zext i1 %r11364 to %Word32
	store %Word32 %r11363, %Word32* %regW32_0
	; Goto L_368
	br label %L_368

L_366:
	; RW32(0): Word32  = Word8_equal (RW8(0): Word8, 0xB)
	%r11365 = load %Word8, %Word8* %regW8_0
	%r11367 = icmp eq %Word8 %r11365, 11
	%r11366 = zext i1 %r11367 to %Word32
	store %Word32 %r11366, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_367), (0x1, L_369))}
	%r11368 = load %Word32, %Word32* %regW32_0
	%r11369 = trunc %Word32 %r11368 to i1
	br i1 %r11369, label %L_369, label %L_367

L_365:
	; RW32(0): Word32  = Word8_equal (RW8(0): Word8, 0xA)
	%r11370 = load %Word8, %Word8* %regW8_0
	%r11372 = icmp eq %Word8 %r11370, 10
	%r11371 = zext i1 %r11372 to %Word32
	store %Word32 %r11371, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_366), (0x1, L_371))}
	%r11373 = load %Word32, %Word32* %regW32_0
	%r11374 = trunc %Word32 %r11373 to i1
	br i1 %r11374, label %L_371, label %L_366

L_364:
	; RW32(0): Word32  = Word8_equal (RW8(0): Word8, 0xD)
	%r11375 = load %Word8, %Word8* %regW8_0
	%r11377 = icmp eq %Word8 %r11375, 13
	%r11376 = zext i1 %r11377 to %Word32
	store %Word32 %r11376, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_365), (0x1, L_372))}
	%r11378 = load %Word32, %Word32* %regW32_0
	%r11379 = trunc %Word32 %r11378 to i1
	br i1 %r11379, label %L_372, label %L_365

L_363:
	; RW32(0): Word32  = Word8_equal (RW8(0): Word8, 0x9)
	%r11380 = load %Word8, %Word8* %regW8_0
	%r11382 = icmp eq %Word8 %r11380, 9
	%r11381 = zext i1 %r11382 to %Word32
	store %Word32 %r11381, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_364), (0x1, L_373))}
	%r11383 = load %Word32, %Word32* %regW32_0
	%r11384 = trunc %Word32 %r11383 to i1
	br i1 %r11384, label %L_373, label %L_364

L_362:
	; RW8(0): Word8  = WordU64_extdToWord8 (RW64(0): Word64)
	%r11385 = load %Word64, %Word64* %regW64_0
	%r11386 = trunc %Word64 %r11385 to %Word8
	store %Word8 %r11386, %Word8* %regW8_0
	; RW32(0): Word32  = Word8_equal (RW8(0): Word8, 0x20)
	%r11387 = load %Word8, %Word8* %regW8_0
	%r11389 = icmp eq %Word8 %r11387, 32
	%r11388 = zext i1 %r11389 to %Word32
	store %Word32 %r11388, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_363), (0x1, L_374))}
	%r11390 = load %Word32, %Word32* %regW32_0
	%r11391 = trunc %Word32 %r11390 to i1
	br i1 %r11391, label %L_374, label %L_363

L_361:
	; XW8 (SP(64): Objptr (opt_11), RW64(0): Word64, 1, 0): Word8  = 0x0
	%r11392 = load %Pointer, %Pointer* %stackTop
	%r11393 = getelementptr inbounds i8, %Pointer %r11392, i32 64
	%r11394 = bitcast %Pointer %r11393 to %Objptr*
	%r11395 = load %Objptr, %Objptr* %r11394
	%r11396 = load %Word64, %Word64* %regW64_0
	%r11397 = mul nsw %Word64 %r11396, 1
	%r11398 = add nsw %Word64 %r11397, 0
	%r11399 = getelementptr inbounds i8, %Objptr %r11395, %Word64 %r11398
	%r11400 = bitcast %Objptr %r11399 to %Word8*
	store %Word8 0, %Word8* %r11400
	; RW64(1): Word64  = Word64_add (RW64(0): Word64, 0x1)
	%r11401 = load %Word64, %Word64* %regW64_0
	%r11402 = add %Word64 %r11401, 1
	store %Word64 %r11402, %Word64* %regW64_1
	; RW64(0): Word64  = RW64(1): Word64
	%r11403 = load %Word64, %Word64* %regW64_1
	store %Word64 %r11403, %Word64* %regW64_0
	; Goto loop_6
	br label %loop_6

L_360:
	; Push(-80)
	%r11404 = load %Pointer, %Pointer* %stackTop
	%r11405 = getelementptr inbounds i8, %Pointer %r11404, i32 -80
	store %Pointer %r11405, %Pointer* %stackTop
	; Goto L_50
	br label %L_50

L_359:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 62}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_360}
	; GetOperands
	%r11406 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11407 = load %Pointer, %Pointer* %stackTop
	%r11408 = getelementptr inbounds i8, %Pointer %r11407, i32 72
	%r11409 = bitcast %Pointer %r11408 to %uintptr_t*
	store %uintptr_t 62, %uintptr_t* %r11409
	; Push(80)
	%r11410 = load %Pointer, %Pointer* %stackTop
	%r11411 = getelementptr inbounds i8, %Pointer %r11410, i32 80
	store %Pointer %r11411, %Pointer* %stackTop
	; FlushFrontier
	%r11412 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11413 = getelementptr inbounds i8, %Pointer %r11412, i32 0
	%r11414 = bitcast %Pointer %r11413 to %Pointer*
	%r11415 = load %Pointer, %Pointer* %frontier
	store %Pointer %r11415, %Pointer* %r11414
	; FlushStackTop
	%r11416 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11417 = getelementptr inbounds i8, %Pointer %r11416, i32 16
	%r11418 = bitcast %Pointer %r11417 to %Pointer*
	%r11419 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r11419, %Pointer* %r11418
	; Call
	call void @GC_collect(%Pointer %r11406, %Word64 0, %Word32 0)
	; CacheFrontier
	%r11420 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11421 = getelementptr inbounds i8, %Pointer %r11420, i32 0
	%r11422 = bitcast %Pointer %r11421 to %Pointer*
	%r11423 = load %Pointer, %Pointer* %r11422
	store %Pointer %r11423, %Pointer* %frontier
	; CacheStackTop
	%r11424 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11425 = getelementptr inbounds i8, %Pointer %r11424, i32 16
	%r11426 = bitcast %Pointer %r11425 to %Pointer*
	%r11427 = load %Pointer, %Pointer* %r11426
	store %Pointer %r11427, %Pointer* %stackTop
	br label %L_360

L_358:
	; XW8 (RP(0): Objptr (opt_11), RW64(0): Word64, 1, 0): Word8  = 0x0
	%r11428 = load %Objptr, %Objptr* %regP_0
	%r11429 = load %Word64, %Word64* %regW64_0
	%r11430 = mul nsw %Word64 %r11429, 1
	%r11431 = add nsw %Word64 %r11430, 0
	%r11432 = getelementptr inbounds i8, %Objptr %r11428, %Word64 %r11431
	%r11433 = bitcast %Objptr %r11432 to %Word8*
	store %Word8 0, %Word8* %r11433
	; RW64(1): Word64  = Word64_add (RW64(0): Word64, 0x1)
	%r11434 = load %Word64, %Word64* %regW64_0
	%r11435 = add %Word64 %r11434, 1
	store %Word64 %r11435, %Word64* %regW64_1
	; RW64(0): Word64  = RW64(1): Word64
	%r11436 = load %Word64, %Word64* %regW64_1
	store %Word64 %r11436, %Word64* %regW64_0
	; Goto loop_7
	br label %loop_7

L_357:
	; XW8 (RP(0): Objptr (opt_11), RW64(0): Word64, 1, 0): Word8  = 0x0
	%r11437 = load %Objptr, %Objptr* %regP_0
	%r11438 = load %Word64, %Word64* %regW64_0
	%r11439 = mul nsw %Word64 %r11438, 1
	%r11440 = add nsw %Word64 %r11439, 0
	%r11441 = getelementptr inbounds i8, %Objptr %r11437, %Word64 %r11440
	%r11442 = bitcast %Objptr %r11441 to %Word8*
	store %Word8 0, %Word8* %r11442
	; RW64(1): Word64  = Word64_add (RW64(0): Word64, 0x1)
	%r11443 = load %Word64, %Word64* %regW64_0
	%r11444 = add %Word64 %r11443, 1
	store %Word64 %r11444, %Word64* %regW64_1
	; RW64(0): Word64  = RW64(1): Word64
	%r11445 = load %Word64, %Word64* %regW64_1
	store %Word64 %r11445, %Word64* %regW64_0
	; Goto loop_8
	br label %loop_8

L_356:
	; Push(-88)
	%r11446 = load %Pointer, %Pointer* %stackTop
	%r11447 = getelementptr inbounds i8, %Pointer %r11446, i32 -88
	store %Pointer %r11447, %Pointer* %stackTop
	; Goto L_55
	br label %L_55

L_355:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 61}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_356}
	; GetOperands
	%r11448 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11449 = load %Pointer, %Pointer* %stackTop
	%r11450 = getelementptr inbounds i8, %Pointer %r11449, i32 80
	%r11451 = bitcast %Pointer %r11450 to %uintptr_t*
	store %uintptr_t 61, %uintptr_t* %r11451
	; Push(88)
	%r11452 = load %Pointer, %Pointer* %stackTop
	%r11453 = getelementptr inbounds i8, %Pointer %r11452, i32 88
	store %Pointer %r11453, %Pointer* %stackTop
	; FlushFrontier
	%r11454 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11455 = getelementptr inbounds i8, %Pointer %r11454, i32 0
	%r11456 = bitcast %Pointer %r11455 to %Pointer*
	%r11457 = load %Pointer, %Pointer* %frontier
	store %Pointer %r11457, %Pointer* %r11456
	; FlushStackTop
	%r11458 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11459 = getelementptr inbounds i8, %Pointer %r11458, i32 16
	%r11460 = bitcast %Pointer %r11459 to %Pointer*
	%r11461 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r11461, %Pointer* %r11460
	; Call
	call void @GC_collect(%Pointer %r11448, %Word64 0, %Word32 0)
	; CacheFrontier
	%r11462 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11463 = getelementptr inbounds i8, %Pointer %r11462, i32 0
	%r11464 = bitcast %Pointer %r11463 to %Pointer*
	%r11465 = load %Pointer, %Pointer* %r11464
	store %Pointer %r11465, %Pointer* %frontier
	; CacheStackTop
	%r11466 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11467 = getelementptr inbounds i8, %Pointer %r11466, i32 16
	%r11468 = bitcast %Pointer %r11467 to %Pointer*
	%r11469 = load %Pointer, %Pointer* %r11468
	store %Pointer %r11469, %Pointer* %stackTop
	br label %L_356

L_354:
	; SW8(96): [Word1, Bits7]  = Cast (0x0, [Word1, Bits7])
	%r11470 = bitcast %Word8 0 to %Word8
	%r11471 = load %Pointer, %Pointer* %stackTop
	%r11472 = getelementptr inbounds i8, %Pointer %r11471, i32 96
	%r11473 = bitcast %Pointer %r11472 to %Word8*
	store %Word8 %r11470, %Word8* %r11473
	; Goto L_58
	br label %L_58

L_353:
	; RP(0): Objptr (opt_34, opt_33, opt_32, opt_31)  = Cast (glob {index = 9, isRoot = true, ty = Objptr (opt_31)}, Objptr (opt_34, opt_33, opt_32, opt_31))
	%r11474 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 9
	%r11475 = load %Objptr, %Objptr* %r11474
	%r11476 = bitcast %Objptr %r11475 to %Objptr
	store %Objptr %r11476, %Objptr* %regP_0
	; Goto L_14
	br label %L_14

L_352:
	; Push(-32)
	%r11477 = load %Pointer, %Pointer* %stackTop
	%r11478 = getelementptr inbounds i8, %Pointer %r11477, i32 -32
	store %Pointer %r11478, %Pointer* %stackTop
	; Goto L_334
	br label %L_334

L_351:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 60}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_352}
	; GetOperands
	%r11479 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11480 = load %Pointer, %Pointer* %stackTop
	%r11481 = getelementptr inbounds i8, %Pointer %r11480, i32 24
	%r11482 = bitcast %Pointer %r11481 to %uintptr_t*
	store %uintptr_t 60, %uintptr_t* %r11482
	; Push(32)
	%r11483 = load %Pointer, %Pointer* %stackTop
	%r11484 = getelementptr inbounds i8, %Pointer %r11483, i32 32
	store %Pointer %r11484, %Pointer* %stackTop
	; FlushFrontier
	%r11485 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11486 = getelementptr inbounds i8, %Pointer %r11485, i32 0
	%r11487 = bitcast %Pointer %r11486 to %Pointer*
	%r11488 = load %Pointer, %Pointer* %frontier
	store %Pointer %r11488, %Pointer* %r11487
	; FlushStackTop
	%r11489 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11490 = getelementptr inbounds i8, %Pointer %r11489, i32 16
	%r11491 = bitcast %Pointer %r11490 to %Pointer*
	%r11492 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r11492, %Pointer* %r11491
	; Call
	call void @GC_collect(%Pointer %r11479, %Word64 0, %Word32 0)
	; CacheFrontier
	%r11493 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11494 = getelementptr inbounds i8, %Pointer %r11493, i32 0
	%r11495 = bitcast %Pointer %r11494 to %Pointer*
	%r11496 = load %Pointer, %Pointer* %r11495
	store %Pointer %r11496, %Pointer* %frontier
	; CacheStackTop
	%r11497 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11498 = getelementptr inbounds i8, %Pointer %r11497, i32 16
	%r11499 = bitcast %Pointer %r11498 to %Pointer*
	%r11500 = load %Pointer, %Pointer* %r11499
	store %Pointer %r11500, %Pointer* %stackTop
	br label %L_352

L_350:
	; RP(0): Objptr (opt_3)  = glob {index = 132, isRoot = true, ty = Objptr (opt_3)}
	%r11501 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 132
	%r11502 = load %Objptr, %Objptr* %r11501
	store %Objptr %r11502, %Objptr* %regP_0
	; Goto L_344
	br label %L_344

L_349:
	; RP(0): Objptr (opt_34, opt_33, opt_32, opt_31)  = Cast (0x2, Objptr (opt_34, opt_33, opt_32, opt_31))
	%r11503 = inttoptr %Word64 2 to %Objptr
	store %Objptr %r11503, %Objptr* %regP_0
	; Goto L_14
	br label %L_14

L_348:
	; SP(40): Objptr (opt_11)  = glob {index = 22, isRoot = true, ty = Objptr (opt_11)}
	%r11504 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 22
	%r11505 = load %Objptr, %Objptr* %r11504
	%r11506 = load %Pointer, %Pointer* %stackTop
	%r11507 = getelementptr inbounds i8, %Pointer %r11506, i32 40
	%r11508 = bitcast %Pointer %r11507 to %Objptr*
	store %Objptr %r11505, %Objptr* %r11508
	; Goto L_join_5
	br label %L_join_5

L_347:
	; RW32(0): Word32  = WordU64_extdToWord32 (RW64(0): Word64)
	%r11509 = load %Word64, %Word64* %regW64_0
	%r11510 = trunc %Word64 %r11509 to %Word32
	store %Word32 %r11510, %Word32* %regW32_0
	; RW64(1): Word64  = WordS32_extdToWord64 (RW32(0): Word32)
	%r11511 = load %Word32, %Word32* %regW32_0
	%r11512 = sext %Word32 %r11511 to %Word64
	store %Word64 %r11512, %Word64* %regW64_1
	; RW8(0): Word8  = XW8 (SQ(24): CPointer, RW64(1): Word64, 1, 0): Word8
	%r11513 = load %Pointer, %Pointer* %stackTop
	%r11514 = getelementptr inbounds i8, %Pointer %r11513, i32 24
	%r11515 = bitcast %Pointer %r11514 to %CPointer*
	%r11516 = load %CPointer, %CPointer* %r11515
	%r11517 = load %Word64, %Word64* %regW64_1
	%r11518 = mul nsw %Word64 %r11517, 1
	%r11519 = add nsw %Word64 %r11518, 0
	%r11520 = getelementptr inbounds i8, %CPointer %r11516, %Word64 %r11519
	%r11521 = bitcast %CPointer %r11520 to %Word8*
	%r11522 = load %Word8, %Word8* %r11521
	store %Word8 %r11522, %Word8* %regW8_0
	; XW8 (SP(40): Objptr (opt_11), RW64(0): Word64, 1, 0): Word8  = RW8(0): Word8
	%r11523 = load %Word8, %Word8* %regW8_0
	%r11524 = load %Pointer, %Pointer* %stackTop
	%r11525 = getelementptr inbounds i8, %Pointer %r11524, i32 40
	%r11526 = bitcast %Pointer %r11525 to %Objptr*
	%r11527 = load %Objptr, %Objptr* %r11526
	%r11528 = load %Word64, %Word64* %regW64_0
	%r11529 = mul nsw %Word64 %r11528, 1
	%r11530 = add nsw %Word64 %r11529, 0
	%r11531 = getelementptr inbounds i8, %Objptr %r11527, %Word64 %r11530
	%r11532 = bitcast %Objptr %r11531 to %Word8*
	store %Word8 %r11523, %Word8* %r11532
	; RW64(2): Word64  = Word64_add (RW64(0): Word64, 0x1)
	%r11533 = load %Word64, %Word64* %regW64_0
	%r11534 = add %Word64 %r11533, 1
	store %Word64 %r11534, %Word64* %regW64_2
	; RW64(0): Word64  = RW64(2): Word64
	%r11535 = load %Word64, %Word64* %regW64_2
	store %Word64 %r11535, %Word64* %regW64_0
	; Goto loop_22
	br label %loop_22

L_346:
	; Push(-56)
	%r11536 = load %Pointer, %Pointer* %stackTop
	%r11537 = getelementptr inbounds i8, %Pointer %r11536, i32 -56
	store %Pointer %r11537, %Pointer* %stackTop
	; Goto L_343
	br label %L_343

L_345:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 59}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_346}
	; GetOperands
	%r11538 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11539 = load %Pointer, %Pointer* %stackTop
	%r11540 = getelementptr inbounds i8, %Pointer %r11539, i32 48
	%r11541 = bitcast %Pointer %r11540 to %uintptr_t*
	store %uintptr_t 59, %uintptr_t* %r11541
	; Push(56)
	%r11542 = load %Pointer, %Pointer* %stackTop
	%r11543 = getelementptr inbounds i8, %Pointer %r11542, i32 56
	store %Pointer %r11543, %Pointer* %stackTop
	; FlushFrontier
	%r11544 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11545 = getelementptr inbounds i8, %Pointer %r11544, i32 0
	%r11546 = bitcast %Pointer %r11545 to %Pointer*
	%r11547 = load %Pointer, %Pointer* %frontier
	store %Pointer %r11547, %Pointer* %r11546
	; FlushStackTop
	%r11548 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11549 = getelementptr inbounds i8, %Pointer %r11548, i32 16
	%r11550 = bitcast %Pointer %r11549 to %Pointer*
	%r11551 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r11551, %Pointer* %r11550
	; Call
	call void @GC_collect(%Pointer %r11538, %Word64 0, %Word32 0)
	; CacheFrontier
	%r11552 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11553 = getelementptr inbounds i8, %Pointer %r11552, i32 0
	%r11554 = bitcast %Pointer %r11553 to %Pointer*
	%r11555 = load %Pointer, %Pointer* %r11554
	store %Pointer %r11555, %Pointer* %frontier
	; CacheStackTop
	%r11556 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11557 = getelementptr inbounds i8, %Pointer %r11556, i32 16
	%r11558 = bitcast %Pointer %r11557 to %Pointer*
	%r11559 = load %Pointer, %Pointer* %r11558
	store %Pointer %r11559, %Pointer* %stackTop
	br label %L_346

L_344:
	; RW64(0): [Word32, Bits32]  = WordU32_extdToWord64 (SW32(16): Word32)
	%r11560 = load %Pointer, %Pointer* %stackTop
	%r11561 = getelementptr inbounds i8, %Pointer %r11560, i32 16
	%r11562 = bitcast %Pointer %r11561 to %Word32*
	%r11563 = load %Word32, %Word32* %r11562
	%r11564 = zext %Word32 %r11563 to %Word64
	store %Word64 %r11564, %Word64* %regW64_0
	; RW64(1): [Word32, Bits32]  = Word64_lshift (RW64(0): [Word32, Bits32], 0x1)
	%r11565 = load %Word64, %Word64* %regW64_0
	%r11566 = zext %Word32 1 to %Word64
	%r11567 = shl %Word64 %r11565, %r11566
	store %Word64 %r11567, %Word64* %regW64_1
	; RW64(2): [Word32, Bits32]  = Word64_orb (RW64(1): [Word32, Bits32], 0x1)
	%r11568 = load %Word64, %Word64* %regW64_1
	%r11569 = or %Word64 %r11568, 1
	store %Word64 %r11569, %Word64* %regW64_2
	; CW64 (<Frontier>)  = 0x43
	%r11570 = load %Pointer, %Pointer* %frontier
	%r11571 = bitcast %Pointer %r11570 to %Word64*
	store %Word64 67, %Word64* %r11571
	; RQ(38): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r11572 = load %Pointer, %Pointer* %frontier
	%r11574 = ptrtoint %Pointer %r11572 to %uintptr_t
	%r11575 = add %uintptr_t %r11574, 8
	%r11573 = inttoptr %uintptr_t %r11575 to %Pointer
	store %CPointer %r11573, %CPointer* %regQ_38
	; RP(1): Objptr (opt_33)  = Cast (RQ(38): CPointer, Objptr (opt_33))
	%r11576 = load %CPointer, %CPointer* %regQ_38
	%r11577 = bitcast %CPointer %r11576 to %Objptr
	store %Objptr %r11577, %Objptr* %regP_1
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r11578 = load %Pointer, %Pointer* %frontier
	%r11580 = ptrtoint %Pointer %r11578 to %uintptr_t
	%r11581 = add %uintptr_t %r11580, 24
	%r11579 = inttoptr %uintptr_t %r11581 to %Pointer
	store %Pointer %r11579, %Pointer* %frontier
	; OW64 (RP(1): Objptr (opt_33), 0): [Word1, Bits63]  = Cast (RW64(2): [Word32, Bits32], [Word1, Bits63])
	%r11582 = load %Word64, %Word64* %regW64_2
	%r11583 = bitcast %Word64 %r11582 to %Word64
	%r11584 = load %Objptr, %Objptr* %regP_1
	%r11585 = getelementptr inbounds i8, %Objptr %r11584, i32 0
	%r11586 = bitcast %Objptr %r11585 to %Word64*
	store %Word64 %r11583, %Word64* %r11586
	; OP (RP(1): Objptr (opt_33), 8): Objptr (opt_3)  = RP(0): Objptr (opt_3)
	%r11587 = load %Objptr, %Objptr* %regP_0
	%r11588 = load %Objptr, %Objptr* %regP_1
	%r11589 = getelementptr inbounds i8, %Objptr %r11588, i32 8
	%r11590 = bitcast %Objptr %r11589 to %Objptr*
	store %Objptr %r11587, %Objptr* %r11590
	; RP(0): Objptr (opt_34, opt_33, opt_32, opt_31)  = Cast (RP(1): Objptr (opt_33), Objptr (opt_34, opt_33, opt_32, opt_31))
	%r11591 = load %Objptr, %Objptr* %regP_1
	%r11592 = bitcast %Objptr %r11591 to %Objptr
	store %Objptr %r11592, %Objptr* %regP_0
	; Goto L_14
	br label %L_14

L_343:
	; OW64 (SP(40): Objptr (opt_11), ~8): Word64  = 0x7
	%r11593 = load %Pointer, %Pointer* %stackTop
	%r11594 = getelementptr inbounds i8, %Pointer %r11593, i32 40
	%r11595 = bitcast %Pointer %r11594 to %Objptr*
	%r11596 = load %Objptr, %Objptr* %r11595
	%r11597 = getelementptr inbounds i8, %Objptr %r11596, i32 -8
	%r11598 = bitcast %Objptr %r11597 to %Word64*
	store %Word64 7, %Word64* %r11598
	; RP(0): Objptr (opt_3)  = Cast (SP(40): Objptr (opt_11), Objptr (opt_3))
	%r11599 = load %Pointer, %Pointer* %stackTop
	%r11600 = getelementptr inbounds i8, %Pointer %r11599, i32 40
	%r11601 = bitcast %Pointer %r11600 to %Objptr*
	%r11602 = load %Objptr, %Objptr* %r11601
	%r11603 = bitcast %Objptr %r11602 to %Objptr
	store %Objptr %r11603, %Objptr* %regP_0
	; Goto L_344
	br label %L_344

L_342:
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r11604 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11605 = getelementptr inbounds i8, %Pointer %r11604, i32 8
	%r11606 = bitcast %Pointer %r11605 to %CPointer*
	%r11607 = load %CPointer, %CPointer* %r11606
	%r11608 = load %Pointer, %Pointer* %frontier
	%r11610 = icmp ult %Pointer %r11607, %r11608
	%r11609 = zext i1 %r11610 to %Word32
	store %Word32 %r11609, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_343), (0x1, L_345))}
	%r11611 = load %Word32, %Word32* %regW32_0
	%r11612 = trunc %Word32 %r11611 to i1
	br i1 %r11612, label %L_345, label %L_343

loop_22:
	; RW32(0): Word32  = WordS64_lt (RW64(0): Word64, SW64(32): Word64)
	%r11613 = load %Word64, %Word64* %regW64_0
	%r11614 = load %Pointer, %Pointer* %stackTop
	%r11615 = getelementptr inbounds i8, %Pointer %r11614, i32 32
	%r11616 = bitcast %Pointer %r11615 to %Word64*
	%r11617 = load %Word64, %Word64* %r11616
	%r11619 = icmp slt %Word64 %r11613, %r11617
	%r11618 = zext i1 %r11619 to %Word32
	store %Word32 %r11618, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_342), (0x1, L_347))}
	%r11620 = load %Word32, %Word32* %regW32_0
	%r11621 = trunc %Word32 %r11620 to i1
	br i1 %r11621, label %L_347, label %L_342

L_join_5:
	; RW64(0): Word64  = 0x0
	store %Word64 0, %Word64* %regW64_0
	; Goto loop_22
	br label %loop_22

L_341:
	; Push(-48)
	%r11622 = load %Pointer, %Pointer* %stackTop
	%r11623 = getelementptr inbounds i8, %Pointer %r11622, i32 -48
	store %Pointer %r11623, %Pointer* %stackTop
	%r11624 = load %Objptr, %Objptr* @CReturnP
	store %Objptr %r11624, %Objptr* %regP_0
	; SP(40): Objptr (opt_11)  = RP(0): Objptr (opt_11)
	%r11625 = load %Objptr, %Objptr* %regP_0
	%r11626 = load %Pointer, %Pointer* %stackTop
	%r11627 = getelementptr inbounds i8, %Pointer %r11626, i32 40
	%r11628 = bitcast %Pointer %r11627 to %Objptr*
	store %Objptr %r11625, %Objptr* %r11628
	; Goto L_join_5
	br label %L_join_5

L_340:
	; CCall {args = (<GCState>, 0x0, SW64(32): Word64, 0x17), frameInfo = Some {frameLayoutsIndex = 58}, func = {args = (GCState, Word64, Word64, Word64), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int64, Word64), res = Some Objptr}, return = Objptr (opt_11), symbolScope = private, target = GC_arrayAllocate}, return = Some L_341}
	; GetOperands
	%r11629 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11630 = load %Pointer, %Pointer* %stackTop
	%r11631 = getelementptr inbounds i8, %Pointer %r11630, i32 32
	%r11632 = bitcast %Pointer %r11631 to %Word64*
	%r11633 = load %Word64, %Word64* %r11632
	%r11634 = load %Pointer, %Pointer* %stackTop
	%r11635 = getelementptr inbounds i8, %Pointer %r11634, i32 40
	%r11636 = bitcast %Pointer %r11635 to %uintptr_t*
	store %uintptr_t 58, %uintptr_t* %r11636
	; Push(48)
	%r11637 = load %Pointer, %Pointer* %stackTop
	%r11638 = getelementptr inbounds i8, %Pointer %r11637, i32 48
	store %Pointer %r11638, %Pointer* %stackTop
	; FlushFrontier
	%r11639 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11640 = getelementptr inbounds i8, %Pointer %r11639, i32 0
	%r11641 = bitcast %Pointer %r11640 to %Pointer*
	%r11642 = load %Pointer, %Pointer* %frontier
	store %Pointer %r11642, %Pointer* %r11641
	; FlushStackTop
	%r11643 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11644 = getelementptr inbounds i8, %Pointer %r11643, i32 16
	%r11645 = bitcast %Pointer %r11644 to %Pointer*
	%r11646 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r11646, %Pointer* %r11645
	; Call
	%r11647 = call %Objptr @GC_arrayAllocate(%Pointer %r11629, %Word64 0, %Word64 %r11633, %Word64 23)
	store %Objptr %r11647, %Objptr* @CReturnP
	; CacheFrontier
	%r11648 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11649 = getelementptr inbounds i8, %Pointer %r11648, i32 0
	%r11650 = bitcast %Pointer %r11649 to %Pointer*
	%r11651 = load %Pointer, %Pointer* %r11650
	store %Pointer %r11651, %Pointer* %frontier
	; CacheStackTop
	%r11652 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11653 = getelementptr inbounds i8, %Pointer %r11652, i32 16
	%r11654 = bitcast %Pointer %r11653 to %Pointer*
	%r11655 = load %Pointer, %Pointer* %r11654
	store %Pointer %r11655, %Pointer* %stackTop
	br label %L_341

L_339:
	; RW32(0): Word32  = Word64_equal (0x0, SW64(32): Word64)
	%r11656 = load %Pointer, %Pointer* %stackTop
	%r11657 = getelementptr inbounds i8, %Pointer %r11656, i32 32
	%r11658 = bitcast %Pointer %r11657 to %Word64*
	%r11659 = load %Word64, %Word64* %r11658
	%r11661 = icmp eq %Word64 0, %r11659
	%r11660 = zext i1 %r11661 to %Word32
	store %Word32 %r11660, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_340), (0x1, L_348))}
	%r11662 = load %Word32, %Word32* %regW32_0
	%r11663 = trunc %Word32 %r11662 to i1
	br i1 %r11663, label %L_348, label %L_340

L_338:
	; RW32(0): Word32  = WordU64_lt (0x7FFFFFFF, SW64(32): Word64)
	%r11664 = load %Pointer, %Pointer* %stackTop
	%r11665 = getelementptr inbounds i8, %Pointer %r11664, i32 32
	%r11666 = bitcast %Pointer %r11665 to %Word64*
	%r11667 = load %Word64, %Word64* %r11666
	%r11669 = icmp ult %Word64 2147483647, %r11667
	%r11668 = zext i1 %r11669 to %Word32
	store %Word32 %r11668, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_339), (0x1, L_349))}
	%r11670 = load %Word32, %Word32* %regW32_0
	%r11671 = trunc %Word32 %r11670 to i1
	br i1 %r11671, label %L_349, label %L_339

L_337:
	; RW32(1): Word32  = Word32_add (RW32(0): Word32, 0x1)
	%r11672 = load %Word32, %Word32* %regW32_0
	%r11673 = add %Word32 %r11672, 1
	store %Word32 %r11673, %Word32* %regW32_1
	; RW32(0): Word32  = RW32(1): Word32
	%r11674 = load %Word32, %Word32* %regW32_1
	store %Word32 %r11674, %Word32* %regW32_0
	; Goto loop_21
	br label %loop_21

loop_21:
	; SW64(32): Word64  = WordS32_extdToWord64 (RW32(0): Word32)
	%r11675 = load %Word32, %Word32* %regW32_0
	%r11676 = sext %Word32 %r11675 to %Word64
	%r11677 = load %Pointer, %Pointer* %stackTop
	%r11678 = getelementptr inbounds i8, %Pointer %r11677, i32 32
	%r11679 = bitcast %Pointer %r11678 to %Word64*
	store %Word64 %r11676, %Word64* %r11679
	; RW8(0): Word8  = XW8 (SQ(24): CPointer, SW64(32): Word64, 1, 0): Word8
	%r11680 = load %Pointer, %Pointer* %stackTop
	%r11681 = getelementptr inbounds i8, %Pointer %r11680, i32 24
	%r11682 = bitcast %Pointer %r11681 to %CPointer*
	%r11683 = load %CPointer, %CPointer* %r11682
	%r11684 = load %Pointer, %Pointer* %stackTop
	%r11685 = getelementptr inbounds i8, %Pointer %r11684, i32 32
	%r11686 = bitcast %Pointer %r11685 to %Word64*
	%r11687 = load %Word64, %Word64* %r11686
	%r11688 = mul nsw %Word64 %r11687, 1
	%r11689 = add nsw %Word64 %r11688, 0
	%r11690 = getelementptr inbounds i8, %CPointer %r11683, %Word64 %r11689
	%r11691 = bitcast %CPointer %r11690 to %Word8*
	%r11692 = load %Word8, %Word8* %r11691
	store %Word8 %r11692, %Word8* %regW8_0
	; switch {test = RW8(0): Word8, default = Some L_337, cases = ((0x0, L_338))}
	%r11693 = load %Word8, %Word8* %regW8_0
	switch %Word8 %r11693, label %L_337 [
		%Word8 0, label %L_338
	]

L_336:
	; RW32(0): Word32  = 0x0
	store %Word32 0, %Word32* %regW32_0
	; Goto loop_21
	br label %loop_21

L_335:
	%r11694 = load %Word64, %Word64* @CReturnW64
	store %Word64 %r11694, %Word64* %regW64_0
	; SQ(24): CPointer  = CPointer_fromWord (RW64(0): Word64)
	%r11695 = load %Word64, %Word64* %regW64_0
	%r11696 = inttoptr %uintptr_t %r11695 to %Pointer
	%r11697 = load %Pointer, %Pointer* %stackTop
	%r11698 = getelementptr inbounds i8, %Pointer %r11697, i32 24
	%r11699 = bitcast %Pointer %r11698 to %CPointer*
	store %CPointer %r11696, %CPointer* %r11699
	; RW32(0): Word32  = CPointer_equal (SQ(24): CPointer, NULL)
	%r11700 = load %Pointer, %Pointer* %stackTop
	%r11701 = getelementptr inbounds i8, %Pointer %r11700, i32 24
	%r11702 = bitcast %Pointer %r11701 to %CPointer*
	%r11703 = load %CPointer, %CPointer* %r11702
	%r11705 = icmp eq %Pointer %r11703, null
	%r11704 = zext i1 %r11705 to %Word32
	store %Word32 %r11704, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_336), (0x1, L_350))}
	%r11706 = load %Word32, %Word32* %regW32_0
	%r11707 = trunc %Word32 %r11706 to i1
	br i1 %r11707, label %L_350, label %L_336

L_334:
	; CCall {args = (SW32(16): Word32), frameInfo = None, func = {args = (Word32), convention = cdecl, kind = Impure, prototype = {args = (Int32), res = Some Word64}, return = Word64, symbolScope = private, target = Posix_Error_strError}, return = Some L_335}
	; GetOperands
	%r11708 = load %Pointer, %Pointer* %stackTop
	%r11709 = getelementptr inbounds i8, %Pointer %r11708, i32 16
	%r11710 = bitcast %Pointer %r11709 to %Word32*
	%r11711 = load %Word32, %Word32* %r11710
	; Call
	%r11712 = call %Word64 @Posix_Error_strError(%Word32 %r11711)
	store %Word64 %r11712, %Word64* @CReturnW64
	br label %L_335

L_333:
	; RW32(0): Word32  = Word32_add (OW32 (<GCState>, 68): Word32, 0xFFFFFFFF)
	%r11713 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11714 = getelementptr inbounds i8, %Pointer %r11713, i32 68
	%r11715 = bitcast %Pointer %r11714 to %Word32*
	%r11716 = load %Word32, %Word32* %r11715
	%r11717 = add %Word32 %r11716, 4294967295
	store %Word32 %r11717, %Word32* %regW32_0
	; OW32 (<GCState>, 68): Word32  = RW32(0): Word32
	%r11718 = load %Word32, %Word32* %regW32_0
	%r11719 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11720 = getelementptr inbounds i8, %Pointer %r11719, i32 68
	%r11721 = bitcast %Pointer %r11720 to %Word32*
	store %Word32 %r11718, %Word32* %r11721
	; RW32(1): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r11722 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11723 = getelementptr inbounds i8, %Pointer %r11722, i32 8
	%r11724 = bitcast %Pointer %r11723 to %CPointer*
	%r11725 = load %CPointer, %CPointer* %r11724
	%r11726 = load %Pointer, %Pointer* %frontier
	%r11728 = icmp ult %Pointer %r11725, %r11726
	%r11727 = zext i1 %r11728 to %Word32
	store %Word32 %r11727, %Word32* %regW32_1
	; switch {test = RW32(1): Word32, default = None, cases = ((0x0, L_334), (0x1, L_351))}
	%r11729 = load %Word32, %Word32* %regW32_1
	%r11730 = trunc %Word32 %r11729 to i1
	br i1 %r11730, label %L_351, label %L_334

L_332:
	%r11732 = load %Pointer, %Pointer* %stackTop
	%r11733 = getelementptr inbounds i8, %Pointer %r11732, i32 16
	%r11734 = bitcast %Pointer %r11733 to %Word32*
	%r11731 = load %Word32, %Word32* @CReturnW32
	store %Word32 %r11731, %Word32* %r11734
	; RW32(0): Word32  = OW32 (<GCState>, 68): Word32
	%r11735 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11736 = getelementptr inbounds i8, %Pointer %r11735, i32 68
	%r11737 = bitcast %Pointer %r11736 to %Word32*
	%r11738 = load %Word32, %Word32* %r11737
	store %Word32 %r11738, %Word32* %regW32_0
	; RW32(1): Word32  = Word32_equal (RW32(0): Word32, 0x0)
	%r11739 = load %Word32, %Word32* %regW32_0
	%r11741 = icmp eq %Word32 %r11739, 0
	%r11740 = zext i1 %r11741 to %Word32
	store %Word32 %r11740, %Word32* %regW32_1
	; switch {test = RW32(1): Word32, default = None, cases = ((0x0, L_333), (0x1, L_353))}
	%r11742 = load %Word32, %Word32* %regW32_1
	%r11743 = trunc %Word32 %r11742 to i1
	br i1 %r11743, label %L_353, label %L_333

L_331:
	; CCall {args = (), frameInfo = None, func = {args = (), convention = cdecl, kind = Impure, prototype = {args = (), res = Some Int32}, return = Word32, symbolScope = private, target = Posix_Error_getErrno}, return = Some L_332}
	; GetOperands
	; Call
	%r11744 = call %Word32 @Posix_Error_getErrno()
	store %Word32 %r11744, %Word32* @CReturnW32
	br label %L_332

L_330:
	; Goto L_66
	br label %L_66

L_329:
	; Goto L_328
	br label %L_328

L_328:
	; RW64(1): Word64  = Word64_lshift (RW64(0): Word64, 0x1)
	%r11745 = load %Word64, %Word64* %regW64_0
	%r11746 = zext %Word32 1 to %Word64
	%r11747 = shl %Word64 %r11745, %r11746
	store %Word64 %r11747, %Word64* %regW64_1
	; RW64(2): Word64  = Word64_orb (RW64(1): Word64, 0x1)
	%r11748 = load %Word64, %Word64* %regW64_1
	%r11749 = or %Word64 %r11748, 1
	store %Word64 %r11749, %Word64* %regW64_2
	; RP(0): Objptr (opt_6)  = Cast (RW64(2): Word64, Objptr (opt_6))
	%r11750 = load %Word64, %Word64* %regW64_2
	%r11751 = inttoptr %Word64 %r11750 to %Objptr
	store %Objptr %r11751, %Objptr* %regP_0
	; Goto L_89
	br label %L_89

L_327:
	; Goto L_328
	br label %L_328

L_326:
	; RW64(1): Word64  = Word64_neg (RW64(0): Word64)
	%r11752 = load %Word64, %Word64* %regW64_0
	%r11753 = sub %Word64 0, %r11752
	store %Word64 %r11753, %Word64* %regW64_1
	; SP(112): Objptr (opt_46)  = glob {index = 1, isRoot = true, ty = Objptr (opt_46)}
	%r11754 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 1
	%r11755 = load %Objptr, %Objptr* %r11754
	%r11756 = load %Pointer, %Pointer* %stackTop
	%r11757 = getelementptr inbounds i8, %Pointer %r11756, i32 112
	%r11758 = bitcast %Pointer %r11757 to %Objptr*
	store %Objptr %r11755, %Objptr* %r11758
	; SW64(120): Word64  = 0x1
	%r11759 = load %Pointer, %Pointer* %stackTop
	%r11760 = getelementptr inbounds i8, %Pointer %r11759, i32 120
	%r11761 = bitcast %Pointer %r11760 to %Word64*
	store %Word64 1, %Word64* %r11761
	; SW64(128): Word64  = RW64(1): Word64
	%r11762 = load %Word64, %Word64* %regW64_1
	%r11763 = load %Pointer, %Pointer* %stackTop
	%r11764 = getelementptr inbounds i8, %Pointer %r11763, i32 128
	%r11765 = bitcast %Pointer %r11764 to %Word64*
	store %Word64 %r11762, %Word64* %r11765
	; Goto loop_9
	br label %loop_9

L_325:
	; Push(-144)
	%r11766 = load %Pointer, %Pointer* %stackTop
	%r11767 = getelementptr inbounds i8, %Pointer %r11766, i32 -144
	store %Pointer %r11767, %Pointer* %stackTop
	; Goto L_78
	br label %L_78

L_324:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 57}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_325}
	; GetOperands
	%r11768 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11769 = load %Pointer, %Pointer* %stackTop
	%r11770 = getelementptr inbounds i8, %Pointer %r11769, i32 136
	%r11771 = bitcast %Pointer %r11770 to %uintptr_t*
	store %uintptr_t 57, %uintptr_t* %r11771
	; Push(144)
	%r11772 = load %Pointer, %Pointer* %stackTop
	%r11773 = getelementptr inbounds i8, %Pointer %r11772, i32 144
	store %Pointer %r11773, %Pointer* %stackTop
	; FlushFrontier
	%r11774 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11775 = getelementptr inbounds i8, %Pointer %r11774, i32 0
	%r11776 = bitcast %Pointer %r11775 to %Pointer*
	%r11777 = load %Pointer, %Pointer* %frontier
	store %Pointer %r11777, %Pointer* %r11776
	; FlushStackTop
	%r11778 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11779 = getelementptr inbounds i8, %Pointer %r11778, i32 16
	%r11780 = bitcast %Pointer %r11779 to %Pointer*
	%r11781 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r11781, %Pointer* %r11780
	; Call
	call void @GC_collect(%Pointer %r11768, %Word64 0, %Word32 0)
	; CacheFrontier
	%r11782 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11783 = getelementptr inbounds i8, %Pointer %r11782, i32 0
	%r11784 = bitcast %Pointer %r11783 to %Pointer*
	%r11785 = load %Pointer, %Pointer* %r11784
	store %Pointer %r11785, %Pointer* %frontier
	; CacheStackTop
	%r11786 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11787 = getelementptr inbounds i8, %Pointer %r11786, i32 16
	%r11788 = bitcast %Pointer %r11787 to %Pointer*
	%r11789 = load %Pointer, %Pointer* %r11788
	store %Pointer %r11789, %Pointer* %stackTop
	br label %L_325

L_323:
	; RP(0): Objptr (opt_22)  = glob {index = 21, isRoot = true, ty = Objptr (opt_22)}
	%r11790 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 21
	%r11791 = load %Objptr, %Objptr* %r11790
	store %Objptr %r11791, %Objptr* %regP_0
	; Goto L_88
	br label %L_88

L_322:
	; RP(0): Objptr (opt_46)  = OP (SP(112): Objptr (opt_46), 8): Objptr (opt_46)
	%r11792 = load %Pointer, %Pointer* %stackTop
	%r11793 = getelementptr inbounds i8, %Pointer %r11792, i32 112
	%r11794 = bitcast %Pointer %r11793 to %Objptr*
	%r11795 = load %Objptr, %Objptr* %r11794
	%r11796 = getelementptr inbounds i8, %Objptr %r11795, i32 8
	%r11797 = bitcast %Objptr %r11796 to %Objptr*
	%r11798 = load %Objptr, %Objptr* %r11797
	store %Objptr %r11798, %Objptr* %regP_0
	; RP(1): Objptr (opt_8)  = OP (SP(112): Objptr (opt_46), 0): Objptr (opt_8)
	%r11799 = load %Pointer, %Pointer* %stackTop
	%r11800 = getelementptr inbounds i8, %Pointer %r11799, i32 112
	%r11801 = bitcast %Pointer %r11800 to %Objptr*
	%r11802 = load %Objptr, %Objptr* %r11801
	%r11803 = getelementptr inbounds i8, %Objptr %r11802, i32 0
	%r11804 = bitcast %Objptr %r11803 to %Objptr*
	%r11805 = load %Objptr, %Objptr* %r11804
	store %Objptr %r11805, %Objptr* %regP_1
	; RP(2): Objptr (opt_22)  = glob {index = 21, isRoot = true, ty = Objptr (opt_22)}
	%r11806 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 21
	%r11807 = load %Objptr, %Objptr* %r11806
	store %Objptr %r11807, %Objptr* %regP_2
	; Goto L_85
	br label %L_85

L_321:
	; switch {test = Cast (SP(112): Objptr (opt_46), Bits64), default = Some L_322, cases = ((0x1, L_323))}
	%r11808 = load %Pointer, %Pointer* %stackTop
	%r11809 = getelementptr inbounds i8, %Pointer %r11808, i32 112
	%r11810 = bitcast %Pointer %r11809 to %Objptr*
	%r11811 = load %Objptr, %Objptr* %r11810
	%r11812 = ptrtoint %Objptr %r11811 to %Word64
	switch %Word64 %r11812, label %L_322 [
		%Word64 1, label %L_323
	]

L_320:
	; Goto L_88
	br label %L_88

L_319:
	; Goto numLimbs_0
	br label %numLimbs_0

L_318:
	; Goto numLimbs_0
	br label %numLimbs_0

L_317:
	; Goto L_94
	br label %L_94

L_316:
	; RW64(0): Word64  = Word64_lshift (RW64(1): Word64, 0x1)
	%r11813 = load %Word64, %Word64* %regW64_1
	%r11814 = zext %Word32 1 to %Word64
	%r11815 = shl %Word64 %r11813, %r11814
	store %Word64 %r11815, %Word64* %regW64_0
	; RW64(2): Word64  = Word64_orb (RW64(0): Word64, 0x1)
	%r11816 = load %Word64, %Word64* %regW64_0
	%r11817 = or %Word64 %r11816, 1
	store %Word64 %r11817, %Word64* %regW64_2
	; RW64(3): Word64  = Word64_xorb (RW64(2): Word64, RW64(1): Word64)
	%r11818 = load %Word64, %Word64* %regW64_2
	%r11819 = load %Word64, %Word64* %regW64_1
	%r11820 = xor %Word64 %r11818, %r11819
	store %Word64 %r11820, %Word64* %regW64_3
	; RW32(0): Word32  = WordS64_lt (RW64(3): Word64, 0x0)
	%r11821 = load %Word64, %Word64* %regW64_3
	%r11823 = icmp slt %Word64 %r11821, 0
	%r11822 = zext i1 %r11823 to %Word32
	store %Word32 %r11822, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_317), (0x1, L_318))}
	%r11824 = load %Word32, %Word32* %regW32_0
	%r11825 = trunc %Word32 %r11824 to i1
	br i1 %r11825, label %L_318, label %L_317

L_315:
	; RW64(0): Word64  = RW64(1): Word64
	%r11826 = load %Word64, %Word64* %regW64_1
	store %Word64 %r11826, %Word64* %regW64_0
	; Goto L_92
	br label %L_92

L_314:
	; RW64(0): Word64  = OW64 (RP(0): Objptr (opt_6), ~16): Word64
	%r11827 = load %Objptr, %Objptr* %regP_0
	%r11828 = getelementptr inbounds i8, %Objptr %r11827, i32 -16
	%r11829 = bitcast %Objptr %r11828 to %Word64*
	%r11830 = load %Word64, %Word64* %r11829
	store %Word64 %r11830, %Word64* %regW64_0
	; Arith {prim = WordS64_subCheck, args = (RW64(0): Word64, 0x1), dst = RW64(1): Word64, overflow = L_66, success = L_315}
	%r11831 = load %Word64, %Word64* %regW64_0
	%r11832 = call {%Word64, i1} @llvm.ssub.with.overflow.i64(%Word64 %r11831, %Word64 1)
	%r11833 = extractvalue {%Word64, i1} %r11832, 0
	%r11834 = extractvalue {%Word64, i1} %r11832, 1
	store %Word64 %r11833, %Word64* %regW64_1
	br i1 %r11834, label %L_66, label %L_315

L_313:
	; Goto L_312
	br label %L_312

L_312:
	; RW64(1): Word64  = Word64_lshift (RW64(0): Word64, 0x1)
	%r11835 = load %Word64, %Word64* %regW64_0
	%r11836 = zext %Word32 1 to %Word64
	%r11837 = shl %Word64 %r11835, %r11836
	store %Word64 %r11837, %Word64* %regW64_1
	; RW64(2): Word64  = Word64_orb (RW64(1): Word64, 0x1)
	%r11838 = load %Word64, %Word64* %regW64_1
	%r11839 = or %Word64 %r11838, 1
	store %Word64 %r11839, %Word64* %regW64_2
	; RP(0): Objptr (opt_6)  = Cast (RW64(2): Word64, Objptr (opt_6))
	%r11840 = load %Word64, %Word64* %regW64_2
	%r11841 = inttoptr %Word64 %r11840 to %Objptr
	store %Objptr %r11841, %Objptr* %regP_0
	; Goto L_110
	br label %L_110

L_311:
	; Goto L_312
	br label %L_312

L_310:
	; RW64(1): Word64  = Word64_neg (RW64(0): Word64)
	%r11842 = load %Word64, %Word64* %regW64_0
	%r11843 = sub %Word64 0, %r11842
	store %Word64 %r11843, %Word64* %regW64_1
	; SP(112): Objptr (opt_46)  = glob {index = 1, isRoot = true, ty = Objptr (opt_46)}
	%r11844 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 1
	%r11845 = load %Objptr, %Objptr* %r11844
	%r11846 = load %Pointer, %Pointer* %stackTop
	%r11847 = getelementptr inbounds i8, %Pointer %r11846, i32 112
	%r11848 = bitcast %Pointer %r11847 to %Objptr*
	store %Objptr %r11845, %Objptr* %r11848
	; SW64(120): Word64  = 0x1
	%r11849 = load %Pointer, %Pointer* %stackTop
	%r11850 = getelementptr inbounds i8, %Pointer %r11849, i32 120
	%r11851 = bitcast %Pointer %r11850 to %Word64*
	store %Word64 1, %Word64* %r11851
	; SW64(128): Word64  = RW64(1): Word64
	%r11852 = load %Word64, %Word64* %regW64_1
	%r11853 = load %Pointer, %Pointer* %stackTop
	%r11854 = getelementptr inbounds i8, %Pointer %r11853, i32 128
	%r11855 = bitcast %Pointer %r11854 to %Word64*
	store %Word64 %r11852, %Word64* %r11855
	; Goto loop_10
	br label %loop_10

L_309:
	; Push(-144)
	%r11856 = load %Pointer, %Pointer* %stackTop
	%r11857 = getelementptr inbounds i8, %Pointer %r11856, i32 -144
	store %Pointer %r11857, %Pointer* %stackTop
	; Goto L_99
	br label %L_99

L_308:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 56}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_309}
	; GetOperands
	%r11858 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11859 = load %Pointer, %Pointer* %stackTop
	%r11860 = getelementptr inbounds i8, %Pointer %r11859, i32 136
	%r11861 = bitcast %Pointer %r11860 to %uintptr_t*
	store %uintptr_t 56, %uintptr_t* %r11861
	; Push(144)
	%r11862 = load %Pointer, %Pointer* %stackTop
	%r11863 = getelementptr inbounds i8, %Pointer %r11862, i32 144
	store %Pointer %r11863, %Pointer* %stackTop
	; FlushFrontier
	%r11864 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11865 = getelementptr inbounds i8, %Pointer %r11864, i32 0
	%r11866 = bitcast %Pointer %r11865 to %Pointer*
	%r11867 = load %Pointer, %Pointer* %frontier
	store %Pointer %r11867, %Pointer* %r11866
	; FlushStackTop
	%r11868 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11869 = getelementptr inbounds i8, %Pointer %r11868, i32 16
	%r11870 = bitcast %Pointer %r11869 to %Pointer*
	%r11871 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r11871, %Pointer* %r11870
	; Call
	call void @GC_collect(%Pointer %r11858, %Word64 0, %Word32 0)
	; CacheFrontier
	%r11872 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11873 = getelementptr inbounds i8, %Pointer %r11872, i32 0
	%r11874 = bitcast %Pointer %r11873 to %Pointer*
	%r11875 = load %Pointer, %Pointer* %r11874
	store %Pointer %r11875, %Pointer* %frontier
	; CacheStackTop
	%r11876 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11877 = getelementptr inbounds i8, %Pointer %r11876, i32 16
	%r11878 = bitcast %Pointer %r11877 to %Pointer*
	%r11879 = load %Pointer, %Pointer* %r11878
	store %Pointer %r11879, %Pointer* %stackTop
	br label %L_309

L_307:
	; RP(0): Objptr (opt_22)  = glob {index = 21, isRoot = true, ty = Objptr (opt_22)}
	%r11880 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 21
	%r11881 = load %Objptr, %Objptr* %r11880
	store %Objptr %r11881, %Objptr* %regP_0
	; Goto L_109
	br label %L_109

L_306:
	; RP(0): Objptr (opt_46)  = OP (SP(112): Objptr (opt_46), 8): Objptr (opt_46)
	%r11882 = load %Pointer, %Pointer* %stackTop
	%r11883 = getelementptr inbounds i8, %Pointer %r11882, i32 112
	%r11884 = bitcast %Pointer %r11883 to %Objptr*
	%r11885 = load %Objptr, %Objptr* %r11884
	%r11886 = getelementptr inbounds i8, %Objptr %r11885, i32 8
	%r11887 = bitcast %Objptr %r11886 to %Objptr*
	%r11888 = load %Objptr, %Objptr* %r11887
	store %Objptr %r11888, %Objptr* %regP_0
	; RP(1): Objptr (opt_8)  = OP (SP(112): Objptr (opt_46), 0): Objptr (opt_8)
	%r11889 = load %Pointer, %Pointer* %stackTop
	%r11890 = getelementptr inbounds i8, %Pointer %r11889, i32 112
	%r11891 = bitcast %Pointer %r11890 to %Objptr*
	%r11892 = load %Objptr, %Objptr* %r11891
	%r11893 = getelementptr inbounds i8, %Objptr %r11892, i32 0
	%r11894 = bitcast %Objptr %r11893 to %Objptr*
	%r11895 = load %Objptr, %Objptr* %r11894
	store %Objptr %r11895, %Objptr* %regP_1
	; RP(2): Objptr (opt_22)  = glob {index = 21, isRoot = true, ty = Objptr (opt_22)}
	%r11896 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 21
	%r11897 = load %Objptr, %Objptr* %r11896
	store %Objptr %r11897, %Objptr* %regP_2
	; Goto L_106
	br label %L_106

L_305:
	; switch {test = Cast (SP(112): Objptr (opt_46), Bits64), default = Some L_306, cases = ((0x1, L_307))}
	%r11898 = load %Pointer, %Pointer* %stackTop
	%r11899 = getelementptr inbounds i8, %Pointer %r11898, i32 112
	%r11900 = bitcast %Pointer %r11899 to %Objptr*
	%r11901 = load %Objptr, %Objptr* %r11900
	%r11902 = ptrtoint %Objptr %r11901 to %Word64
	switch %Word64 %r11902, label %L_306 [
		%Word64 1, label %L_307
	]

L_304:
	; Goto L_109
	br label %L_109

L_303:
	; Goto numLimbs_1
	br label %numLimbs_1

L_302:
	; Goto numLimbs_1
	br label %numLimbs_1

L_301:
	; Goto L_115
	br label %L_115

L_300:
	; RW64(0): Word64  = Word64_lshift (RW64(1): Word64, 0x1)
	%r11903 = load %Word64, %Word64* %regW64_1
	%r11904 = zext %Word32 1 to %Word64
	%r11905 = shl %Word64 %r11903, %r11904
	store %Word64 %r11905, %Word64* %regW64_0
	; RW64(2): Word64  = Word64_orb (RW64(0): Word64, 0x1)
	%r11906 = load %Word64, %Word64* %regW64_0
	%r11907 = or %Word64 %r11906, 1
	store %Word64 %r11907, %Word64* %regW64_2
	; RW64(3): Word64  = Word64_xorb (RW64(2): Word64, RW64(1): Word64)
	%r11908 = load %Word64, %Word64* %regW64_2
	%r11909 = load %Word64, %Word64* %regW64_1
	%r11910 = xor %Word64 %r11908, %r11909
	store %Word64 %r11910, %Word64* %regW64_3
	; RW32(0): Word32  = WordS64_lt (RW64(3): Word64, 0x0)
	%r11911 = load %Word64, %Word64* %regW64_3
	%r11913 = icmp slt %Word64 %r11911, 0
	%r11912 = zext i1 %r11913 to %Word32
	store %Word32 %r11912, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_301), (0x1, L_302))}
	%r11914 = load %Word32, %Word32* %regW32_0
	%r11915 = trunc %Word32 %r11914 to i1
	br i1 %r11915, label %L_302, label %L_301

L_299:
	; RW64(0): Word64  = RW64(1): Word64
	%r11916 = load %Word64, %Word64* %regW64_1
	store %Word64 %r11916, %Word64* %regW64_0
	; Goto L_113
	br label %L_113

L_298:
	; RW64(0): Word64  = OW64 (RP(0): Objptr (opt_6), ~16): Word64
	%r11917 = load %Objptr, %Objptr* %regP_0
	%r11918 = getelementptr inbounds i8, %Objptr %r11917, i32 -16
	%r11919 = bitcast %Objptr %r11918 to %Word64*
	%r11920 = load %Word64, %Word64* %r11919
	store %Word64 %r11920, %Word64* %regW64_0
	; Arith {prim = WordS64_subCheck, args = (RW64(0): Word64, 0x1), dst = RW64(1): Word64, overflow = L_66, success = L_299}
	%r11921 = load %Word64, %Word64* %regW64_0
	%r11922 = call {%Word64, i1} @llvm.ssub.with.overflow.i64(%Word64 %r11921, %Word64 1)
	%r11923 = extractvalue {%Word64, i1} %r11922, 0
	%r11924 = extractvalue {%Word64, i1} %r11922, 1
	store %Word64 %r11923, %Word64* %regW64_1
	br i1 %r11924, label %L_66, label %L_299

L_297:
	; Goto L_296
	br label %L_296

L_296:
	; RW64(1): Word64  = Word64_lshift (RW64(0): Word64, 0x1)
	%r11925 = load %Word64, %Word64* %regW64_0
	%r11926 = zext %Word32 1 to %Word64
	%r11927 = shl %Word64 %r11925, %r11926
	store %Word64 %r11927, %Word64* %regW64_1
	; RW64(2): Word64  = Word64_orb (RW64(1): Word64, 0x1)
	%r11928 = load %Word64, %Word64* %regW64_1
	%r11929 = or %Word64 %r11928, 1
	store %Word64 %r11929, %Word64* %regW64_2
	; RP(0): Objptr (opt_6)  = Cast (RW64(2): Word64, Objptr (opt_6))
	%r11930 = load %Word64, %Word64* %regW64_2
	%r11931 = inttoptr %Word64 %r11930 to %Objptr
	store %Objptr %r11931, %Objptr* %regP_0
	; Goto L_131
	br label %L_131

L_295:
	; Goto L_296
	br label %L_296

L_294:
	; RW64(1): Word64  = Word64_neg (RW64(0): Word64)
	%r11932 = load %Word64, %Word64* %regW64_0
	%r11933 = sub %Word64 0, %r11932
	store %Word64 %r11933, %Word64* %regW64_1
	; SP(112): Objptr (opt_46)  = glob {index = 1, isRoot = true, ty = Objptr (opt_46)}
	%r11934 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 1
	%r11935 = load %Objptr, %Objptr* %r11934
	%r11936 = load %Pointer, %Pointer* %stackTop
	%r11937 = getelementptr inbounds i8, %Pointer %r11936, i32 112
	%r11938 = bitcast %Pointer %r11937 to %Objptr*
	store %Objptr %r11935, %Objptr* %r11938
	; SW64(120): Word64  = 0x1
	%r11939 = load %Pointer, %Pointer* %stackTop
	%r11940 = getelementptr inbounds i8, %Pointer %r11939, i32 120
	%r11941 = bitcast %Pointer %r11940 to %Word64*
	store %Word64 1, %Word64* %r11941
	; SW64(128): Word64  = RW64(1): Word64
	%r11942 = load %Word64, %Word64* %regW64_1
	%r11943 = load %Pointer, %Pointer* %stackTop
	%r11944 = getelementptr inbounds i8, %Pointer %r11943, i32 128
	%r11945 = bitcast %Pointer %r11944 to %Word64*
	store %Word64 %r11942, %Word64* %r11945
	; Goto loop_11
	br label %loop_11

L_293:
	; Push(-144)
	%r11946 = load %Pointer, %Pointer* %stackTop
	%r11947 = getelementptr inbounds i8, %Pointer %r11946, i32 -144
	store %Pointer %r11947, %Pointer* %stackTop
	; Goto L_120
	br label %L_120

L_292:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 55}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_293}
	; GetOperands
	%r11948 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11949 = load %Pointer, %Pointer* %stackTop
	%r11950 = getelementptr inbounds i8, %Pointer %r11949, i32 136
	%r11951 = bitcast %Pointer %r11950 to %uintptr_t*
	store %uintptr_t 55, %uintptr_t* %r11951
	; Push(144)
	%r11952 = load %Pointer, %Pointer* %stackTop
	%r11953 = getelementptr inbounds i8, %Pointer %r11952, i32 144
	store %Pointer %r11953, %Pointer* %stackTop
	; FlushFrontier
	%r11954 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11955 = getelementptr inbounds i8, %Pointer %r11954, i32 0
	%r11956 = bitcast %Pointer %r11955 to %Pointer*
	%r11957 = load %Pointer, %Pointer* %frontier
	store %Pointer %r11957, %Pointer* %r11956
	; FlushStackTop
	%r11958 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11959 = getelementptr inbounds i8, %Pointer %r11958, i32 16
	%r11960 = bitcast %Pointer %r11959 to %Pointer*
	%r11961 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r11961, %Pointer* %r11960
	; Call
	call void @GC_collect(%Pointer %r11948, %Word64 0, %Word32 0)
	; CacheFrontier
	%r11962 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11963 = getelementptr inbounds i8, %Pointer %r11962, i32 0
	%r11964 = bitcast %Pointer %r11963 to %Pointer*
	%r11965 = load %Pointer, %Pointer* %r11964
	store %Pointer %r11965, %Pointer* %frontier
	; CacheStackTop
	%r11966 = bitcast %struct.GC_state* @gcState to %Pointer
	%r11967 = getelementptr inbounds i8, %Pointer %r11966, i32 16
	%r11968 = bitcast %Pointer %r11967 to %Pointer*
	%r11969 = load %Pointer, %Pointer* %r11968
	store %Pointer %r11969, %Pointer* %stackTop
	br label %L_293

L_291:
	; RP(0): Objptr (opt_22)  = glob {index = 21, isRoot = true, ty = Objptr (opt_22)}
	%r11970 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 21
	%r11971 = load %Objptr, %Objptr* %r11970
	store %Objptr %r11971, %Objptr* %regP_0
	; Goto L_130
	br label %L_130

L_290:
	; RP(0): Objptr (opt_46)  = OP (SP(112): Objptr (opt_46), 8): Objptr (opt_46)
	%r11972 = load %Pointer, %Pointer* %stackTop
	%r11973 = getelementptr inbounds i8, %Pointer %r11972, i32 112
	%r11974 = bitcast %Pointer %r11973 to %Objptr*
	%r11975 = load %Objptr, %Objptr* %r11974
	%r11976 = getelementptr inbounds i8, %Objptr %r11975, i32 8
	%r11977 = bitcast %Objptr %r11976 to %Objptr*
	%r11978 = load %Objptr, %Objptr* %r11977
	store %Objptr %r11978, %Objptr* %regP_0
	; RP(1): Objptr (opt_8)  = OP (SP(112): Objptr (opt_46), 0): Objptr (opt_8)
	%r11979 = load %Pointer, %Pointer* %stackTop
	%r11980 = getelementptr inbounds i8, %Pointer %r11979, i32 112
	%r11981 = bitcast %Pointer %r11980 to %Objptr*
	%r11982 = load %Objptr, %Objptr* %r11981
	%r11983 = getelementptr inbounds i8, %Objptr %r11982, i32 0
	%r11984 = bitcast %Objptr %r11983 to %Objptr*
	%r11985 = load %Objptr, %Objptr* %r11984
	store %Objptr %r11985, %Objptr* %regP_1
	; RP(2): Objptr (opt_22)  = glob {index = 21, isRoot = true, ty = Objptr (opt_22)}
	%r11986 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 21
	%r11987 = load %Objptr, %Objptr* %r11986
	store %Objptr %r11987, %Objptr* %regP_2
	; Goto L_127
	br label %L_127

L_289:
	; switch {test = Cast (SP(112): Objptr (opt_46), Bits64), default = Some L_290, cases = ((0x1, L_291))}
	%r11988 = load %Pointer, %Pointer* %stackTop
	%r11989 = getelementptr inbounds i8, %Pointer %r11988, i32 112
	%r11990 = bitcast %Pointer %r11989 to %Objptr*
	%r11991 = load %Objptr, %Objptr* %r11990
	%r11992 = ptrtoint %Objptr %r11991 to %Word64
	switch %Word64 %r11992, label %L_290 [
		%Word64 1, label %L_291
	]

L_288:
	; Goto L_130
	br label %L_130

L_287:
	; Goto numLimbs_2
	br label %numLimbs_2

L_286:
	; Goto numLimbs_2
	br label %numLimbs_2

L_285:
	; Goto L_136
	br label %L_136

L_284:
	; RW64(0): Word64  = Word64_lshift (RW64(1): Word64, 0x1)
	%r11993 = load %Word64, %Word64* %regW64_1
	%r11994 = zext %Word32 1 to %Word64
	%r11995 = shl %Word64 %r11993, %r11994
	store %Word64 %r11995, %Word64* %regW64_0
	; RW64(2): Word64  = Word64_orb (RW64(0): Word64, 0x1)
	%r11996 = load %Word64, %Word64* %regW64_0
	%r11997 = or %Word64 %r11996, 1
	store %Word64 %r11997, %Word64* %regW64_2
	; RW64(3): Word64  = Word64_xorb (RW64(2): Word64, RW64(1): Word64)
	%r11998 = load %Word64, %Word64* %regW64_2
	%r11999 = load %Word64, %Word64* %regW64_1
	%r12000 = xor %Word64 %r11998, %r11999
	store %Word64 %r12000, %Word64* %regW64_3
	; RW32(0): Word32  = WordS64_lt (RW64(3): Word64, 0x0)
	%r12001 = load %Word64, %Word64* %regW64_3
	%r12003 = icmp slt %Word64 %r12001, 0
	%r12002 = zext i1 %r12003 to %Word32
	store %Word32 %r12002, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_285), (0x1, L_286))}
	%r12004 = load %Word32, %Word32* %regW32_0
	%r12005 = trunc %Word32 %r12004 to i1
	br i1 %r12005, label %L_286, label %L_285

L_283:
	; RW64(0): Word64  = RW64(1): Word64
	%r12006 = load %Word64, %Word64* %regW64_1
	store %Word64 %r12006, %Word64* %regW64_0
	; Goto L_134
	br label %L_134

L_282:
	; RW64(0): Word64  = OW64 (RP(0): Objptr (opt_6), ~16): Word64
	%r12007 = load %Objptr, %Objptr* %regP_0
	%r12008 = getelementptr inbounds i8, %Objptr %r12007, i32 -16
	%r12009 = bitcast %Objptr %r12008 to %Word64*
	%r12010 = load %Word64, %Word64* %r12009
	store %Word64 %r12010, %Word64* %regW64_0
	; Arith {prim = WordS64_subCheck, args = (RW64(0): Word64, 0x1), dst = RW64(1): Word64, overflow = L_66, success = L_283}
	%r12011 = load %Word64, %Word64* %regW64_0
	%r12012 = call {%Word64, i1} @llvm.ssub.with.overflow.i64(%Word64 %r12011, %Word64 1)
	%r12013 = extractvalue {%Word64, i1} %r12012, 0
	%r12014 = extractvalue {%Word64, i1} %r12012, 1
	store %Word64 %r12013, %Word64* %regW64_1
	br i1 %r12014, label %L_66, label %L_283

L_281:
	; RP(0): Objptr (opt_34, opt_33, opt_32, opt_31)  = Cast (glob {index = 9, isRoot = true, ty = Objptr (opt_31)}, Objptr (opt_34, opt_33, opt_32, opt_31))
	%r12015 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 9
	%r12016 = load %Objptr, %Objptr* %r12015
	%r12017 = bitcast %Objptr %r12016 to %Objptr
	store %Objptr %r12017, %Objptr* %regP_0
	; Goto L_14
	br label %L_14

L_280:
	; Push(-120)
	%r12018 = load %Pointer, %Pointer* %stackTop
	%r12019 = getelementptr inbounds i8, %Pointer %r12018, i32 -120
	store %Pointer %r12019, %Pointer* %stackTop
	; Goto L_138
	br label %L_138

L_279:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 54}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_280}
	; GetOperands
	%r12020 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12021 = load %Pointer, %Pointer* %stackTop
	%r12022 = getelementptr inbounds i8, %Pointer %r12021, i32 112
	%r12023 = bitcast %Pointer %r12022 to %uintptr_t*
	store %uintptr_t 54, %uintptr_t* %r12023
	; Push(120)
	%r12024 = load %Pointer, %Pointer* %stackTop
	%r12025 = getelementptr inbounds i8, %Pointer %r12024, i32 120
	store %Pointer %r12025, %Pointer* %stackTop
	; FlushFrontier
	%r12026 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12027 = getelementptr inbounds i8, %Pointer %r12026, i32 0
	%r12028 = bitcast %Pointer %r12027 to %Pointer*
	%r12029 = load %Pointer, %Pointer* %frontier
	store %Pointer %r12029, %Pointer* %r12028
	; FlushStackTop
	%r12030 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12031 = getelementptr inbounds i8, %Pointer %r12030, i32 16
	%r12032 = bitcast %Pointer %r12031 to %Pointer*
	%r12033 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r12033, %Pointer* %r12032
	; Call
	call void @GC_collect(%Pointer %r12020, %Word64 0, %Word32 0)
	; CacheFrontier
	%r12034 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12035 = getelementptr inbounds i8, %Pointer %r12034, i32 0
	%r12036 = bitcast %Pointer %r12035 to %Pointer*
	%r12037 = load %Pointer, %Pointer* %r12036
	store %Pointer %r12037, %Pointer* %frontier
	; CacheStackTop
	%r12038 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12039 = getelementptr inbounds i8, %Pointer %r12038, i32 16
	%r12040 = bitcast %Pointer %r12039 to %Pointer*
	%r12041 = load %Pointer, %Pointer* %r12040
	store %Pointer %r12041, %Pointer* %stackTop
	br label %L_280

L_278:
	; RP(0): Objptr (opt_12)  = SP(24): Objptr (opt_12)
	%r12042 = load %Pointer, %Pointer* %stackTop
	%r12043 = getelementptr inbounds i8, %Pointer %r12042, i32 24
	%r12044 = bitcast %Pointer %r12043 to %Objptr*
	%r12045 = load %Objptr, %Objptr* %r12044
	store %Objptr %r12045, %Objptr* %regP_0
	; Goto L_145
	br label %L_145

L_277:
	; Push(-120)
	%r12046 = load %Pointer, %Pointer* %stackTop
	%r12047 = getelementptr inbounds i8, %Pointer %r12046, i32 -120
	store %Pointer %r12047, %Pointer* %stackTop
	; Goto L_141
	br label %L_141

L_276:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 53}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_277}
	; GetOperands
	%r12048 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12049 = load %Pointer, %Pointer* %stackTop
	%r12050 = getelementptr inbounds i8, %Pointer %r12049, i32 112
	%r12051 = bitcast %Pointer %r12050 to %uintptr_t*
	store %uintptr_t 53, %uintptr_t* %r12051
	; Push(120)
	%r12052 = load %Pointer, %Pointer* %stackTop
	%r12053 = getelementptr inbounds i8, %Pointer %r12052, i32 120
	store %Pointer %r12053, %Pointer* %stackTop
	; FlushFrontier
	%r12054 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12055 = getelementptr inbounds i8, %Pointer %r12054, i32 0
	%r12056 = bitcast %Pointer %r12055 to %Pointer*
	%r12057 = load %Pointer, %Pointer* %frontier
	store %Pointer %r12057, %Pointer* %r12056
	; FlushStackTop
	%r12058 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12059 = getelementptr inbounds i8, %Pointer %r12058, i32 16
	%r12060 = bitcast %Pointer %r12059 to %Pointer*
	%r12061 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r12061, %Pointer* %r12060
	; Call
	call void @GC_collect(%Pointer %r12048, %Word64 0, %Word32 0)
	; CacheFrontier
	%r12062 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12063 = getelementptr inbounds i8, %Pointer %r12062, i32 0
	%r12064 = bitcast %Pointer %r12063 to %Pointer*
	%r12065 = load %Pointer, %Pointer* %r12064
	store %Pointer %r12065, %Pointer* %frontier
	; CacheStackTop
	%r12066 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12067 = getelementptr inbounds i8, %Pointer %r12066, i32 16
	%r12068 = bitcast %Pointer %r12067 to %Pointer*
	%r12069 = load %Pointer, %Pointer* %r12068
	store %Pointer %r12069, %Pointer* %stackTop
	br label %L_277

L_275:
	; RP(0): Objptr (opt_34, opt_33, opt_32, opt_31)  = Cast (glob {index = 9, isRoot = true, ty = Objptr (opt_31)}, Objptr (opt_34, opt_33, opt_32, opt_31))
	%r12070 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 9
	%r12071 = load %Objptr, %Objptr* %r12070
	%r12072 = bitcast %Objptr %r12071 to %Objptr
	store %Objptr %r12072, %Objptr* %regP_0
	; Goto L_14
	br label %L_14

L_274:
	; Push(-32)
	%r12073 = load %Pointer, %Pointer* %stackTop
	%r12074 = getelementptr inbounds i8, %Pointer %r12073, i32 -32
	store %Pointer %r12074, %Pointer* %stackTop
	; Goto L_256
	br label %L_256

L_273:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 52}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_274}
	; GetOperands
	%r12075 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12076 = load %Pointer, %Pointer* %stackTop
	%r12077 = getelementptr inbounds i8, %Pointer %r12076, i32 24
	%r12078 = bitcast %Pointer %r12077 to %uintptr_t*
	store %uintptr_t 52, %uintptr_t* %r12078
	; Push(32)
	%r12079 = load %Pointer, %Pointer* %stackTop
	%r12080 = getelementptr inbounds i8, %Pointer %r12079, i32 32
	store %Pointer %r12080, %Pointer* %stackTop
	; FlushFrontier
	%r12081 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12082 = getelementptr inbounds i8, %Pointer %r12081, i32 0
	%r12083 = bitcast %Pointer %r12082 to %Pointer*
	%r12084 = load %Pointer, %Pointer* %frontier
	store %Pointer %r12084, %Pointer* %r12083
	; FlushStackTop
	%r12085 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12086 = getelementptr inbounds i8, %Pointer %r12085, i32 16
	%r12087 = bitcast %Pointer %r12086 to %Pointer*
	%r12088 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r12088, %Pointer* %r12087
	; Call
	call void @GC_collect(%Pointer %r12075, %Word64 0, %Word32 0)
	; CacheFrontier
	%r12089 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12090 = getelementptr inbounds i8, %Pointer %r12089, i32 0
	%r12091 = bitcast %Pointer %r12090 to %Pointer*
	%r12092 = load %Pointer, %Pointer* %r12091
	store %Pointer %r12092, %Pointer* %frontier
	; CacheStackTop
	%r12093 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12094 = getelementptr inbounds i8, %Pointer %r12093, i32 16
	%r12095 = bitcast %Pointer %r12094 to %Pointer*
	%r12096 = load %Pointer, %Pointer* %r12095
	store %Pointer %r12096, %Pointer* %stackTop
	br label %L_274

L_272:
	; RP(0): Objptr (opt_3)  = glob {index = 132, isRoot = true, ty = Objptr (opt_3)}
	%r12097 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 132
	%r12098 = load %Objptr, %Objptr* %r12097
	store %Objptr %r12098, %Objptr* %regP_0
	; Goto L_266
	br label %L_266

L_271:
	; RP(0): Objptr (opt_34, opt_33, opt_32, opt_31)  = Cast (0x2, Objptr (opt_34, opt_33, opt_32, opt_31))
	%r12099 = inttoptr %Word64 2 to %Objptr
	store %Objptr %r12099, %Objptr* %regP_0
	; Goto L_14
	br label %L_14

L_270:
	; SP(40): Objptr (opt_11)  = glob {index = 22, isRoot = true, ty = Objptr (opt_11)}
	%r12100 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 22
	%r12101 = load %Objptr, %Objptr* %r12100
	%r12102 = load %Pointer, %Pointer* %stackTop
	%r12103 = getelementptr inbounds i8, %Pointer %r12102, i32 40
	%r12104 = bitcast %Pointer %r12103 to %Objptr*
	store %Objptr %r12101, %Objptr* %r12104
	; Goto L_join_4
	br label %L_join_4

L_269:
	; RW32(0): Word32  = WordU64_extdToWord32 (RW64(0): Word64)
	%r12105 = load %Word64, %Word64* %regW64_0
	%r12106 = trunc %Word64 %r12105 to %Word32
	store %Word32 %r12106, %Word32* %regW32_0
	; RW64(1): Word64  = WordS32_extdToWord64 (RW32(0): Word32)
	%r12107 = load %Word32, %Word32* %regW32_0
	%r12108 = sext %Word32 %r12107 to %Word64
	store %Word64 %r12108, %Word64* %regW64_1
	; RW8(0): Word8  = XW8 (SQ(24): CPointer, RW64(1): Word64, 1, 0): Word8
	%r12109 = load %Pointer, %Pointer* %stackTop
	%r12110 = getelementptr inbounds i8, %Pointer %r12109, i32 24
	%r12111 = bitcast %Pointer %r12110 to %CPointer*
	%r12112 = load %CPointer, %CPointer* %r12111
	%r12113 = load %Word64, %Word64* %regW64_1
	%r12114 = mul nsw %Word64 %r12113, 1
	%r12115 = add nsw %Word64 %r12114, 0
	%r12116 = getelementptr inbounds i8, %CPointer %r12112, %Word64 %r12115
	%r12117 = bitcast %CPointer %r12116 to %Word8*
	%r12118 = load %Word8, %Word8* %r12117
	store %Word8 %r12118, %Word8* %regW8_0
	; XW8 (SP(40): Objptr (opt_11), RW64(0): Word64, 1, 0): Word8  = RW8(0): Word8
	%r12119 = load %Word8, %Word8* %regW8_0
	%r12120 = load %Pointer, %Pointer* %stackTop
	%r12121 = getelementptr inbounds i8, %Pointer %r12120, i32 40
	%r12122 = bitcast %Pointer %r12121 to %Objptr*
	%r12123 = load %Objptr, %Objptr* %r12122
	%r12124 = load %Word64, %Word64* %regW64_0
	%r12125 = mul nsw %Word64 %r12124, 1
	%r12126 = add nsw %Word64 %r12125, 0
	%r12127 = getelementptr inbounds i8, %Objptr %r12123, %Word64 %r12126
	%r12128 = bitcast %Objptr %r12127 to %Word8*
	store %Word8 %r12119, %Word8* %r12128
	; RW64(2): Word64  = Word64_add (RW64(0): Word64, 0x1)
	%r12129 = load %Word64, %Word64* %regW64_0
	%r12130 = add %Word64 %r12129, 1
	store %Word64 %r12130, %Word64* %regW64_2
	; RW64(0): Word64  = RW64(2): Word64
	%r12131 = load %Word64, %Word64* %regW64_2
	store %Word64 %r12131, %Word64* %regW64_0
	; Goto loop_20
	br label %loop_20

L_268:
	; Push(-56)
	%r12132 = load %Pointer, %Pointer* %stackTop
	%r12133 = getelementptr inbounds i8, %Pointer %r12132, i32 -56
	store %Pointer %r12133, %Pointer* %stackTop
	; Goto L_265
	br label %L_265

L_267:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 51}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_268}
	; GetOperands
	%r12134 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12135 = load %Pointer, %Pointer* %stackTop
	%r12136 = getelementptr inbounds i8, %Pointer %r12135, i32 48
	%r12137 = bitcast %Pointer %r12136 to %uintptr_t*
	store %uintptr_t 51, %uintptr_t* %r12137
	; Push(56)
	%r12138 = load %Pointer, %Pointer* %stackTop
	%r12139 = getelementptr inbounds i8, %Pointer %r12138, i32 56
	store %Pointer %r12139, %Pointer* %stackTop
	; FlushFrontier
	%r12140 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12141 = getelementptr inbounds i8, %Pointer %r12140, i32 0
	%r12142 = bitcast %Pointer %r12141 to %Pointer*
	%r12143 = load %Pointer, %Pointer* %frontier
	store %Pointer %r12143, %Pointer* %r12142
	; FlushStackTop
	%r12144 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12145 = getelementptr inbounds i8, %Pointer %r12144, i32 16
	%r12146 = bitcast %Pointer %r12145 to %Pointer*
	%r12147 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r12147, %Pointer* %r12146
	; Call
	call void @GC_collect(%Pointer %r12134, %Word64 0, %Word32 0)
	; CacheFrontier
	%r12148 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12149 = getelementptr inbounds i8, %Pointer %r12148, i32 0
	%r12150 = bitcast %Pointer %r12149 to %Pointer*
	%r12151 = load %Pointer, %Pointer* %r12150
	store %Pointer %r12151, %Pointer* %frontier
	; CacheStackTop
	%r12152 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12153 = getelementptr inbounds i8, %Pointer %r12152, i32 16
	%r12154 = bitcast %Pointer %r12153 to %Pointer*
	%r12155 = load %Pointer, %Pointer* %r12154
	store %Pointer %r12155, %Pointer* %stackTop
	br label %L_268

L_266:
	; RW64(0): [Word32, Bits32]  = WordU32_extdToWord64 (SW32(16): Word32)
	%r12156 = load %Pointer, %Pointer* %stackTop
	%r12157 = getelementptr inbounds i8, %Pointer %r12156, i32 16
	%r12158 = bitcast %Pointer %r12157 to %Word32*
	%r12159 = load %Word32, %Word32* %r12158
	%r12160 = zext %Word32 %r12159 to %Word64
	store %Word64 %r12160, %Word64* %regW64_0
	; RW64(1): [Word32, Bits32]  = Word64_lshift (RW64(0): [Word32, Bits32], 0x1)
	%r12161 = load %Word64, %Word64* %regW64_0
	%r12162 = zext %Word32 1 to %Word64
	%r12163 = shl %Word64 %r12161, %r12162
	store %Word64 %r12163, %Word64* %regW64_1
	; RW64(2): [Word32, Bits32]  = Word64_orb (RW64(1): [Word32, Bits32], 0x1)
	%r12164 = load %Word64, %Word64* %regW64_1
	%r12165 = or %Word64 %r12164, 1
	store %Word64 %r12165, %Word64* %regW64_2
	; CW64 (<Frontier>)  = 0x43
	%r12166 = load %Pointer, %Pointer* %frontier
	%r12167 = bitcast %Pointer %r12166 to %Word64*
	store %Word64 67, %Word64* %r12167
	; RQ(37): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r12168 = load %Pointer, %Pointer* %frontier
	%r12170 = ptrtoint %Pointer %r12168 to %uintptr_t
	%r12171 = add %uintptr_t %r12170, 8
	%r12169 = inttoptr %uintptr_t %r12171 to %Pointer
	store %CPointer %r12169, %CPointer* %regQ_37
	; RP(1): Objptr (opt_33)  = Cast (RQ(37): CPointer, Objptr (opt_33))
	%r12172 = load %CPointer, %CPointer* %regQ_37
	%r12173 = bitcast %CPointer %r12172 to %Objptr
	store %Objptr %r12173, %Objptr* %regP_1
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r12174 = load %Pointer, %Pointer* %frontier
	%r12176 = ptrtoint %Pointer %r12174 to %uintptr_t
	%r12177 = add %uintptr_t %r12176, 24
	%r12175 = inttoptr %uintptr_t %r12177 to %Pointer
	store %Pointer %r12175, %Pointer* %frontier
	; OW64 (RP(1): Objptr (opt_33), 0): [Word1, Bits63]  = Cast (RW64(2): [Word32, Bits32], [Word1, Bits63])
	%r12178 = load %Word64, %Word64* %regW64_2
	%r12179 = bitcast %Word64 %r12178 to %Word64
	%r12180 = load %Objptr, %Objptr* %regP_1
	%r12181 = getelementptr inbounds i8, %Objptr %r12180, i32 0
	%r12182 = bitcast %Objptr %r12181 to %Word64*
	store %Word64 %r12179, %Word64* %r12182
	; OP (RP(1): Objptr (opt_33), 8): Objptr (opt_3)  = RP(0): Objptr (opt_3)
	%r12183 = load %Objptr, %Objptr* %regP_0
	%r12184 = load %Objptr, %Objptr* %regP_1
	%r12185 = getelementptr inbounds i8, %Objptr %r12184, i32 8
	%r12186 = bitcast %Objptr %r12185 to %Objptr*
	store %Objptr %r12183, %Objptr* %r12186
	; RP(0): Objptr (opt_34, opt_33, opt_32, opt_31)  = Cast (RP(1): Objptr (opt_33), Objptr (opt_34, opt_33, opt_32, opt_31))
	%r12187 = load %Objptr, %Objptr* %regP_1
	%r12188 = bitcast %Objptr %r12187 to %Objptr
	store %Objptr %r12188, %Objptr* %regP_0
	; Goto L_14
	br label %L_14

L_265:
	; OW64 (SP(40): Objptr (opt_11), ~8): Word64  = 0x7
	%r12189 = load %Pointer, %Pointer* %stackTop
	%r12190 = getelementptr inbounds i8, %Pointer %r12189, i32 40
	%r12191 = bitcast %Pointer %r12190 to %Objptr*
	%r12192 = load %Objptr, %Objptr* %r12191
	%r12193 = getelementptr inbounds i8, %Objptr %r12192, i32 -8
	%r12194 = bitcast %Objptr %r12193 to %Word64*
	store %Word64 7, %Word64* %r12194
	; RP(0): Objptr (opt_3)  = Cast (SP(40): Objptr (opt_11), Objptr (opt_3))
	%r12195 = load %Pointer, %Pointer* %stackTop
	%r12196 = getelementptr inbounds i8, %Pointer %r12195, i32 40
	%r12197 = bitcast %Pointer %r12196 to %Objptr*
	%r12198 = load %Objptr, %Objptr* %r12197
	%r12199 = bitcast %Objptr %r12198 to %Objptr
	store %Objptr %r12199, %Objptr* %regP_0
	; Goto L_266
	br label %L_266

L_264:
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r12200 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12201 = getelementptr inbounds i8, %Pointer %r12200, i32 8
	%r12202 = bitcast %Pointer %r12201 to %CPointer*
	%r12203 = load %CPointer, %CPointer* %r12202
	%r12204 = load %Pointer, %Pointer* %frontier
	%r12206 = icmp ult %Pointer %r12203, %r12204
	%r12205 = zext i1 %r12206 to %Word32
	store %Word32 %r12205, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_265), (0x1, L_267))}
	%r12207 = load %Word32, %Word32* %regW32_0
	%r12208 = trunc %Word32 %r12207 to i1
	br i1 %r12208, label %L_267, label %L_265

loop_20:
	; RW32(0): Word32  = WordS64_lt (RW64(0): Word64, SW64(32): Word64)
	%r12209 = load %Word64, %Word64* %regW64_0
	%r12210 = load %Pointer, %Pointer* %stackTop
	%r12211 = getelementptr inbounds i8, %Pointer %r12210, i32 32
	%r12212 = bitcast %Pointer %r12211 to %Word64*
	%r12213 = load %Word64, %Word64* %r12212
	%r12215 = icmp slt %Word64 %r12209, %r12213
	%r12214 = zext i1 %r12215 to %Word32
	store %Word32 %r12214, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_264), (0x1, L_269))}
	%r12216 = load %Word32, %Word32* %regW32_0
	%r12217 = trunc %Word32 %r12216 to i1
	br i1 %r12217, label %L_269, label %L_264

L_join_4:
	; RW64(0): Word64  = 0x0
	store %Word64 0, %Word64* %regW64_0
	; Goto loop_20
	br label %loop_20

L_263:
	; Push(-48)
	%r12218 = load %Pointer, %Pointer* %stackTop
	%r12219 = getelementptr inbounds i8, %Pointer %r12218, i32 -48
	store %Pointer %r12219, %Pointer* %stackTop
	%r12220 = load %Objptr, %Objptr* @CReturnP
	store %Objptr %r12220, %Objptr* %regP_0
	; SP(40): Objptr (opt_11)  = RP(0): Objptr (opt_11)
	%r12221 = load %Objptr, %Objptr* %regP_0
	%r12222 = load %Pointer, %Pointer* %stackTop
	%r12223 = getelementptr inbounds i8, %Pointer %r12222, i32 40
	%r12224 = bitcast %Pointer %r12223 to %Objptr*
	store %Objptr %r12221, %Objptr* %r12224
	; Goto L_join_4
	br label %L_join_4

L_262:
	; CCall {args = (<GCState>, 0x0, SW64(32): Word64, 0x17), frameInfo = Some {frameLayoutsIndex = 50}, func = {args = (GCState, Word64, Word64, Word64), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int64, Word64), res = Some Objptr}, return = Objptr (opt_11), symbolScope = private, target = GC_arrayAllocate}, return = Some L_263}
	; GetOperands
	%r12225 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12226 = load %Pointer, %Pointer* %stackTop
	%r12227 = getelementptr inbounds i8, %Pointer %r12226, i32 32
	%r12228 = bitcast %Pointer %r12227 to %Word64*
	%r12229 = load %Word64, %Word64* %r12228
	%r12230 = load %Pointer, %Pointer* %stackTop
	%r12231 = getelementptr inbounds i8, %Pointer %r12230, i32 40
	%r12232 = bitcast %Pointer %r12231 to %uintptr_t*
	store %uintptr_t 50, %uintptr_t* %r12232
	; Push(48)
	%r12233 = load %Pointer, %Pointer* %stackTop
	%r12234 = getelementptr inbounds i8, %Pointer %r12233, i32 48
	store %Pointer %r12234, %Pointer* %stackTop
	; FlushFrontier
	%r12235 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12236 = getelementptr inbounds i8, %Pointer %r12235, i32 0
	%r12237 = bitcast %Pointer %r12236 to %Pointer*
	%r12238 = load %Pointer, %Pointer* %frontier
	store %Pointer %r12238, %Pointer* %r12237
	; FlushStackTop
	%r12239 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12240 = getelementptr inbounds i8, %Pointer %r12239, i32 16
	%r12241 = bitcast %Pointer %r12240 to %Pointer*
	%r12242 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r12242, %Pointer* %r12241
	; Call
	%r12243 = call %Objptr @GC_arrayAllocate(%Pointer %r12225, %Word64 0, %Word64 %r12229, %Word64 23)
	store %Objptr %r12243, %Objptr* @CReturnP
	; CacheFrontier
	%r12244 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12245 = getelementptr inbounds i8, %Pointer %r12244, i32 0
	%r12246 = bitcast %Pointer %r12245 to %Pointer*
	%r12247 = load %Pointer, %Pointer* %r12246
	store %Pointer %r12247, %Pointer* %frontier
	; CacheStackTop
	%r12248 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12249 = getelementptr inbounds i8, %Pointer %r12248, i32 16
	%r12250 = bitcast %Pointer %r12249 to %Pointer*
	%r12251 = load %Pointer, %Pointer* %r12250
	store %Pointer %r12251, %Pointer* %stackTop
	br label %L_263

L_261:
	; RW32(0): Word32  = Word64_equal (0x0, SW64(32): Word64)
	%r12252 = load %Pointer, %Pointer* %stackTop
	%r12253 = getelementptr inbounds i8, %Pointer %r12252, i32 32
	%r12254 = bitcast %Pointer %r12253 to %Word64*
	%r12255 = load %Word64, %Word64* %r12254
	%r12257 = icmp eq %Word64 0, %r12255
	%r12256 = zext i1 %r12257 to %Word32
	store %Word32 %r12256, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_262), (0x1, L_270))}
	%r12258 = load %Word32, %Word32* %regW32_0
	%r12259 = trunc %Word32 %r12258 to i1
	br i1 %r12259, label %L_270, label %L_262

L_260:
	; RW32(0): Word32  = WordU64_lt (0x7FFFFFFF, SW64(32): Word64)
	%r12260 = load %Pointer, %Pointer* %stackTop
	%r12261 = getelementptr inbounds i8, %Pointer %r12260, i32 32
	%r12262 = bitcast %Pointer %r12261 to %Word64*
	%r12263 = load %Word64, %Word64* %r12262
	%r12265 = icmp ult %Word64 2147483647, %r12263
	%r12264 = zext i1 %r12265 to %Word32
	store %Word32 %r12264, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_261), (0x1, L_271))}
	%r12266 = load %Word32, %Word32* %regW32_0
	%r12267 = trunc %Word32 %r12266 to i1
	br i1 %r12267, label %L_271, label %L_261

L_259:
	; RW32(1): Word32  = Word32_add (RW32(0): Word32, 0x1)
	%r12268 = load %Word32, %Word32* %regW32_0
	%r12269 = add %Word32 %r12268, 1
	store %Word32 %r12269, %Word32* %regW32_1
	; RW32(0): Word32  = RW32(1): Word32
	%r12270 = load %Word32, %Word32* %regW32_1
	store %Word32 %r12270, %Word32* %regW32_0
	; Goto loop_19
	br label %loop_19

loop_19:
	; SW64(32): Word64  = WordS32_extdToWord64 (RW32(0): Word32)
	%r12271 = load %Word32, %Word32* %regW32_0
	%r12272 = sext %Word32 %r12271 to %Word64
	%r12273 = load %Pointer, %Pointer* %stackTop
	%r12274 = getelementptr inbounds i8, %Pointer %r12273, i32 32
	%r12275 = bitcast %Pointer %r12274 to %Word64*
	store %Word64 %r12272, %Word64* %r12275
	; RW8(0): Word8  = XW8 (SQ(24): CPointer, SW64(32): Word64, 1, 0): Word8
	%r12276 = load %Pointer, %Pointer* %stackTop
	%r12277 = getelementptr inbounds i8, %Pointer %r12276, i32 24
	%r12278 = bitcast %Pointer %r12277 to %CPointer*
	%r12279 = load %CPointer, %CPointer* %r12278
	%r12280 = load %Pointer, %Pointer* %stackTop
	%r12281 = getelementptr inbounds i8, %Pointer %r12280, i32 32
	%r12282 = bitcast %Pointer %r12281 to %Word64*
	%r12283 = load %Word64, %Word64* %r12282
	%r12284 = mul nsw %Word64 %r12283, 1
	%r12285 = add nsw %Word64 %r12284, 0
	%r12286 = getelementptr inbounds i8, %CPointer %r12279, %Word64 %r12285
	%r12287 = bitcast %CPointer %r12286 to %Word8*
	%r12288 = load %Word8, %Word8* %r12287
	store %Word8 %r12288, %Word8* %regW8_0
	; switch {test = RW8(0): Word8, default = Some L_259, cases = ((0x0, L_260))}
	%r12289 = load %Word8, %Word8* %regW8_0
	switch %Word8 %r12289, label %L_259 [
		%Word8 0, label %L_260
	]

L_258:
	; RW32(0): Word32  = 0x0
	store %Word32 0, %Word32* %regW32_0
	; Goto loop_19
	br label %loop_19

L_257:
	%r12290 = load %Word64, %Word64* @CReturnW64
	store %Word64 %r12290, %Word64* %regW64_0
	; SQ(24): CPointer  = CPointer_fromWord (RW64(0): Word64)
	%r12291 = load %Word64, %Word64* %regW64_0
	%r12292 = inttoptr %uintptr_t %r12291 to %Pointer
	%r12293 = load %Pointer, %Pointer* %stackTop
	%r12294 = getelementptr inbounds i8, %Pointer %r12293, i32 24
	%r12295 = bitcast %Pointer %r12294 to %CPointer*
	store %CPointer %r12292, %CPointer* %r12295
	; RW32(0): Word32  = CPointer_equal (SQ(24): CPointer, NULL)
	%r12296 = load %Pointer, %Pointer* %stackTop
	%r12297 = getelementptr inbounds i8, %Pointer %r12296, i32 24
	%r12298 = bitcast %Pointer %r12297 to %CPointer*
	%r12299 = load %CPointer, %CPointer* %r12298
	%r12301 = icmp eq %Pointer %r12299, null
	%r12300 = zext i1 %r12301 to %Word32
	store %Word32 %r12300, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_258), (0x1, L_272))}
	%r12302 = load %Word32, %Word32* %regW32_0
	%r12303 = trunc %Word32 %r12302 to i1
	br i1 %r12303, label %L_272, label %L_258

L_256:
	; CCall {args = (SW32(16): Word32), frameInfo = None, func = {args = (Word32), convention = cdecl, kind = Impure, prototype = {args = (Int32), res = Some Word64}, return = Word64, symbolScope = private, target = Posix_Error_strError}, return = Some L_257}
	; GetOperands
	%r12304 = load %Pointer, %Pointer* %stackTop
	%r12305 = getelementptr inbounds i8, %Pointer %r12304, i32 16
	%r12306 = bitcast %Pointer %r12305 to %Word32*
	%r12307 = load %Word32, %Word32* %r12306
	; Call
	%r12308 = call %Word64 @Posix_Error_strError(%Word32 %r12307)
	store %Word64 %r12308, %Word64* @CReturnW64
	br label %L_257

L_255:
	; RW32(0): Word32  = Word32_add (OW32 (<GCState>, 68): Word32, 0xFFFFFFFF)
	%r12309 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12310 = getelementptr inbounds i8, %Pointer %r12309, i32 68
	%r12311 = bitcast %Pointer %r12310 to %Word32*
	%r12312 = load %Word32, %Word32* %r12311
	%r12313 = add %Word32 %r12312, 4294967295
	store %Word32 %r12313, %Word32* %regW32_0
	; OW32 (<GCState>, 68): Word32  = RW32(0): Word32
	%r12314 = load %Word32, %Word32* %regW32_0
	%r12315 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12316 = getelementptr inbounds i8, %Pointer %r12315, i32 68
	%r12317 = bitcast %Pointer %r12316 to %Word32*
	store %Word32 %r12314, %Word32* %r12317
	; RW32(1): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r12318 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12319 = getelementptr inbounds i8, %Pointer %r12318, i32 8
	%r12320 = bitcast %Pointer %r12319 to %CPointer*
	%r12321 = load %CPointer, %CPointer* %r12320
	%r12322 = load %Pointer, %Pointer* %frontier
	%r12324 = icmp ult %Pointer %r12321, %r12322
	%r12323 = zext i1 %r12324 to %Word32
	store %Word32 %r12323, %Word32* %regW32_1
	; switch {test = RW32(1): Word32, default = None, cases = ((0x0, L_256), (0x1, L_273))}
	%r12325 = load %Word32, %Word32* %regW32_1
	%r12326 = trunc %Word32 %r12325 to i1
	br i1 %r12326, label %L_273, label %L_256

L_254:
	%r12328 = load %Pointer, %Pointer* %stackTop
	%r12329 = getelementptr inbounds i8, %Pointer %r12328, i32 16
	%r12330 = bitcast %Pointer %r12329 to %Word32*
	%r12327 = load %Word32, %Word32* @CReturnW32
	store %Word32 %r12327, %Word32* %r12330
	; RW32(0): Word32  = OW32 (<GCState>, 68): Word32
	%r12331 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12332 = getelementptr inbounds i8, %Pointer %r12331, i32 68
	%r12333 = bitcast %Pointer %r12332 to %Word32*
	%r12334 = load %Word32, %Word32* %r12333
	store %Word32 %r12334, %Word32* %regW32_0
	; RW32(1): Word32  = Word32_equal (RW32(0): Word32, 0x0)
	%r12335 = load %Word32, %Word32* %regW32_0
	%r12337 = icmp eq %Word32 %r12335, 0
	%r12336 = zext i1 %r12337 to %Word32
	store %Word32 %r12336, %Word32* %regW32_1
	; switch {test = RW32(1): Word32, default = None, cases = ((0x0, L_255), (0x1, L_275))}
	%r12338 = load %Word32, %Word32* %regW32_1
	%r12339 = trunc %Word32 %r12338 to i1
	br i1 %r12339, label %L_275, label %L_255

L_253:
	; CCall {args = (), frameInfo = None, func = {args = (), convention = cdecl, kind = Impure, prototype = {args = (), res = Some Int32}, return = Word32, symbolScope = private, target = Posix_Error_getErrno}, return = Some L_254}
	; GetOperands
	; Call
	%r12340 = call %Word32 @Posix_Error_getErrno()
	store %Word32 %r12340, %Word32* @CReturnW32
	br label %L_254

L_252:
	; RP(0): Objptr (opt_34, opt_33, opt_32, opt_31)  = Cast (glob {index = 9, isRoot = true, ty = Objptr (opt_31)}, Objptr (opt_34, opt_33, opt_32, opt_31))
	%r12341 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 9
	%r12342 = load %Objptr, %Objptr* %r12341
	%r12343 = bitcast %Objptr %r12342 to %Objptr
	store %Objptr %r12343, %Objptr* %regP_0
	; Goto L_14
	br label %L_14

L_251:
	; XW8 (SP(96): Objptr (opt_11), RW64(0): Word64, 1, 0): Word8  = 0x0
	%r12344 = load %Pointer, %Pointer* %stackTop
	%r12345 = getelementptr inbounds i8, %Pointer %r12344, i32 96
	%r12346 = bitcast %Pointer %r12345 to %Objptr*
	%r12347 = load %Objptr, %Objptr* %r12346
	%r12348 = load %Word64, %Word64* %regW64_0
	%r12349 = mul nsw %Word64 %r12348, 1
	%r12350 = add nsw %Word64 %r12349, 0
	%r12351 = getelementptr inbounds i8, %Objptr %r12347, %Word64 %r12350
	%r12352 = bitcast %Objptr %r12351 to %Word8*
	store %Word8 0, %Word8* %r12352
	; RW64(1): Word64  = Word64_add (RW64(0): Word64, 0x1)
	%r12353 = load %Word64, %Word64* %regW64_0
	%r12354 = add %Word64 %r12353, 1
	store %Word64 %r12354, %Word64* %regW64_1
	; RW64(0): Word64  = RW64(1): Word64
	%r12355 = load %Word64, %Word64* %regW64_1
	store %Word64 %r12355, %Word64* %regW64_0
	; Goto loop_18
	br label %loop_18

L_250:
	; Push(-112)
	%r12356 = load %Pointer, %Pointer* %stackTop
	%r12357 = getelementptr inbounds i8, %Pointer %r12356, i32 -112
	store %Pointer %r12357, %Pointer* %stackTop
	; Goto L_248
	br label %L_248

L_249:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 49}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_250}
	; GetOperands
	%r12358 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12359 = load %Pointer, %Pointer* %stackTop
	%r12360 = getelementptr inbounds i8, %Pointer %r12359, i32 104
	%r12361 = bitcast %Pointer %r12360 to %uintptr_t*
	store %uintptr_t 49, %uintptr_t* %r12361
	; Push(112)
	%r12362 = load %Pointer, %Pointer* %stackTop
	%r12363 = getelementptr inbounds i8, %Pointer %r12362, i32 112
	store %Pointer %r12363, %Pointer* %stackTop
	; FlushFrontier
	%r12364 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12365 = getelementptr inbounds i8, %Pointer %r12364, i32 0
	%r12366 = bitcast %Pointer %r12365 to %Pointer*
	%r12367 = load %Pointer, %Pointer* %frontier
	store %Pointer %r12367, %Pointer* %r12366
	; FlushStackTop
	%r12368 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12369 = getelementptr inbounds i8, %Pointer %r12368, i32 16
	%r12370 = bitcast %Pointer %r12369 to %Pointer*
	%r12371 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r12371, %Pointer* %r12370
	; Call
	call void @GC_collect(%Pointer %r12358, %Word64 0, %Word32 0)
	; CacheFrontier
	%r12372 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12373 = getelementptr inbounds i8, %Pointer %r12372, i32 0
	%r12374 = bitcast %Pointer %r12373 to %Pointer*
	%r12375 = load %Pointer, %Pointer* %r12374
	store %Pointer %r12375, %Pointer* %frontier
	; CacheStackTop
	%r12376 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12377 = getelementptr inbounds i8, %Pointer %r12376, i32 16
	%r12378 = bitcast %Pointer %r12377 to %Pointer*
	%r12379 = load %Pointer, %Pointer* %r12378
	store %Pointer %r12379, %Pointer* %stackTop
	br label %L_250

L_248:
	; CW64 (<Frontier>)  = 0x53
	%r12380 = load %Pointer, %Pointer* %frontier
	%r12381 = bitcast %Pointer %r12380 to %Word64*
	store %Word64 83, %Word64* %r12381
	; RQ(36): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r12382 = load %Pointer, %Pointer* %frontier
	%r12384 = ptrtoint %Pointer %r12382 to %uintptr_t
	%r12385 = add %uintptr_t %r12384, 8
	%r12383 = inttoptr %uintptr_t %r12385 to %Pointer
	store %CPointer %r12383, %CPointer* %regQ_36
	; RP(0): Objptr (opt_41)  = Cast (RQ(36): CPointer, Objptr (opt_41))
	%r12386 = load %CPointer, %CPointer* %regQ_36
	%r12387 = bitcast %CPointer %r12386 to %Objptr
	store %Objptr %r12387, %Objptr* %regP_0
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r12388 = load %Pointer, %Pointer* %frontier
	%r12390 = ptrtoint %Pointer %r12388 to %uintptr_t
	%r12391 = add %uintptr_t %r12390, 24
	%r12389 = inttoptr %uintptr_t %r12391 to %Pointer
	store %Pointer %r12389, %Pointer* %frontier
	; OP (RP(0): Objptr (opt_41), 0): Objptr (opt_11)  = SP(96): Objptr (opt_11)
	%r12392 = load %Pointer, %Pointer* %stackTop
	%r12393 = getelementptr inbounds i8, %Pointer %r12392, i32 96
	%r12394 = bitcast %Pointer %r12393 to %Objptr*
	%r12395 = load %Objptr, %Objptr* %r12394
	%r12396 = load %Objptr, %Objptr* %regP_0
	%r12397 = getelementptr inbounds i8, %Objptr %r12396, i32 0
	%r12398 = bitcast %Objptr %r12397 to %Objptr*
	store %Objptr %r12395, %Objptr* %r12398
	; OP (RP(0): Objptr (opt_41), 8): Objptr (opt_10)  = SP(32): Objptr (opt_10)
	%r12399 = load %Pointer, %Pointer* %stackTop
	%r12400 = getelementptr inbounds i8, %Pointer %r12399, i32 32
	%r12401 = bitcast %Pointer %r12400 to %Objptr*
	%r12402 = load %Objptr, %Objptr* %r12401
	%r12403 = load %Objptr, %Objptr* %regP_0
	%r12404 = getelementptr inbounds i8, %Objptr %r12403, i32 8
	%r12405 = bitcast %Objptr %r12404 to %Objptr*
	store %Objptr %r12402, %Objptr* %r12405
	; RP(0): Objptr (opt_41, opt_40)  = Cast (RP(0): Objptr (opt_41), Objptr (opt_41, opt_40))
	%r12406 = load %Objptr, %Objptr* %regP_0
	%r12407 = bitcast %Objptr %r12406 to %Objptr
	store %Objptr %r12407, %Objptr* %regP_0
	; Goto L_150
	br label %L_150

L_247:
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r12408 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12409 = getelementptr inbounds i8, %Pointer %r12408, i32 8
	%r12410 = bitcast %Pointer %r12409 to %CPointer*
	%r12411 = load %CPointer, %CPointer* %r12410
	%r12412 = load %Pointer, %Pointer* %frontier
	%r12414 = icmp ult %Pointer %r12411, %r12412
	%r12413 = zext i1 %r12414 to %Word32
	store %Word32 %r12413, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_248), (0x1, L_249))}
	%r12415 = load %Word32, %Word32* %regW32_0
	%r12416 = trunc %Word32 %r12415 to i1
	br i1 %r12416, label %L_249, label %L_248

loop_18:
	; RW32(0): Word32  = WordS64_lt (RW64(0): Word64, 0x1000)
	%r12417 = load %Word64, %Word64* %regW64_0
	%r12419 = icmp slt %Word64 %r12417, 4096
	%r12418 = zext i1 %r12419 to %Word32
	store %Word32 %r12418, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_247), (0x1, L_251))}
	%r12420 = load %Word32, %Word32* %regW32_0
	%r12421 = trunc %Word32 %r12420 to i1
	br i1 %r12421, label %L_251, label %L_247

L_246:
	; Push(-104)
	%r12422 = load %Pointer, %Pointer* %stackTop
	%r12423 = getelementptr inbounds i8, %Pointer %r12422, i32 -104
	store %Pointer %r12423, %Pointer* %stackTop
	%r12425 = load %Pointer, %Pointer* %stackTop
	%r12426 = getelementptr inbounds i8, %Pointer %r12425, i32 96
	%r12427 = bitcast %Pointer %r12426 to %Objptr*
	%r12424 = load %Objptr, %Objptr* @CReturnP
	store %Objptr %r12424, %Objptr* %r12427
	; RW64(0): Word64  = 0x0
	store %Word64 0, %Word64* %regW64_0
	; Goto loop_18
	br label %loop_18

L_245:
	; CCall {args = (<GCState>, 0x0, 0x1000, 0x17), frameInfo = Some {frameLayoutsIndex = 48}, func = {args = (GCState, Word64, Word64, Word64), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int64, Word64), res = Some Objptr}, return = Objptr (opt_11), symbolScope = private, target = GC_arrayAllocate}, return = Some L_246}
	; GetOperands
	%r12428 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12429 = load %Pointer, %Pointer* %stackTop
	%r12430 = getelementptr inbounds i8, %Pointer %r12429, i32 96
	%r12431 = bitcast %Pointer %r12430 to %uintptr_t*
	store %uintptr_t 48, %uintptr_t* %r12431
	; Push(104)
	%r12432 = load %Pointer, %Pointer* %stackTop
	%r12433 = getelementptr inbounds i8, %Pointer %r12432, i32 104
	store %Pointer %r12433, %Pointer* %stackTop
	; FlushFrontier
	%r12434 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12435 = getelementptr inbounds i8, %Pointer %r12434, i32 0
	%r12436 = bitcast %Pointer %r12435 to %Pointer*
	%r12437 = load %Pointer, %Pointer* %frontier
	store %Pointer %r12437, %Pointer* %r12436
	; FlushStackTop
	%r12438 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12439 = getelementptr inbounds i8, %Pointer %r12438, i32 16
	%r12440 = bitcast %Pointer %r12439 to %Pointer*
	%r12441 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r12441, %Pointer* %r12440
	; Call
	%r12442 = call %Objptr @GC_arrayAllocate(%Pointer %r12428, %Word64 0, %Word64 4096, %Word64 23)
	store %Objptr %r12442, %Objptr* @CReturnP
	; CacheFrontier
	%r12443 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12444 = getelementptr inbounds i8, %Pointer %r12443, i32 0
	%r12445 = bitcast %Pointer %r12444 to %Pointer*
	%r12446 = load %Pointer, %Pointer* %r12445
	store %Pointer %r12446, %Pointer* %frontier
	; CacheStackTop
	%r12447 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12448 = getelementptr inbounds i8, %Pointer %r12447, i32 16
	%r12449 = bitcast %Pointer %r12448 to %Pointer*
	%r12450 = load %Pointer, %Pointer* %r12449
	store %Pointer %r12450, %Pointer* %stackTop
	br label %L_246

L_244:
	; XW8 (SP(32): Objptr (opt_11), RW64(0): Word64, 1, 0): Word8  = 0x0
	%r12451 = load %Pointer, %Pointer* %stackTop
	%r12452 = getelementptr inbounds i8, %Pointer %r12451, i32 32
	%r12453 = bitcast %Pointer %r12452 to %Objptr*
	%r12454 = load %Objptr, %Objptr* %r12453
	%r12455 = load %Word64, %Word64* %regW64_0
	%r12456 = mul nsw %Word64 %r12455, 1
	%r12457 = add nsw %Word64 %r12456, 0
	%r12458 = getelementptr inbounds i8, %Objptr %r12454, %Word64 %r12457
	%r12459 = bitcast %Objptr %r12458 to %Word8*
	store %Word8 0, %Word8* %r12459
	; RW64(1): Word64  = Word64_add (RW64(0): Word64, 0x1)
	%r12460 = load %Word64, %Word64* %regW64_0
	%r12461 = add %Word64 %r12460, 1
	store %Word64 %r12461, %Word64* %regW64_1
	; RW64(0): Word64  = RW64(1): Word64
	%r12462 = load %Word64, %Word64* %regW64_1
	store %Word64 %r12462, %Word64* %regW64_0
	; Goto loop_12
	br label %loop_12

L_243:
	; Push(-104)
	%r12463 = load %Pointer, %Pointer* %stackTop
	%r12464 = getelementptr inbounds i8, %Pointer %r12463, i32 -104
	store %Pointer %r12464, %Pointer* %stackTop
	; Goto L_149
	br label %L_149

L_242:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 47}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_243}
	; GetOperands
	%r12465 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12466 = load %Pointer, %Pointer* %stackTop
	%r12467 = getelementptr inbounds i8, %Pointer %r12466, i32 96
	%r12468 = bitcast %Pointer %r12467 to %uintptr_t*
	store %uintptr_t 47, %uintptr_t* %r12468
	; Push(104)
	%r12469 = load %Pointer, %Pointer* %stackTop
	%r12470 = getelementptr inbounds i8, %Pointer %r12469, i32 104
	store %Pointer %r12470, %Pointer* %stackTop
	; FlushFrontier
	%r12471 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12472 = getelementptr inbounds i8, %Pointer %r12471, i32 0
	%r12473 = bitcast %Pointer %r12472 to %Pointer*
	%r12474 = load %Pointer, %Pointer* %frontier
	store %Pointer %r12474, %Pointer* %r12473
	; FlushStackTop
	%r12475 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12476 = getelementptr inbounds i8, %Pointer %r12475, i32 16
	%r12477 = bitcast %Pointer %r12476 to %Pointer*
	%r12478 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r12478, %Pointer* %r12477
	; Call
	call void @GC_collect(%Pointer %r12465, %Word64 0, %Word32 0)
	; CacheFrontier
	%r12479 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12480 = getelementptr inbounds i8, %Pointer %r12479, i32 0
	%r12481 = bitcast %Pointer %r12480 to %Pointer*
	%r12482 = load %Pointer, %Pointer* %r12481
	store %Pointer %r12482, %Pointer* %frontier
	; CacheStackTop
	%r12483 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12484 = getelementptr inbounds i8, %Pointer %r12483, i32 16
	%r12485 = bitcast %Pointer %r12484 to %Pointer*
	%r12486 = load %Pointer, %Pointer* %r12485
	store %Pointer %r12486, %Pointer* %stackTop
	br label %L_243

L_241:
	; SP(16): Objptr (opt_28)  = SP(96): Objptr (opt_28)
	%r12487 = load %Pointer, %Pointer* %stackTop
	%r12488 = getelementptr inbounds i8, %Pointer %r12487, i32 96
	%r12489 = bitcast %Pointer %r12488 to %Objptr*
	%r12490 = load %Objptr, %Objptr* %r12489
	%r12491 = load %Pointer, %Pointer* %stackTop
	%r12492 = getelementptr inbounds i8, %Pointer %r12491, i32 16
	%r12493 = bitcast %Pointer %r12492 to %Objptr*
	store %Objptr %r12490, %Objptr* %r12493
	; RP(0): Objptr (opt_7)  = SP(40): Objptr (opt_7)
	%r12494 = load %Pointer, %Pointer* %stackTop
	%r12495 = getelementptr inbounds i8, %Pointer %r12494, i32 40
	%r12496 = bitcast %Pointer %r12495 to %Objptr*
	%r12497 = load %Objptr, %Objptr* %r12496
	store %Objptr %r12497, %Objptr* %regP_0
	; RP(1): Objptr (opt_34, opt_33, opt_32, opt_31)  = Cast (0x2, Objptr (opt_34, opt_33, opt_32, opt_31))
	%r12498 = inttoptr %Word64 2 to %Objptr
	store %Objptr %r12498, %Objptr* %regP_1
	; Goto L_175
	br label %L_175

L_240:
	; SP(16): Objptr (opt_28)  = SP(96): Objptr (opt_28)
	%r12499 = load %Pointer, %Pointer* %stackTop
	%r12500 = getelementptr inbounds i8, %Pointer %r12499, i32 96
	%r12501 = bitcast %Pointer %r12500 to %Objptr*
	%r12502 = load %Objptr, %Objptr* %r12501
	%r12503 = load %Pointer, %Pointer* %stackTop
	%r12504 = getelementptr inbounds i8, %Pointer %r12503, i32 16
	%r12505 = bitcast %Pointer %r12504 to %Objptr*
	store %Objptr %r12502, %Objptr* %r12505
	; RP(0): Objptr (opt_7)  = SP(40): Objptr (opt_7)
	%r12506 = load %Pointer, %Pointer* %stackTop
	%r12507 = getelementptr inbounds i8, %Pointer %r12506, i32 40
	%r12508 = bitcast %Pointer %r12507 to %Objptr*
	%r12509 = load %Objptr, %Objptr* %r12508
	store %Objptr %r12509, %Objptr* %regP_0
	; RP(1): Objptr (opt_34, opt_33, opt_32, opt_31)  = Cast (glob {index = 6, isRoot = true, ty = Objptr (opt_32)}, Objptr (opt_34, opt_33, opt_32, opt_31))
	%r12510 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 6
	%r12511 = load %Objptr, %Objptr* %r12510
	%r12512 = bitcast %Objptr %r12511 to %Objptr
	store %Objptr %r12512, %Objptr* %regP_1
	; Goto L_175
	br label %L_175

L_239:
	; RP(1): Objptr (opt_42)  = OP (RP(0): Objptr (opt_42), 8): Objptr (opt_42)
	%r12513 = load %Objptr, %Objptr* %regP_0
	%r12514 = getelementptr inbounds i8, %Objptr %r12513, i32 8
	%r12515 = bitcast %Objptr %r12514 to %Objptr*
	%r12516 = load %Objptr, %Objptr* %r12515
	store %Objptr %r12516, %Objptr* %regP_1
	; RR64(0): Real64  = OR64 (RP(0): Objptr (opt_42), 0): Real64
	%r12517 = load %Objptr, %Objptr* %regP_0
	%r12518 = getelementptr inbounds i8, %Objptr %r12517, i32 0
	%r12519 = bitcast %Objptr %r12518 to %Real64*
	%r12520 = load %Real64, %Real64* %r12519
	store %Real64 %r12520, %Real64* %regR64_0
	; XR64 (SP(24): Objptr (opt_29), RW64(0): Word64, 8, 0): Real64  = RR64(0): Real64
	%r12521 = load %Real64, %Real64* %regR64_0
	%r12522 = load %Pointer, %Pointer* %stackTop
	%r12523 = getelementptr inbounds i8, %Pointer %r12522, i32 24
	%r12524 = bitcast %Pointer %r12523 to %Objptr*
	%r12525 = load %Objptr, %Objptr* %r12524
	%r12526 = load %Word64, %Word64* %regW64_0
	%r12527 = mul nsw %Word64 %r12526, 8
	%r12528 = add nsw %Word64 %r12527, 0
	%r12529 = getelementptr inbounds i8, %Objptr %r12525, %Word64 %r12528
	%r12530 = bitcast %Objptr %r12529 to %Real64*
	store %Real64 %r12521, %Real64* %r12530
	; RW64(1): Word64  = Word64_add (RW64(0): Word64, 0x1)
	%r12531 = load %Word64, %Word64* %regW64_0
	%r12532 = add %Word64 %r12531, 1
	store %Word64 %r12532, %Word64* %regW64_1
	; RP(0): Objptr (opt_42)  = RP(1): Objptr (opt_42)
	%r12533 = load %Objptr, %Objptr* %regP_1
	store %Objptr %r12533, %Objptr* %regP_0
	; RW64(0): Word64  = RW64(1): Word64
	%r12534 = load %Word64, %Word64* %regW64_1
	store %Word64 %r12534, %Word64* %regW64_0
	; Goto loop_13
	br label %loop_13

L_238:
	; switch {test = Cast (RP(0): Objptr (opt_42), Bits64), default = Some L_239, cases = ((0x1, L_240))}
	%r12535 = load %Objptr, %Objptr* %regP_0
	%r12536 = ptrtoint %Objptr %r12535 to %Word64
	switch %Word64 %r12536, label %L_239 [
		%Word64 1, label %L_240
	]

L_237:
	; SP(16): Objptr (opt_28)  = SP(96): Objptr (opt_28)
	%r12537 = load %Pointer, %Pointer* %stackTop
	%r12538 = getelementptr inbounds i8, %Pointer %r12537, i32 96
	%r12539 = bitcast %Pointer %r12538 to %Objptr*
	%r12540 = load %Objptr, %Objptr* %r12539
	%r12541 = load %Pointer, %Pointer* %stackTop
	%r12542 = getelementptr inbounds i8, %Pointer %r12541, i32 16
	%r12543 = bitcast %Pointer %r12542 to %Objptr*
	store %Objptr %r12540, %Objptr* %r12543
	; RP(0): Objptr (opt_7)  = SP(40): Objptr (opt_7)
	%r12544 = load %Pointer, %Pointer* %stackTop
	%r12545 = getelementptr inbounds i8, %Pointer %r12544, i32 40
	%r12546 = bitcast %Pointer %r12545 to %Objptr*
	%r12547 = load %Objptr, %Objptr* %r12546
	store %Objptr %r12547, %Objptr* %regP_0
	; RP(1): Objptr (opt_34, opt_33, opt_32, opt_31)  = Cast (0x2, Objptr (opt_34, opt_33, opt_32, opt_31))
	%r12548 = inttoptr %Word64 2 to %Objptr
	store %Objptr %r12548, %Objptr* %regP_1
	; Goto L_175
	br label %L_175

L_236:
	; SP(16): Objptr (opt_28)  = SP(96): Objptr (opt_28)
	%r12549 = load %Pointer, %Pointer* %stackTop
	%r12550 = getelementptr inbounds i8, %Pointer %r12549, i32 96
	%r12551 = bitcast %Pointer %r12550 to %Objptr*
	%r12552 = load %Objptr, %Objptr* %r12551
	%r12553 = load %Pointer, %Pointer* %stackTop
	%r12554 = getelementptr inbounds i8, %Pointer %r12553, i32 16
	%r12555 = bitcast %Pointer %r12554 to %Objptr*
	store %Objptr %r12552, %Objptr* %r12555
	; RP(0): Objptr (opt_7)  = SP(40): Objptr (opt_7)
	%r12556 = load %Pointer, %Pointer* %stackTop
	%r12557 = getelementptr inbounds i8, %Pointer %r12556, i32 40
	%r12558 = bitcast %Pointer %r12557 to %Objptr*
	%r12559 = load %Objptr, %Objptr* %r12558
	store %Objptr %r12559, %Objptr* %regP_0
	; RP(1): Objptr (opt_34, opt_33, opt_32, opt_31)  = Cast (glob {index = 6, isRoot = true, ty = Objptr (opt_32)}, Objptr (opt_34, opt_33, opt_32, opt_31))
	%r12560 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 6
	%r12561 = load %Objptr, %Objptr* %r12560
	%r12562 = bitcast %Objptr %r12561 to %Objptr
	store %Objptr %r12562, %Objptr* %regP_1
	; Goto L_175
	br label %L_175

L_235:
	; RP(1): Objptr (opt_42)  = OP (RP(0): Objptr (opt_42), 8): Objptr (opt_42)
	%r12563 = load %Objptr, %Objptr* %regP_0
	%r12564 = getelementptr inbounds i8, %Objptr %r12563, i32 8
	%r12565 = bitcast %Objptr %r12564 to %Objptr*
	%r12566 = load %Objptr, %Objptr* %r12565
	store %Objptr %r12566, %Objptr* %regP_1
	; RR64(0): Real64  = OR64 (RP(0): Objptr (opt_42), 0): Real64
	%r12567 = load %Objptr, %Objptr* %regP_0
	%r12568 = getelementptr inbounds i8, %Objptr %r12567, i32 0
	%r12569 = bitcast %Objptr %r12568 to %Real64*
	%r12570 = load %Real64, %Real64* %r12569
	store %Real64 %r12570, %Real64* %regR64_0
	; XR64 (SP(88): Objptr (opt_29), RW64(0): Word64, 8, 0): Real64  = RR64(0): Real64
	%r12571 = load %Real64, %Real64* %regR64_0
	%r12572 = load %Pointer, %Pointer* %stackTop
	%r12573 = getelementptr inbounds i8, %Pointer %r12572, i32 88
	%r12574 = bitcast %Pointer %r12573 to %Objptr*
	%r12575 = load %Objptr, %Objptr* %r12574
	%r12576 = load %Word64, %Word64* %regW64_0
	%r12577 = mul nsw %Word64 %r12576, 8
	%r12578 = add nsw %Word64 %r12577, 0
	%r12579 = getelementptr inbounds i8, %Objptr %r12575, %Word64 %r12578
	%r12580 = bitcast %Objptr %r12579 to %Real64*
	store %Real64 %r12571, %Real64* %r12580
	; RW64(1): Word64  = Word64_add (RW64(0): Word64, 0x1)
	%r12581 = load %Word64, %Word64* %regW64_0
	%r12582 = add %Word64 %r12581, 1
	store %Word64 %r12582, %Word64* %regW64_1
	; RP(0): Objptr (opt_42)  = RP(1): Objptr (opt_42)
	%r12583 = load %Objptr, %Objptr* %regP_1
	store %Objptr %r12583, %Objptr* %regP_0
	; RW64(0): Word64  = RW64(1): Word64
	%r12584 = load %Word64, %Word64* %regW64_1
	store %Word64 %r12584, %Word64* %regW64_0
	; Goto loop_14
	br label %loop_14

L_234:
	; switch {test = Cast (RP(0): Objptr (opt_42), Bits64), default = Some L_235, cases = ((0x1, L_236))}
	%r12585 = load %Objptr, %Objptr* %regP_0
	%r12586 = ptrtoint %Objptr %r12585 to %Word64
	switch %Word64 %r12586, label %L_235 [
		%Word64 1, label %L_236
	]

L_233:
	; SP(16): Objptr (opt_3)  = glob {index = 130, isRoot = true, ty = Objptr (opt_3)}
	%r12587 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 130
	%r12588 = load %Objptr, %Objptr* %r12587
	%r12589 = load %Pointer, %Pointer* %stackTop
	%r12590 = getelementptr inbounds i8, %Pointer %r12589, i32 16
	%r12591 = bitcast %Pointer %r12590 to %Objptr*
	store %Objptr %r12588, %Objptr* %r12591
	; Goto L_216
	br label %L_216

L_232:
	; SP(16): Objptr (opt_28)  = SP(96): Objptr (opt_28)
	%r12592 = load %Pointer, %Pointer* %stackTop
	%r12593 = getelementptr inbounds i8, %Pointer %r12592, i32 96
	%r12594 = bitcast %Pointer %r12593 to %Objptr*
	%r12595 = load %Objptr, %Objptr* %r12594
	%r12596 = load %Pointer, %Pointer* %stackTop
	%r12597 = getelementptr inbounds i8, %Pointer %r12596, i32 16
	%r12598 = bitcast %Pointer %r12597 to %Objptr*
	store %Objptr %r12595, %Objptr* %r12598
	; RP(0): Objptr (opt_7)  = SP(40): Objptr (opt_7)
	%r12599 = load %Pointer, %Pointer* %stackTop
	%r12600 = getelementptr inbounds i8, %Pointer %r12599, i32 40
	%r12601 = bitcast %Pointer %r12600 to %Objptr*
	%r12602 = load %Objptr, %Objptr* %r12601
	store %Objptr %r12602, %Objptr* %regP_0
	; RP(1): Objptr (opt_34, opt_33, opt_32, opt_31)  = Cast (0x2, Objptr (opt_34, opt_33, opt_32, opt_31))
	%r12603 = inttoptr %Word64 2 to %Objptr
	store %Objptr %r12603, %Objptr* %regP_1
	; Goto L_175
	br label %L_175

L_231:
	; SP(48): Objptr (opt_11)  = glob {index = 22, isRoot = true, ty = Objptr (opt_11)}
	%r12604 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 22
	%r12605 = load %Objptr, %Objptr* %r12604
	%r12606 = load %Pointer, %Pointer* %stackTop
	%r12607 = getelementptr inbounds i8, %Pointer %r12606, i32 48
	%r12608 = bitcast %Pointer %r12607 to %Objptr*
	store %Objptr %r12605, %Objptr* %r12608
	; Goto L_join_2
	br label %L_join_2

L_230:
	; RP(0): Objptr (opt_3)  = glob {index = 112, isRoot = true, ty = Objptr (opt_3)}
	%r12609 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 112
	%r12610 = load %Objptr, %Objptr* %r12609
	store %Objptr %r12610, %Objptr* %regP_0
	; Goto L_223
	br label %L_223

L_229:
	; SP(16): Objptr (opt_28)  = SP(96): Objptr (opt_28)
	%r12611 = load %Pointer, %Pointer* %stackTop
	%r12612 = getelementptr inbounds i8, %Pointer %r12611, i32 96
	%r12613 = bitcast %Pointer %r12612 to %Objptr*
	%r12614 = load %Objptr, %Objptr* %r12613
	%r12615 = load %Pointer, %Pointer* %stackTop
	%r12616 = getelementptr inbounds i8, %Pointer %r12615, i32 16
	%r12617 = bitcast %Pointer %r12616 to %Objptr*
	store %Objptr %r12614, %Objptr* %r12617
	; RP(0): Objptr (opt_7)  = SP(40): Objptr (opt_7)
	%r12618 = load %Pointer, %Pointer* %stackTop
	%r12619 = getelementptr inbounds i8, %Pointer %r12618, i32 40
	%r12620 = bitcast %Pointer %r12619 to %Objptr*
	%r12621 = load %Objptr, %Objptr* %r12620
	store %Objptr %r12621, %Objptr* %regP_0
	; RP(1): Objptr (opt_34, opt_33, opt_32, opt_31)  = Cast (0x2, Objptr (opt_34, opt_33, opt_32, opt_31))
	%r12622 = inttoptr %Word64 2 to %Objptr
	store %Objptr %r12622, %Objptr* %regP_1
	; Goto L_175
	br label %L_175

L_228:
	; SP(48): Objptr (opt_11)  = glob {index = 22, isRoot = true, ty = Objptr (opt_11)}
	%r12623 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 22
	%r12624 = load %Objptr, %Objptr* %r12623
	%r12625 = load %Pointer, %Pointer* %stackTop
	%r12626 = getelementptr inbounds i8, %Pointer %r12625, i32 48
	%r12627 = bitcast %Pointer %r12626 to %Objptr*
	store %Objptr %r12624, %Objptr* %r12627
	; Goto L_join_3
	br label %L_join_3

L_227:
	; CCall {args = (<GCState>, 0x1), frameInfo = None, func = {args = (GCState, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = false, mayGC = false, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Int32), res = None}, return = Bits0, symbolScope = private, target = MLton_halt}, return = None}
	; GetOperands
	%r12628 = bitcast %struct.GC_state* @gcState to %Pointer
	; FlushFrontier
	%r12629 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12630 = getelementptr inbounds i8, %Pointer %r12629, i32 0
	%r12631 = bitcast %Pointer %r12630 to %Pointer*
	%r12632 = load %Pointer, %Pointer* %frontier
	store %Pointer %r12632, %Pointer* %r12631
	; FlushStackTop
	%r12633 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12634 = getelementptr inbounds i8, %Pointer %r12633, i32 16
	%r12635 = bitcast %Pointer %r12634 to %Pointer*
	%r12636 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r12636, %Pointer* %r12635
	; Call
	call void @MLton_halt(%Pointer %r12628, %Word32 1)
	unreachable

L_226:
	; Push(-8)
	%r12637 = load %Pointer, %Pointer* %stackTop
	%r12638 = getelementptr inbounds i8, %Pointer %r12637, i32 -8
	store %Pointer %r12638, %Pointer* %stackTop
	; CCall {args = (glob {index = 131, isRoot = true, ty = Objptr (opt_3)}), frameInfo = None, func = {args = (Objptr (opt_3)), convention = cdecl, kind = Impure, prototype = {args = (Objptr), res = None}, return = Bits0, symbolScope = private, target = Stdio_print}, return = Some L_227}
	; GetOperands
	%r12639 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 131
	%r12640 = load %Objptr, %Objptr* %r12639
	; Call
	call void @Stdio_print(%Objptr %r12640)
	br label %L_227

L_225:
	; Push(-24)
	%r12641 = load %Pointer, %Pointer* %stackTop
	%r12642 = getelementptr inbounds i8, %Pointer %r12641, i32 -24
	store %Pointer %r12642, %Pointer* %stackTop
	; CCall {args = (glob {index = 113, isRoot = true, ty = Objptr (opt_3)}), frameInfo = None, func = {args = (Objptr (opt_3)), convention = cdecl, kind = Impure, prototype = {args = (Objptr), res = None}, return = Bits0, symbolScope = private, target = MLton_bug}, return = None}
	; GetOperands
	%r12643 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 113
	%r12644 = load %Objptr, %Objptr* %r12643
	; Call
	call void @MLton_bug(%Objptr %r12644)
	unreachable

L_224:
	; Push(-112)
	%r12645 = load %Pointer, %Pointer* %stackTop
	%r12646 = getelementptr inbounds i8, %Pointer %r12645, i32 -112
	store %Pointer %r12646, %Pointer* %stackTop
	; SQ(0): Label L_226  = L_226
	%r12647 = inttoptr %Word32 46 to %CPointer
	%r12648 = load %Pointer, %Pointer* %stackTop
	%r12649 = getelementptr inbounds i8, %Pointer %r12648, i32 0
	%r12650 = bitcast %Pointer %r12649 to %CPointer*
	store %CPointer %r12647, %CPointer* %r12650
	; SW32(24): Word32  = 0x0
	%r12651 = load %Pointer, %Pointer* %stackTop
	%r12652 = getelementptr inbounds i8, %Pointer %r12651, i32 24
	%r12653 = bitcast %Pointer %r12652 to %Word32*
	store %Word32 0, %Word32* %r12653
	; SP(32): Objptr (opt_28)  = SP(96): Objptr (opt_28)
	%r12654 = load %Pointer, %Pointer* %stackTop
	%r12655 = getelementptr inbounds i8, %Pointer %r12654, i32 96
	%r12656 = bitcast %Pointer %r12655 to %Objptr*
	%r12657 = load %Objptr, %Objptr* %r12656
	%r12658 = load %Pointer, %Pointer* %stackTop
	%r12659 = getelementptr inbounds i8, %Pointer %r12658, i32 32
	%r12660 = bitcast %Pointer %r12659 to %Objptr*
	store %Objptr %r12657, %Objptr* %r12660
	%r12661 = load %Pointer, %Pointer* %stackTop
	%r12662 = getelementptr inbounds i8, %Pointer %r12661, i32 16
	%r12663 = bitcast %Pointer %r12662 to %uintptr_t*
	store %uintptr_t 45, %uintptr_t* %r12663
	; Push(24)
	%r12664 = load %Pointer, %Pointer* %stackTop
	%r12665 = getelementptr inbounds i8, %Pointer %r12664, i32 24
	store %Pointer %r12665, %Pointer* %stackTop
	br label %exit_0

L_223:
	; SP(112): Objptr (opt_3)  = RP(0): Objptr (opt_3)
	%r12666 = load %Objptr, %Objptr* %regP_0
	%r12667 = load %Pointer, %Pointer* %stackTop
	%r12668 = getelementptr inbounds i8, %Pointer %r12667, i32 112
	%r12669 = bitcast %Pointer %r12668 to %Objptr*
	store %Objptr %r12666, %Objptr* %r12669
	; SP(120): Objptr (opt_27)  = SP(32): Objptr (opt_27)
	%r12670 = load %Pointer, %Pointer* %stackTop
	%r12671 = getelementptr inbounds i8, %Pointer %r12670, i32 32
	%r12672 = bitcast %Pointer %r12671 to %Objptr*
	%r12673 = load %Objptr, %Objptr* %r12672
	%r12674 = load %Pointer, %Pointer* %stackTop
	%r12675 = getelementptr inbounds i8, %Pointer %r12674, i32 120
	%r12676 = bitcast %Pointer %r12675 to %Objptr*
	store %Objptr %r12673, %Objptr* %r12676
	%r12677 = load %Pointer, %Pointer* %stackTop
	%r12678 = getelementptr inbounds i8, %Pointer %r12677, i32 104
	%r12679 = bitcast %Pointer %r12678 to %uintptr_t*
	store %uintptr_t 44, %uintptr_t* %r12679
	; Push(112)
	%r12680 = load %Pointer, %Pointer* %stackTop
	%r12681 = getelementptr inbounds i8, %Pointer %r12680, i32 112
	store %Pointer %r12681, %Pointer* %stackTop
	br label %print_5

L_222:
	; Push(-112)
	%r12682 = load %Pointer, %Pointer* %stackTop
	%r12683 = getelementptr inbounds i8, %Pointer %r12682, i32 -112
	store %Pointer %r12683, %Pointer* %stackTop
	; OW64 (SP(48): Objptr (opt_11), ~8): Word64  = 0x7
	%r12684 = load %Pointer, %Pointer* %stackTop
	%r12685 = getelementptr inbounds i8, %Pointer %r12684, i32 48
	%r12686 = bitcast %Pointer %r12685 to %Objptr*
	%r12687 = load %Objptr, %Objptr* %r12686
	%r12688 = getelementptr inbounds i8, %Objptr %r12687, i32 -8
	%r12689 = bitcast %Objptr %r12688 to %Word64*
	store %Word64 7, %Word64* %r12689
	; RP(0): Objptr (opt_3)  = Cast (SP(48): Objptr (opt_11), Objptr (opt_3))
	%r12690 = load %Pointer, %Pointer* %stackTop
	%r12691 = getelementptr inbounds i8, %Pointer %r12690, i32 48
	%r12692 = bitcast %Pointer %r12691 to %Objptr*
	%r12693 = load %Objptr, %Objptr* %r12692
	%r12694 = bitcast %Objptr %r12693 to %Objptr
	store %Objptr %r12694, %Objptr* %regP_0
	; Goto L_223
	br label %L_223

L_221:
	; Push(-112)
	%r12695 = load %Pointer, %Pointer* %stackTop
	%r12696 = getelementptr inbounds i8, %Pointer %r12695, i32 -112
	store %Pointer %r12696, %Pointer* %stackTop
	; CCall {args = (<GCState>, SP(48): Objptr (opt_11), SW64(24): Word64, glob {index = 112, isRoot = true, ty = Objptr (opt_3)}, 0x0, 0x1), frameInfo = Some {frameLayoutsIndex = 43}, func = {args = (GCState, Objptr (opt_11), Word64, Objptr (opt_3), Word64, Word64), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Objptr, Int64, Objptr, Int64, Int64), res = None}, return = Bits0, symbolScope = private, target = GC_arrayCopy}, return = Some L_222}
	; GetOperands
	%r12697 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12698 = load %Pointer, %Pointer* %stackTop
	%r12699 = getelementptr inbounds i8, %Pointer %r12698, i32 48
	%r12700 = bitcast %Pointer %r12699 to %Objptr*
	%r12701 = load %Objptr, %Objptr* %r12700
	%r12702 = load %Pointer, %Pointer* %stackTop
	%r12703 = getelementptr inbounds i8, %Pointer %r12702, i32 24
	%r12704 = bitcast %Pointer %r12703 to %Word64*
	%r12705 = load %Word64, %Word64* %r12704
	%r12706 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 112
	%r12707 = load %Objptr, %Objptr* %r12706
	%r12708 = load %Pointer, %Pointer* %stackTop
	%r12709 = getelementptr inbounds i8, %Pointer %r12708, i32 104
	%r12710 = bitcast %Pointer %r12709 to %uintptr_t*
	store %uintptr_t 43, %uintptr_t* %r12710
	; Push(112)
	%r12711 = load %Pointer, %Pointer* %stackTop
	%r12712 = getelementptr inbounds i8, %Pointer %r12711, i32 112
	store %Pointer %r12712, %Pointer* %stackTop
	; FlushFrontier
	%r12713 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12714 = getelementptr inbounds i8, %Pointer %r12713, i32 0
	%r12715 = bitcast %Pointer %r12714 to %Pointer*
	%r12716 = load %Pointer, %Pointer* %frontier
	store %Pointer %r12716, %Pointer* %r12715
	; FlushStackTop
	%r12717 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12718 = getelementptr inbounds i8, %Pointer %r12717, i32 16
	%r12719 = bitcast %Pointer %r12718 to %Pointer*
	%r12720 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r12720, %Pointer* %r12719
	; Call
	call void @GC_arrayCopy(%Pointer %r12697, %Objptr %r12701, %Word64 %r12705, %Objptr %r12707, %Word64 0, %Word64 1)
	; CacheFrontier
	%r12721 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12722 = getelementptr inbounds i8, %Pointer %r12721, i32 0
	%r12723 = bitcast %Pointer %r12722 to %Pointer*
	%r12724 = load %Pointer, %Pointer* %r12723
	store %Pointer %r12724, %Pointer* %frontier
	; CacheStackTop
	%r12725 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12726 = getelementptr inbounds i8, %Pointer %r12725, i32 16
	%r12727 = bitcast %Pointer %r12726 to %Pointer*
	%r12728 = load %Pointer, %Pointer* %r12727
	store %Pointer %r12728, %Pointer* %stackTop
	br label %L_222

L_join_3:
	; CCall {args = (<GCState>, SP(48): Objptr (opt_11), 0x0, SP(16): Objptr (opt_3), 0x0, SW64(24): Word64), frameInfo = Some {frameLayoutsIndex = 42}, func = {args = (GCState, Objptr (opt_11), Word64, Objptr (opt_3), Word64, Word64), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Objptr, Int64, Objptr, Int64, Int64), res = None}, return = Bits0, symbolScope = private, target = GC_arrayCopy}, return = Some L_221}
	; GetOperands
	%r12729 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12730 = load %Pointer, %Pointer* %stackTop
	%r12731 = getelementptr inbounds i8, %Pointer %r12730, i32 48
	%r12732 = bitcast %Pointer %r12731 to %Objptr*
	%r12733 = load %Objptr, %Objptr* %r12732
	%r12734 = load %Pointer, %Pointer* %stackTop
	%r12735 = getelementptr inbounds i8, %Pointer %r12734, i32 16
	%r12736 = bitcast %Pointer %r12735 to %Objptr*
	%r12737 = load %Objptr, %Objptr* %r12736
	%r12738 = load %Pointer, %Pointer* %stackTop
	%r12739 = getelementptr inbounds i8, %Pointer %r12738, i32 24
	%r12740 = bitcast %Pointer %r12739 to %Word64*
	%r12741 = load %Word64, %Word64* %r12740
	%r12742 = load %Pointer, %Pointer* %stackTop
	%r12743 = getelementptr inbounds i8, %Pointer %r12742, i32 104
	%r12744 = bitcast %Pointer %r12743 to %uintptr_t*
	store %uintptr_t 42, %uintptr_t* %r12744
	; Push(112)
	%r12745 = load %Pointer, %Pointer* %stackTop
	%r12746 = getelementptr inbounds i8, %Pointer %r12745, i32 112
	store %Pointer %r12746, %Pointer* %stackTop
	; FlushFrontier
	%r12747 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12748 = getelementptr inbounds i8, %Pointer %r12747, i32 0
	%r12749 = bitcast %Pointer %r12748 to %Pointer*
	%r12750 = load %Pointer, %Pointer* %frontier
	store %Pointer %r12750, %Pointer* %r12749
	; FlushStackTop
	%r12751 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12752 = getelementptr inbounds i8, %Pointer %r12751, i32 16
	%r12753 = bitcast %Pointer %r12752 to %Pointer*
	%r12754 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r12754, %Pointer* %r12753
	; Call
	call void @GC_arrayCopy(%Pointer %r12729, %Objptr %r12733, %Word64 0, %Objptr %r12737, %Word64 0, %Word64 %r12741)
	; CacheFrontier
	%r12755 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12756 = getelementptr inbounds i8, %Pointer %r12755, i32 0
	%r12757 = bitcast %Pointer %r12756 to %Pointer*
	%r12758 = load %Pointer, %Pointer* %r12757
	store %Pointer %r12758, %Pointer* %frontier
	; CacheStackTop
	%r12759 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12760 = getelementptr inbounds i8, %Pointer %r12759, i32 16
	%r12761 = bitcast %Pointer %r12760 to %Pointer*
	%r12762 = load %Pointer, %Pointer* %r12761
	store %Pointer %r12762, %Pointer* %stackTop
	br label %L_221

L_220:
	; Push(-112)
	%r12763 = load %Pointer, %Pointer* %stackTop
	%r12764 = getelementptr inbounds i8, %Pointer %r12763, i32 -112
	store %Pointer %r12764, %Pointer* %stackTop
	%r12765 = load %Objptr, %Objptr* @CReturnP
	store %Objptr %r12765, %Objptr* %regP_0
	; SP(48): Objptr (opt_11)  = RP(0): Objptr (opt_11)
	%r12766 = load %Objptr, %Objptr* %regP_0
	%r12767 = load %Pointer, %Pointer* %stackTop
	%r12768 = getelementptr inbounds i8, %Pointer %r12767, i32 48
	%r12769 = bitcast %Pointer %r12768 to %Objptr*
	store %Objptr %r12766, %Objptr* %r12769
	; Goto L_join_3
	br label %L_join_3

L_219:
	; CCall {args = (<GCState>, 0x0, RW64(0): Word64, 0x17), frameInfo = Some {frameLayoutsIndex = 41}, func = {args = (GCState, Word64, Word64, Word64), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int64, Word64), res = Some Objptr}, return = Objptr (opt_11), symbolScope = private, target = GC_arrayAllocate}, return = Some L_220}
	; GetOperands
	%r12770 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12771 = load %Word64, %Word64* %regW64_0
	%r12772 = load %Pointer, %Pointer* %stackTop
	%r12773 = getelementptr inbounds i8, %Pointer %r12772, i32 104
	%r12774 = bitcast %Pointer %r12773 to %uintptr_t*
	store %uintptr_t 41, %uintptr_t* %r12774
	; Push(112)
	%r12775 = load %Pointer, %Pointer* %stackTop
	%r12776 = getelementptr inbounds i8, %Pointer %r12775, i32 112
	store %Pointer %r12776, %Pointer* %stackTop
	; FlushFrontier
	%r12777 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12778 = getelementptr inbounds i8, %Pointer %r12777, i32 0
	%r12779 = bitcast %Pointer %r12778 to %Pointer*
	%r12780 = load %Pointer, %Pointer* %frontier
	store %Pointer %r12780, %Pointer* %r12779
	; FlushStackTop
	%r12781 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12782 = getelementptr inbounds i8, %Pointer %r12781, i32 16
	%r12783 = bitcast %Pointer %r12782 to %Pointer*
	%r12784 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r12784, %Pointer* %r12783
	; Call
	%r12785 = call %Objptr @GC_arrayAllocate(%Pointer %r12770, %Word64 0, %Word64 %r12771, %Word64 23)
	store %Objptr %r12785, %Objptr* @CReturnP
	; CacheFrontier
	%r12786 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12787 = getelementptr inbounds i8, %Pointer %r12786, i32 0
	%r12788 = bitcast %Pointer %r12787 to %Pointer*
	%r12789 = load %Pointer, %Pointer* %r12788
	store %Pointer %r12789, %Pointer* %frontier
	; CacheStackTop
	%r12790 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12791 = getelementptr inbounds i8, %Pointer %r12790, i32 16
	%r12792 = bitcast %Pointer %r12791 to %Pointer*
	%r12793 = load %Pointer, %Pointer* %r12792
	store %Pointer %r12793, %Pointer* %stackTop
	br label %L_220

L_218:
	; RW32(0): Word32  = Word64_equal (0x0, RW64(0): Word64)
	%r12794 = load %Word64, %Word64* %regW64_0
	%r12796 = icmp eq %Word64 0, %r12794
	%r12795 = zext i1 %r12796 to %Word32
	store %Word32 %r12795, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_219), (0x1, L_228))}
	%r12797 = load %Word32, %Word32* %regW32_0
	%r12798 = trunc %Word32 %r12797 to i1
	br i1 %r12798, label %L_228, label %L_219

L_217:
	; RW64(0): Word64  = Word64_add (SW64(24): Word64, 0x1)
	%r12799 = load %Pointer, %Pointer* %stackTop
	%r12800 = getelementptr inbounds i8, %Pointer %r12799, i32 24
	%r12801 = bitcast %Pointer %r12800 to %Word64*
	%r12802 = load %Word64, %Word64* %r12801
	%r12803 = add %Word64 %r12802, 1
	store %Word64 %r12803, %Word64* %regW64_0
	; RW32(0): Word32  = WordU64_lt (0x7FFFFFFF, RW64(0): Word64)
	%r12804 = load %Word64, %Word64* %regW64_0
	%r12806 = icmp ult %Word64 2147483647, %r12804
	%r12805 = zext i1 %r12806 to %Word32
	store %Word32 %r12805, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_218), (0x1, L_229))}
	%r12807 = load %Word32, %Word32* %regW32_0
	%r12808 = trunc %Word32 %r12807 to i1
	br i1 %r12808, label %L_229, label %L_218

L_216:
	; SW64(24): Word64  = OW64 (SP(16): Objptr (opt_3), ~16): Word64
	%r12809 = load %Pointer, %Pointer* %stackTop
	%r12810 = getelementptr inbounds i8, %Pointer %r12809, i32 16
	%r12811 = bitcast %Pointer %r12810 to %Objptr*
	%r12812 = load %Objptr, %Objptr* %r12811
	%r12813 = getelementptr inbounds i8, %Objptr %r12812, i32 -16
	%r12814 = bitcast %Objptr %r12813 to %Word64*
	%r12815 = load %Word64, %Word64* %r12814
	%r12816 = load %Pointer, %Pointer* %stackTop
	%r12817 = getelementptr inbounds i8, %Pointer %r12816, i32 24
	%r12818 = bitcast %Pointer %r12817 to %Word64*
	store %Word64 %r12815, %Word64* %r12818
	; RW32(0): Word32  = Word64_equal (SW64(24): Word64, 0x0)
	%r12819 = load %Pointer, %Pointer* %stackTop
	%r12820 = getelementptr inbounds i8, %Pointer %r12819, i32 24
	%r12821 = bitcast %Pointer %r12820 to %Word64*
	%r12822 = load %Word64, %Word64* %r12821
	%r12824 = icmp eq %Word64 %r12822, 0
	%r12823 = zext i1 %r12824 to %Word32
	store %Word32 %r12823, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_217), (0x1, L_230))}
	%r12825 = load %Word32, %Word32* %regW32_0
	%r12826 = trunc %Word32 %r12825 to i1
	br i1 %r12826, label %L_230, label %L_217

L_215:
	; Push(-112)
	%r12827 = load %Pointer, %Pointer* %stackTop
	%r12828 = getelementptr inbounds i8, %Pointer %r12827, i32 -112
	store %Pointer %r12828, %Pointer* %stackTop
	; OW64 (SP(48): Objptr (opt_11), ~8): Word64  = 0x7
	%r12829 = load %Pointer, %Pointer* %stackTop
	%r12830 = getelementptr inbounds i8, %Pointer %r12829, i32 48
	%r12831 = bitcast %Pointer %r12830 to %Objptr*
	%r12832 = load %Objptr, %Objptr* %r12831
	%r12833 = getelementptr inbounds i8, %Objptr %r12832, i32 -8
	%r12834 = bitcast %Objptr %r12833 to %Word64*
	store %Word64 7, %Word64* %r12834
	; SP(16): Objptr (opt_3)  = Cast (SP(48): Objptr (opt_11), Objptr (opt_3))
	%r12835 = load %Pointer, %Pointer* %stackTop
	%r12836 = getelementptr inbounds i8, %Pointer %r12835, i32 48
	%r12837 = bitcast %Pointer %r12836 to %Objptr*
	%r12838 = load %Objptr, %Objptr* %r12837
	%r12839 = bitcast %Objptr %r12838 to %Objptr
	%r12840 = load %Pointer, %Pointer* %stackTop
	%r12841 = getelementptr inbounds i8, %Pointer %r12840, i32 16
	%r12842 = bitcast %Pointer %r12841 to %Objptr*
	store %Objptr %r12839, %Objptr* %r12842
	; Goto L_216
	br label %L_216

L_214:
	; Push(-112)
	%r12843 = load %Pointer, %Pointer* %stackTop
	%r12844 = getelementptr inbounds i8, %Pointer %r12843, i32 -112
	store %Pointer %r12844, %Pointer* %stackTop
	; CCall {args = (<GCState>, SP(48): Objptr (opt_11), 0x9, SP(16): Objptr (opt_3), 0x0, SW64(24): Word64), frameInfo = Some {frameLayoutsIndex = 40}, func = {args = (GCState, Objptr (opt_11), Word64, Objptr (opt_3), Word64, Word64), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Objptr, Int64, Objptr, Int64, Int64), res = None}, return = Bits0, symbolScope = private, target = GC_arrayCopy}, return = Some L_215}
	; GetOperands
	%r12845 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12846 = load %Pointer, %Pointer* %stackTop
	%r12847 = getelementptr inbounds i8, %Pointer %r12846, i32 48
	%r12848 = bitcast %Pointer %r12847 to %Objptr*
	%r12849 = load %Objptr, %Objptr* %r12848
	%r12850 = load %Pointer, %Pointer* %stackTop
	%r12851 = getelementptr inbounds i8, %Pointer %r12850, i32 16
	%r12852 = bitcast %Pointer %r12851 to %Objptr*
	%r12853 = load %Objptr, %Objptr* %r12852
	%r12854 = load %Pointer, %Pointer* %stackTop
	%r12855 = getelementptr inbounds i8, %Pointer %r12854, i32 24
	%r12856 = bitcast %Pointer %r12855 to %Word64*
	%r12857 = load %Word64, %Word64* %r12856
	%r12858 = load %Pointer, %Pointer* %stackTop
	%r12859 = getelementptr inbounds i8, %Pointer %r12858, i32 104
	%r12860 = bitcast %Pointer %r12859 to %uintptr_t*
	store %uintptr_t 40, %uintptr_t* %r12860
	; Push(112)
	%r12861 = load %Pointer, %Pointer* %stackTop
	%r12862 = getelementptr inbounds i8, %Pointer %r12861, i32 112
	store %Pointer %r12862, %Pointer* %stackTop
	; FlushFrontier
	%r12863 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12864 = getelementptr inbounds i8, %Pointer %r12863, i32 0
	%r12865 = bitcast %Pointer %r12864 to %Pointer*
	%r12866 = load %Pointer, %Pointer* %frontier
	store %Pointer %r12866, %Pointer* %r12865
	; FlushStackTop
	%r12867 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12868 = getelementptr inbounds i8, %Pointer %r12867, i32 16
	%r12869 = bitcast %Pointer %r12868 to %Pointer*
	%r12870 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r12870, %Pointer* %r12869
	; Call
	call void @GC_arrayCopy(%Pointer %r12845, %Objptr %r12849, %Word64 9, %Objptr %r12853, %Word64 0, %Word64 %r12857)
	; CacheFrontier
	%r12871 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12872 = getelementptr inbounds i8, %Pointer %r12871, i32 0
	%r12873 = bitcast %Pointer %r12872 to %Pointer*
	%r12874 = load %Pointer, %Pointer* %r12873
	store %Pointer %r12874, %Pointer* %frontier
	; CacheStackTop
	%r12875 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12876 = getelementptr inbounds i8, %Pointer %r12875, i32 16
	%r12877 = bitcast %Pointer %r12876 to %Pointer*
	%r12878 = load %Pointer, %Pointer* %r12877
	store %Pointer %r12878, %Pointer* %stackTop
	br label %L_215

L_join_2:
	; CCall {args = (<GCState>, SP(48): Objptr (opt_11), 0x0, glob {index = 130, isRoot = true, ty = Objptr (opt_3)}, 0x0, 0x9), frameInfo = Some {frameLayoutsIndex = 39}, func = {args = (GCState, Objptr (opt_11), Word64, Objptr (opt_3), Word64, Word64), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Objptr, Int64, Objptr, Int64, Int64), res = None}, return = Bits0, symbolScope = private, target = GC_arrayCopy}, return = Some L_214}
	; GetOperands
	%r12879 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12880 = load %Pointer, %Pointer* %stackTop
	%r12881 = getelementptr inbounds i8, %Pointer %r12880, i32 48
	%r12882 = bitcast %Pointer %r12881 to %Objptr*
	%r12883 = load %Objptr, %Objptr* %r12882
	%r12884 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 130
	%r12885 = load %Objptr, %Objptr* %r12884
	%r12886 = load %Pointer, %Pointer* %stackTop
	%r12887 = getelementptr inbounds i8, %Pointer %r12886, i32 104
	%r12888 = bitcast %Pointer %r12887 to %uintptr_t*
	store %uintptr_t 39, %uintptr_t* %r12888
	; Push(112)
	%r12889 = load %Pointer, %Pointer* %stackTop
	%r12890 = getelementptr inbounds i8, %Pointer %r12889, i32 112
	store %Pointer %r12890, %Pointer* %stackTop
	; FlushFrontier
	%r12891 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12892 = getelementptr inbounds i8, %Pointer %r12891, i32 0
	%r12893 = bitcast %Pointer %r12892 to %Pointer*
	%r12894 = load %Pointer, %Pointer* %frontier
	store %Pointer %r12894, %Pointer* %r12893
	; FlushStackTop
	%r12895 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12896 = getelementptr inbounds i8, %Pointer %r12895, i32 16
	%r12897 = bitcast %Pointer %r12896 to %Pointer*
	%r12898 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r12898, %Pointer* %r12897
	; Call
	call void @GC_arrayCopy(%Pointer %r12879, %Objptr %r12883, %Word64 0, %Objptr %r12885, %Word64 0, %Word64 9)
	; CacheFrontier
	%r12899 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12900 = getelementptr inbounds i8, %Pointer %r12899, i32 0
	%r12901 = bitcast %Pointer %r12900 to %Pointer*
	%r12902 = load %Pointer, %Pointer* %r12901
	store %Pointer %r12902, %Pointer* %frontier
	; CacheStackTop
	%r12903 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12904 = getelementptr inbounds i8, %Pointer %r12903, i32 16
	%r12905 = bitcast %Pointer %r12904 to %Pointer*
	%r12906 = load %Pointer, %Pointer* %r12905
	store %Pointer %r12906, %Pointer* %stackTop
	br label %L_214

L_213:
	; Push(-112)
	%r12907 = load %Pointer, %Pointer* %stackTop
	%r12908 = getelementptr inbounds i8, %Pointer %r12907, i32 -112
	store %Pointer %r12908, %Pointer* %stackTop
	%r12909 = load %Objptr, %Objptr* @CReturnP
	store %Objptr %r12909, %Objptr* %regP_0
	; SP(48): Objptr (opt_11)  = RP(0): Objptr (opt_11)
	%r12910 = load %Objptr, %Objptr* %regP_0
	%r12911 = load %Pointer, %Pointer* %stackTop
	%r12912 = getelementptr inbounds i8, %Pointer %r12911, i32 48
	%r12913 = bitcast %Pointer %r12912 to %Objptr*
	store %Objptr %r12910, %Objptr* %r12913
	; Goto L_join_2
	br label %L_join_2

L_212:
	; CCall {args = (<GCState>, 0x0, RW64(0): Word64, 0x17), frameInfo = Some {frameLayoutsIndex = 38}, func = {args = (GCState, Word64, Word64, Word64), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int64, Word64), res = Some Objptr}, return = Objptr (opt_11), symbolScope = private, target = GC_arrayAllocate}, return = Some L_213}
	; GetOperands
	%r12914 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12915 = load %Word64, %Word64* %regW64_0
	%r12916 = load %Pointer, %Pointer* %stackTop
	%r12917 = getelementptr inbounds i8, %Pointer %r12916, i32 104
	%r12918 = bitcast %Pointer %r12917 to %uintptr_t*
	store %uintptr_t 38, %uintptr_t* %r12918
	; Push(112)
	%r12919 = load %Pointer, %Pointer* %stackTop
	%r12920 = getelementptr inbounds i8, %Pointer %r12919, i32 112
	store %Pointer %r12920, %Pointer* %stackTop
	; FlushFrontier
	%r12921 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12922 = getelementptr inbounds i8, %Pointer %r12921, i32 0
	%r12923 = bitcast %Pointer %r12922 to %Pointer*
	%r12924 = load %Pointer, %Pointer* %frontier
	store %Pointer %r12924, %Pointer* %r12923
	; FlushStackTop
	%r12925 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12926 = getelementptr inbounds i8, %Pointer %r12925, i32 16
	%r12927 = bitcast %Pointer %r12926 to %Pointer*
	%r12928 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r12928, %Pointer* %r12927
	; Call
	%r12929 = call %Objptr @GC_arrayAllocate(%Pointer %r12914, %Word64 0, %Word64 %r12915, %Word64 23)
	store %Objptr %r12929, %Objptr* @CReturnP
	; CacheFrontier
	%r12930 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12931 = getelementptr inbounds i8, %Pointer %r12930, i32 0
	%r12932 = bitcast %Pointer %r12931 to %Pointer*
	%r12933 = load %Pointer, %Pointer* %r12932
	store %Pointer %r12933, %Pointer* %frontier
	; CacheStackTop
	%r12934 = bitcast %struct.GC_state* @gcState to %Pointer
	%r12935 = getelementptr inbounds i8, %Pointer %r12934, i32 16
	%r12936 = bitcast %Pointer %r12935 to %Pointer*
	%r12937 = load %Pointer, %Pointer* %r12936
	store %Pointer %r12937, %Pointer* %stackTop
	br label %L_213

L_211:
	; RW32(0): Word32  = Word64_equal (0x0, RW64(0): Word64)
	%r12938 = load %Word64, %Word64* %regW64_0
	%r12940 = icmp eq %Word64 0, %r12938
	%r12939 = zext i1 %r12940 to %Word32
	store %Word32 %r12939, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_212), (0x1, L_231))}
	%r12941 = load %Word32, %Word32* %regW32_0
	%r12942 = trunc %Word32 %r12941 to i1
	br i1 %r12942, label %L_231, label %L_212

L_210:
	; RW64(0): Word64  = Word64_add (SW64(24): Word64, 0x9)
	%r12943 = load %Pointer, %Pointer* %stackTop
	%r12944 = getelementptr inbounds i8, %Pointer %r12943, i32 24
	%r12945 = bitcast %Pointer %r12944 to %Word64*
	%r12946 = load %Word64, %Word64* %r12945
	%r12947 = add %Word64 %r12946, 9
	store %Word64 %r12947, %Word64* %regW64_0
	; RW32(0): Word32  = WordU64_lt (0x7FFFFFFF, RW64(0): Word64)
	%r12948 = load %Word64, %Word64* %regW64_0
	%r12950 = icmp ult %Word64 2147483647, %r12948
	%r12949 = zext i1 %r12950 to %Word32
	store %Word32 %r12949, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_211), (0x1, L_232))}
	%r12951 = load %Word32, %Word32* %regW32_0
	%r12952 = trunc %Word32 %r12951 to i1
	br i1 %r12952, label %L_232, label %L_211

L_209:
	; Push(-112)
	%r12953 = load %Pointer, %Pointer* %stackTop
	%r12954 = getelementptr inbounds i8, %Pointer %r12953, i32 -112
	store %Pointer %r12954, %Pointer* %stackTop
	; SP(16): Objptr (opt_3)  = SP(112): Objptr (opt_3)
	%r12955 = load %Pointer, %Pointer* %stackTop
	%r12956 = getelementptr inbounds i8, %Pointer %r12955, i32 112
	%r12957 = bitcast %Pointer %r12956 to %Objptr*
	%r12958 = load %Objptr, %Objptr* %r12957
	%r12959 = load %Pointer, %Pointer* %stackTop
	%r12960 = getelementptr inbounds i8, %Pointer %r12959, i32 16
	%r12961 = bitcast %Pointer %r12960 to %Objptr*
	store %Objptr %r12958, %Objptr* %r12961
	; SW64(24): Word64  = OW64 (SP(16): Objptr (opt_3), ~16): Word64
	%r12962 = load %Pointer, %Pointer* %stackTop
	%r12963 = getelementptr inbounds i8, %Pointer %r12962, i32 16
	%r12964 = bitcast %Pointer %r12963 to %Objptr*
	%r12965 = load %Objptr, %Objptr* %r12964
	%r12966 = getelementptr inbounds i8, %Objptr %r12965, i32 -16
	%r12967 = bitcast %Objptr %r12966 to %Word64*
	%r12968 = load %Word64, %Word64* %r12967
	%r12969 = load %Pointer, %Pointer* %stackTop
	%r12970 = getelementptr inbounds i8, %Pointer %r12969, i32 24
	%r12971 = bitcast %Pointer %r12970 to %Word64*
	store %Word64 %r12968, %Word64* %r12971
	; RW32(0): Word32  = Word64_equal (SW64(24): Word64, 0x0)
	%r12972 = load %Pointer, %Pointer* %stackTop
	%r12973 = getelementptr inbounds i8, %Pointer %r12972, i32 24
	%r12974 = bitcast %Pointer %r12973 to %Word64*
	%r12975 = load %Word64, %Word64* %r12974
	%r12977 = icmp eq %Word64 %r12975, 0
	%r12976 = zext i1 %r12977 to %Word32
	store %Word32 %r12976, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_210), (0x1, L_233))}
	%r12978 = load %Word32, %Word32* %regW32_0
	%r12979 = trunc %Word32 %r12978 to i1
	br i1 %r12979, label %L_233, label %L_210

L_208:
	; SR64(112): Real64  = RR64(0): Real64
	%r12980 = load %Real64, %Real64* %regR64_0
	%r12981 = load %Pointer, %Pointer* %stackTop
	%r12982 = getelementptr inbounds i8, %Pointer %r12981, i32 112
	%r12983 = bitcast %Pointer %r12982 to %Real64*
	store %Real64 %r12980, %Real64* %r12983
	; SP(120): Objptr (opt_13)  = SP(80): Objptr (opt_13)
	%r12984 = load %Pointer, %Pointer* %stackTop
	%r12985 = getelementptr inbounds i8, %Pointer %r12984, i32 80
	%r12986 = bitcast %Pointer %r12985 to %Objptr*
	%r12987 = load %Objptr, %Objptr* %r12986
	%r12988 = load %Pointer, %Pointer* %stackTop
	%r12989 = getelementptr inbounds i8, %Pointer %r12988, i32 120
	%r12990 = bitcast %Pointer %r12989 to %Objptr*
	store %Objptr %r12987, %Objptr* %r12990
	; SP(128): Objptr (opt_25)  = SP(72): Objptr (opt_25)
	%r12991 = load %Pointer, %Pointer* %stackTop
	%r12992 = getelementptr inbounds i8, %Pointer %r12991, i32 72
	%r12993 = bitcast %Pointer %r12992 to %Objptr*
	%r12994 = load %Objptr, %Objptr* %r12993
	%r12995 = load %Pointer, %Pointer* %stackTop
	%r12996 = getelementptr inbounds i8, %Pointer %r12995, i32 128
	%r12997 = bitcast %Pointer %r12996 to %Objptr*
	store %Objptr %r12994, %Objptr* %r12997
	; SP(136): Objptr (opt_24)  = SP(56): Objptr (opt_24)
	%r12998 = load %Pointer, %Pointer* %stackTop
	%r12999 = getelementptr inbounds i8, %Pointer %r12998, i32 56
	%r13000 = bitcast %Pointer %r12999 to %Objptr*
	%r13001 = load %Objptr, %Objptr* %r13000
	%r13002 = load %Pointer, %Pointer* %stackTop
	%r13003 = getelementptr inbounds i8, %Pointer %r13002, i32 136
	%r13004 = bitcast %Pointer %r13003 to %Objptr*
	store %Objptr %r13001, %Objptr* %r13004
	; SP(144): Objptr (opt_23)  = SP(48): Objptr (opt_23)
	%r13005 = load %Pointer, %Pointer* %stackTop
	%r13006 = getelementptr inbounds i8, %Pointer %r13005, i32 48
	%r13007 = bitcast %Pointer %r13006 to %Objptr*
	%r13008 = load %Objptr, %Objptr* %r13007
	%r13009 = load %Pointer, %Pointer* %stackTop
	%r13010 = getelementptr inbounds i8, %Pointer %r13009, i32 144
	%r13011 = bitcast %Pointer %r13010 to %Objptr*
	store %Objptr %r13008, %Objptr* %r13011
	%r13012 = load %Pointer, %Pointer* %stackTop
	%r13013 = getelementptr inbounds i8, %Pointer %r13012, i32 104
	%r13014 = bitcast %Pointer %r13013 to %uintptr_t*
	store %uintptr_t 37, %uintptr_t* %r13014
	; Push(112)
	%r13015 = load %Pointer, %Pointer* %stackTop
	%r13016 = getelementptr inbounds i8, %Pointer %r13015, i32 112
	store %Pointer %r13016, %Pointer* %stackTop
	br label %x_2

L_207:
	; RR64(2): Real64  = XR64 (SP(88): Objptr (opt_29), RW64(2): Word64, 8, 0): Real64
	%r13017 = load %Pointer, %Pointer* %stackTop
	%r13018 = getelementptr inbounds i8, %Pointer %r13017, i32 88
	%r13019 = bitcast %Pointer %r13018 to %Objptr*
	%r13020 = load %Objptr, %Objptr* %r13019
	%r13021 = load %Word64, %Word64* %regW64_2
	%r13022 = mul nsw %Word64 %r13021, 8
	%r13023 = add nsw %Word64 %r13022, 0
	%r13024 = getelementptr inbounds i8, %Objptr %r13020, %Word64 %r13023
	%r13025 = bitcast %Objptr %r13024 to %Real64*
	%r13026 = load %Real64, %Real64* %r13025
	store %Real64 %r13026, %Real64* %regR64_2
	; RR64(3): Real64  = Real64_mul (RR64(2): Real64, RR64(1): Real64)
	%r13027 = load %Real64, %Real64* %regR64_2
	%r13028 = load %Real64, %Real64* %regR64_1
	%r13029 = fmul %Real64 %r13027, %r13028
	store %Real64 %r13029, %Real64* %regR64_3
	; RR64(4): Real64  = Real64_add (RR64(3): Real64, RR64(0): Real64)
	%r13030 = load %Real64, %Real64* %regR64_3
	%r13031 = load %Real64, %Real64* %regR64_0
	%r13032 = fadd %Real64 %r13030, %r13031
	store %Real64 %r13032, %Real64* %regR64_4
	; RR64(0): Real64  = RR64(4): Real64
	%r13033 = load %Real64, %Real64* %regR64_4
	store %Real64 %r13033, %Real64* %regR64_0
	; RW64(0): Word64  = RW64(1): Word64
	%r13034 = load %Word64, %Word64* %regW64_1
	store %Word64 %r13034, %Word64* %regW64_0
	; Goto loop_17
	br label %loop_17

L_206:
	; SP(16): Objptr (opt_28)  = SP(96): Objptr (opt_28)
	%r13035 = load %Pointer, %Pointer* %stackTop
	%r13036 = getelementptr inbounds i8, %Pointer %r13035, i32 96
	%r13037 = bitcast %Pointer %r13036 to %Objptr*
	%r13038 = load %Objptr, %Objptr* %r13037
	%r13039 = load %Pointer, %Pointer* %stackTop
	%r13040 = getelementptr inbounds i8, %Pointer %r13039, i32 16
	%r13041 = bitcast %Pointer %r13040 to %Objptr*
	store %Objptr %r13038, %Objptr* %r13041
	; RP(0): Objptr (opt_7)  = SP(40): Objptr (opt_7)
	%r13042 = load %Pointer, %Pointer* %stackTop
	%r13043 = getelementptr inbounds i8, %Pointer %r13042, i32 40
	%r13044 = bitcast %Pointer %r13043 to %Objptr*
	%r13045 = load %Objptr, %Objptr* %r13044
	store %Objptr %r13045, %Objptr* %regP_0
	; RP(1): Objptr (opt_34, opt_33, opt_32, opt_31)  = Cast (0x3, Objptr (opt_34, opt_33, opt_32, opt_31))
	%r13046 = inttoptr %Word64 3 to %Objptr
	store %Objptr %r13046, %Objptr* %regP_1
	; Goto L_175
	br label %L_175

L_205:
	; RW64(1): Word64  = Word64_add (RW64(0): Word64, 0x1)
	%r13047 = load %Word64, %Word64* %regW64_0
	%r13048 = add %Word64 %r13047, 1
	store %Word64 %r13048, %Word64* %regW64_1
	; RR64(1): Real64  = XR64 (SP(24): Objptr (opt_29), RW64(0): Word64, 8, 0): Real64
	%r13049 = load %Pointer, %Pointer* %stackTop
	%r13050 = getelementptr inbounds i8, %Pointer %r13049, i32 24
	%r13051 = bitcast %Pointer %r13050 to %Objptr*
	%r13052 = load %Objptr, %Objptr* %r13051
	%r13053 = load %Word64, %Word64* %regW64_0
	%r13054 = mul nsw %Word64 %r13053, 8
	%r13055 = add nsw %Word64 %r13054, 0
	%r13056 = getelementptr inbounds i8, %Objptr %r13052, %Word64 %r13055
	%r13057 = bitcast %Objptr %r13056 to %Real64*
	%r13058 = load %Real64, %Real64* %r13057
	store %Real64 %r13058, %Real64* %regR64_1
	; RW32(0): Word32  = WordU64_extdToWord32 (RW64(0): Word64)
	%r13059 = load %Word64, %Word64* %regW64_0
	%r13060 = trunc %Word64 %r13059 to %Word32
	store %Word32 %r13060, %Word32* %regW32_0
	; RW64(2): Word64  = WordS32_extdToWord64 (RW32(0): Word32)
	%r13061 = load %Word32, %Word32* %regW32_0
	%r13062 = sext %Word32 %r13061 to %Word64
	store %Word64 %r13062, %Word64* %regW64_2
	; RW32(1): Word32  = WordU64_lt (RW64(2): Word64, SW64(64): Word64)
	%r13063 = load %Word64, %Word64* %regW64_2
	%r13064 = load %Pointer, %Pointer* %stackTop
	%r13065 = getelementptr inbounds i8, %Pointer %r13064, i32 64
	%r13066 = bitcast %Pointer %r13065 to %Word64*
	%r13067 = load %Word64, %Word64* %r13066
	%r13069 = icmp ult %Word64 %r13063, %r13067
	%r13068 = zext i1 %r13069 to %Word32
	store %Word32 %r13068, %Word32* %regW32_1
	; switch {test = RW32(1): Word32, default = None, cases = ((0x0, L_206), (0x1, L_207))}
	%r13070 = load %Word32, %Word32* %regW32_1
	%r13071 = trunc %Word32 %r13070 to i1
	br i1 %r13071, label %L_207, label %L_206

loop_17:
	; RW32(0): Word32  = WordS64_lt (SW64(104): Word64, RW64(0): Word64)
	%r13072 = load %Pointer, %Pointer* %stackTop
	%r13073 = getelementptr inbounds i8, %Pointer %r13072, i32 104
	%r13074 = bitcast %Pointer %r13073 to %Word64*
	%r13075 = load %Word64, %Word64* %r13074
	%r13076 = load %Word64, %Word64* %regW64_0
	%r13078 = icmp slt %Word64 %r13075, %r13076
	%r13077 = zext i1 %r13078 to %Word32
	store %Word32 %r13077, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_205), (0x1, L_208))}
	%r13079 = load %Word32, %Word32* %regW32_0
	%r13080 = trunc %Word32 %r13079 to i1
	br i1 %r13080, label %L_208, label %L_205

L_204:
	; Push(-120)
	%r13081 = load %Pointer, %Pointer* %stackTop
	%r13082 = getelementptr inbounds i8, %Pointer %r13081, i32 -120
	store %Pointer %r13082, %Pointer* %stackTop
	; RR64(0): Real64  = glob {index = 5, isRoot = true, ty = Real64}
	%r13083 = getelementptr inbounds [6 x %Real64], [6 x %Real64]* @globalReal64, i32 0, i32 5
	%r13084 = load %Real64, %Real64* %r13083
	store %Real64 %r13084, %Real64* %regR64_0
	; RW64(0): Word64  = 0x0
	store %Word64 0, %Word64* %regW64_0
	; Goto loop_17
	br label %loop_17

L_203:
	; SP(120): Objptr (opt_3)  = glob {index = 129, isRoot = true, ty = Objptr (opt_3)}
	%r13085 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 129
	%r13086 = load %Objptr, %Objptr* %r13085
	%r13087 = load %Pointer, %Pointer* %stackTop
	%r13088 = getelementptr inbounds i8, %Pointer %r13087, i32 120
	%r13089 = bitcast %Pointer %r13088 to %Objptr*
	store %Objptr %r13086, %Objptr* %r13089
	; SP(128): Objptr (opt_27)  = SP(32): Objptr (opt_27)
	%r13090 = load %Pointer, %Pointer* %stackTop
	%r13091 = getelementptr inbounds i8, %Pointer %r13090, i32 32
	%r13092 = bitcast %Pointer %r13091 to %Objptr*
	%r13093 = load %Objptr, %Objptr* %r13092
	%r13094 = load %Pointer, %Pointer* %stackTop
	%r13095 = getelementptr inbounds i8, %Pointer %r13094, i32 128
	%r13096 = bitcast %Pointer %r13095 to %Objptr*
	store %Objptr %r13093, %Objptr* %r13096
	%r13097 = load %Pointer, %Pointer* %stackTop
	%r13098 = getelementptr inbounds i8, %Pointer %r13097, i32 112
	%r13099 = bitcast %Pointer %r13098 to %uintptr_t*
	store %uintptr_t 36, %uintptr_t* %r13099
	; Push(120)
	%r13100 = load %Pointer, %Pointer* %stackTop
	%r13101 = getelementptr inbounds i8, %Pointer %r13100, i32 120
	store %Pointer %r13101, %Pointer* %stackTop
	br label %print_5

L_202:
	; RP(0): Objptr (opt_3)  = glob {index = 127, isRoot = true, ty = Objptr (opt_3)}
	%r13102 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 127
	%r13103 = load %Objptr, %Objptr* %r13102
	store %Objptr %r13103, %Objptr* %regP_0
	; Goto L_198
	br label %L_198

L_201:
	; SP(16): Objptr (opt_28)  = SP(96): Objptr (opt_28)
	%r13104 = load %Pointer, %Pointer* %stackTop
	%r13105 = getelementptr inbounds i8, %Pointer %r13104, i32 96
	%r13106 = bitcast %Pointer %r13105 to %Objptr*
	%r13107 = load %Objptr, %Objptr* %r13106
	%r13108 = load %Pointer, %Pointer* %stackTop
	%r13109 = getelementptr inbounds i8, %Pointer %r13108, i32 16
	%r13110 = bitcast %Pointer %r13109 to %Objptr*
	store %Objptr %r13107, %Objptr* %r13110
	; RP(0): Objptr (opt_7)  = SP(40): Objptr (opt_7)
	%r13111 = load %Pointer, %Pointer* %stackTop
	%r13112 = getelementptr inbounds i8, %Pointer %r13111, i32 40
	%r13113 = bitcast %Pointer %r13112 to %Objptr*
	%r13114 = load %Objptr, %Objptr* %r13113
	store %Objptr %r13114, %Objptr* %regP_0
	; RP(1): Objptr (opt_34, opt_33, opt_32, opt_31)  = Cast (0x2, Objptr (opt_34, opt_33, opt_32, opt_31))
	%r13115 = inttoptr %Word64 2 to %Objptr
	store %Objptr %r13115, %Objptr* %regP_1
	; Goto L_175
	br label %L_175

L_200:
	; SP(136): Objptr (opt_11)  = glob {index = 22, isRoot = true, ty = Objptr (opt_11)}
	%r13116 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 22
	%r13117 = load %Objptr, %Objptr* %r13116
	%r13118 = load %Pointer, %Pointer* %stackTop
	%r13119 = getelementptr inbounds i8, %Pointer %r13118, i32 136
	%r13120 = bitcast %Pointer %r13119 to %Objptr*
	store %Objptr %r13117, %Objptr* %r13120
	; Goto L_join_1
	br label %L_join_1

L_199:
	; Push(-128)
	%r13121 = load %Pointer, %Pointer* %stackTop
	%r13122 = getelementptr inbounds i8, %Pointer %r13121, i32 -128
	store %Pointer %r13122, %Pointer* %stackTop
	; RW64(0): Word64  = SW64(112): Word64
	%r13123 = load %Pointer, %Pointer* %stackTop
	%r13124 = getelementptr inbounds i8, %Pointer %r13123, i32 112
	%r13125 = bitcast %Pointer %r13124 to %Word64*
	%r13126 = load %Word64, %Word64* %r13125
	store %Word64 %r13126, %Word64* %regW64_0
	; Goto loop_16
	br label %loop_16

L_198:
	; SP(128): Objptr (opt_3)  = RP(0): Objptr (opt_3)
	%r13127 = load %Objptr, %Objptr* %regP_0
	%r13128 = load %Pointer, %Pointer* %stackTop
	%r13129 = getelementptr inbounds i8, %Pointer %r13128, i32 128
	%r13130 = bitcast %Pointer %r13129 to %Objptr*
	store %Objptr %r13127, %Objptr* %r13130
	; SP(136): Objptr (opt_27)  = SP(32): Objptr (opt_27)
	%r13131 = load %Pointer, %Pointer* %stackTop
	%r13132 = getelementptr inbounds i8, %Pointer %r13131, i32 32
	%r13133 = bitcast %Pointer %r13132 to %Objptr*
	%r13134 = load %Objptr, %Objptr* %r13133
	%r13135 = load %Pointer, %Pointer* %stackTop
	%r13136 = getelementptr inbounds i8, %Pointer %r13135, i32 136
	%r13137 = bitcast %Pointer %r13136 to %Objptr*
	store %Objptr %r13134, %Objptr* %r13137
	%r13138 = load %Pointer, %Pointer* %stackTop
	%r13139 = getelementptr inbounds i8, %Pointer %r13138, i32 120
	%r13140 = bitcast %Pointer %r13139 to %uintptr_t*
	store %uintptr_t 35, %uintptr_t* %r13140
	; Push(128)
	%r13141 = load %Pointer, %Pointer* %stackTop
	%r13142 = getelementptr inbounds i8, %Pointer %r13141, i32 128
	store %Pointer %r13142, %Pointer* %stackTop
	br label %print_5

L_197:
	; Push(-152)
	%r13143 = load %Pointer, %Pointer* %stackTop
	%r13144 = getelementptr inbounds i8, %Pointer %r13143, i32 -152
	store %Pointer %r13144, %Pointer* %stackTop
	; OW64 (SP(136): Objptr (opt_11), ~8): Word64  = 0x7
	%r13145 = load %Pointer, %Pointer* %stackTop
	%r13146 = getelementptr inbounds i8, %Pointer %r13145, i32 136
	%r13147 = bitcast %Pointer %r13146 to %Objptr*
	%r13148 = load %Objptr, %Objptr* %r13147
	%r13149 = getelementptr inbounds i8, %Objptr %r13148, i32 -8
	%r13150 = bitcast %Objptr %r13149 to %Word64*
	store %Word64 7, %Word64* %r13150
	; RP(0): Objptr (opt_3)  = Cast (SP(136): Objptr (opt_11), Objptr (opt_3))
	%r13151 = load %Pointer, %Pointer* %stackTop
	%r13152 = getelementptr inbounds i8, %Pointer %r13151, i32 136
	%r13153 = bitcast %Pointer %r13152 to %Objptr*
	%r13154 = load %Objptr, %Objptr* %r13153
	%r13155 = bitcast %Objptr %r13154 to %Objptr
	store %Objptr %r13155, %Objptr* %regP_0
	; Goto L_198
	br label %L_198

L_196:
	; Push(-152)
	%r13156 = load %Pointer, %Pointer* %stackTop
	%r13157 = getelementptr inbounds i8, %Pointer %r13156, i32 -152
	store %Pointer %r13157, %Pointer* %stackTop
	; CCall {args = (<GCState>, SP(136): Objptr (opt_11), SW64(128): Word64, glob {index = 127, isRoot = true, ty = Objptr (opt_3)}, 0x0, 0x2), frameInfo = Some {frameLayoutsIndex = 34}, func = {args = (GCState, Objptr (opt_11), Word64, Objptr (opt_3), Word64, Word64), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Objptr, Int64, Objptr, Int64, Int64), res = None}, return = Bits0, symbolScope = private, target = GC_arrayCopy}, return = Some L_197}
	; GetOperands
	%r13158 = bitcast %struct.GC_state* @gcState to %Pointer
	%r13159 = load %Pointer, %Pointer* %stackTop
	%r13160 = getelementptr inbounds i8, %Pointer %r13159, i32 136
	%r13161 = bitcast %Pointer %r13160 to %Objptr*
	%r13162 = load %Objptr, %Objptr* %r13161
	%r13163 = load %Pointer, %Pointer* %stackTop
	%r13164 = getelementptr inbounds i8, %Pointer %r13163, i32 128
	%r13165 = bitcast %Pointer %r13164 to %Word64*
	%r13166 = load %Word64, %Word64* %r13165
	%r13167 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 127
	%r13168 = load %Objptr, %Objptr* %r13167
	%r13169 = load %Pointer, %Pointer* %stackTop
	%r13170 = getelementptr inbounds i8, %Pointer %r13169, i32 144
	%r13171 = bitcast %Pointer %r13170 to %uintptr_t*
	store %uintptr_t 34, %uintptr_t* %r13171
	; Push(152)
	%r13172 = load %Pointer, %Pointer* %stackTop
	%r13173 = getelementptr inbounds i8, %Pointer %r13172, i32 152
	store %Pointer %r13173, %Pointer* %stackTop
	; FlushFrontier
	%r13174 = bitcast %struct.GC_state* @gcState to %Pointer
	%r13175 = getelementptr inbounds i8, %Pointer %r13174, i32 0
	%r13176 = bitcast %Pointer %r13175 to %Pointer*
	%r13177 = load %Pointer, %Pointer* %frontier
	store %Pointer %r13177, %Pointer* %r13176
	; FlushStackTop
	%r13178 = bitcast %struct.GC_state* @gcState to %Pointer
	%r13179 = getelementptr inbounds i8, %Pointer %r13178, i32 16
	%r13180 = bitcast %Pointer %r13179 to %Pointer*
	%r13181 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r13181, %Pointer* %r13180
	; Call
	call void @GC_arrayCopy(%Pointer %r13158, %Objptr %r13162, %Word64 %r13166, %Objptr %r13168, %Word64 0, %Word64 2)
	; CacheFrontier
	%r13182 = bitcast %struct.GC_state* @gcState to %Pointer
	%r13183 = getelementptr inbounds i8, %Pointer %r13182, i32 0
	%r13184 = bitcast %Pointer %r13183 to %Pointer*
	%r13185 = load %Pointer, %Pointer* %r13184
	store %Pointer %r13185, %Pointer* %frontier
	; CacheStackTop
	%r13186 = bitcast %struct.GC_state* @gcState to %Pointer
	%r13187 = getelementptr inbounds i8, %Pointer %r13186, i32 16
	%r13188 = bitcast %Pointer %r13187 to %Pointer*
	%r13189 = load %Pointer, %Pointer* %r13188
	store %Pointer %r13189, %Pointer* %stackTop
	br label %L_197

L_join_1:
	; CCall {args = (<GCState>, SP(136): Objptr (opt_11), 0x0, SP(120): Objptr (opt_3), 0x0, SW64(128): Word64), frameInfo = Some {frameLayoutsIndex = 33}, func = {args = (GCState, Objptr (opt_11), Word64, Objptr (opt_3), Word64, Word64), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Objptr, Int64, Objptr, Int64, Int64), res = None}, return = Bits0, symbolScope = private, target = GC_arrayCopy}, return = Some L_196}
	; GetOperands
	%r13190 = bitcast %struct.GC_state* @gcState to %Pointer
	%r13191 = load %Pointer, %Pointer* %stackTop
	%r13192 = getelementptr inbounds i8, %Pointer %r13191, i32 136
	%r13193 = bitcast %Pointer %r13192 to %Objptr*
	%r13194 = load %Objptr, %Objptr* %r13193
	%r13195 = load %Pointer, %Pointer* %stackTop
	%r13196 = getelementptr inbounds i8, %Pointer %r13195, i32 120
	%r13197 = bitcast %Pointer %r13196 to %Objptr*
	%r13198 = load %Objptr, %Objptr* %r13197
	%r13199 = load %Pointer, %Pointer* %stackTop
	%r13200 = getelementptr inbounds i8, %Pointer %r13199, i32 128
	%r13201 = bitcast %Pointer %r13200 to %Word64*
	%r13202 = load %Word64, %Word64* %r13201
	%r13203 = load %Pointer, %Pointer* %stackTop
	%r13204 = getelementptr inbounds i8, %Pointer %r13203, i32 144
	%r13205 = bitcast %Pointer %r13204 to %uintptr_t*
	store %uintptr_t 33, %uintptr_t* %r13205
	; Push(152)
	%r13206 = load %Pointer, %Pointer* %stackTop
	%r13207 = getelementptr inbounds i8, %Pointer %r13206, i32 152
	store %Pointer %r13207, %Pointer* %stackTop
	; FlushFrontier
	%r13208 = bitcast %struct.GC_state* @gcState to %Pointer
	%r13209 = getelementptr inbounds i8, %Pointer %r13208, i32 0
	%r13210 = bitcast %Pointer %r13209 to %Pointer*
	%r13211 = load %Pointer, %Pointer* %frontier
	store %Pointer %r13211, %Pointer* %r13210
	; FlushStackTop
	%r13212 = bitcast %struct.GC_state* @gcState to %Pointer
	%r13213 = getelementptr inbounds i8, %Pointer %r13212, i32 16
	%r13214 = bitcast %Pointer %r13213 to %Pointer*
	%r13215 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r13215, %Pointer* %r13214
	; Call
	call void @GC_arrayCopy(%Pointer %r13190, %Objptr %r13194, %Word64 0, %Objptr %r13198, %Word64 0, %Word64 %r13202)
	; CacheFrontier
	%r13216 = bitcast %struct.GC_state* @gcState to %Pointer
	%r13217 = getelementptr inbounds i8, %Pointer %r13216, i32 0
	%r13218 = bitcast %Pointer %r13217 to %Pointer*
	%r13219 = load %Pointer, %Pointer* %r13218
	store %Pointer %r13219, %Pointer* %frontier
	; CacheStackTop
	%r13220 = bitcast %struct.GC_state* @gcState to %Pointer
	%r13221 = getelementptr inbounds i8, %Pointer %r13220, i32 16
	%r13222 = bitcast %Pointer %r13221 to %Pointer*
	%r13223 = load %Pointer, %Pointer* %r13222
	store %Pointer %r13223, %Pointer* %stackTop
	br label %L_196

L_195:
	; Push(-144)
	%r13224 = load %Pointer, %Pointer* %stackTop
	%r13225 = getelementptr inbounds i8, %Pointer %r13224, i32 -144
	store %Pointer %r13225, %Pointer* %stackTop
	%r13226 = load %Objptr, %Objptr* @CReturnP
	store %Objptr %r13226, %Objptr* %regP_0
	; SP(136): Objptr (opt_11)  = RP(0): Objptr (opt_11)
	%r13227 = load %Objptr, %Objptr* %regP_0
	%r13228 = load %Pointer, %Pointer* %stackTop
	%r13229 = getelementptr inbounds i8, %Pointer %r13228, i32 136
	%r13230 = bitcast %Pointer %r13229 to %Objptr*
	store %Objptr %r13227, %Objptr* %r13230
	; Goto L_join_1
	br label %L_join_1

L_194:
	; CCall {args = (<GCState>, 0x0, RW64(0): Word64, 0x17), frameInfo = Some {frameLayoutsIndex = 32}, func = {args = (GCState, Word64, Word64, Word64), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int64, Word64), res = Some Objptr}, return = Objptr (opt_11), symbolScope = private, target = GC_arrayAllocate}, return = Some L_195}
	; GetOperands
	%r13231 = bitcast %struct.GC_state* @gcState to %Pointer
	%r13232 = load %Word64, %Word64* %regW64_0
	%r13233 = load %Pointer, %Pointer* %stackTop
	%r13234 = getelementptr inbounds i8, %Pointer %r13233, i32 136
	%r13235 = bitcast %Pointer %r13234 to %uintptr_t*
	store %uintptr_t 32, %uintptr_t* %r13235
	; Push(144)
	%r13236 = load %Pointer, %Pointer* %stackTop
	%r13237 = getelementptr inbounds i8, %Pointer %r13236, i32 144
	store %Pointer %r13237, %Pointer* %stackTop
	; FlushFrontier
	%r13238 = bitcast %struct.GC_state* @gcState to %Pointer
	%r13239 = getelementptr inbounds i8, %Pointer %r13238, i32 0
	%r13240 = bitcast %Pointer %r13239 to %Pointer*
	%r13241 = load %Pointer, %Pointer* %frontier
	store %Pointer %r13241, %Pointer* %r13240
	; FlushStackTop
	%r13242 = bitcast %struct.GC_state* @gcState to %Pointer
	%r13243 = getelementptr inbounds i8, %Pointer %r13242, i32 16
	%r13244 = bitcast %Pointer %r13243 to %Pointer*
	%r13245 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r13245, %Pointer* %r13244
	; Call
	%r13246 = call %Objptr @GC_arrayAllocate(%Pointer %r13231, %Word64 0, %Word64 %r13232, %Word64 23)
	store %Objptr %r13246, %Objptr* @CReturnP
	; CacheFrontier
	%r13247 = bitcast %struct.GC_state* @gcState to %Pointer
	%r13248 = getelementptr inbounds i8, %Pointer %r13247, i32 0
	%r13249 = bitcast %Pointer %r13248 to %Pointer*
	%r13250 = load %Pointer, %Pointer* %r13249
	store %Pointer %r13250, %Pointer* %frontier
	; CacheStackTop
	%r13251 = bitcast %struct.GC_state* @gcState to %Pointer
	%r13252 = getelementptr inbounds i8, %Pointer %r13251, i32 16
	%r13253 = bitcast %Pointer %r13252 to %Pointer*
	%r13254 = load %Pointer, %Pointer* %r13253
	store %Pointer %r13254, %Pointer* %stackTop
	br label %L_195

L_193:
	; RW32(0): Word32  = Word64_equal (0x0, RW64(0): Word64)
	%r13255 = load %Word64, %Word64* %regW64_0
	%r13257 = icmp eq %Word64 0, %r13255
	%r13256 = zext i1 %r13257 to %Word32
	store %Word32 %r13256, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_194), (0x1, L_200))}
	%r13258 = load %Word32, %Word32* %regW32_0
	%r13259 = trunc %Word32 %r13258 to i1
	br i1 %r13259, label %L_200, label %L_194

L_192:
	; RW64(0): Word64  = Word64_add (0x2, SW64(128): Word64)
	%r13260 = load %Pointer, %Pointer* %stackTop
	%r13261 = getelementptr inbounds i8, %Pointer %r13260, i32 128
	%r13262 = bitcast %Pointer %r13261 to %Word64*
	%r13263 = load %Word64, %Word64* %r13262
	%r13264 = add %Word64 2, %r13263
	store %Word64 %r13264, %Word64* %regW64_0
	; RW32(0): Word32  = WordU64_lt (0x7FFFFFFF, RW64(0): Word64)
	%r13265 = load %Word64, %Word64* %regW64_0
	%r13267 = icmp ult %Word64 2147483647, %r13265
	%r13266 = zext i1 %r13267 to %Word32
	store %Word32 %r13266, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_193), (0x1, L_201))}
	%r13268 = load %Word32, %Word32* %regW32_0
	%r13269 = trunc %Word32 %r13268 to i1
	br i1 %r13269, label %L_201, label %L_193

L_191:
	; Push(-128)
	%r13270 = load %Pointer, %Pointer* %stackTop
	%r13271 = getelementptr inbounds i8, %Pointer %r13270, i32 -128
	store %Pointer %r13271, %Pointer* %stackTop
	; SP(120): Objptr (opt_3)  = SP(128): Objptr (opt_3)
	%r13272 = load %Pointer, %Pointer* %stackTop
	%r13273 = getelementptr inbounds i8, %Pointer %r13272, i32 128
	%r13274 = bitcast %Pointer %r13273 to %Objptr*
	%r13275 = load %Objptr, %Objptr* %r13274
	%r13276 = load %Pointer, %Pointer* %stackTop
	%r13277 = getelementptr inbounds i8, %Pointer %r13276, i32 120
	%r13278 = bitcast %Pointer %r13277 to %Objptr*
	store %Objptr %r13275, %Objptr* %r13278
	; SW64(128): Word64  = OW64 (SP(120): Objptr (opt_3), ~16): Word64
	%r13279 = load %Pointer, %Pointer* %stackTop
	%r13280 = getelementptr inbounds i8, %Pointer %r13279, i32 120
	%r13281 = bitcast %Pointer %r13280 to %Objptr*
	%r13282 = load %Objptr, %Objptr* %r13281
	%r13283 = getelementptr inbounds i8, %Objptr %r13282, i32 -16
	%r13284 = bitcast %Objptr %r13283 to %Word64*
	%r13285 = load %Word64, %Word64* %r13284
	%r13286 = load %Pointer, %Pointer* %stackTop
	%r13287 = getelementptr inbounds i8, %Pointer %r13286, i32 128
	%r13288 = bitcast %Pointer %r13287 to %Word64*
	store %Word64 %r13285, %Word64* %r13288
	; RW32(0): Word32  = Word64_equal (SW64(128): Word64, 0x0)
	%r13289 = load %Pointer, %Pointer* %stackTop
	%r13290 = getelementptr inbounds i8, %Pointer %r13289, i32 128
	%r13291 = bitcast %Pointer %r13290 to %Word64*
	%r13292 = load %Word64, %Word64* %r13291
	%r13294 = icmp eq %Word64 %r13292, 0
	%r13293 = zext i1 %r13294 to %Word32
	store %Word32 %r13293, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_192), (0x1, L_202))}
	%r13295 = load %Word32, %Word32* %regW32_0
	%r13296 = trunc %Word32 %r13295 to i1
	br i1 %r13296, label %L_202, label %L_192

L_190:
	; SW64(112): Word64  = Word64_add (RW64(0): Word64, 0x1)
	%r13297 = load %Word64, %Word64* %regW64_0
	%r13298 = add %Word64 %r13297, 1
	%r13299 = load %Pointer, %Pointer* %stackTop
	%r13300 = getelementptr inbounds i8, %Pointer %r13299, i32 112
	%r13301 = bitcast %Pointer %r13300 to %Word64*
	store %Word64 %r13298, %Word64* %r13301
	; RR64(0): Real64  = XR64 (SP(88): Objptr (opt_29), RW64(0): Word64, 8, 0): Real64
	%r13302 = load %Pointer, %Pointer* %stackTop
	%r13303 = getelementptr inbounds i8, %Pointer %r13302, i32 88
	%r13304 = bitcast %Pointer %r13303 to %Objptr*
	%r13305 = load %Objptr, %Objptr* %r13304
	%r13306 = load %Word64, %Word64* %regW64_0
	%r13307 = mul nsw %Word64 %r13306, 8
	%r13308 = add nsw %Word64 %r13307, 0
	%r13309 = getelementptr inbounds i8, %Objptr %r13305, %Word64 %r13308
	%r13310 = bitcast %Objptr %r13309 to %Real64*
	%r13311 = load %Real64, %Real64* %r13310
	store %Real64 %r13311, %Real64* %regR64_0
	; SR64(128): Real64  = RR64(0): Real64
	%r13312 = load %Real64, %Real64* %regR64_0
	%r13313 = load %Pointer, %Pointer* %stackTop
	%r13314 = getelementptr inbounds i8, %Pointer %r13313, i32 128
	%r13315 = bitcast %Pointer %r13314 to %Real64*
	store %Real64 %r13312, %Real64* %r13315
	; SP(136): Objptr (opt_13)  = SP(80): Objptr (opt_13)
	%r13316 = load %Pointer, %Pointer* %stackTop
	%r13317 = getelementptr inbounds i8, %Pointer %r13316, i32 80
	%r13318 = bitcast %Pointer %r13317 to %Objptr*
	%r13319 = load %Objptr, %Objptr* %r13318
	%r13320 = load %Pointer, %Pointer* %stackTop
	%r13321 = getelementptr inbounds i8, %Pointer %r13320, i32 136
	%r13322 = bitcast %Pointer %r13321 to %Objptr*
	store %Objptr %r13319, %Objptr* %r13322
	; SP(144): Objptr (opt_25)  = SP(72): Objptr (opt_25)
	%r13323 = load %Pointer, %Pointer* %stackTop
	%r13324 = getelementptr inbounds i8, %Pointer %r13323, i32 72
	%r13325 = bitcast %Pointer %r13324 to %Objptr*
	%r13326 = load %Objptr, %Objptr* %r13325
	%r13327 = load %Pointer, %Pointer* %stackTop
	%r13328 = getelementptr inbounds i8, %Pointer %r13327, i32 144
	%r13329 = bitcast %Pointer %r13328 to %Objptr*
	store %Objptr %r13326, %Objptr* %r13329
	; SP(152): Objptr (opt_24)  = SP(56): Objptr (opt_24)
	%r13330 = load %Pointer, %Pointer* %stackTop
	%r13331 = getelementptr inbounds i8, %Pointer %r13330, i32 56
	%r13332 = bitcast %Pointer %r13331 to %Objptr*
	%r13333 = load %Objptr, %Objptr* %r13332
	%r13334 = load %Pointer, %Pointer* %stackTop
	%r13335 = getelementptr inbounds i8, %Pointer %r13334, i32 152
	%r13336 = bitcast %Pointer %r13335 to %Objptr*
	store %Objptr %r13333, %Objptr* %r13336
	; SP(160): Objptr (opt_23)  = SP(48): Objptr (opt_23)
	%r13337 = load %Pointer, %Pointer* %stackTop
	%r13338 = getelementptr inbounds i8, %Pointer %r13337, i32 48
	%r13339 = bitcast %Pointer %r13338 to %Objptr*
	%r13340 = load %Objptr, %Objptr* %r13339
	%r13341 = load %Pointer, %Pointer* %stackTop
	%r13342 = getelementptr inbounds i8, %Pointer %r13341, i32 160
	%r13343 = bitcast %Pointer %r13342 to %Objptr*
	store %Objptr %r13340, %Objptr* %r13343
	%r13344 = load %Pointer, %Pointer* %stackTop
	%r13345 = getelementptr inbounds i8, %Pointer %r13344, i32 120
	%r13346 = bitcast %Pointer %r13345 to %uintptr_t*
	store %uintptr_t 31, %uintptr_t* %r13346
	; Push(128)
	%r13347 = load %Pointer, %Pointer* %stackTop
	%r13348 = getelementptr inbounds i8, %Pointer %r13347, i32 128
	store %Pointer %r13348, %Pointer* %stackTop
	br label %x_2

loop_16:
	; RW32(0): Word32  = WordS64_lt (SW64(16): Word64, RW64(0): Word64)
	%r13349 = load %Pointer, %Pointer* %stackTop
	%r13350 = getelementptr inbounds i8, %Pointer %r13349, i32 16
	%r13351 = bitcast %Pointer %r13350 to %Word64*
	%r13352 = load %Word64, %Word64* %r13351
	%r13353 = load %Word64, %Word64* %regW64_0
	%r13355 = icmp slt %Word64 %r13352, %r13353
	%r13354 = zext i1 %r13355 to %Word32
	store %Word32 %r13354, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_190), (0x1, L_203))}
	%r13356 = load %Word32, %Word32* %regW32_0
	%r13357 = trunc %Word32 %r13356 to i1
	br i1 %r13357, label %L_203, label %L_190

L_189:
	; Push(-120)
	%r13358 = load %Pointer, %Pointer* %stackTop
	%r13359 = getelementptr inbounds i8, %Pointer %r13358, i32 -120
	store %Pointer %r13359, %Pointer* %stackTop
	; SW64(16): Word64  = Word64_sub (SW64(64): Word64, 0x1)
	%r13360 = load %Pointer, %Pointer* %stackTop
	%r13361 = getelementptr inbounds i8, %Pointer %r13360, i32 64
	%r13362 = bitcast %Pointer %r13361 to %Word64*
	%r13363 = load %Word64, %Word64* %r13362
	%r13364 = sub %Word64 %r13363, 1
	%r13365 = load %Pointer, %Pointer* %stackTop
	%r13366 = getelementptr inbounds i8, %Pointer %r13365, i32 16
	%r13367 = bitcast %Pointer %r13366 to %Word64*
	store %Word64 %r13364, %Word64* %r13367
	; RW64(0): Word64  = 0x0
	store %Word64 0, %Word64* %regW64_0
	; Goto loop_16
	br label %loop_16

L_188:
	; Push(-120)
	%r13368 = load %Pointer, %Pointer* %stackTop
	%r13369 = getelementptr inbounds i8, %Pointer %r13368, i32 -120
	store %Pointer %r13369, %Pointer* %stackTop
	; SP(120): Objptr (opt_3)  = glob {index = 126, isRoot = true, ty = Objptr (opt_3)}
	%r13370 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 126
	%r13371 = load %Objptr, %Objptr* %r13370
	%r13372 = load %Pointer, %Pointer* %stackTop
	%r13373 = getelementptr inbounds i8, %Pointer %r13372, i32 120
	%r13374 = bitcast %Pointer %r13373 to %Objptr*
	store %Objptr %r13371, %Objptr* %r13374
	; SP(128): Objptr (opt_27)  = SP(32): Objptr (opt_27)
	%r13375 = load %Pointer, %Pointer* %stackTop
	%r13376 = getelementptr inbounds i8, %Pointer %r13375, i32 32
	%r13377 = bitcast %Pointer %r13376 to %Objptr*
	%r13378 = load %Objptr, %Objptr* %r13377
	%r13379 = load %Pointer, %Pointer* %stackTop
	%r13380 = getelementptr inbounds i8, %Pointer %r13379, i32 128
	%r13381 = bitcast %Pointer %r13380 to %Objptr*
	store %Objptr %r13378, %Objptr* %r13381
	%r13382 = load %Pointer, %Pointer* %stackTop
	%r13383 = getelementptr inbounds i8, %Pointer %r13382, i32 112
	%r13384 = bitcast %Pointer %r13383 to %uintptr_t*
	store %uintptr_t 30, %uintptr_t* %r13384
	; Push(120)
	%r13385 = load %Pointer, %Pointer* %stackTop
	%r13386 = getelementptr inbounds i8, %Pointer %r13385, i32 120
	store %Pointer %r13386, %Pointer* %stackTop
	br label %print_5

L_187:
	; SP(120): Objptr (opt_3)  = glob {index = 129, isRoot = true, ty = Objptr (opt_3)}
	%r13387 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 129
	%r13388 = load %Objptr, %Objptr* %r13387
	%r13389 = load %Pointer, %Pointer* %stackTop
	%r13390 = getelementptr inbounds i8, %Pointer %r13389, i32 120
	%r13391 = bitcast %Pointer %r13390 to %Objptr*
	store %Objptr %r13388, %Objptr* %r13391
	; SP(128): Objptr (opt_27)  = SP(32): Objptr (opt_27)
	%r13392 = load %Pointer, %Pointer* %stackTop
	%r13393 = getelementptr inbounds i8, %Pointer %r13392, i32 32
	%r13394 = bitcast %Pointer %r13393 to %Objptr*
	%r13395 = load %Objptr, %Objptr* %r13394
	%r13396 = load %Pointer, %Pointer* %stackTop
	%r13397 = getelementptr inbounds i8, %Pointer %r13396, i32 128
	%r13398 = bitcast %Pointer %r13397 to %Objptr*
	store %Objptr %r13395, %Objptr* %r13398
	%r13399 = load %Pointer, %Pointer* %stackTop
	%r13400 = getelementptr inbounds i8, %Pointer %r13399, i32 112
	%r13401 = bitcast %Pointer %r13400 to %uintptr_t*
	store %uintptr_t 29, %uintptr_t* %r13401
	; Push(120)
	%r13402 = load %Pointer, %Pointer* %stackTop
	%r13403 = getelementptr inbounds i8, %Pointer %r13402, i32 120
	store %Pointer %r13403, %Pointer* %stackTop
	br label %print_5

L_186:
	; RP(0): Objptr (opt_3)  = glob {index = 127, isRoot = true, ty = Objptr (opt_3)}
	%r13404 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 127
	%r13405 = load %Objptr, %Objptr* %r13404
	store %Objptr %r13405, %Objptr* %regP_0
	; Goto L_172
	br label %L_172

L_185:
	; SP(16): Objptr (opt_28)  = SP(96): Objptr (opt_28)
	%r13406 = load %Pointer, %Pointer* %stackTop
	%r13407 = getelementptr inbounds i8, %Pointer %r13406, i32 96
	%r13408 = bitcast %Pointer %r13407 to %Objptr*
	%r13409 = load %Objptr, %Objptr* %r13408
	%r13410 = load %Pointer, %Pointer* %stackTop
	%r13411 = getelementptr inbounds i8, %Pointer %r13410, i32 16
	%r13412 = bitcast %Pointer %r13411 to %Objptr*
	store %Objptr %r13409, %Objptr* %r13412
	; RP(0): Objptr (opt_7)  = SP(40): Objptr (opt_7)
	%r13413 = load %Pointer, %Pointer* %stackTop
	%r13414 = getelementptr inbounds i8, %Pointer %r13413, i32 40
	%r13415 = bitcast %Pointer %r13414 to %Objptr*
	%r13416 = load %Objptr, %Objptr* %r13415
	store %Objptr %r13416, %Objptr* %regP_0
	; RP(1): Objptr (opt_34, opt_33, opt_32, opt_31)  = Cast (0x2, Objptr (opt_34, opt_33, opt_32, opt_31))
	%r13417 = inttoptr %Word64 2 to %Objptr
	store %Objptr %r13417, %Objptr* %regP_1
	; Goto L_175
	br label %L_175

L_184:
	; SP(128): Objptr (opt_11)  = glob {index = 22, isRoot = true, ty = Objptr (opt_11)}
	%r13418 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 22
	%r13419 = load %Objptr, %Objptr* %r13418
	%r13420 = load %Pointer, %Pointer* %stackTop
	%r13421 = getelementptr inbounds i8, %Pointer %r13420, i32 128
	%r13422 = bitcast %Pointer %r13421 to %Objptr*
	store %Objptr %r13419, %Objptr* %r13422
	; Goto L_join_0
	br label %L_join_0

L_183:
	; Push(-40)
	%r13423 = load %Pointer, %Pointer* %stackTop
	%r13424 = getelementptr inbounds i8, %Pointer %r13423, i32 -40
	store %Pointer %r13424, %Pointer* %stackTop
	; Goto L_177
	br label %L_177

L_182:
	; CCall {args = (<GCState>, 0x0, 0x0), frameInfo = Some {frameLayoutsIndex = 28}, func = {args = (GCState, Word64, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int32), res = None}, return = Bits0, symbolScope = private, target = GC_collect}, return = Some L_183}
	; GetOperands
	%r13425 = bitcast %struct.GC_state* @gcState to %Pointer
	%r13426 = load %Pointer, %Pointer* %stackTop
	%r13427 = getelementptr inbounds i8, %Pointer %r13426, i32 32
	%r13428 = bitcast %Pointer %r13427 to %uintptr_t*
	store %uintptr_t 28, %uintptr_t* %r13428
	; Push(40)
	%r13429 = load %Pointer, %Pointer* %stackTop
	%r13430 = getelementptr inbounds i8, %Pointer %r13429, i32 40
	store %Pointer %r13430, %Pointer* %stackTop
	; FlushFrontier
	%r13431 = bitcast %struct.GC_state* @gcState to %Pointer
	%r13432 = getelementptr inbounds i8, %Pointer %r13431, i32 0
	%r13433 = bitcast %Pointer %r13432 to %Pointer*
	%r13434 = load %Pointer, %Pointer* %frontier
	store %Pointer %r13434, %Pointer* %r13433
	; FlushStackTop
	%r13435 = bitcast %struct.GC_state* @gcState to %Pointer
	%r13436 = getelementptr inbounds i8, %Pointer %r13435, i32 16
	%r13437 = bitcast %Pointer %r13436 to %Pointer*
	%r13438 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r13438, %Pointer* %r13437
	; Call
	call void @GC_collect(%Pointer %r13425, %Word64 0, %Word32 0)
	; CacheFrontier
	%r13439 = bitcast %struct.GC_state* @gcState to %Pointer
	%r13440 = getelementptr inbounds i8, %Pointer %r13439, i32 0
	%r13441 = bitcast %Pointer %r13440 to %Pointer*
	%r13442 = load %Pointer, %Pointer* %r13441
	store %Pointer %r13442, %Pointer* %frontier
	; CacheStackTop
	%r13443 = bitcast %struct.GC_state* @gcState to %Pointer
	%r13444 = getelementptr inbounds i8, %Pointer %r13443, i32 16
	%r13445 = bitcast %Pointer %r13444 to %Pointer*
	%r13446 = load %Pointer, %Pointer* %r13445
	store %Pointer %r13446, %Pointer* %stackTop
	br label %L_183

L_181:
	; Push(-8)
	%r13447 = load %Pointer, %Pointer* %stackTop
	%r13448 = getelementptr inbounds i8, %Pointer %r13447, i32 -8
	store %Pointer %r13448, %Pointer* %stackTop
	; RP(0): Objptr (opt_34, opt_33, opt_32, opt_31)  = glob {index = 0, isRoot = false, ty = Objptr (opt_34, opt_33, opt_32, opt_31)}
	%r13449 = getelementptr inbounds [1 x %Objptr], [1 x %Objptr]* @globalObjptrNonRoot, i32 0, i32 0
	%r13450 = load %Objptr, %Objptr* %r13449
	store %Objptr %r13450, %Objptr* %regP_0
	; Goto print_4
	br label %print_4

L_180:
	; CCall {args = (<GCState>, 0x1), frameInfo = None, func = {args = (GCState, Word32), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = false, mayGC = false, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Int32), res = None}, return = Bits0, symbolScope = private, target = MLton_halt}, return = None}
	; GetOperands
	%r13451 = bitcast %struct.GC_state* @gcState to %Pointer
	; FlushFrontier
	%r13452 = bitcast %struct.GC_state* @gcState to %Pointer
	%r13453 = getelementptr inbounds i8, %Pointer %r13452, i32 0
	%r13454 = bitcast %Pointer %r13453 to %Pointer*
	%r13455 = load %Pointer, %Pointer* %frontier
	store %Pointer %r13455, %Pointer* %r13454
	; FlushStackTop
	%r13456 = bitcast %struct.GC_state* @gcState to %Pointer
	%r13457 = getelementptr inbounds i8, %Pointer %r13456, i32 16
	%r13458 = bitcast %Pointer %r13457 to %Pointer*
	%r13459 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r13459, %Pointer* %r13458
	; Call
	call void @MLton_halt(%Pointer %r13451, %Word32 1)
	unreachable

print_4:
	; CCall {args = (glob {index = 128, isRoot = true, ty = Objptr (opt_3)}), frameInfo = None, func = {args = (Objptr (opt_3)), convention = cdecl, kind = Impure, prototype = {args = (Objptr), res = None}, return = Bits0, symbolScope = private, target = Stdio_print}, return = Some L_180}
	; GetOperands
	%r13460 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 128
	%r13461 = load %Objptr, %Objptr* %r13460
	; Call
	call void @Stdio_print(%Objptr %r13461)
	br label %L_180

print_3:
	; Push(-8)
	%r13462 = load %Pointer, %Pointer* %stackTop
	%r13463 = getelementptr inbounds i8, %Pointer %r13462, i32 -8
	store %Pointer %r13463, %Pointer* %stackTop
	; Goto print_4
	br label %print_4

L_179:
	; Push(-24)
	%r13464 = load %Pointer, %Pointer* %stackTop
	%r13465 = getelementptr inbounds i8, %Pointer %r13464, i32 -24
	store %Pointer %r13465, %Pointer* %stackTop
	; CCall {args = (glob {index = 113, isRoot = true, ty = Objptr (opt_3)}), frameInfo = None, func = {args = (Objptr (opt_3)), convention = cdecl, kind = Impure, prototype = {args = (Objptr), res = None}, return = Bits0, symbolScope = private, target = MLton_bug}, return = None}
	; GetOperands
	%r13466 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 113
	%r13467 = load %Objptr, %Objptr* %r13466
	; Call
	call void @MLton_bug(%Objptr %r13467)
	unreachable

L_178:
	; SQ(0): Label print_3  = print_3
	%r13468 = inttoptr %Word32 26 to %CPointer
	%r13469 = load %Pointer, %Pointer* %stackTop
	%r13470 = getelementptr inbounds i8, %Pointer %r13469, i32 0
	%r13471 = bitcast %Pointer %r13470 to %CPointer*
	store %CPointer %r13468, %CPointer* %r13471
	; SW32(24): Word32  = 0x1
	%r13472 = load %Pointer, %Pointer* %stackTop
	%r13473 = getelementptr inbounds i8, %Pointer %r13472, i32 24
	%r13474 = bitcast %Pointer %r13473 to %Word32*
	store %Word32 1, %Word32* %r13474
	; SP(32): Objptr (opt_28)  = SP(16): Objptr (opt_28)
	%r13475 = load %Pointer, %Pointer* %stackTop
	%r13476 = getelementptr inbounds i8, %Pointer %r13475, i32 16
	%r13477 = bitcast %Pointer %r13476 to %Objptr*
	%r13478 = load %Objptr, %Objptr* %r13477
	%r13479 = load %Pointer, %Pointer* %stackTop
	%r13480 = getelementptr inbounds i8, %Pointer %r13479, i32 32
	%r13481 = bitcast %Pointer %r13480 to %Objptr*
	store %Objptr %r13478, %Objptr* %r13481
	%r13482 = load %Pointer, %Pointer* %stackTop
	%r13483 = getelementptr inbounds i8, %Pointer %r13482, i32 16
	%r13484 = bitcast %Pointer %r13483 to %uintptr_t*
	store %uintptr_t 25, %uintptr_t* %r13484
	; Push(24)
	%r13485 = load %Pointer, %Pointer* %stackTop
	%r13486 = getelementptr inbounds i8, %Pointer %r13485, i32 24
	store %Pointer %r13486, %Pointer* %stackTop
	br label %exit_0

print_2:
	; Push(-32)
	%r13487 = load %Pointer, %Pointer* %stackTop
	%r13488 = getelementptr inbounds i8, %Pointer %r13487, i32 -32
	store %Pointer %r13488, %Pointer* %stackTop
	; RP(0): Objptr (opt_3)  = SP(32): Objptr (opt_3)
	%r13489 = load %Pointer, %Pointer* %stackTop
	%r13490 = getelementptr inbounds i8, %Pointer %r13489, i32 32
	%r13491 = bitcast %Pointer %r13490 to %Objptr*
	%r13492 = load %Objptr, %Objptr* %r13491
	store %Objptr %r13492, %Objptr* %regP_0
	; CCall {args = (RP(0): Objptr (opt_3)), frameInfo = None, func = {args = (Objptr (opt_3)), convention = cdecl, kind = Impure, prototype = {args = (Objptr), res = None}, return = Bits0, symbolScope = private, target = Stdio_print}, return = Some L_178}
	; GetOperands
	%r13493 = load %Objptr, %Objptr* %regP_0
	; Call
	call void @Stdio_print(%Objptr %r13493)
	br label %L_178

L_177:
	; CW64 (<Frontier>)  = 0x57
	%r13494 = load %Pointer, %Pointer* %frontier
	%r13495 = bitcast %Pointer %r13494 to %Word64*
	store %Word64 87, %Word64* %r13495
	; RQ(35): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r13496 = load %Pointer, %Pointer* %frontier
	%r13498 = ptrtoint %Pointer %r13496 to %uintptr_t
	%r13499 = add %uintptr_t %r13498, 8
	%r13497 = inttoptr %uintptr_t %r13499 to %Pointer
	store %CPointer %r13497, %CPointer* %regQ_35
	; RP(0): Objptr (opt_43)  = Cast (RQ(35): CPointer, Objptr (opt_43))
	%r13500 = load %CPointer, %CPointer* %regQ_35
	%r13501 = bitcast %CPointer %r13500 to %Objptr
	store %Objptr %r13501, %Objptr* %regP_0
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r13502 = load %Pointer, %Pointer* %frontier
	%r13504 = ptrtoint %Pointer %r13502 to %uintptr_t
	%r13505 = add %uintptr_t %r13504, 24
	%r13503 = inttoptr %uintptr_t %r13505 to %Pointer
	store %Pointer %r13503, %Pointer* %frontier
	; OP (RP(0): Objptr (opt_43), 0): Objptr (opt_3)  = SP(24): Objptr (opt_3)
	%r13506 = load %Pointer, %Pointer* %stackTop
	%r13507 = getelementptr inbounds i8, %Pointer %r13506, i32 24
	%r13508 = bitcast %Pointer %r13507 to %Objptr*
	%r13509 = load %Objptr, %Objptr* %r13508
	%r13510 = load %Objptr, %Objptr* %regP_0
	%r13511 = getelementptr inbounds i8, %Objptr %r13510, i32 0
	%r13512 = bitcast %Objptr %r13511 to %Objptr*
	store %Objptr %r13509, %Objptr* %r13512
	; OP (RP(0): Objptr (opt_43), 8): Objptr (opt_43)  = glob {index = 16, isRoot = true, ty = Objptr (opt_43)}
	%r13513 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 16
	%r13514 = load %Objptr, %Objptr* %r13513
	%r13515 = load %Objptr, %Objptr* %regP_0
	%r13516 = getelementptr inbounds i8, %Objptr %r13515, i32 8
	%r13517 = bitcast %Objptr %r13516 to %Objptr*
	store %Objptr %r13514, %Objptr* %r13517
	; CW64 (<Frontier>)  = 0x57
	%r13518 = load %Pointer, %Pointer* %frontier
	%r13519 = bitcast %Pointer %r13518 to %Word64*
	store %Word64 87, %Word64* %r13519
	; RQ(34): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r13520 = load %Pointer, %Pointer* %frontier
	%r13522 = ptrtoint %Pointer %r13520 to %uintptr_t
	%r13523 = add %uintptr_t %r13522, 8
	%r13521 = inttoptr %uintptr_t %r13523 to %Pointer
	store %CPointer %r13521, %CPointer* %regQ_34
	; RP(1): Objptr (opt_43)  = Cast (RQ(34): CPointer, Objptr (opt_43))
	%r13524 = load %CPointer, %CPointer* %regQ_34
	%r13525 = bitcast %CPointer %r13524 to %Objptr
	store %Objptr %r13525, %Objptr* %regP_1
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r13526 = load %Pointer, %Pointer* %frontier
	%r13528 = ptrtoint %Pointer %r13526 to %uintptr_t
	%r13529 = add %uintptr_t %r13528, 24
	%r13527 = inttoptr %uintptr_t %r13529 to %Pointer
	store %Pointer %r13527, %Pointer* %frontier
	; OP (RP(1): Objptr (opt_43), 0): Objptr (opt_3)  = glob {index = 114, isRoot = true, ty = Objptr (opt_3)}
	%r13530 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 114
	%r13531 = load %Objptr, %Objptr* %r13530
	%r13532 = load %Objptr, %Objptr* %regP_1
	%r13533 = getelementptr inbounds i8, %Objptr %r13532, i32 0
	%r13534 = bitcast %Objptr %r13533 to %Objptr*
	store %Objptr %r13531, %Objptr* %r13534
	; OP (RP(1): Objptr (opt_43), 8): Objptr (opt_43)  = RP(0): Objptr (opt_43)
	%r13535 = load %Objptr, %Objptr* %regP_0
	%r13536 = load %Objptr, %Objptr* %regP_1
	%r13537 = getelementptr inbounds i8, %Objptr %r13536, i32 8
	%r13538 = bitcast %Objptr %r13537 to %Objptr*
	store %Objptr %r13535, %Objptr* %r13538
	; SQ(0): Label L_181  = L_181
	%r13539 = inttoptr %Word32 27 to %CPointer
	%r13540 = load %Pointer, %Pointer* %stackTop
	%r13541 = getelementptr inbounds i8, %Pointer %r13540, i32 0
	%r13542 = bitcast %Pointer %r13541 to %CPointer*
	store %CPointer %r13539, %CPointer* %r13542
	; SP(32): Objptr (opt_43)  = RP(1): Objptr (opt_43)
	%r13543 = load %Objptr, %Objptr* %regP_1
	%r13544 = load %Pointer, %Pointer* %stackTop
	%r13545 = getelementptr inbounds i8, %Pointer %r13544, i32 32
	%r13546 = bitcast %Pointer %r13545 to %Objptr*
	store %Objptr %r13543, %Objptr* %r13546
	%r13547 = load %Pointer, %Pointer* %stackTop
	%r13548 = getelementptr inbounds i8, %Pointer %r13547, i32 24
	%r13549 = bitcast %Pointer %r13548 to %uintptr_t*
	store %uintptr_t 24, %uintptr_t* %r13549
	; Push(32)
	%r13550 = load %Pointer, %Pointer* %stackTop
	%r13551 = getelementptr inbounds i8, %Pointer %r13550, i32 32
	store %Pointer %r13551, %Pointer* %stackTop
	br label %concat_0

L_176:
	; Push(-32)
	%r13552 = load %Pointer, %Pointer* %stackTop
	%r13553 = getelementptr inbounds i8, %Pointer %r13552, i32 -32
	store %Pointer %r13553, %Pointer* %stackTop
	; SP(24): Objptr (opt_3)  = SP(32): Objptr (opt_3)
	%r13554 = load %Pointer, %Pointer* %stackTop
	%r13555 = getelementptr inbounds i8, %Pointer %r13554, i32 32
	%r13556 = bitcast %Pointer %r13555 to %Objptr*
	%r13557 = load %Objptr, %Objptr* %r13556
	%r13558 = load %Pointer, %Pointer* %stackTop
	%r13559 = getelementptr inbounds i8, %Pointer %r13558, i32 24
	%r13560 = bitcast %Pointer %r13559 to %Objptr*
	store %Objptr %r13557, %Objptr* %r13560
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r13561 = bitcast %struct.GC_state* @gcState to %Pointer
	%r13562 = getelementptr inbounds i8, %Pointer %r13561, i32 8
	%r13563 = bitcast %Pointer %r13562 to %CPointer*
	%r13564 = load %CPointer, %CPointer* %r13563
	%r13565 = load %Pointer, %Pointer* %frontier
	%r13567 = icmp ult %Pointer %r13564, %r13565
	%r13566 = zext i1 %r13567 to %Word32
	store %Word32 %r13566, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_177), (0x1, L_182))}
	%r13568 = load %Word32, %Word32* %regW32_0
	%r13569 = trunc %Word32 %r13568 to i1
	br i1 %r13569, label %L_182, label %L_177

L_175:
	; SQ(0): Label print_3  = print_3
	%r13570 = inttoptr %Word32 26 to %CPointer
	%r13571 = load %Pointer, %Pointer* %stackTop
	%r13572 = getelementptr inbounds i8, %Pointer %r13571, i32 0
	%r13573 = bitcast %Pointer %r13572 to %CPointer*
	store %CPointer %r13570, %CPointer* %r13573
	; RQ(33): CPointer  = CPointer_add (<StackTop>, 0x8)
	%r13574 = load %Pointer, %Pointer* %stackTop
	%r13576 = ptrtoint %Pointer %r13574 to %uintptr_t
	%r13577 = add %uintptr_t %r13576, 8
	%r13575 = inttoptr %uintptr_t %r13577 to %Pointer
	store %CPointer %r13575, %CPointer* %regQ_33
	; RW64(7): Word64  = CPointer_diff (RQ(33): CPointer, OQ (<GCState>, 1616): CPointer)
	%r13578 = load %CPointer, %CPointer* %regQ_33
	%r13579 = bitcast %struct.GC_state* @gcState to %Pointer
	%r13580 = getelementptr inbounds i8, %Pointer %r13579, i32 1616
	%r13581 = bitcast %Pointer %r13580 to %CPointer*
	%r13582 = load %CPointer, %CPointer* %r13581
	%r13584 = ptrtoint %Pointer %r13578 to %uintptr_t
	%r13585 = ptrtoint %Pointer %r13582 to %uintptr_t
	%r13583 = sub %uintptr_t %r13584, %r13585
	store %Word64 %r13583, %Word64* %regW64_7
	; OW64 (<GCState>, 32): ExnStack  = Cast (RW64(7): Word64, ExnStack)
	%r13586 = load %Word64, %Word64* %regW64_7
	%r13587 = bitcast %Word64 %r13586 to %Word64
	%r13588 = bitcast %struct.GC_state* @gcState to %Pointer
	%r13589 = getelementptr inbounds i8, %Pointer %r13588, i32 32
	%r13590 = bitcast %Pointer %r13589 to %Word64*
	store %Word64 %r13587, %Word64* %r13590
	; SP(32): Objptr (opt_34, opt_33, opt_32, opt_31)  = RP(1): Objptr (opt_34, opt_33, opt_32, opt_31)
	%r13591 = load %Objptr, %Objptr* %regP_1
	%r13592 = load %Pointer, %Pointer* %stackTop
	%r13593 = getelementptr inbounds i8, %Pointer %r13592, i32 32
	%r13594 = bitcast %Pointer %r13593 to %Objptr*
	store %Objptr %r13591, %Objptr* %r13594
	; SP(40): Objptr (opt_7)  = RP(0): Objptr (opt_7)
	%r13595 = load %Objptr, %Objptr* %regP_0
	%r13596 = load %Pointer, %Pointer* %stackTop
	%r13597 = getelementptr inbounds i8, %Pointer %r13596, i32 40
	%r13598 = bitcast %Pointer %r13597 to %Objptr*
	store %Objptr %r13595, %Objptr* %r13598
	%r13599 = load %Pointer, %Pointer* %stackTop
	%r13600 = getelementptr inbounds i8, %Pointer %r13599, i32 24
	%r13601 = bitcast %Pointer %r13600 to %uintptr_t*
	store %uintptr_t 23, %uintptr_t* %r13601
	; Push(32)
	%r13602 = load %Pointer, %Pointer* %stackTop
	%r13603 = getelementptr inbounds i8, %Pointer %r13602, i32 32
	store %Pointer %r13603, %Pointer* %stackTop
	br label %exnMessage_0

L_174:
	; Push(-8)
	%r13604 = load %Pointer, %Pointer* %stackTop
	%r13605 = getelementptr inbounds i8, %Pointer %r13604, i32 -8
	store %Pointer %r13605, %Pointer* %stackTop
	; RP(0): Objptr (opt_34, opt_33, opt_32, opt_31)  = glob {index = 0, isRoot = false, ty = Objptr (opt_34, opt_33, opt_32, opt_31)}
	%r13606 = getelementptr inbounds [1 x %Objptr], [1 x %Objptr]* @globalObjptrNonRoot, i32 0, i32 0
	%r13607 = load %Objptr, %Objptr* %r13606
	store %Objptr %r13607, %Objptr* %regP_0
	; SP(16): Objptr (opt_28)  = SP(96): Objptr (opt_28)
	%r13608 = load %Pointer, %Pointer* %stackTop
	%r13609 = getelementptr inbounds i8, %Pointer %r13608, i32 96
	%r13610 = bitcast %Pointer %r13609 to %Objptr*
	%r13611 = load %Objptr, %Objptr* %r13610
	%r13612 = load %Pointer, %Pointer* %stackTop
	%r13613 = getelementptr inbounds i8, %Pointer %r13612, i32 16
	%r13614 = bitcast %Pointer %r13613 to %Objptr*
	store %Objptr %r13611, %Objptr* %r13614
	; RP(1): Objptr (opt_34, opt_33, opt_32, opt_31)  = RP(0): Objptr (opt_34, opt_33, opt_32, opt_31)
	%r13615 = load %Objptr, %Objptr* %regP_0
	store %Objptr %r13615, %Objptr* %regP_1
	; RP(0): Objptr (opt_7)  = SP(40): Objptr (opt_7)
	%r13616 = load %Pointer, %Pointer* %stackTop
	%r13617 = getelementptr inbounds i8, %Pointer %r13616, i32 40
	%r13618 = bitcast %Pointer %r13617 to %Objptr*
	%r13619 = load %Objptr, %Objptr* %r13618
	store %Objptr %r13619, %Objptr* %regP_0
	; Goto L_175
	br label %L_175

L_173:
	; Push(-120)
	%r13620 = load %Pointer, %Pointer* %stackTop
	%r13621 = getelementptr inbounds i8, %Pointer %r13620, i32 -120
	store %Pointer %r13621, %Pointer* %stackTop
	; RW64(0): Word64  = SW64(16): Word64
	%r13622 = load %Pointer, %Pointer* %stackTop
	%r13623 = getelementptr inbounds i8, %Pointer %r13622, i32 16
	%r13624 = bitcast %Pointer %r13623 to %Word64*
	%r13625 = load %Word64, %Word64* %r13624
	store %Word64 %r13625, %Word64* %regW64_0
	; Goto loop_15
	br label %loop_15

L_172:
	; SP(120): Objptr (opt_3)  = RP(0): Objptr (opt_3)
	%r13626 = load %Objptr, %Objptr* %regP_0
	%r13627 = load %Pointer, %Pointer* %stackTop
	%r13628 = getelementptr inbounds i8, %Pointer %r13627, i32 120
	%r13629 = bitcast %Pointer %r13628 to %Objptr*
	store %Objptr %r13626, %Objptr* %r13629
	; SP(128): Objptr (opt_27)  = SP(32): Objptr (opt_27)
	%r13630 = load %Pointer, %Pointer* %stackTop
	%r13631 = getelementptr inbounds i8, %Pointer %r13630, i32 32
	%r13632 = bitcast %Pointer %r13631 to %Objptr*
	%r13633 = load %Objptr, %Objptr* %r13632
	%r13634 = load %Pointer, %Pointer* %stackTop
	%r13635 = getelementptr inbounds i8, %Pointer %r13634, i32 128
	%r13636 = bitcast %Pointer %r13635 to %Objptr*
	store %Objptr %r13633, %Objptr* %r13636
	%r13637 = load %Pointer, %Pointer* %stackTop
	%r13638 = getelementptr inbounds i8, %Pointer %r13637, i32 112
	%r13639 = bitcast %Pointer %r13638 to %uintptr_t*
	store %uintptr_t 21, %uintptr_t* %r13639
	; Push(120)
	%r13640 = load %Pointer, %Pointer* %stackTop
	%r13641 = getelementptr inbounds i8, %Pointer %r13640, i32 120
	store %Pointer %r13641, %Pointer* %stackTop
	br label %print_5

L_171:
	; Push(-144)
	%r13642 = load %Pointer, %Pointer* %stackTop
	%r13643 = getelementptr inbounds i8, %Pointer %r13642, i32 -144
	store %Pointer %r13643, %Pointer* %stackTop
	; OW64 (SP(128): Objptr (opt_11), ~8): Word64  = 0x7
	%r13644 = load %Pointer, %Pointer* %stackTop
	%r13645 = getelementptr inbounds i8, %Pointer %r13644, i32 128
	%r13646 = bitcast %Pointer %r13645 to %Objptr*
	%r13647 = load %Objptr, %Objptr* %r13646
	%r13648 = getelementptr inbounds i8, %Objptr %r13647, i32 -8
	%r13649 = bitcast %Objptr %r13648 to %Word64*
	store %Word64 7, %Word64* %r13649
	; RP(0): Objptr (opt_3)  = Cast (SP(128): Objptr (opt_11), Objptr (opt_3))
	%r13650 = load %Pointer, %Pointer* %stackTop
	%r13651 = getelementptr inbounds i8, %Pointer %r13650, i32 128
	%r13652 = bitcast %Pointer %r13651 to %Objptr*
	%r13653 = load %Objptr, %Objptr* %r13652
	%r13654 = bitcast %Objptr %r13653 to %Objptr
	store %Objptr %r13654, %Objptr* %regP_0
	; Goto L_172
	br label %L_172

L_170:
	; Push(-144)
	%r13655 = load %Pointer, %Pointer* %stackTop
	%r13656 = getelementptr inbounds i8, %Pointer %r13655, i32 -144
	store %Pointer %r13656, %Pointer* %stackTop
	; CCall {args = (<GCState>, SP(128): Objptr (opt_11), SW64(120): Word64, glob {index = 127, isRoot = true, ty = Objptr (opt_3)}, 0x0, 0x2), frameInfo = Some {frameLayoutsIndex = 20}, func = {args = (GCState, Objptr (opt_11), Word64, Objptr (opt_3), Word64, Word64), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Objptr, Int64, Objptr, Int64, Int64), res = None}, return = Bits0, symbolScope = private, target = GC_arrayCopy}, return = Some L_171}
	; GetOperands
	%r13657 = bitcast %struct.GC_state* @gcState to %Pointer
	%r13658 = load %Pointer, %Pointer* %stackTop
	%r13659 = getelementptr inbounds i8, %Pointer %r13658, i32 128
	%r13660 = bitcast %Pointer %r13659 to %Objptr*
	%r13661 = load %Objptr, %Objptr* %r13660
	%r13662 = load %Pointer, %Pointer* %stackTop
	%r13663 = getelementptr inbounds i8, %Pointer %r13662, i32 120
	%r13664 = bitcast %Pointer %r13663 to %Word64*
	%r13665 = load %Word64, %Word64* %r13664
	%r13666 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 127
	%r13667 = load %Objptr, %Objptr* %r13666
	%r13668 = load %Pointer, %Pointer* %stackTop
	%r13669 = getelementptr inbounds i8, %Pointer %r13668, i32 136
	%r13670 = bitcast %Pointer %r13669 to %uintptr_t*
	store %uintptr_t 20, %uintptr_t* %r13670
	; Push(144)
	%r13671 = load %Pointer, %Pointer* %stackTop
	%r13672 = getelementptr inbounds i8, %Pointer %r13671, i32 144
	store %Pointer %r13672, %Pointer* %stackTop
	; FlushFrontier
	%r13673 = bitcast %struct.GC_state* @gcState to %Pointer
	%r13674 = getelementptr inbounds i8, %Pointer %r13673, i32 0
	%r13675 = bitcast %Pointer %r13674 to %Pointer*
	%r13676 = load %Pointer, %Pointer* %frontier
	store %Pointer %r13676, %Pointer* %r13675
	; FlushStackTop
	%r13677 = bitcast %struct.GC_state* @gcState to %Pointer
	%r13678 = getelementptr inbounds i8, %Pointer %r13677, i32 16
	%r13679 = bitcast %Pointer %r13678 to %Pointer*
	%r13680 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r13680, %Pointer* %r13679
	; Call
	call void @GC_arrayCopy(%Pointer %r13657, %Objptr %r13661, %Word64 %r13665, %Objptr %r13667, %Word64 0, %Word64 2)
	; CacheFrontier
	%r13681 = bitcast %struct.GC_state* @gcState to %Pointer
	%r13682 = getelementptr inbounds i8, %Pointer %r13681, i32 0
	%r13683 = bitcast %Pointer %r13682 to %Pointer*
	%r13684 = load %Pointer, %Pointer* %r13683
	store %Pointer %r13684, %Pointer* %frontier
	; CacheStackTop
	%r13685 = bitcast %struct.GC_state* @gcState to %Pointer
	%r13686 = getelementptr inbounds i8, %Pointer %r13685, i32 16
	%r13687 = bitcast %Pointer %r13686 to %Pointer*
	%r13688 = load %Pointer, %Pointer* %r13687
	store %Pointer %r13688, %Pointer* %stackTop
	br label %L_171

L_join_0:
	; CCall {args = (<GCState>, SP(128): Objptr (opt_11), 0x0, SP(112): Objptr (opt_3), 0x0, SW64(120): Word64), frameInfo = Some {frameLayoutsIndex = 19}, func = {args = (GCState, Objptr (opt_11), Word64, Objptr (opt_3), Word64, Word64), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Objptr, Int64, Objptr, Int64, Int64), res = None}, return = Bits0, symbolScope = private, target = GC_arrayCopy}, return = Some L_170}
	; GetOperands
	%r13689 = bitcast %struct.GC_state* @gcState to %Pointer
	%r13690 = load %Pointer, %Pointer* %stackTop
	%r13691 = getelementptr inbounds i8, %Pointer %r13690, i32 128
	%r13692 = bitcast %Pointer %r13691 to %Objptr*
	%r13693 = load %Objptr, %Objptr* %r13692
	%r13694 = load %Pointer, %Pointer* %stackTop
	%r13695 = getelementptr inbounds i8, %Pointer %r13694, i32 112
	%r13696 = bitcast %Pointer %r13695 to %Objptr*
	%r13697 = load %Objptr, %Objptr* %r13696
	%r13698 = load %Pointer, %Pointer* %stackTop
	%r13699 = getelementptr inbounds i8, %Pointer %r13698, i32 120
	%r13700 = bitcast %Pointer %r13699 to %Word64*
	%r13701 = load %Word64, %Word64* %r13700
	%r13702 = load %Pointer, %Pointer* %stackTop
	%r13703 = getelementptr inbounds i8, %Pointer %r13702, i32 136
	%r13704 = bitcast %Pointer %r13703 to %uintptr_t*
	store %uintptr_t 19, %uintptr_t* %r13704
	; Push(144)
	%r13705 = load %Pointer, %Pointer* %stackTop
	%r13706 = getelementptr inbounds i8, %Pointer %r13705, i32 144
	store %Pointer %r13706, %Pointer* %stackTop
	; FlushFrontier
	%r13707 = bitcast %struct.GC_state* @gcState to %Pointer
	%r13708 = getelementptr inbounds i8, %Pointer %r13707, i32 0
	%r13709 = bitcast %Pointer %r13708 to %Pointer*
	%r13710 = load %Pointer, %Pointer* %frontier
	store %Pointer %r13710, %Pointer* %r13709
	; FlushStackTop
	%r13711 = bitcast %struct.GC_state* @gcState to %Pointer
	%r13712 = getelementptr inbounds i8, %Pointer %r13711, i32 16
	%r13713 = bitcast %Pointer %r13712 to %Pointer*
	%r13714 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r13714, %Pointer* %r13713
	; Call
	call void @GC_arrayCopy(%Pointer %r13689, %Objptr %r13693, %Word64 0, %Objptr %r13697, %Word64 0, %Word64 %r13701)
	; CacheFrontier
	%r13715 = bitcast %struct.GC_state* @gcState to %Pointer
	%r13716 = getelementptr inbounds i8, %Pointer %r13715, i32 0
	%r13717 = bitcast %Pointer %r13716 to %Pointer*
	%r13718 = load %Pointer, %Pointer* %r13717
	store %Pointer %r13718, %Pointer* %frontier
	; CacheStackTop
	%r13719 = bitcast %struct.GC_state* @gcState to %Pointer
	%r13720 = getelementptr inbounds i8, %Pointer %r13719, i32 16
	%r13721 = bitcast %Pointer %r13720 to %Pointer*
	%r13722 = load %Pointer, %Pointer* %r13721
	store %Pointer %r13722, %Pointer* %stackTop
	br label %L_170

L_169:
	; Push(-136)
	%r13723 = load %Pointer, %Pointer* %stackTop
	%r13724 = getelementptr inbounds i8, %Pointer %r13723, i32 -136
	store %Pointer %r13724, %Pointer* %stackTop
	%r13725 = load %Objptr, %Objptr* @CReturnP
	store %Objptr %r13725, %Objptr* %regP_0
	; SP(128): Objptr (opt_11)  = RP(0): Objptr (opt_11)
	%r13726 = load %Objptr, %Objptr* %regP_0
	%r13727 = load %Pointer, %Pointer* %stackTop
	%r13728 = getelementptr inbounds i8, %Pointer %r13727, i32 128
	%r13729 = bitcast %Pointer %r13728 to %Objptr*
	store %Objptr %r13726, %Objptr* %r13729
	; Goto L_join_0
	br label %L_join_0

L_168:
	; CCall {args = (<GCState>, 0x0, RW64(0): Word64, 0x17), frameInfo = Some {frameLayoutsIndex = 18}, func = {args = (GCState, Word64, Word64, Word64), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int64, Word64), res = Some Objptr}, return = Objptr (opt_11), symbolScope = private, target = GC_arrayAllocate}, return = Some L_169}
	; GetOperands
	%r13730 = bitcast %struct.GC_state* @gcState to %Pointer
	%r13731 = load %Word64, %Word64* %regW64_0
	%r13732 = load %Pointer, %Pointer* %stackTop
	%r13733 = getelementptr inbounds i8, %Pointer %r13732, i32 128
	%r13734 = bitcast %Pointer %r13733 to %uintptr_t*
	store %uintptr_t 18, %uintptr_t* %r13734
	; Push(136)
	%r13735 = load %Pointer, %Pointer* %stackTop
	%r13736 = getelementptr inbounds i8, %Pointer %r13735, i32 136
	store %Pointer %r13736, %Pointer* %stackTop
	; FlushFrontier
	%r13737 = bitcast %struct.GC_state* @gcState to %Pointer
	%r13738 = getelementptr inbounds i8, %Pointer %r13737, i32 0
	%r13739 = bitcast %Pointer %r13738 to %Pointer*
	%r13740 = load %Pointer, %Pointer* %frontier
	store %Pointer %r13740, %Pointer* %r13739
	; FlushStackTop
	%r13741 = bitcast %struct.GC_state* @gcState to %Pointer
	%r13742 = getelementptr inbounds i8, %Pointer %r13741, i32 16
	%r13743 = bitcast %Pointer %r13742 to %Pointer*
	%r13744 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r13744, %Pointer* %r13743
	; Call
	%r13745 = call %Objptr @GC_arrayAllocate(%Pointer %r13730, %Word64 0, %Word64 %r13731, %Word64 23)
	store %Objptr %r13745, %Objptr* @CReturnP
	; CacheFrontier
	%r13746 = bitcast %struct.GC_state* @gcState to %Pointer
	%r13747 = getelementptr inbounds i8, %Pointer %r13746, i32 0
	%r13748 = bitcast %Pointer %r13747 to %Pointer*
	%r13749 = load %Pointer, %Pointer* %r13748
	store %Pointer %r13749, %Pointer* %frontier
	; CacheStackTop
	%r13750 = bitcast %struct.GC_state* @gcState to %Pointer
	%r13751 = getelementptr inbounds i8, %Pointer %r13750, i32 16
	%r13752 = bitcast %Pointer %r13751 to %Pointer*
	%r13753 = load %Pointer, %Pointer* %r13752
	store %Pointer %r13753, %Pointer* %stackTop
	br label %L_169

L_167:
	; RW32(0): Word32  = Word64_equal (0x0, RW64(0): Word64)
	%r13754 = load %Word64, %Word64* %regW64_0
	%r13756 = icmp eq %Word64 0, %r13754
	%r13755 = zext i1 %r13756 to %Word32
	store %Word32 %r13755, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_168), (0x1, L_184))}
	%r13757 = load %Word32, %Word32* %regW32_0
	%r13758 = trunc %Word32 %r13757 to i1
	br i1 %r13758, label %L_184, label %L_168

L_166:
	; RW64(0): Word64  = Word64_add (0x2, SW64(120): Word64)
	%r13759 = load %Pointer, %Pointer* %stackTop
	%r13760 = getelementptr inbounds i8, %Pointer %r13759, i32 120
	%r13761 = bitcast %Pointer %r13760 to %Word64*
	%r13762 = load %Word64, %Word64* %r13761
	%r13763 = add %Word64 2, %r13762
	store %Word64 %r13763, %Word64* %regW64_0
	; RW32(0): Word32  = WordU64_lt (0x7FFFFFFF, RW64(0): Word64)
	%r13764 = load %Word64, %Word64* %regW64_0
	%r13766 = icmp ult %Word64 2147483647, %r13764
	%r13765 = zext i1 %r13766 to %Word32
	store %Word32 %r13765, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_167), (0x1, L_185))}
	%r13767 = load %Word32, %Word32* %regW32_0
	%r13768 = trunc %Word32 %r13767 to i1
	br i1 %r13768, label %L_185, label %L_167

L_165:
	; Push(-120)
	%r13769 = load %Pointer, %Pointer* %stackTop
	%r13770 = getelementptr inbounds i8, %Pointer %r13769, i32 -120
	store %Pointer %r13770, %Pointer* %stackTop
	; SP(112): Objptr (opt_3)  = SP(120): Objptr (opt_3)
	%r13771 = load %Pointer, %Pointer* %stackTop
	%r13772 = getelementptr inbounds i8, %Pointer %r13771, i32 120
	%r13773 = bitcast %Pointer %r13772 to %Objptr*
	%r13774 = load %Objptr, %Objptr* %r13773
	%r13775 = load %Pointer, %Pointer* %stackTop
	%r13776 = getelementptr inbounds i8, %Pointer %r13775, i32 112
	%r13777 = bitcast %Pointer %r13776 to %Objptr*
	store %Objptr %r13774, %Objptr* %r13777
	; SW64(120): Word64  = OW64 (SP(112): Objptr (opt_3), ~16): Word64
	%r13778 = load %Pointer, %Pointer* %stackTop
	%r13779 = getelementptr inbounds i8, %Pointer %r13778, i32 112
	%r13780 = bitcast %Pointer %r13779 to %Objptr*
	%r13781 = load %Objptr, %Objptr* %r13780
	%r13782 = getelementptr inbounds i8, %Objptr %r13781, i32 -16
	%r13783 = bitcast %Objptr %r13782 to %Word64*
	%r13784 = load %Word64, %Word64* %r13783
	%r13785 = load %Pointer, %Pointer* %stackTop
	%r13786 = getelementptr inbounds i8, %Pointer %r13785, i32 120
	%r13787 = bitcast %Pointer %r13786 to %Word64*
	store %Word64 %r13784, %Word64* %r13787
	; RW32(0): Word32  = Word64_equal (SW64(120): Word64, 0x0)
	%r13788 = load %Pointer, %Pointer* %stackTop
	%r13789 = getelementptr inbounds i8, %Pointer %r13788, i32 120
	%r13790 = bitcast %Pointer %r13789 to %Word64*
	%r13791 = load %Word64, %Word64* %r13790
	%r13793 = icmp eq %Word64 %r13791, 0
	%r13792 = zext i1 %r13793 to %Word32
	store %Word32 %r13792, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_166), (0x1, L_186))}
	%r13794 = load %Word32, %Word32* %regW32_0
	%r13795 = trunc %Word32 %r13794 to i1
	br i1 %r13795, label %L_186, label %L_166

L_164:
	; SW64(16): Word64  = Word64_add (RW64(0): Word64, 0x1)
	%r13796 = load %Word64, %Word64* %regW64_0
	%r13797 = add %Word64 %r13796, 1
	%r13798 = load %Pointer, %Pointer* %stackTop
	%r13799 = getelementptr inbounds i8, %Pointer %r13798, i32 16
	%r13800 = bitcast %Pointer %r13799 to %Word64*
	store %Word64 %r13797, %Word64* %r13800
	; RR64(0): Real64  = XR64 (SP(24): Objptr (opt_29), RW64(0): Word64, 8, 0): Real64
	%r13801 = load %Pointer, %Pointer* %stackTop
	%r13802 = getelementptr inbounds i8, %Pointer %r13801, i32 24
	%r13803 = bitcast %Pointer %r13802 to %Objptr*
	%r13804 = load %Objptr, %Objptr* %r13803
	%r13805 = load %Word64, %Word64* %regW64_0
	%r13806 = mul nsw %Word64 %r13805, 8
	%r13807 = add nsw %Word64 %r13806, 0
	%r13808 = getelementptr inbounds i8, %Objptr %r13804, %Word64 %r13807
	%r13809 = bitcast %Objptr %r13808 to %Real64*
	%r13810 = load %Real64, %Real64* %r13809
	store %Real64 %r13810, %Real64* %regR64_0
	; SR64(120): Real64  = RR64(0): Real64
	%r13811 = load %Real64, %Real64* %regR64_0
	%r13812 = load %Pointer, %Pointer* %stackTop
	%r13813 = getelementptr inbounds i8, %Pointer %r13812, i32 120
	%r13814 = bitcast %Pointer %r13813 to %Real64*
	store %Real64 %r13811, %Real64* %r13814
	; SP(128): Objptr (opt_13)  = SP(80): Objptr (opt_13)
	%r13815 = load %Pointer, %Pointer* %stackTop
	%r13816 = getelementptr inbounds i8, %Pointer %r13815, i32 80
	%r13817 = bitcast %Pointer %r13816 to %Objptr*
	%r13818 = load %Objptr, %Objptr* %r13817
	%r13819 = load %Pointer, %Pointer* %stackTop
	%r13820 = getelementptr inbounds i8, %Pointer %r13819, i32 128
	%r13821 = bitcast %Pointer %r13820 to %Objptr*
	store %Objptr %r13818, %Objptr* %r13821
	; SP(136): Objptr (opt_25)  = SP(72): Objptr (opt_25)
	%r13822 = load %Pointer, %Pointer* %stackTop
	%r13823 = getelementptr inbounds i8, %Pointer %r13822, i32 72
	%r13824 = bitcast %Pointer %r13823 to %Objptr*
	%r13825 = load %Objptr, %Objptr* %r13824
	%r13826 = load %Pointer, %Pointer* %stackTop
	%r13827 = getelementptr inbounds i8, %Pointer %r13826, i32 136
	%r13828 = bitcast %Pointer %r13827 to %Objptr*
	store %Objptr %r13825, %Objptr* %r13828
	; SP(144): Objptr (opt_24)  = SP(56): Objptr (opt_24)
	%r13829 = load %Pointer, %Pointer* %stackTop
	%r13830 = getelementptr inbounds i8, %Pointer %r13829, i32 56
	%r13831 = bitcast %Pointer %r13830 to %Objptr*
	%r13832 = load %Objptr, %Objptr* %r13831
	%r13833 = load %Pointer, %Pointer* %stackTop
	%r13834 = getelementptr inbounds i8, %Pointer %r13833, i32 144
	%r13835 = bitcast %Pointer %r13834 to %Objptr*
	store %Objptr %r13832, %Objptr* %r13835
	; SP(152): Objptr (opt_23)  = SP(48): Objptr (opt_23)
	%r13836 = load %Pointer, %Pointer* %stackTop
	%r13837 = getelementptr inbounds i8, %Pointer %r13836, i32 48
	%r13838 = bitcast %Pointer %r13837 to %Objptr*
	%r13839 = load %Objptr, %Objptr* %r13838
	%r13840 = load %Pointer, %Pointer* %stackTop
	%r13841 = getelementptr inbounds i8, %Pointer %r13840, i32 152
	%r13842 = bitcast %Pointer %r13841 to %Objptr*
	store %Objptr %r13839, %Objptr* %r13842
	%r13843 = load %Pointer, %Pointer* %stackTop
	%r13844 = getelementptr inbounds i8, %Pointer %r13843, i32 112
	%r13845 = bitcast %Pointer %r13844 to %uintptr_t*
	store %uintptr_t 17, %uintptr_t* %r13845
	; Push(120)
	%r13846 = load %Pointer, %Pointer* %stackTop
	%r13847 = getelementptr inbounds i8, %Pointer %r13846, i32 120
	store %Pointer %r13847, %Pointer* %stackTop
	br label %x_2

loop_15:
	; RW32(0): Word32  = WordS64_lt (SW64(104): Word64, RW64(0): Word64)
	%r13848 = load %Pointer, %Pointer* %stackTop
	%r13849 = getelementptr inbounds i8, %Pointer %r13848, i32 104
	%r13850 = bitcast %Pointer %r13849 to %Word64*
	%r13851 = load %Word64, %Word64* %r13850
	%r13852 = load %Word64, %Word64* %regW64_0
	%r13854 = icmp slt %Word64 %r13851, %r13852
	%r13853 = zext i1 %r13854 to %Word32
	store %Word32 %r13853, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_164), (0x1, L_187))}
	%r13855 = load %Word32, %Word32* %regW32_0
	%r13856 = trunc %Word32 %r13855 to i1
	br i1 %r13856, label %L_187, label %L_164

L_163:
	; Push(-112)
	%r13857 = load %Pointer, %Pointer* %stackTop
	%r13858 = getelementptr inbounds i8, %Pointer %r13857, i32 -112
	store %Pointer %r13858, %Pointer* %stackTop
	; SW64(104): Word64  = Word64_sub (SW64(16): Word64, 0x1)
	%r13859 = load %Pointer, %Pointer* %stackTop
	%r13860 = getelementptr inbounds i8, %Pointer %r13859, i32 16
	%r13861 = bitcast %Pointer %r13860 to %Word64*
	%r13862 = load %Word64, %Word64* %r13861
	%r13863 = sub %Word64 %r13862, 1
	%r13864 = load %Pointer, %Pointer* %stackTop
	%r13865 = getelementptr inbounds i8, %Pointer %r13864, i32 104
	%r13866 = bitcast %Pointer %r13865 to %Word64*
	store %Word64 %r13863, %Word64* %r13866
	; RW64(0): Word64  = 0x0
	store %Word64 0, %Word64* %regW64_0
	; Goto loop_15
	br label %loop_15

L_162:
	; SQ(0): Label L_174  = L_174
	%r13867 = inttoptr %Word32 22 to %CPointer
	%r13868 = load %Pointer, %Pointer* %stackTop
	%r13869 = getelementptr inbounds i8, %Pointer %r13868, i32 0
	%r13870 = bitcast %Pointer %r13869 to %CPointer*
	store %CPointer %r13867, %CPointer* %r13870
	; RQ(32): CPointer  = CPointer_add (<StackTop>, 0x8)
	%r13871 = load %Pointer, %Pointer* %stackTop
	%r13873 = ptrtoint %Pointer %r13871 to %uintptr_t
	%r13874 = add %uintptr_t %r13873, 8
	%r13872 = inttoptr %uintptr_t %r13874 to %Pointer
	store %CPointer %r13872, %CPointer* %regQ_32
	; RW64(6): Word64  = CPointer_diff (RQ(32): CPointer, OQ (<GCState>, 1616): CPointer)
	%r13875 = load %CPointer, %CPointer* %regQ_32
	%r13876 = bitcast %struct.GC_state* @gcState to %Pointer
	%r13877 = getelementptr inbounds i8, %Pointer %r13876, i32 1616
	%r13878 = bitcast %Pointer %r13877 to %CPointer*
	%r13879 = load %CPointer, %CPointer* %r13878
	%r13881 = ptrtoint %Pointer %r13875 to %uintptr_t
	%r13882 = ptrtoint %Pointer %r13879 to %uintptr_t
	%r13880 = sub %uintptr_t %r13881, %r13882
	store %Word64 %r13880, %Word64* %regW64_6
	; OW64 (<GCState>, 32): ExnStack  = Cast (RW64(6): Word64, ExnStack)
	%r13883 = load %Word64, %Word64* %regW64_6
	%r13884 = bitcast %Word64 %r13883 to %Word64
	%r13885 = bitcast %struct.GC_state* @gcState to %Pointer
	%r13886 = getelementptr inbounds i8, %Pointer %r13885, i32 32
	%r13887 = bitcast %Pointer %r13886 to %Word64*
	store %Word64 %r13884, %Word64* %r13887
	; SP(112): Objptr (opt_3)  = glob {index = 126, isRoot = true, ty = Objptr (opt_3)}
	%r13888 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 126
	%r13889 = load %Objptr, %Objptr* %r13888
	%r13890 = load %Pointer, %Pointer* %stackTop
	%r13891 = getelementptr inbounds i8, %Pointer %r13890, i32 112
	%r13892 = bitcast %Pointer %r13891 to %Objptr*
	store %Objptr %r13889, %Objptr* %r13892
	; SP(120): Objptr (opt_27)  = SP(32): Objptr (opt_27)
	%r13893 = load %Pointer, %Pointer* %stackTop
	%r13894 = getelementptr inbounds i8, %Pointer %r13893, i32 32
	%r13895 = bitcast %Pointer %r13894 to %Objptr*
	%r13896 = load %Objptr, %Objptr* %r13895
	%r13897 = load %Pointer, %Pointer* %stackTop
	%r13898 = getelementptr inbounds i8, %Pointer %r13897, i32 120
	%r13899 = bitcast %Pointer %r13898 to %Objptr*
	store %Objptr %r13896, %Objptr* %r13899
	%r13900 = load %Pointer, %Pointer* %stackTop
	%r13901 = getelementptr inbounds i8, %Pointer %r13900, i32 104
	%r13902 = bitcast %Pointer %r13901 to %uintptr_t*
	store %uintptr_t 16, %uintptr_t* %r13902
	; Push(112)
	%r13903 = load %Pointer, %Pointer* %stackTop
	%r13904 = getelementptr inbounds i8, %Pointer %r13903, i32 112
	store %Pointer %r13904, %Pointer* %stackTop
	br label %print_5

loop_14:
	; RW32(0): Word32  = WordS64_lt (RW64(0): Word64, SW64(64): Word64)
	%r13905 = load %Word64, %Word64* %regW64_0
	%r13906 = load %Pointer, %Pointer* %stackTop
	%r13907 = getelementptr inbounds i8, %Pointer %r13906, i32 64
	%r13908 = bitcast %Pointer %r13907 to %Word64*
	%r13909 = load %Word64, %Word64* %r13908
	%r13911 = icmp slt %Word64 %r13905, %r13909
	%r13910 = zext i1 %r13911 to %Word32
	store %Word32 %r13910, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_162), (0x1, L_234))}
	%r13912 = load %Word32, %Word32* %regW32_0
	%r13913 = trunc %Word32 %r13912 to i1
	br i1 %r13913, label %L_234, label %L_162

L_161:
	; Push(-112)
	%r13914 = load %Pointer, %Pointer* %stackTop
	%r13915 = getelementptr inbounds i8, %Pointer %r13914, i32 -112
	store %Pointer %r13915, %Pointer* %stackTop
	%r13917 = load %Pointer, %Pointer* %stackTop
	%r13918 = getelementptr inbounds i8, %Pointer %r13917, i32 88
	%r13919 = bitcast %Pointer %r13918 to %Objptr*
	%r13916 = load %Objptr, %Objptr* @CReturnP
	store %Objptr %r13916, %Objptr* %r13919
	; RP(0): Objptr (opt_42)  = glob {index = 20, isRoot = true, ty = Objptr (opt_42)}
	%r13920 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 20
	%r13921 = load %Objptr, %Objptr* %r13920
	store %Objptr %r13921, %Objptr* %regP_0
	; RW64(0): Word64  = 0x0
	store %Word64 0, %Word64* %regW64_0
	; Goto loop_14
	br label %loop_14

L_160:
	; CCall {args = (<GCState>, 0x0, SW64(64): Word64, 0x3B), frameInfo = Some {frameLayoutsIndex = 15}, func = {args = (GCState, Word64, Word64, Word64), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int64, Word64), res = Some Objptr}, return = Objptr (opt_29), symbolScope = private, target = GC_arrayAllocate}, return = Some L_161}
	; GetOperands
	%r13922 = bitcast %struct.GC_state* @gcState to %Pointer
	%r13923 = load %Pointer, %Pointer* %stackTop
	%r13924 = getelementptr inbounds i8, %Pointer %r13923, i32 64
	%r13925 = bitcast %Pointer %r13924 to %Word64*
	%r13926 = load %Word64, %Word64* %r13925
	%r13927 = load %Pointer, %Pointer* %stackTop
	%r13928 = getelementptr inbounds i8, %Pointer %r13927, i32 104
	%r13929 = bitcast %Pointer %r13928 to %uintptr_t*
	store %uintptr_t 15, %uintptr_t* %r13929
	; Push(112)
	%r13930 = load %Pointer, %Pointer* %stackTop
	%r13931 = getelementptr inbounds i8, %Pointer %r13930, i32 112
	store %Pointer %r13931, %Pointer* %stackTop
	; FlushFrontier
	%r13932 = bitcast %struct.GC_state* @gcState to %Pointer
	%r13933 = getelementptr inbounds i8, %Pointer %r13932, i32 0
	%r13934 = bitcast %Pointer %r13933 to %Pointer*
	%r13935 = load %Pointer, %Pointer* %frontier
	store %Pointer %r13935, %Pointer* %r13934
	; FlushStackTop
	%r13936 = bitcast %struct.GC_state* @gcState to %Pointer
	%r13937 = getelementptr inbounds i8, %Pointer %r13936, i32 16
	%r13938 = bitcast %Pointer %r13937 to %Pointer*
	%r13939 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r13939, %Pointer* %r13938
	; Call
	%r13940 = call %Objptr @GC_arrayAllocate(%Pointer %r13922, %Word64 0, %Word64 %r13926, %Word64 59)
	store %Objptr %r13940, %Objptr* @CReturnP
	; CacheFrontier
	%r13941 = bitcast %struct.GC_state* @gcState to %Pointer
	%r13942 = getelementptr inbounds i8, %Pointer %r13941, i32 0
	%r13943 = bitcast %Pointer %r13942 to %Pointer*
	%r13944 = load %Pointer, %Pointer* %r13943
	store %Pointer %r13944, %Pointer* %frontier
	; CacheStackTop
	%r13945 = bitcast %struct.GC_state* @gcState to %Pointer
	%r13946 = getelementptr inbounds i8, %Pointer %r13945, i32 16
	%r13947 = bitcast %Pointer %r13946 to %Pointer*
	%r13948 = load %Pointer, %Pointer* %r13947
	store %Pointer %r13948, %Pointer* %stackTop
	br label %L_161

L_159:
	; SW64(64): Word64  = WordS32_extdToWord64 (RW32(1): Word32)
	%r13949 = load %Word32, %Word32* %regW32_1
	%r13950 = sext %Word32 %r13949 to %Word64
	%r13951 = load %Pointer, %Pointer* %stackTop
	%r13952 = getelementptr inbounds i8, %Pointer %r13951, i32 64
	%r13953 = bitcast %Pointer %r13952 to %Word64*
	store %Word64 %r13950, %Word64* %r13953
	; RW32(0): Word32  = WordU64_lt (0x7FFFFFFF, SW64(64): Word64)
	%r13954 = load %Pointer, %Pointer* %stackTop
	%r13955 = getelementptr inbounds i8, %Pointer %r13954, i32 64
	%r13956 = bitcast %Pointer %r13955 to %Word64*
	%r13957 = load %Word64, %Word64* %r13956
	%r13959 = icmp ult %Word64 2147483647, %r13957
	%r13958 = zext i1 %r13959 to %Word32
	store %Word32 %r13958, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_160), (0x1, L_237))}
	%r13960 = load %Word32, %Word32* %regW32_0
	%r13961 = trunc %Word32 %r13960 to i1
	br i1 %r13961, label %L_237, label %L_160

L_158:
	; RP(1): Objptr (opt_42)  = OP (RP(0): Objptr (opt_42), 8): Objptr (opt_42)
	%r13962 = load %Objptr, %Objptr* %regP_0
	%r13963 = getelementptr inbounds i8, %Objptr %r13962, i32 8
	%r13964 = bitcast %Objptr %r13963 to %Objptr*
	%r13965 = load %Objptr, %Objptr* %r13964
	store %Objptr %r13965, %Objptr* %regP_1
	; RP(0): Objptr (opt_42)  = RP(1): Objptr (opt_42)
	%r13966 = load %Objptr, %Objptr* %regP_1
	store %Objptr %r13966, %Objptr* %regP_0
	; RW32(0): Word32  = RW32(1): Word32
	%r13967 = load %Word32, %Word32* %regW32_1
	store %Word32 %r13967, %Word32* %regW32_0
	; Goto L_157
	br label %L_157

L_157:
	; RW32(1): Word32  = Word32_add (RW32(0): Word32, 0x1)
	%r13968 = load %Word32, %Word32* %regW32_0
	%r13969 = add %Word32 %r13968, 1
	store %Word32 %r13969, %Word32* %regW32_1
	; switch {test = Cast (RP(0): Objptr (opt_42), Bits64), default = Some L_158, cases = ((0x1, L_159))}
	%r13970 = load %Objptr, %Objptr* %regP_0
	%r13971 = ptrtoint %Objptr %r13970 to %Word64
	switch %Word64 %r13971, label %L_158 [
		%Word64 1, label %L_159
	]

L_156:
	; RP(0): Objptr (opt_42)  = glob {index = 19, isRoot = true, ty = Objptr (opt_42)}
	%r13972 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 19
	%r13973 = load %Objptr, %Objptr* %r13972
	store %Objptr %r13973, %Objptr* %regP_0
	; RW32(0): Word32  = 0x0
	store %Word32 0, %Word32* %regW32_0
	; Goto L_157
	br label %L_157

loop_13:
	; RW32(0): Word32  = WordS64_lt (RW64(0): Word64, SW64(16): Word64)
	%r13974 = load %Word64, %Word64* %regW64_0
	%r13975 = load %Pointer, %Pointer* %stackTop
	%r13976 = getelementptr inbounds i8, %Pointer %r13975, i32 16
	%r13977 = bitcast %Pointer %r13976 to %Word64*
	%r13978 = load %Word64, %Word64* %r13977
	%r13980 = icmp slt %Word64 %r13974, %r13978
	%r13979 = zext i1 %r13980 to %Word32
	store %Word32 %r13979, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_156), (0x1, L_238))}
	%r13981 = load %Word32, %Word32* %regW32_0
	%r13982 = trunc %Word32 %r13981 to i1
	br i1 %r13982, label %L_238, label %L_156

L_155:
	; Push(-112)
	%r13983 = load %Pointer, %Pointer* %stackTop
	%r13984 = getelementptr inbounds i8, %Pointer %r13983, i32 -112
	store %Pointer %r13984, %Pointer* %stackTop
	%r13986 = load %Pointer, %Pointer* %stackTop
	%r13987 = getelementptr inbounds i8, %Pointer %r13986, i32 24
	%r13988 = bitcast %Pointer %r13987 to %Objptr*
	%r13985 = load %Objptr, %Objptr* @CReturnP
	store %Objptr %r13985, %Objptr* %r13988
	; RP(0): Objptr (opt_42)  = glob {index = 18, isRoot = true, ty = Objptr (opt_42)}
	%r13989 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 18
	%r13990 = load %Objptr, %Objptr* %r13989
	store %Objptr %r13990, %Objptr* %regP_0
	; RW64(0): Word64  = 0x0
	store %Word64 0, %Word64* %regW64_0
	; Goto loop_13
	br label %loop_13

L_154:
	; CCall {args = (<GCState>, 0x0, SW64(16): Word64, 0x3B), frameInfo = Some {frameLayoutsIndex = 14}, func = {args = (GCState, Word64, Word64, Word64), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int64, Word64), res = Some Objptr}, return = Objptr (opt_29), symbolScope = private, target = GC_arrayAllocate}, return = Some L_155}
	; GetOperands
	%r13991 = bitcast %struct.GC_state* @gcState to %Pointer
	%r13992 = load %Pointer, %Pointer* %stackTop
	%r13993 = getelementptr inbounds i8, %Pointer %r13992, i32 16
	%r13994 = bitcast %Pointer %r13993 to %Word64*
	%r13995 = load %Word64, %Word64* %r13994
	%r13996 = load %Pointer, %Pointer* %stackTop
	%r13997 = getelementptr inbounds i8, %Pointer %r13996, i32 104
	%r13998 = bitcast %Pointer %r13997 to %uintptr_t*
	store %uintptr_t 14, %uintptr_t* %r13998
	; Push(112)
	%r13999 = load %Pointer, %Pointer* %stackTop
	%r14000 = getelementptr inbounds i8, %Pointer %r13999, i32 112
	store %Pointer %r14000, %Pointer* %stackTop
	; FlushFrontier
	%r14001 = bitcast %struct.GC_state* @gcState to %Pointer
	%r14002 = getelementptr inbounds i8, %Pointer %r14001, i32 0
	%r14003 = bitcast %Pointer %r14002 to %Pointer*
	%r14004 = load %Pointer, %Pointer* %frontier
	store %Pointer %r14004, %Pointer* %r14003
	; FlushStackTop
	%r14005 = bitcast %struct.GC_state* @gcState to %Pointer
	%r14006 = getelementptr inbounds i8, %Pointer %r14005, i32 16
	%r14007 = bitcast %Pointer %r14006 to %Pointer*
	%r14008 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r14008, %Pointer* %r14007
	; Call
	%r14009 = call %Objptr @GC_arrayAllocate(%Pointer %r13991, %Word64 0, %Word64 %r13995, %Word64 59)
	store %Objptr %r14009, %Objptr* @CReturnP
	; CacheFrontier
	%r14010 = bitcast %struct.GC_state* @gcState to %Pointer
	%r14011 = getelementptr inbounds i8, %Pointer %r14010, i32 0
	%r14012 = bitcast %Pointer %r14011 to %Pointer*
	%r14013 = load %Pointer, %Pointer* %r14012
	store %Pointer %r14013, %Pointer* %frontier
	; CacheStackTop
	%r14014 = bitcast %struct.GC_state* @gcState to %Pointer
	%r14015 = getelementptr inbounds i8, %Pointer %r14014, i32 16
	%r14016 = bitcast %Pointer %r14015 to %Pointer*
	%r14017 = load %Pointer, %Pointer* %r14016
	store %Pointer %r14017, %Pointer* %stackTop
	br label %L_155

L_153:
	; SW64(16): Word64  = WordS32_extdToWord64 (RW32(1): Word32)
	%r14018 = load %Word32, %Word32* %regW32_1
	%r14019 = sext %Word32 %r14018 to %Word64
	%r14020 = load %Pointer, %Pointer* %stackTop
	%r14021 = getelementptr inbounds i8, %Pointer %r14020, i32 16
	%r14022 = bitcast %Pointer %r14021 to %Word64*
	store %Word64 %r14019, %Word64* %r14022
	; RW32(0): Word32  = WordU64_lt (0x7FFFFFFF, SW64(16): Word64)
	%r14023 = load %Pointer, %Pointer* %stackTop
	%r14024 = getelementptr inbounds i8, %Pointer %r14023, i32 16
	%r14025 = bitcast %Pointer %r14024 to %Word64*
	%r14026 = load %Word64, %Word64* %r14025
	%r14028 = icmp ult %Word64 2147483647, %r14026
	%r14027 = zext i1 %r14028 to %Word32
	store %Word32 %r14027, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_154), (0x1, L_241))}
	%r14029 = load %Word32, %Word32* %regW32_0
	%r14030 = trunc %Word32 %r14029 to i1
	br i1 %r14030, label %L_241, label %L_154

L_152:
	; RP(1): Objptr (opt_42)  = OP (RP(0): Objptr (opt_42), 8): Objptr (opt_42)
	%r14031 = load %Objptr, %Objptr* %regP_0
	%r14032 = getelementptr inbounds i8, %Objptr %r14031, i32 8
	%r14033 = bitcast %Objptr %r14032 to %Objptr*
	%r14034 = load %Objptr, %Objptr* %r14033
	store %Objptr %r14034, %Objptr* %regP_1
	; RP(0): Objptr (opt_42)  = RP(1): Objptr (opt_42)
	%r14035 = load %Objptr, %Objptr* %regP_1
	store %Objptr %r14035, %Objptr* %regP_0
	; RW32(0): Word32  = RW32(1): Word32
	%r14036 = load %Word32, %Word32* %regW32_1
	store %Word32 %r14036, %Word32* %regW32_0
	; Goto L_151
	br label %L_151

L_151:
	; RW32(1): Word32  = Word32_add (RW32(0): Word32, 0x1)
	%r14037 = load %Word32, %Word32* %regW32_0
	%r14038 = add %Word32 %r14037, 1
	store %Word32 %r14038, %Word32* %regW32_1
	; switch {test = Cast (RP(0): Objptr (opt_42), Bits64), default = Some L_152, cases = ((0x1, L_153))}
	%r14039 = load %Objptr, %Objptr* %regP_0
	%r14040 = ptrtoint %Objptr %r14039 to %Word64
	switch %Word64 %r14040, label %L_152 [
		%Word64 1, label %L_153
	]

L_150:
	; CW64 (<Frontier>)  = 0x21
	%r14041 = load %Pointer, %Pointer* %frontier
	%r14042 = bitcast %Pointer %r14041 to %Word64*
	store %Word64 33, %Word64* %r14042
	; RQ(31): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r14043 = load %Pointer, %Pointer* %frontier
	%r14045 = ptrtoint %Pointer %r14043 to %uintptr_t
	%r14046 = add %uintptr_t %r14045, 8
	%r14044 = inttoptr %uintptr_t %r14046 to %Pointer
	store %CPointer %r14044, %CPointer* %regQ_31
	; RP(1): Objptr (opt_16)  = Cast (RQ(31): CPointer, Objptr (opt_16))
	%r14047 = load %CPointer, %CPointer* %regQ_31
	%r14048 = bitcast %CPointer %r14047 to %Objptr
	store %Objptr %r14048, %Objptr* %regP_1
	; <Frontier>  = CPointer_add (<Frontier>, 0x10)
	%r14049 = load %Pointer, %Pointer* %frontier
	%r14051 = ptrtoint %Pointer %r14049 to %uintptr_t
	%r14052 = add %uintptr_t %r14051, 16
	%r14050 = inttoptr %uintptr_t %r14052 to %Pointer
	store %Pointer %r14050, %Pointer* %frontier
	; OP (RP(1): Objptr (opt_16), 0): Objptr (opt_41, opt_40)  = RP(0): Objptr (opt_41, opt_40)
	%r14053 = load %Objptr, %Objptr* %regP_0
	%r14054 = load %Objptr, %Objptr* %regP_1
	%r14055 = getelementptr inbounds i8, %Objptr %r14054, i32 0
	%r14056 = bitcast %Objptr %r14055 to %Objptr*
	store %Objptr %r14053, %Objptr* %r14056
	; CW64 (<Frontier>)  = 0x25
	%r14057 = load %Pointer, %Pointer* %frontier
	%r14058 = bitcast %Pointer %r14057 to %Word64*
	store %Word64 37, %Word64* %r14058
	; RQ(30): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r14059 = load %Pointer, %Pointer* %frontier
	%r14061 = ptrtoint %Pointer %r14059 to %uintptr_t
	%r14062 = add %uintptr_t %r14061, 8
	%r14060 = inttoptr %uintptr_t %r14062 to %Pointer
	store %CPointer %r14060, %CPointer* %regQ_30
	; RP(2): Objptr (opt_18)  = Cast (RQ(30): CPointer, Objptr (opt_18))
	%r14063 = load %CPointer, %CPointer* %regQ_30
	%r14064 = bitcast %CPointer %r14063 to %Objptr
	store %Objptr %r14064, %Objptr* %regP_2
	; <Frontier>  = CPointer_add (<Frontier>, 0x28)
	%r14065 = load %Pointer, %Pointer* %frontier
	%r14067 = ptrtoint %Pointer %r14065 to %uintptr_t
	%r14068 = add %uintptr_t %r14067, 40
	%r14066 = inttoptr %uintptr_t %r14068 to %Pointer
	store %Pointer %r14066, %Pointer* %frontier
	; OP (RP(2): Objptr (opt_18), 0): Objptr (opt_15)  = SP(16): Objptr (opt_15)
	%r14069 = load %Pointer, %Pointer* %stackTop
	%r14070 = getelementptr inbounds i8, %Pointer %r14069, i32 16
	%r14071 = bitcast %Pointer %r14070 to %Objptr*
	%r14072 = load %Objptr, %Objptr* %r14071
	%r14073 = load %Objptr, %Objptr* %regP_2
	%r14074 = getelementptr inbounds i8, %Objptr %r14073, i32 0
	%r14075 = bitcast %Objptr %r14074 to %Objptr*
	store %Objptr %r14072, %Objptr* %r14075
	; OP (RP(2): Objptr (opt_18), 8): Objptr (opt_17)  = SP(24): Objptr (opt_17)
	%r14076 = load %Pointer, %Pointer* %stackTop
	%r14077 = getelementptr inbounds i8, %Pointer %r14076, i32 24
	%r14078 = bitcast %Pointer %r14077 to %Objptr*
	%r14079 = load %Objptr, %Objptr* %r14078
	%r14080 = load %Objptr, %Objptr* %regP_2
	%r14081 = getelementptr inbounds i8, %Objptr %r14080, i32 8
	%r14082 = bitcast %Objptr %r14081 to %Objptr*
	store %Objptr %r14079, %Objptr* %r14082
	; OP (RP(2): Objptr (opt_18), 16): Objptr (opt_16)  = RP(1): Objptr (opt_16)
	%r14083 = load %Objptr, %Objptr* %regP_1
	%r14084 = load %Objptr, %Objptr* %regP_2
	%r14085 = getelementptr inbounds i8, %Objptr %r14084, i32 16
	%r14086 = bitcast %Objptr %r14085 to %Objptr*
	store %Objptr %r14083, %Objptr* %r14086
	; OP (RP(2): Objptr (opt_18), 24): Objptr (opt_15)  = SP(16): Objptr (opt_15)
	%r14087 = load %Pointer, %Pointer* %stackTop
	%r14088 = getelementptr inbounds i8, %Pointer %r14087, i32 16
	%r14089 = bitcast %Pointer %r14088 to %Objptr*
	%r14090 = load %Objptr, %Objptr* %r14089
	%r14091 = load %Objptr, %Objptr* %regP_2
	%r14092 = getelementptr inbounds i8, %Objptr %r14091, i32 24
	%r14093 = bitcast %Objptr %r14092 to %Objptr*
	store %Objptr %r14090, %Objptr* %r14093
	; RP(3): Objptr (opt_39)  = OP (SP(88): Objptr (opt_20), 0): Objptr (opt_39)
	%r14094 = load %Pointer, %Pointer* %stackTop
	%r14095 = getelementptr inbounds i8, %Pointer %r14094, i32 88
	%r14096 = bitcast %Pointer %r14095 to %Objptr*
	%r14097 = load %Objptr, %Objptr* %r14096
	%r14098 = getelementptr inbounds i8, %Objptr %r14097, i32 0
	%r14099 = bitcast %Objptr %r14098 to %Objptr*
	%r14100 = load %Objptr, %Objptr* %r14099
	store %Objptr %r14100, %Objptr* %regP_3
	; CW64 (<Frontier>)  = 0x4F
	%r14101 = load %Pointer, %Pointer* %frontier
	%r14102 = bitcast %Pointer %r14101 to %Word64*
	store %Word64 79, %Word64* %r14102
	; RQ(29): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r14103 = load %Pointer, %Pointer* %frontier
	%r14105 = ptrtoint %Pointer %r14103 to %uintptr_t
	%r14106 = add %uintptr_t %r14105, 8
	%r14104 = inttoptr %uintptr_t %r14106 to %Pointer
	store %CPointer %r14104, %CPointer* %regQ_29
	; RP(4): Objptr (opt_39)  = Cast (RQ(29): CPointer, Objptr (opt_39))
	%r14107 = load %CPointer, %CPointer* %regQ_29
	%r14108 = bitcast %CPointer %r14107 to %Objptr
	store %Objptr %r14108, %Objptr* %regP_4
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r14109 = load %Pointer, %Pointer* %frontier
	%r14111 = ptrtoint %Pointer %r14109 to %uintptr_t
	%r14112 = add %uintptr_t %r14111, 24
	%r14110 = inttoptr %uintptr_t %r14112 to %Pointer
	store %Pointer %r14110, %Pointer* %frontier
	; OP (RP(4): Objptr (opt_39), 0): Objptr (opt_18)  = RP(2): Objptr (opt_18)
	%r14113 = load %Objptr, %Objptr* %regP_2
	%r14114 = load %Objptr, %Objptr* %regP_4
	%r14115 = getelementptr inbounds i8, %Objptr %r14114, i32 0
	%r14116 = bitcast %Objptr %r14115 to %Objptr*
	store %Objptr %r14113, %Objptr* %r14116
	; OP (RP(4): Objptr (opt_39), 8): Objptr (opt_39)  = RP(3): Objptr (opt_39)
	%r14117 = load %Objptr, %Objptr* %regP_3
	%r14118 = load %Objptr, %Objptr* %regP_4
	%r14119 = getelementptr inbounds i8, %Objptr %r14118, i32 8
	%r14120 = bitcast %Objptr %r14119 to %Objptr*
	store %Objptr %r14117, %Objptr* %r14120
	; RW64(0): Word64  = WordU64_rshift (Cast (SP(88): Objptr (opt_20), Bits64), 0x8)
	%r14121 = load %Pointer, %Pointer* %stackTop
	%r14122 = getelementptr inbounds i8, %Pointer %r14121, i32 88
	%r14123 = bitcast %Pointer %r14122 to %Objptr*
	%r14124 = load %Objptr, %Objptr* %r14123
	%r14125 = ptrtoint %Objptr %r14124 to %Word64
	%r14126 = zext %Word32 8 to %Word64
	%r14127 = lshr %Word64 %r14125, %r14126
	store %Word64 %r14127, %Word64* %regW64_0
	; XW8 (OQ (<GCState>, 976): CPointer, RW64(0): Word64, 1, 0): Word8  = 0x1
	%r14128 = bitcast %struct.GC_state* @gcState to %Pointer
	%r14129 = getelementptr inbounds i8, %Pointer %r14128, i32 976
	%r14130 = bitcast %Pointer %r14129 to %CPointer*
	%r14131 = load %CPointer, %CPointer* %r14130
	%r14132 = load %Word64, %Word64* %regW64_0
	%r14133 = mul nsw %Word64 %r14132, 1
	%r14134 = add nsw %Word64 %r14133, 0
	%r14135 = getelementptr inbounds i8, %CPointer %r14131, %Word64 %r14134
	%r14136 = bitcast %CPointer %r14135 to %Word8*
	store %Word8 1, %Word8* %r14136
	; OP (SP(88): Objptr (opt_20), 0): Objptr (opt_39)  = RP(4): Objptr (opt_39)
	%r14137 = load %Objptr, %Objptr* %regP_4
	%r14138 = load %Pointer, %Pointer* %stackTop
	%r14139 = getelementptr inbounds i8, %Pointer %r14138, i32 88
	%r14140 = bitcast %Pointer %r14139 to %Objptr*
	%r14141 = load %Objptr, %Objptr* %r14140
	%r14142 = getelementptr inbounds i8, %Objptr %r14141, i32 0
	%r14143 = bitcast %Objptr %r14142 to %Objptr*
	store %Objptr %r14137, %Objptr* %r14143
	; CW64 (<Frontier>)  = 0x37
	%r14144 = load %Pointer, %Pointer* %frontier
	%r14145 = bitcast %Pointer %r14144 to %Word64*
	store %Word64 55, %Word64* %r14145
	; RQ(28): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r14146 = load %Pointer, %Pointer* %frontier
	%r14148 = ptrtoint %Pointer %r14146 to %uintptr_t
	%r14149 = add %uintptr_t %r14148, 8
	%r14147 = inttoptr %uintptr_t %r14149 to %Pointer
	store %CPointer %r14147, %CPointer* %regQ_28
	; SP(32): Objptr (opt_27)  = Cast (RQ(28): CPointer, Objptr (opt_27))
	%r14150 = load %CPointer, %CPointer* %regQ_28
	%r14151 = bitcast %CPointer %r14150 to %Objptr
	%r14152 = load %Pointer, %Pointer* %stackTop
	%r14153 = getelementptr inbounds i8, %Pointer %r14152, i32 32
	%r14154 = bitcast %Pointer %r14153 to %Objptr*
	store %Objptr %r14151, %Objptr* %r14154
	; <Frontier>  = CPointer_add (<Frontier>, 0x10)
	%r14155 = load %Pointer, %Pointer* %frontier
	%r14157 = ptrtoint %Pointer %r14155 to %uintptr_t
	%r14158 = add %uintptr_t %r14157, 16
	%r14156 = inttoptr %uintptr_t %r14158 to %Pointer
	store %Pointer %r14156, %Pointer* %frontier
	; OP (SP(32): Objptr (opt_27), 0): Objptr (opt_18)  = RP(2): Objptr (opt_18)
	%r14159 = load %Objptr, %Objptr* %regP_2
	%r14160 = load %Pointer, %Pointer* %stackTop
	%r14161 = getelementptr inbounds i8, %Pointer %r14160, i32 32
	%r14162 = bitcast %Pointer %r14161 to %Objptr*
	%r14163 = load %Objptr, %Objptr* %r14162
	%r14164 = getelementptr inbounds i8, %Objptr %r14163, i32 0
	%r14165 = bitcast %Objptr %r14164 to %Objptr*
	store %Objptr %r14159, %Objptr* %r14165
	; CW64 (<Frontier>)  = 0x1B
	%r14166 = load %Pointer, %Pointer* %frontier
	%r14167 = bitcast %Pointer %r14166 to %Word64*
	store %Word64 27, %Word64* %r14167
	; RQ(27): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r14168 = load %Pointer, %Pointer* %frontier
	%r14170 = ptrtoint %Pointer %r14168 to %uintptr_t
	%r14171 = add %uintptr_t %r14170, 8
	%r14169 = inttoptr %uintptr_t %r14171 to %Pointer
	store %CPointer %r14169, %CPointer* %regQ_27
	; RP(5): Objptr (opt_13)  = Cast (RQ(27): CPointer, Objptr (opt_13))
	%r14172 = load %CPointer, %CPointer* %regQ_27
	%r14173 = bitcast %CPointer %r14172 to %Objptr
	store %Objptr %r14173, %Objptr* %regP_5
	; <Frontier>  = CPointer_add (<Frontier>, 0x10)
	%r14174 = load %Pointer, %Pointer* %frontier
	%r14176 = ptrtoint %Pointer %r14174 to %uintptr_t
	%r14177 = add %uintptr_t %r14176, 16
	%r14175 = inttoptr %uintptr_t %r14177 to %Pointer
	store %Pointer %r14175, %Pointer* %frontier
	; OW32 (RP(5): Objptr (opt_13), 0): Word32  = 0x0
	%r14178 = load %Objptr, %Objptr* %regP_5
	%r14179 = getelementptr inbounds i8, %Objptr %r14178, i32 0
	%r14180 = bitcast %Objptr %r14179 to %Word32*
	store %Word32 0, %Word32* %r14180
	; CW64 (<Frontier>)  = 0x39
	%r14181 = load %Pointer, %Pointer* %frontier
	%r14182 = bitcast %Pointer %r14181 to %Word64*
	store %Word64 57, %Word64* %r14182
	; RQ(26): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r14183 = load %Pointer, %Pointer* %frontier
	%r14185 = ptrtoint %Pointer %r14183 to %uintptr_t
	%r14186 = add %uintptr_t %r14185, 8
	%r14184 = inttoptr %uintptr_t %r14186 to %Pointer
	store %CPointer %r14184, %CPointer* %regQ_26
	; SP(96): Objptr (opt_28)  = Cast (RQ(26): CPointer, Objptr (opt_28))
	%r14187 = load %CPointer, %CPointer* %regQ_26
	%r14188 = bitcast %CPointer %r14187 to %Objptr
	%r14189 = load %Pointer, %Pointer* %stackTop
	%r14190 = getelementptr inbounds i8, %Pointer %r14189, i32 96
	%r14191 = bitcast %Pointer %r14190 to %Objptr*
	store %Objptr %r14188, %Objptr* %r14191
	; <Frontier>  = CPointer_add (<Frontier>, 0x20)
	%r14192 = load %Pointer, %Pointer* %frontier
	%r14194 = ptrtoint %Pointer %r14192 to %uintptr_t
	%r14195 = add %uintptr_t %r14194, 32
	%r14193 = inttoptr %uintptr_t %r14195 to %Pointer
	store %Pointer %r14193, %Pointer* %frontier
	; OP (SP(96): Objptr (opt_28), 0): Objptr (opt_25)  = SP(72): Objptr (opt_25)
	%r14196 = load %Pointer, %Pointer* %stackTop
	%r14197 = getelementptr inbounds i8, %Pointer %r14196, i32 72
	%r14198 = bitcast %Pointer %r14197 to %Objptr*
	%r14199 = load %Objptr, %Objptr* %r14198
	%r14200 = load %Pointer, %Pointer* %stackTop
	%r14201 = getelementptr inbounds i8, %Pointer %r14200, i32 96
	%r14202 = bitcast %Pointer %r14201 to %Objptr*
	%r14203 = load %Objptr, %Objptr* %r14202
	%r14204 = getelementptr inbounds i8, %Objptr %r14203, i32 0
	%r14205 = bitcast %Objptr %r14204 to %Objptr*
	store %Objptr %r14199, %Objptr* %r14205
	; OP (SP(96): Objptr (opt_28), 8): Objptr (opt_26)  = SP(64): Objptr (opt_26)
	%r14206 = load %Pointer, %Pointer* %stackTop
	%r14207 = getelementptr inbounds i8, %Pointer %r14206, i32 64
	%r14208 = bitcast %Pointer %r14207 to %Objptr*
	%r14209 = load %Objptr, %Objptr* %r14208
	%r14210 = load %Pointer, %Pointer* %stackTop
	%r14211 = getelementptr inbounds i8, %Pointer %r14210, i32 96
	%r14212 = bitcast %Pointer %r14211 to %Objptr*
	%r14213 = load %Objptr, %Objptr* %r14212
	%r14214 = getelementptr inbounds i8, %Objptr %r14213, i32 8
	%r14215 = bitcast %Objptr %r14214 to %Objptr*
	store %Objptr %r14209, %Objptr* %r14215
	; OP (SP(96): Objptr (opt_28), 16): Objptr (opt_13)  = RP(5): Objptr (opt_13)
	%r14216 = load %Objptr, %Objptr* %regP_5
	%r14217 = load %Pointer, %Pointer* %stackTop
	%r14218 = getelementptr inbounds i8, %Pointer %r14217, i32 96
	%r14219 = bitcast %Pointer %r14218 to %Objptr*
	%r14220 = load %Objptr, %Objptr* %r14219
	%r14221 = getelementptr inbounds i8, %Objptr %r14220, i32 16
	%r14222 = bitcast %Objptr %r14221 to %Objptr*
	store %Objptr %r14216, %Objptr* %r14222
	; RP(0): Objptr (opt_42)  = glob {index = 17, isRoot = true, ty = Objptr (opt_42)}
	%r14223 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 17
	%r14224 = load %Objptr, %Objptr* %r14223
	store %Objptr %r14224, %Objptr* %regP_0
	; RW32(0): Word32  = 0x0
	store %Word32 0, %Word32* %regW32_0
	; Goto L_151
	br label %L_151

L_149:
	; CW64 (<Frontier>)  = 0x51
	%r14225 = load %Pointer, %Pointer* %frontier
	%r14226 = bitcast %Pointer %r14225 to %Word64*
	store %Word64 81, %Word64* %r14226
	; RQ(25): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r14227 = load %Pointer, %Pointer* %frontier
	%r14229 = ptrtoint %Pointer %r14227 to %uintptr_t
	%r14230 = add %uintptr_t %r14229, 8
	%r14228 = inttoptr %uintptr_t %r14230 to %Pointer
	store %CPointer %r14228, %CPointer* %regQ_25
	; RP(0): Objptr (opt_40)  = Cast (RQ(25): CPointer, Objptr (opt_40))
	%r14231 = load %CPointer, %CPointer* %regQ_25
	%r14232 = bitcast %CPointer %r14231 to %Objptr
	store %Objptr %r14232, %Objptr* %regP_0
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r14233 = load %Pointer, %Pointer* %frontier
	%r14235 = ptrtoint %Pointer %r14233 to %uintptr_t
	%r14236 = add %uintptr_t %r14235, 24
	%r14234 = inttoptr %uintptr_t %r14236 to %Pointer
	store %Pointer %r14234, %Pointer* %frontier
	; OP (RP(0): Objptr (opt_40), 0): Objptr (opt_11)  = SP(32): Objptr (opt_11)
	%r14237 = load %Pointer, %Pointer* %stackTop
	%r14238 = getelementptr inbounds i8, %Pointer %r14237, i32 32
	%r14239 = bitcast %Pointer %r14238 to %Objptr*
	%r14240 = load %Objptr, %Objptr* %r14239
	%r14241 = load %Objptr, %Objptr* %regP_0
	%r14242 = getelementptr inbounds i8, %Objptr %r14241, i32 0
	%r14243 = bitcast %Objptr %r14242 to %Objptr*
	store %Objptr %r14240, %Objptr* %r14243
	; OP (RP(0): Objptr (opt_40), 8): Objptr (opt_10)  = glob {index = 14, isRoot = true, ty = Objptr (opt_10)}
	%r14244 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 14
	%r14245 = load %Objptr, %Objptr* %r14244
	%r14246 = load %Objptr, %Objptr* %regP_0
	%r14247 = getelementptr inbounds i8, %Objptr %r14246, i32 8
	%r14248 = bitcast %Objptr %r14247 to %Objptr*
	store %Objptr %r14245, %Objptr* %r14248
	; RP(0): Objptr (opt_41, opt_40)  = Cast (RP(0): Objptr (opt_40), Objptr (opt_41, opt_40))
	%r14249 = load %Objptr, %Objptr* %regP_0
	%r14250 = bitcast %Objptr %r14249 to %Objptr
	store %Objptr %r14250, %Objptr* %regP_0
	; Goto L_150
	br label %L_150

L_148:
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r14251 = bitcast %struct.GC_state* @gcState to %Pointer
	%r14252 = getelementptr inbounds i8, %Pointer %r14251, i32 8
	%r14253 = bitcast %Pointer %r14252 to %CPointer*
	%r14254 = load %CPointer, %CPointer* %r14253
	%r14255 = load %Pointer, %Pointer* %frontier
	%r14257 = icmp ult %Pointer %r14254, %r14255
	%r14256 = zext i1 %r14257 to %Word32
	store %Word32 %r14256, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_149), (0x1, L_242))}
	%r14258 = load %Word32, %Word32* %regW32_0
	%r14259 = trunc %Word32 %r14258 to i1
	br i1 %r14259, label %L_242, label %L_149

loop_12:
	; RW32(0): Word32  = WordS64_lt (RW64(0): Word64, 0x1000)
	%r14260 = load %Word64, %Word64* %regW64_0
	%r14262 = icmp slt %Word64 %r14260, 4096
	%r14261 = zext i1 %r14262 to %Word32
	store %Word32 %r14261, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_148), (0x1, L_244))}
	%r14263 = load %Word32, %Word32* %regW32_0
	%r14264 = trunc %Word32 %r14263 to i1
	br i1 %r14264, label %L_244, label %L_148

L_147:
	; Push(-104)
	%r14265 = load %Pointer, %Pointer* %stackTop
	%r14266 = getelementptr inbounds i8, %Pointer %r14265, i32 -104
	store %Pointer %r14266, %Pointer* %stackTop
	%r14268 = load %Pointer, %Pointer* %stackTop
	%r14269 = getelementptr inbounds i8, %Pointer %r14268, i32 32
	%r14270 = bitcast %Pointer %r14269 to %Objptr*
	%r14267 = load %Objptr, %Objptr* @CReturnP
	store %Objptr %r14267, %Objptr* %r14270
	; RW64(0): Word64  = 0x0
	store %Word64 0, %Word64* %regW64_0
	; Goto loop_12
	br label %loop_12

L_146:
	; CCall {args = (<GCState>, 0x0, 0x1000, 0x17), frameInfo = Some {frameLayoutsIndex = 13}, func = {args = (GCState, Word64, Word64, Word64), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int64, Word64), res = Some Objptr}, return = Objptr (opt_11), symbolScope = private, target = GC_arrayAllocate}, return = Some L_147}
	; GetOperands
	%r14271 = bitcast %struct.GC_state* @gcState to %Pointer
	%r14272 = load %Pointer, %Pointer* %stackTop
	%r14273 = getelementptr inbounds i8, %Pointer %r14272, i32 96
	%r14274 = bitcast %Pointer %r14273 to %uintptr_t*
	store %uintptr_t 13, %uintptr_t* %r14274
	; Push(104)
	%r14275 = load %Pointer, %Pointer* %stackTop
	%r14276 = getelementptr inbounds i8, %Pointer %r14275, i32 104
	store %Pointer %r14276, %Pointer* %stackTop
	; FlushFrontier
	%r14277 = bitcast %struct.GC_state* @gcState to %Pointer
	%r14278 = getelementptr inbounds i8, %Pointer %r14277, i32 0
	%r14279 = bitcast %Pointer %r14278 to %Pointer*
	%r14280 = load %Pointer, %Pointer* %frontier
	store %Pointer %r14280, %Pointer* %r14279
	; FlushStackTop
	%r14281 = bitcast %struct.GC_state* @gcState to %Pointer
	%r14282 = getelementptr inbounds i8, %Pointer %r14281, i32 16
	%r14283 = bitcast %Pointer %r14282 to %Pointer*
	%r14284 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r14284, %Pointer* %r14283
	; Call
	%r14285 = call %Objptr @GC_arrayAllocate(%Pointer %r14271, %Word64 0, %Word64 4096, %Word64 23)
	store %Objptr %r14285, %Objptr* @CReturnP
	; CacheFrontier
	%r14286 = bitcast %struct.GC_state* @gcState to %Pointer
	%r14287 = getelementptr inbounds i8, %Pointer %r14286, i32 0
	%r14288 = bitcast %Pointer %r14287 to %Pointer*
	%r14289 = load %Pointer, %Pointer* %r14288
	store %Pointer %r14289, %Pointer* %frontier
	; CacheStackTop
	%r14290 = bitcast %struct.GC_state* @gcState to %Pointer
	%r14291 = getelementptr inbounds i8, %Pointer %r14290, i32 16
	%r14292 = bitcast %Pointer %r14291 to %Pointer*
	%r14293 = load %Pointer, %Pointer* %r14292
	store %Pointer %r14293, %Pointer* %stackTop
	br label %L_147

L_145:
	; CW64 (<Frontier>)  = 0x1D
	%r14294 = load %Pointer, %Pointer* %frontier
	%r14295 = bitcast %Pointer %r14294 to %Word64*
	store %Word64 29, %Word64* %r14295
	; RQ(24): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r14296 = load %Pointer, %Pointer* %frontier
	%r14298 = ptrtoint %Pointer %r14296 to %uintptr_t
	%r14299 = add %uintptr_t %r14298, 8
	%r14297 = inttoptr %uintptr_t %r14299 to %Pointer
	store %CPointer %r14297, %CPointer* %regQ_24
	; RP(1): Objptr (opt_14)  = Cast (RQ(24): CPointer, Objptr (opt_14))
	%r14300 = load %CPointer, %CPointer* %regQ_24
	%r14301 = bitcast %CPointer %r14300 to %Objptr
	store %Objptr %r14301, %Objptr* %regP_1
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r14302 = load %Pointer, %Pointer* %frontier
	%r14304 = ptrtoint %Pointer %r14302 to %uintptr_t
	%r14305 = add %uintptr_t %r14304, 24
	%r14303 = inttoptr %uintptr_t %r14305 to %Pointer
	store %Pointer %r14303, %Pointer* %frontier
	; OP (RP(1): Objptr (opt_14), 0): Objptr (opt_13)  = SP(104): Objptr (opt_13)
	%r14306 = load %Pointer, %Pointer* %stackTop
	%r14307 = getelementptr inbounds i8, %Pointer %r14306, i32 104
	%r14308 = bitcast %Pointer %r14307 to %Objptr*
	%r14309 = load %Objptr, %Objptr* %r14308
	%r14310 = load %Objptr, %Objptr* %regP_1
	%r14311 = getelementptr inbounds i8, %Objptr %r14310, i32 0
	%r14312 = bitcast %Objptr %r14311 to %Objptr*
	store %Objptr %r14309, %Objptr* %r14312
	; OP (RP(1): Objptr (opt_14), 8): Objptr (opt_12)  = RP(0): Objptr (opt_12)
	%r14313 = load %Objptr, %Objptr* %regP_0
	%r14314 = load %Objptr, %Objptr* %regP_1
	%r14315 = getelementptr inbounds i8, %Objptr %r14314, i32 8
	%r14316 = bitcast %Objptr %r14315 to %Objptr*
	store %Objptr %r14313, %Objptr* %r14316
	; CW64 (<Frontier>)  = 0x1F
	%r14317 = load %Pointer, %Pointer* %frontier
	%r14318 = bitcast %Pointer %r14317 to %Word64*
	store %Word64 31, %Word64* %r14318
	; RQ(23): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r14319 = load %Pointer, %Pointer* %frontier
	%r14321 = ptrtoint %Pointer %r14319 to %uintptr_t
	%r14322 = add %uintptr_t %r14321, 8
	%r14320 = inttoptr %uintptr_t %r14322 to %Pointer
	store %CPointer %r14320, %CPointer* %regQ_23
	; SP(16): Objptr (opt_15)  = Cast (RQ(23): CPointer, Objptr (opt_15))
	%r14323 = load %CPointer, %CPointer* %regQ_23
	%r14324 = bitcast %CPointer %r14323 to %Objptr
	%r14325 = load %Pointer, %Pointer* %stackTop
	%r14326 = getelementptr inbounds i8, %Pointer %r14325, i32 16
	%r14327 = bitcast %Pointer %r14326 to %Objptr*
	store %Objptr %r14324, %Objptr* %r14327
	; <Frontier>  = CPointer_add (<Frontier>, 0x20)
	%r14328 = load %Pointer, %Pointer* %frontier
	%r14330 = ptrtoint %Pointer %r14328 to %uintptr_t
	%r14331 = add %uintptr_t %r14330, 32
	%r14329 = inttoptr %uintptr_t %r14331 to %Pointer
	store %Pointer %r14329, %Pointer* %frontier
	; OP (SP(16): Objptr (opt_15), 0): Objptr (opt_14)  = RP(1): Objptr (opt_14)
	%r14332 = load %Objptr, %Objptr* %regP_1
	%r14333 = load %Pointer, %Pointer* %stackTop
	%r14334 = getelementptr inbounds i8, %Pointer %r14333, i32 16
	%r14335 = bitcast %Pointer %r14334 to %Objptr*
	%r14336 = load %Objptr, %Objptr* %r14335
	%r14337 = getelementptr inbounds i8, %Objptr %r14336, i32 0
	%r14338 = bitcast %Objptr %r14337 to %Objptr*
	store %Objptr %r14332, %Objptr* %r14338
	; OP (SP(16): Objptr (opt_15), 8): Objptr (opt_14)  = RP(1): Objptr (opt_14)
	%r14339 = load %Objptr, %Objptr* %regP_1
	%r14340 = load %Pointer, %Pointer* %stackTop
	%r14341 = getelementptr inbounds i8, %Pointer %r14340, i32 16
	%r14342 = bitcast %Pointer %r14341 to %Objptr*
	%r14343 = load %Objptr, %Objptr* %r14342
	%r14344 = getelementptr inbounds i8, %Objptr %r14343, i32 8
	%r14345 = bitcast %Objptr %r14344 to %Objptr*
	store %Objptr %r14339, %Objptr* %r14345
	; OP (SP(16): Objptr (opt_15), 16): Objptr (opt_3)  = glob {index = 125, isRoot = true, ty = Objptr (opt_3)}
	%r14346 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 125
	%r14347 = load %Objptr, %Objptr* %r14346
	%r14348 = load %Pointer, %Pointer* %stackTop
	%r14349 = getelementptr inbounds i8, %Pointer %r14348, i32 16
	%r14350 = bitcast %Pointer %r14349 to %Objptr*
	%r14351 = load %Objptr, %Objptr* %r14350
	%r14352 = getelementptr inbounds i8, %Objptr %r14351, i32 16
	%r14353 = bitcast %Objptr %r14352 to %Objptr*
	store %Objptr %r14347, %Objptr* %r14353
	; CW64 (<Frontier>)  = 0x23
	%r14354 = load %Pointer, %Pointer* %frontier
	%r14355 = bitcast %Pointer %r14354 to %Word64*
	store %Word64 35, %Word64* %r14355
	; RQ(22): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r14356 = load %Pointer, %Pointer* %frontier
	%r14358 = ptrtoint %Pointer %r14356 to %uintptr_t
	%r14359 = add %uintptr_t %r14358, 8
	%r14357 = inttoptr %uintptr_t %r14359 to %Pointer
	store %CPointer %r14357, %CPointer* %regQ_22
	; SP(24): Objptr (opt_17)  = Cast (RQ(22): CPointer, Objptr (opt_17))
	%r14360 = load %CPointer, %CPointer* %regQ_22
	%r14361 = bitcast %CPointer %r14360 to %Objptr
	%r14362 = load %Pointer, %Pointer* %stackTop
	%r14363 = getelementptr inbounds i8, %Pointer %r14362, i32 24
	%r14364 = bitcast %Pointer %r14363 to %Objptr*
	store %Objptr %r14361, %Objptr* %r14364
	; <Frontier>  = CPointer_add (<Frontier>, 0x8)
	%r14365 = load %Pointer, %Pointer* %frontier
	%r14367 = ptrtoint %Pointer %r14365 to %uintptr_t
	%r14368 = add %uintptr_t %r14367, 8
	%r14366 = inttoptr %uintptr_t %r14368 to %Pointer
	store %Pointer %r14366, %Pointer* %frontier
	; switch {test = SW8(96): [Word1, Bits7], default = None, cases = ((0x0, L_146), (0x1, L_245))}
	%r14369 = load %Pointer, %Pointer* %stackTop
	%r14370 = getelementptr inbounds i8, %Pointer %r14369, i32 96
	%r14371 = bitcast %Pointer %r14370 to %Word8*
	%r14372 = load %Word8, %Word8* %r14371
	%r14373 = trunc %Word8 %r14372 to i1
	br i1 %r14373, label %L_245, label %L_146

L_144:
	; RW32(0): Word32  = Word32_add (OW32 (<GCState>, 68): Word32, 0xFFFFFFFF)
	%r14374 = bitcast %struct.GC_state* @gcState to %Pointer
	%r14375 = getelementptr inbounds i8, %Pointer %r14374, i32 68
	%r14376 = bitcast %Pointer %r14375 to %Word32*
	%r14377 = load %Word32, %Word32* %r14376
	%r14378 = add %Word32 %r14377, 4294967295
	store %Word32 %r14378, %Word32* %regW32_0
	; OW32 (<GCState>, 68): Word32  = RW32(0): Word32
	%r14379 = load %Word32, %Word32* %regW32_0
	%r14380 = bitcast %struct.GC_state* @gcState to %Pointer
	%r14381 = getelementptr inbounds i8, %Pointer %r14380, i32 68
	%r14382 = bitcast %Pointer %r14381 to %Word32*
	store %Word32 %r14379, %Word32* %r14382
	; OW64 (SP(16): Objptr (opt_12), 0): Word64  = RW64(0): Word64
	%r14383 = load %Word64, %Word64* %regW64_0
	%r14384 = load %Pointer, %Pointer* %stackTop
	%r14385 = getelementptr inbounds i8, %Pointer %r14384, i32 16
	%r14386 = bitcast %Pointer %r14385 to %Objptr*
	%r14387 = load %Objptr, %Objptr* %r14386
	%r14388 = getelementptr inbounds i8, %Objptr %r14387, i32 0
	%r14389 = bitcast %Objptr %r14388 to %Word64*
	store %Word64 %r14383, %Word64* %r14389
	; RP(0): Objptr (opt_12)  = SP(16): Objptr (opt_12)
	%r14390 = load %Pointer, %Pointer* %stackTop
	%r14391 = getelementptr inbounds i8, %Pointer %r14390, i32 16
	%r14392 = bitcast %Pointer %r14391 to %Objptr*
	%r14393 = load %Objptr, %Objptr* %r14392
	store %Objptr %r14393, %Objptr* %regP_0
	; Goto L_145
	br label %L_145

L_143:
	; RW32(0): Word32  = OW32 (<GCState>, 68): Word32
	%r14394 = bitcast %struct.GC_state* @gcState to %Pointer
	%r14395 = getelementptr inbounds i8, %Pointer %r14394, i32 68
	%r14396 = bitcast %Pointer %r14395 to %Word32*
	%r14397 = load %Word32, %Word32* %r14396
	store %Word32 %r14397, %Word32* %regW32_0
	; RW32(1): Word32  = Word32_equal (RW32(0): Word32, 0x0)
	%r14398 = load %Word32, %Word32* %regW32_0
	%r14400 = icmp eq %Word32 %r14398, 0
	%r14399 = zext i1 %r14400 to %Word32
	store %Word32 %r14399, %Word32* %regW32_1
	; switch {test = RW32(1): Word32, default = None, cases = ((0x0, L_144), (0x1, L_252))}
	%r14401 = load %Word32, %Word32* %regW32_1
	%r14402 = trunc %Word32 %r14401 to i1
	br i1 %r14402, label %L_252, label %L_144

L_142:
	%r14403 = load %Word64, %Word64* @CReturnW64
	store %Word64 %r14403, %Word64* %regW64_0
	; RW32(0): Word32  = Word64_equal (RW64(0): Word64, 0xFFFFFFFFFFFFFFFF)
	%r14404 = load %Word64, %Word64* %regW64_0
	%r14406 = icmp eq %Word64 %r14404, 18446744073709551615
	%r14405 = zext i1 %r14406 to %Word32
	store %Word32 %r14405, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_143), (0x1, L_253))}
	%r14407 = load %Word32, %Word32* %regW32_0
	%r14408 = trunc %Word32 %r14407 to i1
	br i1 %r14408, label %L_253, label %L_143

L_141:
	; CCall {args = (0x1, 0x0, 0x1), frameInfo = None, func = {args = (Word32, Word64, Word32), convention = cdecl, kind = Impure, prototype = {args = (Int32, Int64, Int32), res = Some Int64}, return = Word64, symbolScope = private, target = Posix_IO_lseek}, return = Some L_142}
	; GetOperands
	; Call
	%r14409 = call %Word64 @Posix_IO_lseek(%Word32 1, %Word64 0, %Word32 1)
	store %Word64 %r14409, %Word64* @CReturnW64
	br label %L_142

L_140:
	; RW32(0): Word32  = Word32_add (OW32 (<GCState>, 68): Word32, 0x1)
	%r14410 = bitcast %struct.GC_state* @gcState to %Pointer
	%r14411 = getelementptr inbounds i8, %Pointer %r14410, i32 68
	%r14412 = bitcast %Pointer %r14411 to %Word32*
	%r14413 = load %Word32, %Word32* %r14412
	%r14414 = add %Word32 %r14413, 1
	store %Word32 %r14414, %Word32* %regW32_0
	; OW32 (<GCState>, 68): Word32  = RW32(0): Word32
	%r14415 = load %Word32, %Word32* %regW32_0
	%r14416 = bitcast %struct.GC_state* @gcState to %Pointer
	%r14417 = getelementptr inbounds i8, %Pointer %r14416, i32 68
	%r14418 = bitcast %Pointer %r14417 to %Word32*
	store %Word32 %r14415, %Word32* %r14418
	; RW32(1): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r14419 = bitcast %struct.GC_state* @gcState to %Pointer
	%r14420 = getelementptr inbounds i8, %Pointer %r14419, i32 8
	%r14421 = bitcast %Pointer %r14420 to %CPointer*
	%r14422 = load %CPointer, %CPointer* %r14421
	%r14423 = load %Pointer, %Pointer* %frontier
	%r14425 = icmp ult %Pointer %r14422, %r14423
	%r14424 = zext i1 %r14425 to %Word32
	store %Word32 %r14424, %Word32* %regW32_1
	; switch {test = RW32(1): Word32, default = None, cases = ((0x0, L_141), (0x1, L_276))}
	%r14426 = load %Word32, %Word32* %regW32_1
	%r14427 = trunc %Word32 %r14426 to i1
	br i1 %r14427, label %L_276, label %L_141

L_139:
	%r14428 = load %Word32, %Word32* @CReturnW32
	store %Word32 %r14428, %Word32* %regW32_0
	; RW32(1): Word32  = Word32_equal (RW32(0): Word32, 0x0)
	%r14429 = load %Word32, %Word32* %regW32_0
	%r14431 = icmp eq %Word32 %r14429, 0
	%r14430 = zext i1 %r14431 to %Word32
	store %Word32 %r14430, %Word32* %regW32_1
	; switch {test = RW32(1): Word32, default = None, cases = ((0x0, L_140), (0x1, L_278))}
	%r14432 = load %Word32, %Word32* %regW32_1
	%r14433 = trunc %Word32 %r14432 to i1
	br i1 %r14433, label %L_278, label %L_140

L_138:
	; CCall {args = (SW32(100): Word32), frameInfo = None, func = {args = (Word32), convention = cdecl, kind = Impure, prototype = {args = (Word32), res = Some Int32}, return = Word32, symbolScope = private, target = Posix_FileSys_ST_isReg}, return = Some L_139}
	; GetOperands
	%r14434 = load %Pointer, %Pointer* %stackTop
	%r14435 = getelementptr inbounds i8, %Pointer %r14434, i32 100
	%r14436 = bitcast %Pointer %r14435 to %Word32*
	%r14437 = load %Word32, %Word32* %r14436
	; Call
	%r14438 = call %Word32 @Posix_FileSys_ST_isReg(%Word32 %r14437)
	store %Word32 %r14438, %Word32* @CReturnW32
	br label %L_139

L_137:
	; RW32(0): Word32  = Word32_add (OW32 (<GCState>, 68): Word32, 0xFFFFFFFF)
	%r14439 = bitcast %struct.GC_state* @gcState to %Pointer
	%r14440 = getelementptr inbounds i8, %Pointer %r14439, i32 68
	%r14441 = bitcast %Pointer %r14440 to %Word32*
	%r14442 = load %Word32, %Word32* %r14441
	%r14443 = add %Word32 %r14442, 4294967295
	store %Word32 %r14443, %Word32* %regW32_0
	; OW32 (<GCState>, 68): Word32  = RW32(0): Word32
	%r14444 = load %Word32, %Word32* %regW32_0
	%r14445 = bitcast %struct.GC_state* @gcState to %Pointer
	%r14446 = getelementptr inbounds i8, %Pointer %r14445, i32 68
	%r14447 = bitcast %Pointer %r14446 to %Word32*
	store %Word32 %r14444, %Word32* %r14447
	; RW32(1): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r14448 = bitcast %struct.GC_state* @gcState to %Pointer
	%r14449 = getelementptr inbounds i8, %Pointer %r14448, i32 8
	%r14450 = bitcast %Pointer %r14449 to %CPointer*
	%r14451 = load %CPointer, %CPointer* %r14450
	%r14452 = load %Pointer, %Pointer* %frontier
	%r14454 = icmp ult %Pointer %r14451, %r14452
	%r14453 = zext i1 %r14454 to %Word32
	store %Word32 %r14453, %Word32* %regW32_1
	; switch {test = RW32(1): Word32, default = None, cases = ((0x0, L_138), (0x1, L_279))}
	%r14455 = load %Word32, %Word32* %regW32_1
	%r14456 = trunc %Word32 %r14455 to i1
	br i1 %r14456, label %L_279, label %L_138

L_136:
	; RW32(0): Word32  = OW32 (<GCState>, 68): Word32
	%r14457 = bitcast %struct.GC_state* @gcState to %Pointer
	%r14458 = getelementptr inbounds i8, %Pointer %r14457, i32 68
	%r14459 = bitcast %Pointer %r14458 to %Word32*
	%r14460 = load %Word32, %Word32* %r14459
	store %Word32 %r14460, %Word32* %regW32_0
	; RW32(1): Word32  = Word32_equal (RW32(0): Word32, 0x0)
	%r14461 = load %Word32, %Word32* %regW32_0
	%r14463 = icmp eq %Word32 %r14461, 0
	%r14462 = zext i1 %r14463 to %Word32
	store %Word32 %r14462, %Word32* %regW32_1
	; switch {test = RW32(1): Word32, default = None, cases = ((0x0, L_137), (0x1, L_281))}
	%r14464 = load %Word32, %Word32* %regW32_1
	%r14465 = trunc %Word32 %r14464 to i1
	br i1 %r14465, label %L_281, label %L_137

L_135:
	; Goto L_136
	br label %L_136

L_134:
	; Arith {prim = WordS64_addCheck, args = (RW64(0): Word64, 0x1), dst = RW64(1): Word64, overflow = L_66, success = L_135}
	%r14466 = load %Word64, %Word64* %regW64_0
	%r14467 = call {%Word64, i1} @llvm.sadd.with.overflow.i64(%Word64 %r14466, %Word64 1)
	%r14468 = extractvalue {%Word64, i1} %r14467, 0
	%r14469 = extractvalue {%Word64, i1} %r14467, 1
	store %Word64 %r14468, %Word64* %regW64_1
	br i1 %r14469, label %L_66, label %L_135

L_133:
	; RW64(0): Word64  = 0x1
	store %Word64 1, %Word64* %regW64_0
	; Goto L_134
	br label %L_134

numLimbs_2:
	; RW64(0): Word64  = Word64_andb (Cast (RP(0): Objptr (opt_6), Word64), 0x1)
	%r14470 = load %Objptr, %Objptr* %regP_0
	%r14471 = ptrtoint %Objptr %r14470 to %Word64
	%r14472 = and %Word64 %r14471, 1
	store %Word64 %r14472, %Word64* %regW64_0
	; RW32(0): Word32  = Word64_equal (RW64(0): Word64, 0x0)
	%r14473 = load %Word64, %Word64* %regW64_0
	%r14475 = icmp eq %Word64 %r14473, 0
	%r14474 = zext i1 %r14475 to %Word32
	store %Word32 %r14474, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_133), (0x1, L_282))}
	%r14476 = load %Word32, %Word32* %regW32_0
	%r14477 = trunc %Word32 %r14476 to i1
	br i1 %r14477, label %L_282, label %L_133

L_132:
	; RW64(0): Word64  = WordS64_rshift (Cast (RP(0): Objptr (opt_6), Word64), 0x1)
	%r14478 = load %Objptr, %Objptr* %regP_0
	%r14479 = ptrtoint %Objptr %r14478 to %Word64
	%r14480 = zext %Word32 1 to %Word64
	%r14481 = ashr %Word64 %r14479, %r14480
	store %Word64 %r14481, %Word64* %regW64_0
	; Arith {prim = WordS64_mulCheck, args = (RW64(0): Word64, 0x3B9ACA00), dst = RW64(1): Word64, overflow = numLimbs_2, success = L_284}
	%r14482 = load %Word64, %Word64* %regW64_0
	%r14483 = call {%Word64, i1} @llvm.smul.with.overflow.i64(%Word64 %r14482, %Word64 1000000000)
	%r14484 = extractvalue {%Word64, i1} %r14483, 0
	%r14485 = extractvalue {%Word64, i1} %r14483, 1
	store %Word64 %r14484, %Word64* %regW64_1
	br i1 %r14485, label %numLimbs_2, label %L_284

L_131:
	; RW64(0): Word64  = Word64_andb (Cast (RP(0): Objptr (opt_6), Word64), 0x77359401)
	%r14486 = load %Objptr, %Objptr* %regP_0
	%r14487 = ptrtoint %Objptr %r14486 to %Word64
	%r14488 = and %Word64 %r14487, 2000000001
	store %Word64 %r14488, %Word64* %regW64_0
	; RW64(1): Word64  = Word64_andb (RW64(0): Word64, 0x1)
	%r14489 = load %Word64, %Word64* %regW64_0
	%r14490 = and %Word64 %r14489, 1
	store %Word64 %r14490, %Word64* %regW64_1
	; RW32(0): Word32  = Word64_equal (RW64(1): Word64, 0x0)
	%r14491 = load %Word64, %Word64* %regW64_1
	%r14493 = icmp eq %Word64 %r14491, 0
	%r14492 = zext i1 %r14493 to %Word32
	store %Word32 %r14492, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_132), (0x1, L_287))}
	%r14494 = load %Word32, %Word32* %regW32_0
	%r14495 = trunc %Word32 %r14494 to i1
	br i1 %r14495, label %L_287, label %L_132

L_130:
	; OW64 (RP(0): Objptr (opt_22), ~8): Word64  = 0xD
	%r14496 = load %Objptr, %Objptr* %regP_0
	%r14497 = getelementptr inbounds i8, %Objptr %r14496, i32 -8
	%r14498 = bitcast %Objptr %r14497 to %Word64*
	store %Word64 13, %Word64* %r14498
	; RP(0): Objptr (opt_6)  = Cast (RP(0): Objptr (opt_22), Objptr (opt_6))
	%r14499 = load %Objptr, %Objptr* %regP_0
	%r14500 = bitcast %Objptr %r14499 to %Objptr
	store %Objptr %r14500, %Objptr* %regP_0
	; Goto L_131
	br label %L_131

L_129:
	; RP(0): Objptr (opt_22)  = RP(2): Objptr (opt_22)
	%r14501 = load %Objptr, %Objptr* %regP_2
	store %Objptr %r14501, %Objptr* %regP_0
	; Goto L_130
	br label %L_130

L_128:
	; RP(1): Objptr (opt_46)  = OP (RP(0): Objptr (opt_46), 8): Objptr (opt_46)
	%r14502 = load %Objptr, %Objptr* %regP_0
	%r14503 = getelementptr inbounds i8, %Objptr %r14502, i32 8
	%r14504 = bitcast %Objptr %r14503 to %Objptr*
	%r14505 = load %Objptr, %Objptr* %r14504
	store %Objptr %r14505, %Objptr* %regP_1
	; RP(3): Objptr (opt_8)  = OP (RP(0): Objptr (opt_46), 0): Objptr (opt_8)
	%r14506 = load %Objptr, %Objptr* %regP_0
	%r14507 = getelementptr inbounds i8, %Objptr %r14506, i32 0
	%r14508 = bitcast %Objptr %r14507 to %Objptr*
	%r14509 = load %Objptr, %Objptr* %r14508
	store %Objptr %r14509, %Objptr* %regP_3
	; RP(0): Objptr (opt_46)  = RP(1): Objptr (opt_46)
	%r14510 = load %Objptr, %Objptr* %regP_1
	store %Objptr %r14510, %Objptr* %regP_0
	; RP(1): Objptr (opt_8)  = RP(3): Objptr (opt_8)
	%r14511 = load %Objptr, %Objptr* %regP_3
	store %Objptr %r14511, %Objptr* %regP_1
	; Goto L_127
	br label %L_127

L_127:
	; RW64(0): Word64  = OW64 (RP(1): Objptr (opt_8), 0): Word64
	%r14512 = load %Objptr, %Objptr* %regP_1
	%r14513 = getelementptr inbounds i8, %Objptr %r14512, i32 0
	%r14514 = bitcast %Objptr %r14513 to %Word64*
	%r14515 = load %Word64, %Word64* %r14514
	store %Word64 %r14515, %Word64* %regW64_0
	; RW64(1): Word64  = OW64 (RP(1): Objptr (opt_8), 8): Word64
	%r14516 = load %Objptr, %Objptr* %regP_1
	%r14517 = getelementptr inbounds i8, %Objptr %r14516, i32 8
	%r14518 = bitcast %Objptr %r14517 to %Word64*
	%r14519 = load %Word64, %Word64* %r14518
	store %Word64 %r14519, %Word64* %regW64_1
	; XW64 (RP(2): Objptr (opt_22), RW64(1): Word64, 8, 0): Word64  = RW64(0): Word64
	%r14520 = load %Word64, %Word64* %regW64_0
	%r14521 = load %Objptr, %Objptr* %regP_2
	%r14522 = load %Word64, %Word64* %regW64_1
	%r14523 = mul nsw %Word64 %r14522, 8
	%r14524 = add nsw %Word64 %r14523, 0
	%r14525 = getelementptr inbounds i8, %Objptr %r14521, %Word64 %r14524
	%r14526 = bitcast %Objptr %r14525 to %Word64*
	store %Word64 %r14520, %Word64* %r14526
	; switch {test = Cast (RP(0): Objptr (opt_46), Bits64), default = Some L_128, cases = ((0x1, L_129))}
	%r14527 = load %Objptr, %Objptr* %regP_0
	%r14528 = ptrtoint %Objptr %r14527 to %Word64
	switch %Word64 %r14528, label %L_128 [
		%Word64 1, label %L_129
	]

L_126:
	; RP(1): Objptr (opt_46)  = OP (SP(112): Objptr (opt_46), 8): Objptr (opt_46)
	%r14529 = load %Pointer, %Pointer* %stackTop
	%r14530 = getelementptr inbounds i8, %Pointer %r14529, i32 112
	%r14531 = bitcast %Pointer %r14530 to %Objptr*
	%r14532 = load %Objptr, %Objptr* %r14531
	%r14533 = getelementptr inbounds i8, %Objptr %r14532, i32 8
	%r14534 = bitcast %Objptr %r14533 to %Objptr*
	%r14535 = load %Objptr, %Objptr* %r14534
	store %Objptr %r14535, %Objptr* %regP_1
	; RP(2): Objptr (opt_8)  = OP (SP(112): Objptr (opt_46), 0): Objptr (opt_8)
	%r14536 = load %Pointer, %Pointer* %stackTop
	%r14537 = getelementptr inbounds i8, %Pointer %r14536, i32 112
	%r14538 = bitcast %Pointer %r14537 to %Objptr*
	%r14539 = load %Objptr, %Objptr* %r14538
	%r14540 = getelementptr inbounds i8, %Objptr %r14539, i32 0
	%r14541 = bitcast %Objptr %r14540 to %Objptr*
	%r14542 = load %Objptr, %Objptr* %r14541
	store %Objptr %r14542, %Objptr* %regP_2
	; RP(10): Objptr (opt_8)  = RP(2): Objptr (opt_8)
	%r14543 = load %Objptr, %Objptr* %regP_2
	store %Objptr %r14543, %Objptr* %regP_10
	; RP(2): Objptr (opt_22)  = RP(0): Objptr (opt_22)
	%r14544 = load %Objptr, %Objptr* %regP_0
	store %Objptr %r14544, %Objptr* %regP_2
	; RP(0): Objptr (opt_46)  = RP(1): Objptr (opt_46)
	%r14545 = load %Objptr, %Objptr* %regP_1
	store %Objptr %r14545, %Objptr* %regP_0
	; RP(1): Objptr (opt_8)  = RP(10): Objptr (opt_8)
	%r14546 = load %Objptr, %Objptr* %regP_10
	store %Objptr %r14546, %Objptr* %regP_1
	; Goto L_127
	br label %L_127

L_125:
	; Push(-128)
	%r14547 = load %Pointer, %Pointer* %stackTop
	%r14548 = getelementptr inbounds i8, %Pointer %r14547, i32 -128
	store %Pointer %r14548, %Pointer* %stackTop
	%r14549 = load %Objptr, %Objptr* @CReturnP
	store %Objptr %r14549, %Objptr* %regP_0
	; switch {test = Cast (SP(112): Objptr (opt_46), Bits64), default = Some L_126, cases = ((0x1, L_288))}
	%r14550 = load %Pointer, %Pointer* %stackTop
	%r14551 = getelementptr inbounds i8, %Pointer %r14550, i32 112
	%r14552 = bitcast %Pointer %r14551 to %Objptr*
	%r14553 = load %Objptr, %Objptr* %r14552
	%r14554 = ptrtoint %Objptr %r14553 to %Word64
	switch %Word64 %r14554, label %L_126 [
		%Word64 1, label %L_288
	]

L_124:
	; CCall {args = (<GCState>, 0x0, SW64(120): Word64, 0x2D), frameInfo = Some {frameLayoutsIndex = 12}, func = {args = (GCState, Word64, Word64, Word64), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int64, Word64), res = Some Objptr}, return = Objptr (opt_22), symbolScope = private, target = GC_arrayAllocate}, return = Some L_125}
	; GetOperands
	%r14555 = bitcast %struct.GC_state* @gcState to %Pointer
	%r14556 = load %Pointer, %Pointer* %stackTop
	%r14557 = getelementptr inbounds i8, %Pointer %r14556, i32 120
	%r14558 = bitcast %Pointer %r14557 to %Word64*
	%r14559 = load %Word64, %Word64* %r14558
	%r14560 = load %Pointer, %Pointer* %stackTop
	%r14561 = getelementptr inbounds i8, %Pointer %r14560, i32 120
	%r14562 = bitcast %Pointer %r14561 to %uintptr_t*
	store %uintptr_t 12, %uintptr_t* %r14562
	; Push(128)
	%r14563 = load %Pointer, %Pointer* %stackTop
	%r14564 = getelementptr inbounds i8, %Pointer %r14563, i32 128
	store %Pointer %r14564, %Pointer* %stackTop
	; FlushFrontier
	%r14565 = bitcast %struct.GC_state* @gcState to %Pointer
	%r14566 = getelementptr inbounds i8, %Pointer %r14565, i32 0
	%r14567 = bitcast %Pointer %r14566 to %Pointer*
	%r14568 = load %Pointer, %Pointer* %frontier
	store %Pointer %r14568, %Pointer* %r14567
	; FlushStackTop
	%r14569 = bitcast %struct.GC_state* @gcState to %Pointer
	%r14570 = getelementptr inbounds i8, %Pointer %r14569, i32 16
	%r14571 = bitcast %Pointer %r14570 to %Pointer*
	%r14572 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r14572, %Pointer* %r14571
	; Call
	%r14573 = call %Objptr @GC_arrayAllocate(%Pointer %r14555, %Word64 0, %Word64 %r14559, %Word64 45)
	store %Objptr %r14573, %Objptr* @CReturnP
	; CacheFrontier
	%r14574 = bitcast %struct.GC_state* @gcState to %Pointer
	%r14575 = getelementptr inbounds i8, %Pointer %r14574, i32 0
	%r14576 = bitcast %Pointer %r14575 to %Pointer*
	%r14577 = load %Pointer, %Pointer* %r14576
	store %Pointer %r14577, %Pointer* %frontier
	; CacheStackTop
	%r14578 = bitcast %struct.GC_state* @gcState to %Pointer
	%r14579 = getelementptr inbounds i8, %Pointer %r14578, i32 16
	%r14580 = bitcast %Pointer %r14579 to %Pointer*
	%r14581 = load %Pointer, %Pointer* %r14580
	store %Pointer %r14581, %Pointer* %stackTop
	br label %L_125

L_123:
	; RW32(0): Word32  = Word64_equal (0x0, SW64(120): Word64)
	%r14582 = load %Pointer, %Pointer* %stackTop
	%r14583 = getelementptr inbounds i8, %Pointer %r14582, i32 120
	%r14584 = bitcast %Pointer %r14583 to %Word64*
	%r14585 = load %Word64, %Word64* %r14584
	%r14587 = icmp eq %Word64 0, %r14585
	%r14586 = zext i1 %r14587 to %Word32
	store %Word32 %r14586, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_124), (0x1, L_289))}
	%r14588 = load %Word32, %Word32* %regW32_0
	%r14589 = trunc %Word32 %r14588 to i1
	br i1 %r14589, label %L_289, label %L_124

L_122:
	; CW64 (<Frontier>)  = 0x11
	%r14590 = load %Pointer, %Pointer* %frontier
	%r14591 = bitcast %Pointer %r14590 to %Word64*
	store %Word64 17, %Word64* %r14591
	; RQ(21): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r14592 = load %Pointer, %Pointer* %frontier
	%r14594 = ptrtoint %Pointer %r14592 to %uintptr_t
	%r14595 = add %uintptr_t %r14594, 8
	%r14593 = inttoptr %uintptr_t %r14595 to %Pointer
	store %CPointer %r14593, %CPointer* %regQ_21
	; RP(0): Objptr (opt_8)  = Cast (RQ(21): CPointer, Objptr (opt_8))
	%r14596 = load %CPointer, %CPointer* %regQ_21
	%r14597 = bitcast %CPointer %r14596 to %Objptr
	store %Objptr %r14597, %Objptr* %regP_0
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r14598 = load %Pointer, %Pointer* %frontier
	%r14600 = ptrtoint %Pointer %r14598 to %uintptr_t
	%r14601 = add %uintptr_t %r14600, 24
	%r14599 = inttoptr %uintptr_t %r14601 to %Pointer
	store %Pointer %r14599, %Pointer* %frontier
	; OW64 (RP(0): Objptr (opt_8), 0): Word64  = SW64(128): Word64
	%r14602 = load %Pointer, %Pointer* %stackTop
	%r14603 = getelementptr inbounds i8, %Pointer %r14602, i32 128
	%r14604 = bitcast %Pointer %r14603 to %Word64*
	%r14605 = load %Word64, %Word64* %r14604
	%r14606 = load %Objptr, %Objptr* %regP_0
	%r14607 = getelementptr inbounds i8, %Objptr %r14606, i32 0
	%r14608 = bitcast %Objptr %r14607 to %Word64*
	store %Word64 %r14605, %Word64* %r14608
	; OW64 (RP(0): Objptr (opt_8), 8): Word64  = SW64(120): Word64
	%r14609 = load %Pointer, %Pointer* %stackTop
	%r14610 = getelementptr inbounds i8, %Pointer %r14609, i32 120
	%r14611 = bitcast %Pointer %r14610 to %Word64*
	%r14612 = load %Word64, %Word64* %r14611
	%r14613 = load %Objptr, %Objptr* %regP_0
	%r14614 = getelementptr inbounds i8, %Objptr %r14613, i32 8
	%r14615 = bitcast %Objptr %r14614 to %Word64*
	store %Word64 %r14612, %Word64* %r14615
	; CW64 (<Frontier>)  = 0x5D
	%r14616 = load %Pointer, %Pointer* %frontier
	%r14617 = bitcast %Pointer %r14616 to %Word64*
	store %Word64 93, %Word64* %r14617
	; RQ(20): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r14618 = load %Pointer, %Pointer* %frontier
	%r14620 = ptrtoint %Pointer %r14618 to %uintptr_t
	%r14621 = add %uintptr_t %r14620, 8
	%r14619 = inttoptr %uintptr_t %r14621 to %Pointer
	store %CPointer %r14619, %CPointer* %regQ_20
	; RP(1): Objptr (opt_46)  = Cast (RQ(20): CPointer, Objptr (opt_46))
	%r14622 = load %CPointer, %CPointer* %regQ_20
	%r14623 = bitcast %CPointer %r14622 to %Objptr
	store %Objptr %r14623, %Objptr* %regP_1
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r14624 = load %Pointer, %Pointer* %frontier
	%r14626 = ptrtoint %Pointer %r14624 to %uintptr_t
	%r14627 = add %uintptr_t %r14626, 24
	%r14625 = inttoptr %uintptr_t %r14627 to %Pointer
	store %Pointer %r14625, %Pointer* %frontier
	; OP (RP(1): Objptr (opt_46), 0): Objptr (opt_8)  = RP(0): Objptr (opt_8)
	%r14628 = load %Objptr, %Objptr* %regP_0
	%r14629 = load %Objptr, %Objptr* %regP_1
	%r14630 = getelementptr inbounds i8, %Objptr %r14629, i32 0
	%r14631 = bitcast %Objptr %r14630 to %Objptr*
	store %Objptr %r14628, %Objptr* %r14631
	; OP (RP(1): Objptr (opt_46), 8): Objptr (opt_46)  = SP(112): Objptr (opt_46)
	%r14632 = load %Pointer, %Pointer* %stackTop
	%r14633 = getelementptr inbounds i8, %Pointer %r14632, i32 112
	%r14634 = bitcast %Pointer %r14633 to %Objptr*
	%r14635 = load %Objptr, %Objptr* %r14634
	%r14636 = load %Objptr, %Objptr* %regP_1
	%r14637 = getelementptr inbounds i8, %Objptr %r14636, i32 8
	%r14638 = bitcast %Objptr %r14637 to %Objptr*
	store %Objptr %r14635, %Objptr* %r14638
	; SP(112): Objptr (opt_46)  = RP(1): Objptr (opt_46)
	%r14639 = load %Objptr, %Objptr* %regP_1
	%r14640 = load %Pointer, %Pointer* %stackTop
	%r14641 = getelementptr inbounds i8, %Pointer %r14640, i32 112
	%r14642 = bitcast %Pointer %r14641 to %Objptr*
	store %Objptr %r14639, %Objptr* %r14642
	; SW64(120): Word64  = RW64(0): Word64
	%r14643 = load %Word64, %Word64* %regW64_0
	%r14644 = load %Pointer, %Pointer* %stackTop
	%r14645 = getelementptr inbounds i8, %Pointer %r14644, i32 120
	%r14646 = bitcast %Pointer %r14645 to %Word64*
	store %Word64 %r14643, %Word64* %r14646
	; SW64(128): Word64  = 0x0
	%r14647 = load %Pointer, %Pointer* %stackTop
	%r14648 = getelementptr inbounds i8, %Pointer %r14647, i32 128
	%r14649 = bitcast %Pointer %r14648 to %Word64*
	store %Word64 0, %Word64* %r14649
	; Goto loop_11
	br label %loop_11

L_121:
	; Arith {prim = WordS64_addCheck, args = (SW64(120): Word64, 0x1), dst = RW64(0): Word64, overflow = L_66, success = L_122}
	%r14650 = load %Pointer, %Pointer* %stackTop
	%r14651 = getelementptr inbounds i8, %Pointer %r14650, i32 120
	%r14652 = bitcast %Pointer %r14651 to %Word64*
	%r14653 = load %Word64, %Word64* %r14652
	%r14654 = call {%Word64, i1} @llvm.sadd.with.overflow.i64(%Word64 %r14653, %Word64 1)
	%r14655 = extractvalue {%Word64, i1} %r14654, 0
	%r14656 = extractvalue {%Word64, i1} %r14654, 1
	store %Word64 %r14655, %Word64* %regW64_0
	br i1 %r14656, label %L_66, label %L_122

L_120:
	; RW32(0): Word32  = Word64_equal (SW64(128): Word64, 0x0)
	%r14657 = load %Pointer, %Pointer* %stackTop
	%r14658 = getelementptr inbounds i8, %Pointer %r14657, i32 128
	%r14659 = bitcast %Pointer %r14658 to %Word64*
	%r14660 = load %Word64, %Word64* %r14659
	%r14662 = icmp eq %Word64 %r14660, 0
	%r14661 = zext i1 %r14662 to %Word32
	store %Word32 %r14661, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_121), (0x1, L_123))}
	%r14663 = load %Word32, %Word32* %regW32_0
	%r14664 = trunc %Word32 %r14663 to i1
	br i1 %r14664, label %L_123, label %L_121

loop_11:
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r14665 = bitcast %struct.GC_state* @gcState to %Pointer
	%r14666 = getelementptr inbounds i8, %Pointer %r14665, i32 8
	%r14667 = bitcast %Pointer %r14666 to %CPointer*
	%r14668 = load %CPointer, %CPointer* %r14667
	%r14669 = load %Pointer, %Pointer* %frontier
	%r14671 = icmp ult %Pointer %r14668, %r14669
	%r14670 = zext i1 %r14671 to %Word32
	store %Word32 %r14670, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_120), (0x1, L_292))}
	%r14672 = load %Word32, %Word32* %regW32_0
	%r14673 = trunc %Word32 %r14672 to i1
	br i1 %r14673, label %L_292, label %L_120

L_119:
	; SP(112): Objptr (opt_46)  = glob {index = 0, isRoot = true, ty = Objptr (opt_46)}
	%r14674 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 0
	%r14675 = load %Objptr, %Objptr* %r14674
	%r14676 = load %Pointer, %Pointer* %stackTop
	%r14677 = getelementptr inbounds i8, %Pointer %r14676, i32 112
	%r14678 = bitcast %Pointer %r14677 to %Objptr*
	store %Objptr %r14675, %Objptr* %r14678
	; SW64(120): Word64  = 0x1
	%r14679 = load %Pointer, %Pointer* %stackTop
	%r14680 = getelementptr inbounds i8, %Pointer %r14679, i32 120
	%r14681 = bitcast %Pointer %r14680 to %Word64*
	store %Word64 1, %Word64* %r14681
	; SW64(128): Word64  = RW64(0): Word64
	%r14682 = load %Word64, %Word64* %regW64_0
	%r14683 = load %Pointer, %Pointer* %stackTop
	%r14684 = getelementptr inbounds i8, %Pointer %r14683, i32 128
	%r14685 = bitcast %Pointer %r14684 to %Word64*
	store %Word64 %r14682, %Word64* %r14685
	; Goto loop_11
	br label %loop_11

L_118:
	; RW32(0): Word32  = WordS64_lt (RW64(0): Word64, 0x0)
	%r14686 = load %Word64, %Word64* %regW64_0
	%r14688 = icmp slt %Word64 %r14686, 0
	%r14687 = zext i1 %r14688 to %Word32
	store %Word32 %r14687, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_119), (0x1, L_294))}
	%r14689 = load %Word32, %Word32* %regW32_0
	%r14690 = trunc %Word32 %r14689 to i1
	br i1 %r14690, label %L_294, label %L_119

L_117:
	; RW32(0): Word32  = Word64_equal (RW64(1): Word64, 0xFFFFFFFFFFFFFFFF)
	%r14691 = load %Word64, %Word64* %regW64_1
	%r14693 = icmp eq %Word64 %r14691, 18446744073709551615
	%r14692 = zext i1 %r14693 to %Word32
	store %Word32 %r14692, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_118), (0x1, L_295))}
	%r14694 = load %Word32, %Word32* %regW32_0
	%r14695 = trunc %Word32 %r14694 to i1
	br i1 %r14695, label %L_295, label %L_118

L_116:
	%r14696 = load %Word64, %Word64* @CReturnW64
	store %Word64 %r14696, %Word64* %regW64_0
	; RW64(1): Word64  = WordS64_rshift (RW64(0): Word64, 0x3E)
	%r14697 = load %Word64, %Word64* %regW64_0
	%r14698 = zext %Word32 62 to %Word64
	%r14699 = ashr %Word64 %r14697, %r14698
	store %Word64 %r14699, %Word64* %regW64_1
	; RW32(0): Word32  = Word64_equal (RW64(1): Word64, 0x0)
	%r14700 = load %Word64, %Word64* %regW64_1
	%r14702 = icmp eq %Word64 %r14700, 0
	%r14701 = zext i1 %r14702 to %Word32
	store %Word32 %r14701, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_117), (0x1, L_297))}
	%r14703 = load %Word32, %Word32* %regW32_0
	%r14704 = trunc %Word32 %r14703 to i1
	br i1 %r14704, label %L_297, label %L_117

L_115:
	; CCall {args = (), frameInfo = None, func = {args = (), convention = cdecl, kind = Impure, prototype = {args = (), res = Some Int64}, return = Word64, symbolScope = private, target = Posix_FileSys_Stat_getCTime}, return = Some L_116}
	; GetOperands
	; Call
	%r14705 = call %Word64 @Posix_FileSys_Stat_getCTime()
	store %Word64 %r14705, %Word64* @CReturnW64
	br label %L_116

L_114:
	; Goto L_115
	br label %L_115

L_113:
	; Arith {prim = WordS64_addCheck, args = (RW64(0): Word64, 0x1), dst = RW64(1): Word64, overflow = L_66, success = L_114}
	%r14706 = load %Word64, %Word64* %regW64_0
	%r14707 = call {%Word64, i1} @llvm.sadd.with.overflow.i64(%Word64 %r14706, %Word64 1)
	%r14708 = extractvalue {%Word64, i1} %r14707, 0
	%r14709 = extractvalue {%Word64, i1} %r14707, 1
	store %Word64 %r14708, %Word64* %regW64_1
	br i1 %r14709, label %L_66, label %L_114

L_112:
	; RW64(0): Word64  = 0x1
	store %Word64 1, %Word64* %regW64_0
	; Goto L_113
	br label %L_113

numLimbs_1:
	; RW64(0): Word64  = Word64_andb (Cast (RP(0): Objptr (opt_6), Word64), 0x1)
	%r14710 = load %Objptr, %Objptr* %regP_0
	%r14711 = ptrtoint %Objptr %r14710 to %Word64
	%r14712 = and %Word64 %r14711, 1
	store %Word64 %r14712, %Word64* %regW64_0
	; RW32(0): Word32  = Word64_equal (RW64(0): Word64, 0x0)
	%r14713 = load %Word64, %Word64* %regW64_0
	%r14715 = icmp eq %Word64 %r14713, 0
	%r14714 = zext i1 %r14715 to %Word32
	store %Word32 %r14714, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_112), (0x1, L_298))}
	%r14716 = load %Word32, %Word32* %regW32_0
	%r14717 = trunc %Word32 %r14716 to i1
	br i1 %r14717, label %L_298, label %L_112

L_111:
	; RW64(0): Word64  = WordS64_rshift (Cast (RP(0): Objptr (opt_6), Word64), 0x1)
	%r14718 = load %Objptr, %Objptr* %regP_0
	%r14719 = ptrtoint %Objptr %r14718 to %Word64
	%r14720 = zext %Word32 1 to %Word64
	%r14721 = ashr %Word64 %r14719, %r14720
	store %Word64 %r14721, %Word64* %regW64_0
	; Arith {prim = WordS64_mulCheck, args = (RW64(0): Word64, 0x3B9ACA00), dst = RW64(1): Word64, overflow = numLimbs_1, success = L_300}
	%r14722 = load %Word64, %Word64* %regW64_0
	%r14723 = call {%Word64, i1} @llvm.smul.with.overflow.i64(%Word64 %r14722, %Word64 1000000000)
	%r14724 = extractvalue {%Word64, i1} %r14723, 0
	%r14725 = extractvalue {%Word64, i1} %r14723, 1
	store %Word64 %r14724, %Word64* %regW64_1
	br i1 %r14725, label %numLimbs_1, label %L_300

L_110:
	; RW64(0): Word64  = Word64_andb (Cast (RP(0): Objptr (opt_6), Word64), 0x77359401)
	%r14726 = load %Objptr, %Objptr* %regP_0
	%r14727 = ptrtoint %Objptr %r14726 to %Word64
	%r14728 = and %Word64 %r14727, 2000000001
	store %Word64 %r14728, %Word64* %regW64_0
	; RW64(1): Word64  = Word64_andb (RW64(0): Word64, 0x1)
	%r14729 = load %Word64, %Word64* %regW64_0
	%r14730 = and %Word64 %r14729, 1
	store %Word64 %r14730, %Word64* %regW64_1
	; RW32(0): Word32  = Word64_equal (RW64(1): Word64, 0x0)
	%r14731 = load %Word64, %Word64* %regW64_1
	%r14733 = icmp eq %Word64 %r14731, 0
	%r14732 = zext i1 %r14733 to %Word32
	store %Word32 %r14732, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_111), (0x1, L_303))}
	%r14734 = load %Word32, %Word32* %regW32_0
	%r14735 = trunc %Word32 %r14734 to i1
	br i1 %r14735, label %L_303, label %L_111

L_109:
	; OW64 (RP(0): Objptr (opt_22), ~8): Word64  = 0xD
	%r14736 = load %Objptr, %Objptr* %regP_0
	%r14737 = getelementptr inbounds i8, %Objptr %r14736, i32 -8
	%r14738 = bitcast %Objptr %r14737 to %Word64*
	store %Word64 13, %Word64* %r14738
	; RP(0): Objptr (opt_6)  = Cast (RP(0): Objptr (opt_22), Objptr (opt_6))
	%r14739 = load %Objptr, %Objptr* %regP_0
	%r14740 = bitcast %Objptr %r14739 to %Objptr
	store %Objptr %r14740, %Objptr* %regP_0
	; Goto L_110
	br label %L_110

L_108:
	; RP(0): Objptr (opt_22)  = RP(2): Objptr (opt_22)
	%r14741 = load %Objptr, %Objptr* %regP_2
	store %Objptr %r14741, %Objptr* %regP_0
	; Goto L_109
	br label %L_109

L_107:
	; RP(1): Objptr (opt_46)  = OP (RP(0): Objptr (opt_46), 8): Objptr (opt_46)
	%r14742 = load %Objptr, %Objptr* %regP_0
	%r14743 = getelementptr inbounds i8, %Objptr %r14742, i32 8
	%r14744 = bitcast %Objptr %r14743 to %Objptr*
	%r14745 = load %Objptr, %Objptr* %r14744
	store %Objptr %r14745, %Objptr* %regP_1
	; RP(3): Objptr (opt_8)  = OP (RP(0): Objptr (opt_46), 0): Objptr (opt_8)
	%r14746 = load %Objptr, %Objptr* %regP_0
	%r14747 = getelementptr inbounds i8, %Objptr %r14746, i32 0
	%r14748 = bitcast %Objptr %r14747 to %Objptr*
	%r14749 = load %Objptr, %Objptr* %r14748
	store %Objptr %r14749, %Objptr* %regP_3
	; RP(0): Objptr (opt_46)  = RP(1): Objptr (opt_46)
	%r14750 = load %Objptr, %Objptr* %regP_1
	store %Objptr %r14750, %Objptr* %regP_0
	; RP(1): Objptr (opt_8)  = RP(3): Objptr (opt_8)
	%r14751 = load %Objptr, %Objptr* %regP_3
	store %Objptr %r14751, %Objptr* %regP_1
	; Goto L_106
	br label %L_106

L_106:
	; RW64(0): Word64  = OW64 (RP(1): Objptr (opt_8), 0): Word64
	%r14752 = load %Objptr, %Objptr* %regP_1
	%r14753 = getelementptr inbounds i8, %Objptr %r14752, i32 0
	%r14754 = bitcast %Objptr %r14753 to %Word64*
	%r14755 = load %Word64, %Word64* %r14754
	store %Word64 %r14755, %Word64* %regW64_0
	; RW64(1): Word64  = OW64 (RP(1): Objptr (opt_8), 8): Word64
	%r14756 = load %Objptr, %Objptr* %regP_1
	%r14757 = getelementptr inbounds i8, %Objptr %r14756, i32 8
	%r14758 = bitcast %Objptr %r14757 to %Word64*
	%r14759 = load %Word64, %Word64* %r14758
	store %Word64 %r14759, %Word64* %regW64_1
	; XW64 (RP(2): Objptr (opt_22), RW64(1): Word64, 8, 0): Word64  = RW64(0): Word64
	%r14760 = load %Word64, %Word64* %regW64_0
	%r14761 = load %Objptr, %Objptr* %regP_2
	%r14762 = load %Word64, %Word64* %regW64_1
	%r14763 = mul nsw %Word64 %r14762, 8
	%r14764 = add nsw %Word64 %r14763, 0
	%r14765 = getelementptr inbounds i8, %Objptr %r14761, %Word64 %r14764
	%r14766 = bitcast %Objptr %r14765 to %Word64*
	store %Word64 %r14760, %Word64* %r14766
	; switch {test = Cast (RP(0): Objptr (opt_46), Bits64), default = Some L_107, cases = ((0x1, L_108))}
	%r14767 = load %Objptr, %Objptr* %regP_0
	%r14768 = ptrtoint %Objptr %r14767 to %Word64
	switch %Word64 %r14768, label %L_107 [
		%Word64 1, label %L_108
	]

L_105:
	; RP(1): Objptr (opt_46)  = OP (SP(112): Objptr (opt_46), 8): Objptr (opt_46)
	%r14769 = load %Pointer, %Pointer* %stackTop
	%r14770 = getelementptr inbounds i8, %Pointer %r14769, i32 112
	%r14771 = bitcast %Pointer %r14770 to %Objptr*
	%r14772 = load %Objptr, %Objptr* %r14771
	%r14773 = getelementptr inbounds i8, %Objptr %r14772, i32 8
	%r14774 = bitcast %Objptr %r14773 to %Objptr*
	%r14775 = load %Objptr, %Objptr* %r14774
	store %Objptr %r14775, %Objptr* %regP_1
	; RP(2): Objptr (opt_8)  = OP (SP(112): Objptr (opt_46), 0): Objptr (opt_8)
	%r14776 = load %Pointer, %Pointer* %stackTop
	%r14777 = getelementptr inbounds i8, %Pointer %r14776, i32 112
	%r14778 = bitcast %Pointer %r14777 to %Objptr*
	%r14779 = load %Objptr, %Objptr* %r14778
	%r14780 = getelementptr inbounds i8, %Objptr %r14779, i32 0
	%r14781 = bitcast %Objptr %r14780 to %Objptr*
	%r14782 = load %Objptr, %Objptr* %r14781
	store %Objptr %r14782, %Objptr* %regP_2
	; RP(9): Objptr (opt_8)  = RP(2): Objptr (opt_8)
	%r14783 = load %Objptr, %Objptr* %regP_2
	store %Objptr %r14783, %Objptr* %regP_9
	; RP(2): Objptr (opt_22)  = RP(0): Objptr (opt_22)
	%r14784 = load %Objptr, %Objptr* %regP_0
	store %Objptr %r14784, %Objptr* %regP_2
	; RP(0): Objptr (opt_46)  = RP(1): Objptr (opt_46)
	%r14785 = load %Objptr, %Objptr* %regP_1
	store %Objptr %r14785, %Objptr* %regP_0
	; RP(1): Objptr (opt_8)  = RP(9): Objptr (opt_8)
	%r14786 = load %Objptr, %Objptr* %regP_9
	store %Objptr %r14786, %Objptr* %regP_1
	; Goto L_106
	br label %L_106

L_104:
	; Push(-128)
	%r14787 = load %Pointer, %Pointer* %stackTop
	%r14788 = getelementptr inbounds i8, %Pointer %r14787, i32 -128
	store %Pointer %r14788, %Pointer* %stackTop
	%r14789 = load %Objptr, %Objptr* @CReturnP
	store %Objptr %r14789, %Objptr* %regP_0
	; switch {test = Cast (SP(112): Objptr (opt_46), Bits64), default = Some L_105, cases = ((0x1, L_304))}
	%r14790 = load %Pointer, %Pointer* %stackTop
	%r14791 = getelementptr inbounds i8, %Pointer %r14790, i32 112
	%r14792 = bitcast %Pointer %r14791 to %Objptr*
	%r14793 = load %Objptr, %Objptr* %r14792
	%r14794 = ptrtoint %Objptr %r14793 to %Word64
	switch %Word64 %r14794, label %L_105 [
		%Word64 1, label %L_304
	]

L_103:
	; CCall {args = (<GCState>, 0x0, SW64(120): Word64, 0x2D), frameInfo = Some {frameLayoutsIndex = 11}, func = {args = (GCState, Word64, Word64, Word64), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int64, Word64), res = Some Objptr}, return = Objptr (opt_22), symbolScope = private, target = GC_arrayAllocate}, return = Some L_104}
	; GetOperands
	%r14795 = bitcast %struct.GC_state* @gcState to %Pointer
	%r14796 = load %Pointer, %Pointer* %stackTop
	%r14797 = getelementptr inbounds i8, %Pointer %r14796, i32 120
	%r14798 = bitcast %Pointer %r14797 to %Word64*
	%r14799 = load %Word64, %Word64* %r14798
	%r14800 = load %Pointer, %Pointer* %stackTop
	%r14801 = getelementptr inbounds i8, %Pointer %r14800, i32 120
	%r14802 = bitcast %Pointer %r14801 to %uintptr_t*
	store %uintptr_t 11, %uintptr_t* %r14802
	; Push(128)
	%r14803 = load %Pointer, %Pointer* %stackTop
	%r14804 = getelementptr inbounds i8, %Pointer %r14803, i32 128
	store %Pointer %r14804, %Pointer* %stackTop
	; FlushFrontier
	%r14805 = bitcast %struct.GC_state* @gcState to %Pointer
	%r14806 = getelementptr inbounds i8, %Pointer %r14805, i32 0
	%r14807 = bitcast %Pointer %r14806 to %Pointer*
	%r14808 = load %Pointer, %Pointer* %frontier
	store %Pointer %r14808, %Pointer* %r14807
	; FlushStackTop
	%r14809 = bitcast %struct.GC_state* @gcState to %Pointer
	%r14810 = getelementptr inbounds i8, %Pointer %r14809, i32 16
	%r14811 = bitcast %Pointer %r14810 to %Pointer*
	%r14812 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r14812, %Pointer* %r14811
	; Call
	%r14813 = call %Objptr @GC_arrayAllocate(%Pointer %r14795, %Word64 0, %Word64 %r14799, %Word64 45)
	store %Objptr %r14813, %Objptr* @CReturnP
	; CacheFrontier
	%r14814 = bitcast %struct.GC_state* @gcState to %Pointer
	%r14815 = getelementptr inbounds i8, %Pointer %r14814, i32 0
	%r14816 = bitcast %Pointer %r14815 to %Pointer*
	%r14817 = load %Pointer, %Pointer* %r14816
	store %Pointer %r14817, %Pointer* %frontier
	; CacheStackTop
	%r14818 = bitcast %struct.GC_state* @gcState to %Pointer
	%r14819 = getelementptr inbounds i8, %Pointer %r14818, i32 16
	%r14820 = bitcast %Pointer %r14819 to %Pointer*
	%r14821 = load %Pointer, %Pointer* %r14820
	store %Pointer %r14821, %Pointer* %stackTop
	br label %L_104

L_102:
	; RW32(0): Word32  = Word64_equal (0x0, SW64(120): Word64)
	%r14822 = load %Pointer, %Pointer* %stackTop
	%r14823 = getelementptr inbounds i8, %Pointer %r14822, i32 120
	%r14824 = bitcast %Pointer %r14823 to %Word64*
	%r14825 = load %Word64, %Word64* %r14824
	%r14827 = icmp eq %Word64 0, %r14825
	%r14826 = zext i1 %r14827 to %Word32
	store %Word32 %r14826, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_103), (0x1, L_305))}
	%r14828 = load %Word32, %Word32* %regW32_0
	%r14829 = trunc %Word32 %r14828 to i1
	br i1 %r14829, label %L_305, label %L_103

L_101:
	; CW64 (<Frontier>)  = 0x11
	%r14830 = load %Pointer, %Pointer* %frontier
	%r14831 = bitcast %Pointer %r14830 to %Word64*
	store %Word64 17, %Word64* %r14831
	; RQ(19): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r14832 = load %Pointer, %Pointer* %frontier
	%r14834 = ptrtoint %Pointer %r14832 to %uintptr_t
	%r14835 = add %uintptr_t %r14834, 8
	%r14833 = inttoptr %uintptr_t %r14835 to %Pointer
	store %CPointer %r14833, %CPointer* %regQ_19
	; RP(0): Objptr (opt_8)  = Cast (RQ(19): CPointer, Objptr (opt_8))
	%r14836 = load %CPointer, %CPointer* %regQ_19
	%r14837 = bitcast %CPointer %r14836 to %Objptr
	store %Objptr %r14837, %Objptr* %regP_0
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r14838 = load %Pointer, %Pointer* %frontier
	%r14840 = ptrtoint %Pointer %r14838 to %uintptr_t
	%r14841 = add %uintptr_t %r14840, 24
	%r14839 = inttoptr %uintptr_t %r14841 to %Pointer
	store %Pointer %r14839, %Pointer* %frontier
	; OW64 (RP(0): Objptr (opt_8), 0): Word64  = SW64(128): Word64
	%r14842 = load %Pointer, %Pointer* %stackTop
	%r14843 = getelementptr inbounds i8, %Pointer %r14842, i32 128
	%r14844 = bitcast %Pointer %r14843 to %Word64*
	%r14845 = load %Word64, %Word64* %r14844
	%r14846 = load %Objptr, %Objptr* %regP_0
	%r14847 = getelementptr inbounds i8, %Objptr %r14846, i32 0
	%r14848 = bitcast %Objptr %r14847 to %Word64*
	store %Word64 %r14845, %Word64* %r14848
	; OW64 (RP(0): Objptr (opt_8), 8): Word64  = SW64(120): Word64
	%r14849 = load %Pointer, %Pointer* %stackTop
	%r14850 = getelementptr inbounds i8, %Pointer %r14849, i32 120
	%r14851 = bitcast %Pointer %r14850 to %Word64*
	%r14852 = load %Word64, %Word64* %r14851
	%r14853 = load %Objptr, %Objptr* %regP_0
	%r14854 = getelementptr inbounds i8, %Objptr %r14853, i32 8
	%r14855 = bitcast %Objptr %r14854 to %Word64*
	store %Word64 %r14852, %Word64* %r14855
	; CW64 (<Frontier>)  = 0x5D
	%r14856 = load %Pointer, %Pointer* %frontier
	%r14857 = bitcast %Pointer %r14856 to %Word64*
	store %Word64 93, %Word64* %r14857
	; RQ(18): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r14858 = load %Pointer, %Pointer* %frontier
	%r14860 = ptrtoint %Pointer %r14858 to %uintptr_t
	%r14861 = add %uintptr_t %r14860, 8
	%r14859 = inttoptr %uintptr_t %r14861 to %Pointer
	store %CPointer %r14859, %CPointer* %regQ_18
	; RP(1): Objptr (opt_46)  = Cast (RQ(18): CPointer, Objptr (opt_46))
	%r14862 = load %CPointer, %CPointer* %regQ_18
	%r14863 = bitcast %CPointer %r14862 to %Objptr
	store %Objptr %r14863, %Objptr* %regP_1
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r14864 = load %Pointer, %Pointer* %frontier
	%r14866 = ptrtoint %Pointer %r14864 to %uintptr_t
	%r14867 = add %uintptr_t %r14866, 24
	%r14865 = inttoptr %uintptr_t %r14867 to %Pointer
	store %Pointer %r14865, %Pointer* %frontier
	; OP (RP(1): Objptr (opt_46), 0): Objptr (opt_8)  = RP(0): Objptr (opt_8)
	%r14868 = load %Objptr, %Objptr* %regP_0
	%r14869 = load %Objptr, %Objptr* %regP_1
	%r14870 = getelementptr inbounds i8, %Objptr %r14869, i32 0
	%r14871 = bitcast %Objptr %r14870 to %Objptr*
	store %Objptr %r14868, %Objptr* %r14871
	; OP (RP(1): Objptr (opt_46), 8): Objptr (opt_46)  = SP(112): Objptr (opt_46)
	%r14872 = load %Pointer, %Pointer* %stackTop
	%r14873 = getelementptr inbounds i8, %Pointer %r14872, i32 112
	%r14874 = bitcast %Pointer %r14873 to %Objptr*
	%r14875 = load %Objptr, %Objptr* %r14874
	%r14876 = load %Objptr, %Objptr* %regP_1
	%r14877 = getelementptr inbounds i8, %Objptr %r14876, i32 8
	%r14878 = bitcast %Objptr %r14877 to %Objptr*
	store %Objptr %r14875, %Objptr* %r14878
	; SP(112): Objptr (opt_46)  = RP(1): Objptr (opt_46)
	%r14879 = load %Objptr, %Objptr* %regP_1
	%r14880 = load %Pointer, %Pointer* %stackTop
	%r14881 = getelementptr inbounds i8, %Pointer %r14880, i32 112
	%r14882 = bitcast %Pointer %r14881 to %Objptr*
	store %Objptr %r14879, %Objptr* %r14882
	; SW64(120): Word64  = RW64(0): Word64
	%r14883 = load %Word64, %Word64* %regW64_0
	%r14884 = load %Pointer, %Pointer* %stackTop
	%r14885 = getelementptr inbounds i8, %Pointer %r14884, i32 120
	%r14886 = bitcast %Pointer %r14885 to %Word64*
	store %Word64 %r14883, %Word64* %r14886
	; SW64(128): Word64  = 0x0
	%r14887 = load %Pointer, %Pointer* %stackTop
	%r14888 = getelementptr inbounds i8, %Pointer %r14887, i32 128
	%r14889 = bitcast %Pointer %r14888 to %Word64*
	store %Word64 0, %Word64* %r14889
	; Goto loop_10
	br label %loop_10

L_100:
	; Arith {prim = WordS64_addCheck, args = (SW64(120): Word64, 0x1), dst = RW64(0): Word64, overflow = L_66, success = L_101}
	%r14890 = load %Pointer, %Pointer* %stackTop
	%r14891 = getelementptr inbounds i8, %Pointer %r14890, i32 120
	%r14892 = bitcast %Pointer %r14891 to %Word64*
	%r14893 = load %Word64, %Word64* %r14892
	%r14894 = call {%Word64, i1} @llvm.sadd.with.overflow.i64(%Word64 %r14893, %Word64 1)
	%r14895 = extractvalue {%Word64, i1} %r14894, 0
	%r14896 = extractvalue {%Word64, i1} %r14894, 1
	store %Word64 %r14895, %Word64* %regW64_0
	br i1 %r14896, label %L_66, label %L_101

L_99:
	; RW32(0): Word32  = Word64_equal (SW64(128): Word64, 0x0)
	%r14897 = load %Pointer, %Pointer* %stackTop
	%r14898 = getelementptr inbounds i8, %Pointer %r14897, i32 128
	%r14899 = bitcast %Pointer %r14898 to %Word64*
	%r14900 = load %Word64, %Word64* %r14899
	%r14902 = icmp eq %Word64 %r14900, 0
	%r14901 = zext i1 %r14902 to %Word32
	store %Word32 %r14901, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_100), (0x1, L_102))}
	%r14903 = load %Word32, %Word32* %regW32_0
	%r14904 = trunc %Word32 %r14903 to i1
	br i1 %r14904, label %L_102, label %L_100

loop_10:
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r14905 = bitcast %struct.GC_state* @gcState to %Pointer
	%r14906 = getelementptr inbounds i8, %Pointer %r14905, i32 8
	%r14907 = bitcast %Pointer %r14906 to %CPointer*
	%r14908 = load %CPointer, %CPointer* %r14907
	%r14909 = load %Pointer, %Pointer* %frontier
	%r14911 = icmp ult %Pointer %r14908, %r14909
	%r14910 = zext i1 %r14911 to %Word32
	store %Word32 %r14910, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_99), (0x1, L_308))}
	%r14912 = load %Word32, %Word32* %regW32_0
	%r14913 = trunc %Word32 %r14912 to i1
	br i1 %r14913, label %L_308, label %L_99

L_98:
	; SP(112): Objptr (opt_46)  = glob {index = 0, isRoot = true, ty = Objptr (opt_46)}
	%r14914 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 0
	%r14915 = load %Objptr, %Objptr* %r14914
	%r14916 = load %Pointer, %Pointer* %stackTop
	%r14917 = getelementptr inbounds i8, %Pointer %r14916, i32 112
	%r14918 = bitcast %Pointer %r14917 to %Objptr*
	store %Objptr %r14915, %Objptr* %r14918
	; SW64(120): Word64  = 0x1
	%r14919 = load %Pointer, %Pointer* %stackTop
	%r14920 = getelementptr inbounds i8, %Pointer %r14919, i32 120
	%r14921 = bitcast %Pointer %r14920 to %Word64*
	store %Word64 1, %Word64* %r14921
	; SW64(128): Word64  = RW64(0): Word64
	%r14922 = load %Word64, %Word64* %regW64_0
	%r14923 = load %Pointer, %Pointer* %stackTop
	%r14924 = getelementptr inbounds i8, %Pointer %r14923, i32 128
	%r14925 = bitcast %Pointer %r14924 to %Word64*
	store %Word64 %r14922, %Word64* %r14925
	; Goto loop_10
	br label %loop_10

L_97:
	; RW32(0): Word32  = WordS64_lt (RW64(0): Word64, 0x0)
	%r14926 = load %Word64, %Word64* %regW64_0
	%r14928 = icmp slt %Word64 %r14926, 0
	%r14927 = zext i1 %r14928 to %Word32
	store %Word32 %r14927, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_98), (0x1, L_310))}
	%r14929 = load %Word32, %Word32* %regW32_0
	%r14930 = trunc %Word32 %r14929 to i1
	br i1 %r14930, label %L_310, label %L_98

L_96:
	; RW32(0): Word32  = Word64_equal (RW64(1): Word64, 0xFFFFFFFFFFFFFFFF)
	%r14931 = load %Word64, %Word64* %regW64_1
	%r14933 = icmp eq %Word64 %r14931, 18446744073709551615
	%r14932 = zext i1 %r14933 to %Word32
	store %Word32 %r14932, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_97), (0x1, L_311))}
	%r14934 = load %Word32, %Word32* %regW32_0
	%r14935 = trunc %Word32 %r14934 to i1
	br i1 %r14935, label %L_311, label %L_97

L_95:
	%r14936 = load %Word64, %Word64* @CReturnW64
	store %Word64 %r14936, %Word64* %regW64_0
	; RW64(1): Word64  = WordS64_rshift (RW64(0): Word64, 0x3E)
	%r14937 = load %Word64, %Word64* %regW64_0
	%r14938 = zext %Word32 62 to %Word64
	%r14939 = ashr %Word64 %r14937, %r14938
	store %Word64 %r14939, %Word64* %regW64_1
	; RW32(0): Word32  = Word64_equal (RW64(1): Word64, 0x0)
	%r14940 = load %Word64, %Word64* %regW64_1
	%r14942 = icmp eq %Word64 %r14940, 0
	%r14941 = zext i1 %r14942 to %Word32
	store %Word32 %r14941, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_96), (0x1, L_313))}
	%r14943 = load %Word32, %Word32* %regW32_0
	%r14944 = trunc %Word32 %r14943 to i1
	br i1 %r14944, label %L_313, label %L_96

L_94:
	; CCall {args = (), frameInfo = None, func = {args = (), convention = cdecl, kind = Impure, prototype = {args = (), res = Some Int64}, return = Word64, symbolScope = private, target = Posix_FileSys_Stat_getMTime}, return = Some L_95}
	; GetOperands
	; Call
	%r14945 = call %Word64 @Posix_FileSys_Stat_getMTime()
	store %Word64 %r14945, %Word64* @CReturnW64
	br label %L_95

L_93:
	; Goto L_94
	br label %L_94

L_92:
	; Arith {prim = WordS64_addCheck, args = (RW64(0): Word64, 0x1), dst = RW64(1): Word64, overflow = L_66, success = L_93}
	%r14946 = load %Word64, %Word64* %regW64_0
	%r14947 = call {%Word64, i1} @llvm.sadd.with.overflow.i64(%Word64 %r14946, %Word64 1)
	%r14948 = extractvalue {%Word64, i1} %r14947, 0
	%r14949 = extractvalue {%Word64, i1} %r14947, 1
	store %Word64 %r14948, %Word64* %regW64_1
	br i1 %r14949, label %L_66, label %L_93

L_91:
	; RW64(0): Word64  = 0x1
	store %Word64 1, %Word64* %regW64_0
	; Goto L_92
	br label %L_92

numLimbs_0:
	; RW64(0): Word64  = Word64_andb (Cast (RP(0): Objptr (opt_6), Word64), 0x1)
	%r14950 = load %Objptr, %Objptr* %regP_0
	%r14951 = ptrtoint %Objptr %r14950 to %Word64
	%r14952 = and %Word64 %r14951, 1
	store %Word64 %r14952, %Word64* %regW64_0
	; RW32(0): Word32  = Word64_equal (RW64(0): Word64, 0x0)
	%r14953 = load %Word64, %Word64* %regW64_0
	%r14955 = icmp eq %Word64 %r14953, 0
	%r14954 = zext i1 %r14955 to %Word32
	store %Word32 %r14954, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_91), (0x1, L_314))}
	%r14956 = load %Word32, %Word32* %regW32_0
	%r14957 = trunc %Word32 %r14956 to i1
	br i1 %r14957, label %L_314, label %L_91

L_90:
	; RW64(0): Word64  = WordS64_rshift (Cast (RP(0): Objptr (opt_6), Word64), 0x1)
	%r14958 = load %Objptr, %Objptr* %regP_0
	%r14959 = ptrtoint %Objptr %r14958 to %Word64
	%r14960 = zext %Word32 1 to %Word64
	%r14961 = ashr %Word64 %r14959, %r14960
	store %Word64 %r14961, %Word64* %regW64_0
	; Arith {prim = WordS64_mulCheck, args = (RW64(0): Word64, 0x3B9ACA00), dst = RW64(1): Word64, overflow = numLimbs_0, success = L_316}
	%r14962 = load %Word64, %Word64* %regW64_0
	%r14963 = call {%Word64, i1} @llvm.smul.with.overflow.i64(%Word64 %r14962, %Word64 1000000000)
	%r14964 = extractvalue {%Word64, i1} %r14963, 0
	%r14965 = extractvalue {%Word64, i1} %r14963, 1
	store %Word64 %r14964, %Word64* %regW64_1
	br i1 %r14965, label %numLimbs_0, label %L_316

L_89:
	; RW64(0): Word64  = Word64_andb (0x77359401, Cast (RP(0): Objptr (opt_6), Word64))
	%r14966 = load %Objptr, %Objptr* %regP_0
	%r14967 = ptrtoint %Objptr %r14966 to %Word64
	%r14968 = and %Word64 2000000001, %r14967
	store %Word64 %r14968, %Word64* %regW64_0
	; RW64(1): Word64  = Word64_andb (RW64(0): Word64, 0x1)
	%r14969 = load %Word64, %Word64* %regW64_0
	%r14970 = and %Word64 %r14969, 1
	store %Word64 %r14970, %Word64* %regW64_1
	; RW32(0): Word32  = Word64_equal (RW64(1): Word64, 0x0)
	%r14971 = load %Word64, %Word64* %regW64_1
	%r14973 = icmp eq %Word64 %r14971, 0
	%r14972 = zext i1 %r14973 to %Word32
	store %Word32 %r14972, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_90), (0x1, L_319))}
	%r14974 = load %Word32, %Word32* %regW32_0
	%r14975 = trunc %Word32 %r14974 to i1
	br i1 %r14975, label %L_319, label %L_90

L_88:
	; OW64 (RP(0): Objptr (opt_22), ~8): Word64  = 0xD
	%r14976 = load %Objptr, %Objptr* %regP_0
	%r14977 = getelementptr inbounds i8, %Objptr %r14976, i32 -8
	%r14978 = bitcast %Objptr %r14977 to %Word64*
	store %Word64 13, %Word64* %r14978
	; RP(0): Objptr (opt_6)  = Cast (RP(0): Objptr (opt_22), Objptr (opt_6))
	%r14979 = load %Objptr, %Objptr* %regP_0
	%r14980 = bitcast %Objptr %r14979 to %Objptr
	store %Objptr %r14980, %Objptr* %regP_0
	; Goto L_89
	br label %L_89

L_87:
	; RP(0): Objptr (opt_22)  = RP(2): Objptr (opt_22)
	%r14981 = load %Objptr, %Objptr* %regP_2
	store %Objptr %r14981, %Objptr* %regP_0
	; Goto L_88
	br label %L_88

L_86:
	; RP(1): Objptr (opt_46)  = OP (RP(0): Objptr (opt_46), 8): Objptr (opt_46)
	%r14982 = load %Objptr, %Objptr* %regP_0
	%r14983 = getelementptr inbounds i8, %Objptr %r14982, i32 8
	%r14984 = bitcast %Objptr %r14983 to %Objptr*
	%r14985 = load %Objptr, %Objptr* %r14984
	store %Objptr %r14985, %Objptr* %regP_1
	; RP(3): Objptr (opt_8)  = OP (RP(0): Objptr (opt_46), 0): Objptr (opt_8)
	%r14986 = load %Objptr, %Objptr* %regP_0
	%r14987 = getelementptr inbounds i8, %Objptr %r14986, i32 0
	%r14988 = bitcast %Objptr %r14987 to %Objptr*
	%r14989 = load %Objptr, %Objptr* %r14988
	store %Objptr %r14989, %Objptr* %regP_3
	; RP(0): Objptr (opt_46)  = RP(1): Objptr (opt_46)
	%r14990 = load %Objptr, %Objptr* %regP_1
	store %Objptr %r14990, %Objptr* %regP_0
	; RP(1): Objptr (opt_8)  = RP(3): Objptr (opt_8)
	%r14991 = load %Objptr, %Objptr* %regP_3
	store %Objptr %r14991, %Objptr* %regP_1
	; Goto L_85
	br label %L_85

L_85:
	; RW64(0): Word64  = OW64 (RP(1): Objptr (opt_8), 0): Word64
	%r14992 = load %Objptr, %Objptr* %regP_1
	%r14993 = getelementptr inbounds i8, %Objptr %r14992, i32 0
	%r14994 = bitcast %Objptr %r14993 to %Word64*
	%r14995 = load %Word64, %Word64* %r14994
	store %Word64 %r14995, %Word64* %regW64_0
	; RW64(1): Word64  = OW64 (RP(1): Objptr (opt_8), 8): Word64
	%r14996 = load %Objptr, %Objptr* %regP_1
	%r14997 = getelementptr inbounds i8, %Objptr %r14996, i32 8
	%r14998 = bitcast %Objptr %r14997 to %Word64*
	%r14999 = load %Word64, %Word64* %r14998
	store %Word64 %r14999, %Word64* %regW64_1
	; XW64 (RP(2): Objptr (opt_22), RW64(1): Word64, 8, 0): Word64  = RW64(0): Word64
	%r15000 = load %Word64, %Word64* %regW64_0
	%r15001 = load %Objptr, %Objptr* %regP_2
	%r15002 = load %Word64, %Word64* %regW64_1
	%r15003 = mul nsw %Word64 %r15002, 8
	%r15004 = add nsw %Word64 %r15003, 0
	%r15005 = getelementptr inbounds i8, %Objptr %r15001, %Word64 %r15004
	%r15006 = bitcast %Objptr %r15005 to %Word64*
	store %Word64 %r15000, %Word64* %r15006
	; switch {test = Cast (RP(0): Objptr (opt_46), Bits64), default = Some L_86, cases = ((0x1, L_87))}
	%r15007 = load %Objptr, %Objptr* %regP_0
	%r15008 = ptrtoint %Objptr %r15007 to %Word64
	switch %Word64 %r15008, label %L_86 [
		%Word64 1, label %L_87
	]

L_84:
	; RP(1): Objptr (opt_46)  = OP (SP(112): Objptr (opt_46), 8): Objptr (opt_46)
	%r15009 = load %Pointer, %Pointer* %stackTop
	%r15010 = getelementptr inbounds i8, %Pointer %r15009, i32 112
	%r15011 = bitcast %Pointer %r15010 to %Objptr*
	%r15012 = load %Objptr, %Objptr* %r15011
	%r15013 = getelementptr inbounds i8, %Objptr %r15012, i32 8
	%r15014 = bitcast %Objptr %r15013 to %Objptr*
	%r15015 = load %Objptr, %Objptr* %r15014
	store %Objptr %r15015, %Objptr* %regP_1
	; RP(2): Objptr (opt_8)  = OP (SP(112): Objptr (opt_46), 0): Objptr (opt_8)
	%r15016 = load %Pointer, %Pointer* %stackTop
	%r15017 = getelementptr inbounds i8, %Pointer %r15016, i32 112
	%r15018 = bitcast %Pointer %r15017 to %Objptr*
	%r15019 = load %Objptr, %Objptr* %r15018
	%r15020 = getelementptr inbounds i8, %Objptr %r15019, i32 0
	%r15021 = bitcast %Objptr %r15020 to %Objptr*
	%r15022 = load %Objptr, %Objptr* %r15021
	store %Objptr %r15022, %Objptr* %regP_2
	; RP(8): Objptr (opt_8)  = RP(2): Objptr (opt_8)
	%r15023 = load %Objptr, %Objptr* %regP_2
	store %Objptr %r15023, %Objptr* %regP_8
	; RP(2): Objptr (opt_22)  = RP(0): Objptr (opt_22)
	%r15024 = load %Objptr, %Objptr* %regP_0
	store %Objptr %r15024, %Objptr* %regP_2
	; RP(0): Objptr (opt_46)  = RP(1): Objptr (opt_46)
	%r15025 = load %Objptr, %Objptr* %regP_1
	store %Objptr %r15025, %Objptr* %regP_0
	; RP(1): Objptr (opt_8)  = RP(8): Objptr (opt_8)
	%r15026 = load %Objptr, %Objptr* %regP_8
	store %Objptr %r15026, %Objptr* %regP_1
	; Goto L_85
	br label %L_85

L_83:
	; Push(-128)
	%r15027 = load %Pointer, %Pointer* %stackTop
	%r15028 = getelementptr inbounds i8, %Pointer %r15027, i32 -128
	store %Pointer %r15028, %Pointer* %stackTop
	%r15029 = load %Objptr, %Objptr* @CReturnP
	store %Objptr %r15029, %Objptr* %regP_0
	; switch {test = Cast (SP(112): Objptr (opt_46), Bits64), default = Some L_84, cases = ((0x1, L_320))}
	%r15030 = load %Pointer, %Pointer* %stackTop
	%r15031 = getelementptr inbounds i8, %Pointer %r15030, i32 112
	%r15032 = bitcast %Pointer %r15031 to %Objptr*
	%r15033 = load %Objptr, %Objptr* %r15032
	%r15034 = ptrtoint %Objptr %r15033 to %Word64
	switch %Word64 %r15034, label %L_84 [
		%Word64 1, label %L_320
	]

L_82:
	; CCall {args = (<GCState>, 0x0, SW64(120): Word64, 0x2D), frameInfo = Some {frameLayoutsIndex = 10}, func = {args = (GCState, Word64, Word64, Word64), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int64, Word64), res = Some Objptr}, return = Objptr (opt_22), symbolScope = private, target = GC_arrayAllocate}, return = Some L_83}
	; GetOperands
	%r15035 = bitcast %struct.GC_state* @gcState to %Pointer
	%r15036 = load %Pointer, %Pointer* %stackTop
	%r15037 = getelementptr inbounds i8, %Pointer %r15036, i32 120
	%r15038 = bitcast %Pointer %r15037 to %Word64*
	%r15039 = load %Word64, %Word64* %r15038
	%r15040 = load %Pointer, %Pointer* %stackTop
	%r15041 = getelementptr inbounds i8, %Pointer %r15040, i32 120
	%r15042 = bitcast %Pointer %r15041 to %uintptr_t*
	store %uintptr_t 10, %uintptr_t* %r15042
	; Push(128)
	%r15043 = load %Pointer, %Pointer* %stackTop
	%r15044 = getelementptr inbounds i8, %Pointer %r15043, i32 128
	store %Pointer %r15044, %Pointer* %stackTop
	; FlushFrontier
	%r15045 = bitcast %struct.GC_state* @gcState to %Pointer
	%r15046 = getelementptr inbounds i8, %Pointer %r15045, i32 0
	%r15047 = bitcast %Pointer %r15046 to %Pointer*
	%r15048 = load %Pointer, %Pointer* %frontier
	store %Pointer %r15048, %Pointer* %r15047
	; FlushStackTop
	%r15049 = bitcast %struct.GC_state* @gcState to %Pointer
	%r15050 = getelementptr inbounds i8, %Pointer %r15049, i32 16
	%r15051 = bitcast %Pointer %r15050 to %Pointer*
	%r15052 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r15052, %Pointer* %r15051
	; Call
	%r15053 = call %Objptr @GC_arrayAllocate(%Pointer %r15035, %Word64 0, %Word64 %r15039, %Word64 45)
	store %Objptr %r15053, %Objptr* @CReturnP
	; CacheFrontier
	%r15054 = bitcast %struct.GC_state* @gcState to %Pointer
	%r15055 = getelementptr inbounds i8, %Pointer %r15054, i32 0
	%r15056 = bitcast %Pointer %r15055 to %Pointer*
	%r15057 = load %Pointer, %Pointer* %r15056
	store %Pointer %r15057, %Pointer* %frontier
	; CacheStackTop
	%r15058 = bitcast %struct.GC_state* @gcState to %Pointer
	%r15059 = getelementptr inbounds i8, %Pointer %r15058, i32 16
	%r15060 = bitcast %Pointer %r15059 to %Pointer*
	%r15061 = load %Pointer, %Pointer* %r15060
	store %Pointer %r15061, %Pointer* %stackTop
	br label %L_83

L_81:
	; RW32(0): Word32  = Word64_equal (0x0, SW64(120): Word64)
	%r15062 = load %Pointer, %Pointer* %stackTop
	%r15063 = getelementptr inbounds i8, %Pointer %r15062, i32 120
	%r15064 = bitcast %Pointer %r15063 to %Word64*
	%r15065 = load %Word64, %Word64* %r15064
	%r15067 = icmp eq %Word64 0, %r15065
	%r15066 = zext i1 %r15067 to %Word32
	store %Word32 %r15066, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_82), (0x1, L_321))}
	%r15068 = load %Word32, %Word32* %regW32_0
	%r15069 = trunc %Word32 %r15068 to i1
	br i1 %r15069, label %L_321, label %L_82

L_80:
	; CW64 (<Frontier>)  = 0x11
	%r15070 = load %Pointer, %Pointer* %frontier
	%r15071 = bitcast %Pointer %r15070 to %Word64*
	store %Word64 17, %Word64* %r15071
	; RQ(17): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r15072 = load %Pointer, %Pointer* %frontier
	%r15074 = ptrtoint %Pointer %r15072 to %uintptr_t
	%r15075 = add %uintptr_t %r15074, 8
	%r15073 = inttoptr %uintptr_t %r15075 to %Pointer
	store %CPointer %r15073, %CPointer* %regQ_17
	; RP(0): Objptr (opt_8)  = Cast (RQ(17): CPointer, Objptr (opt_8))
	%r15076 = load %CPointer, %CPointer* %regQ_17
	%r15077 = bitcast %CPointer %r15076 to %Objptr
	store %Objptr %r15077, %Objptr* %regP_0
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r15078 = load %Pointer, %Pointer* %frontier
	%r15080 = ptrtoint %Pointer %r15078 to %uintptr_t
	%r15081 = add %uintptr_t %r15080, 24
	%r15079 = inttoptr %uintptr_t %r15081 to %Pointer
	store %Pointer %r15079, %Pointer* %frontier
	; OW64 (RP(0): Objptr (opt_8), 0): Word64  = SW64(128): Word64
	%r15082 = load %Pointer, %Pointer* %stackTop
	%r15083 = getelementptr inbounds i8, %Pointer %r15082, i32 128
	%r15084 = bitcast %Pointer %r15083 to %Word64*
	%r15085 = load %Word64, %Word64* %r15084
	%r15086 = load %Objptr, %Objptr* %regP_0
	%r15087 = getelementptr inbounds i8, %Objptr %r15086, i32 0
	%r15088 = bitcast %Objptr %r15087 to %Word64*
	store %Word64 %r15085, %Word64* %r15088
	; OW64 (RP(0): Objptr (opt_8), 8): Word64  = SW64(120): Word64
	%r15089 = load %Pointer, %Pointer* %stackTop
	%r15090 = getelementptr inbounds i8, %Pointer %r15089, i32 120
	%r15091 = bitcast %Pointer %r15090 to %Word64*
	%r15092 = load %Word64, %Word64* %r15091
	%r15093 = load %Objptr, %Objptr* %regP_0
	%r15094 = getelementptr inbounds i8, %Objptr %r15093, i32 8
	%r15095 = bitcast %Objptr %r15094 to %Word64*
	store %Word64 %r15092, %Word64* %r15095
	; CW64 (<Frontier>)  = 0x5D
	%r15096 = load %Pointer, %Pointer* %frontier
	%r15097 = bitcast %Pointer %r15096 to %Word64*
	store %Word64 93, %Word64* %r15097
	; RQ(16): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r15098 = load %Pointer, %Pointer* %frontier
	%r15100 = ptrtoint %Pointer %r15098 to %uintptr_t
	%r15101 = add %uintptr_t %r15100, 8
	%r15099 = inttoptr %uintptr_t %r15101 to %Pointer
	store %CPointer %r15099, %CPointer* %regQ_16
	; RP(1): Objptr (opt_46)  = Cast (RQ(16): CPointer, Objptr (opt_46))
	%r15102 = load %CPointer, %CPointer* %regQ_16
	%r15103 = bitcast %CPointer %r15102 to %Objptr
	store %Objptr %r15103, %Objptr* %regP_1
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r15104 = load %Pointer, %Pointer* %frontier
	%r15106 = ptrtoint %Pointer %r15104 to %uintptr_t
	%r15107 = add %uintptr_t %r15106, 24
	%r15105 = inttoptr %uintptr_t %r15107 to %Pointer
	store %Pointer %r15105, %Pointer* %frontier
	; OP (RP(1): Objptr (opt_46), 0): Objptr (opt_8)  = RP(0): Objptr (opt_8)
	%r15108 = load %Objptr, %Objptr* %regP_0
	%r15109 = load %Objptr, %Objptr* %regP_1
	%r15110 = getelementptr inbounds i8, %Objptr %r15109, i32 0
	%r15111 = bitcast %Objptr %r15110 to %Objptr*
	store %Objptr %r15108, %Objptr* %r15111
	; OP (RP(1): Objptr (opt_46), 8): Objptr (opt_46)  = SP(112): Objptr (opt_46)
	%r15112 = load %Pointer, %Pointer* %stackTop
	%r15113 = getelementptr inbounds i8, %Pointer %r15112, i32 112
	%r15114 = bitcast %Pointer %r15113 to %Objptr*
	%r15115 = load %Objptr, %Objptr* %r15114
	%r15116 = load %Objptr, %Objptr* %regP_1
	%r15117 = getelementptr inbounds i8, %Objptr %r15116, i32 8
	%r15118 = bitcast %Objptr %r15117 to %Objptr*
	store %Objptr %r15115, %Objptr* %r15118
	; SP(112): Objptr (opt_46)  = RP(1): Objptr (opt_46)
	%r15119 = load %Objptr, %Objptr* %regP_1
	%r15120 = load %Pointer, %Pointer* %stackTop
	%r15121 = getelementptr inbounds i8, %Pointer %r15120, i32 112
	%r15122 = bitcast %Pointer %r15121 to %Objptr*
	store %Objptr %r15119, %Objptr* %r15122
	; SW64(120): Word64  = RW64(0): Word64
	%r15123 = load %Word64, %Word64* %regW64_0
	%r15124 = load %Pointer, %Pointer* %stackTop
	%r15125 = getelementptr inbounds i8, %Pointer %r15124, i32 120
	%r15126 = bitcast %Pointer %r15125 to %Word64*
	store %Word64 %r15123, %Word64* %r15126
	; SW64(128): Word64  = 0x0
	%r15127 = load %Pointer, %Pointer* %stackTop
	%r15128 = getelementptr inbounds i8, %Pointer %r15127, i32 128
	%r15129 = bitcast %Pointer %r15128 to %Word64*
	store %Word64 0, %Word64* %r15129
	; Goto loop_9
	br label %loop_9

L_79:
	; Arith {prim = WordS64_addCheck, args = (SW64(120): Word64, 0x1), dst = RW64(0): Word64, overflow = L_66, success = L_80}
	%r15130 = load %Pointer, %Pointer* %stackTop
	%r15131 = getelementptr inbounds i8, %Pointer %r15130, i32 120
	%r15132 = bitcast %Pointer %r15131 to %Word64*
	%r15133 = load %Word64, %Word64* %r15132
	%r15134 = call {%Word64, i1} @llvm.sadd.with.overflow.i64(%Word64 %r15133, %Word64 1)
	%r15135 = extractvalue {%Word64, i1} %r15134, 0
	%r15136 = extractvalue {%Word64, i1} %r15134, 1
	store %Word64 %r15135, %Word64* %regW64_0
	br i1 %r15136, label %L_66, label %L_80

L_78:
	; RW32(0): Word32  = Word64_equal (SW64(128): Word64, 0x0)
	%r15137 = load %Pointer, %Pointer* %stackTop
	%r15138 = getelementptr inbounds i8, %Pointer %r15137, i32 128
	%r15139 = bitcast %Pointer %r15138 to %Word64*
	%r15140 = load %Word64, %Word64* %r15139
	%r15142 = icmp eq %Word64 %r15140, 0
	%r15141 = zext i1 %r15142 to %Word32
	store %Word32 %r15141, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_79), (0x1, L_81))}
	%r15143 = load %Word32, %Word32* %regW32_0
	%r15144 = trunc %Word32 %r15143 to i1
	br i1 %r15144, label %L_81, label %L_79

loop_9:
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r15145 = bitcast %struct.GC_state* @gcState to %Pointer
	%r15146 = getelementptr inbounds i8, %Pointer %r15145, i32 8
	%r15147 = bitcast %Pointer %r15146 to %CPointer*
	%r15148 = load %CPointer, %CPointer* %r15147
	%r15149 = load %Pointer, %Pointer* %frontier
	%r15151 = icmp ult %Pointer %r15148, %r15149
	%r15150 = zext i1 %r15151 to %Word32
	store %Word32 %r15150, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_78), (0x1, L_324))}
	%r15152 = load %Word32, %Word32* %regW32_0
	%r15153 = trunc %Word32 %r15152 to i1
	br i1 %r15153, label %L_324, label %L_78

L_77:
	; SP(112): Objptr (opt_46)  = glob {index = 0, isRoot = true, ty = Objptr (opt_46)}
	%r15154 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 0
	%r15155 = load %Objptr, %Objptr* %r15154
	%r15156 = load %Pointer, %Pointer* %stackTop
	%r15157 = getelementptr inbounds i8, %Pointer %r15156, i32 112
	%r15158 = bitcast %Pointer %r15157 to %Objptr*
	store %Objptr %r15155, %Objptr* %r15158
	; SW64(120): Word64  = 0x1
	%r15159 = load %Pointer, %Pointer* %stackTop
	%r15160 = getelementptr inbounds i8, %Pointer %r15159, i32 120
	%r15161 = bitcast %Pointer %r15160 to %Word64*
	store %Word64 1, %Word64* %r15161
	; SW64(128): Word64  = RW64(0): Word64
	%r15162 = load %Word64, %Word64* %regW64_0
	%r15163 = load %Pointer, %Pointer* %stackTop
	%r15164 = getelementptr inbounds i8, %Pointer %r15163, i32 128
	%r15165 = bitcast %Pointer %r15164 to %Word64*
	store %Word64 %r15162, %Word64* %r15165
	; Goto loop_9
	br label %loop_9

L_76:
	; RW32(0): Word32  = WordS64_lt (RW64(0): Word64, 0x0)
	%r15166 = load %Word64, %Word64* %regW64_0
	%r15168 = icmp slt %Word64 %r15166, 0
	%r15167 = zext i1 %r15168 to %Word32
	store %Word32 %r15167, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_77), (0x1, L_326))}
	%r15169 = load %Word32, %Word32* %regW32_0
	%r15170 = trunc %Word32 %r15169 to i1
	br i1 %r15170, label %L_326, label %L_77

L_75:
	; RW32(0): Word32  = Word64_equal (RW64(1): Word64, 0xFFFFFFFFFFFFFFFF)
	%r15171 = load %Word64, %Word64* %regW64_1
	%r15173 = icmp eq %Word64 %r15171, 18446744073709551615
	%r15172 = zext i1 %r15173 to %Word32
	store %Word32 %r15172, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_76), (0x1, L_327))}
	%r15174 = load %Word32, %Word32* %regW32_0
	%r15175 = trunc %Word32 %r15174 to i1
	br i1 %r15175, label %L_327, label %L_76

L_74:
	%r15176 = load %Word64, %Word64* @CReturnW64
	store %Word64 %r15176, %Word64* %regW64_0
	; RW64(1): Word64  = WordS64_rshift (RW64(0): Word64, 0x3E)
	%r15177 = load %Word64, %Word64* %regW64_0
	%r15178 = zext %Word32 62 to %Word64
	%r15179 = ashr %Word64 %r15177, %r15178
	store %Word64 %r15179, %Word64* %regW64_1
	; RW32(0): Word32  = Word64_equal (RW64(1): Word64, 0x0)
	%r15180 = load %Word64, %Word64* %regW64_1
	%r15182 = icmp eq %Word64 %r15180, 0
	%r15181 = zext i1 %r15182 to %Word32
	store %Word32 %r15181, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_75), (0x1, L_329))}
	%r15183 = load %Word32, %Word32* %regW32_0
	%r15184 = trunc %Word32 %r15183 to i1
	br i1 %r15184, label %L_329, label %L_75

L_73:
	; CCall {args = (), frameInfo = None, func = {args = (), convention = cdecl, kind = Impure, prototype = {args = (), res = Some Int64}, return = Word64, symbolScope = private, target = Posix_FileSys_Stat_getATime}, return = Some L_74}
	; GetOperands
	; Call
	%r15185 = call %Word64 @Posix_FileSys_Stat_getATime()
	store %Word64 %r15185, %Word64* @CReturnW64
	br label %L_74

L_72:
	; CCall {args = (), frameInfo = None, func = {args = (), convention = cdecl, kind = Impure, prototype = {args = (), res = Some Int64}, return = Word64, symbolScope = private, target = Posix_FileSys_Stat_getSize}, return = Some L_73}
	; GetOperands
	; Call
	%r15186 = call %Word64 @Posix_FileSys_Stat_getSize()
	store %Word64 %r15186, %Word64* @CReturnW64
	br label %L_73

L_71:
	; CCall {args = (), frameInfo = None, func = {args = (), convention = cdecl, kind = Impure, prototype = {args = (), res = Some Word32}, return = Word32, symbolScope = private, target = Posix_FileSys_Stat_getGId}, return = Some L_72}
	; GetOperands
	; Call
	%r15187 = call %Word32 @Posix_FileSys_Stat_getGId()
	store %Word32 %r15187, %Word32* @CReturnW32
	br label %L_72

L_70:
	; CCall {args = (), frameInfo = None, func = {args = (), convention = cdecl, kind = Impure, prototype = {args = (), res = Some Word32}, return = Word32, symbolScope = private, target = Posix_FileSys_Stat_getUId}, return = Some L_71}
	; GetOperands
	; Call
	%r15188 = call %Word32 @Posix_FileSys_Stat_getUId()
	store %Word32 %r15188, %Word32* @CReturnW32
	br label %L_71

L_69:
	; RW32(1): Word32  = WordS32_lt (RW32(0): Word32, 0x0)
	%r15189 = load %Word32, %Word32* %regW32_0
	%r15191 = icmp slt %Word32 %r15189, 0
	%r15190 = zext i1 %r15191 to %Word32
	store %Word32 %r15190, %Word32* %regW32_1
	; switch {test = RW32(1): Word32, default = None, cases = ((0x0, L_70), (0x1, L_330))}
	%r15192 = load %Word32, %Word32* %regW32_1
	%r15193 = trunc %Word32 %r15192 to i1
	br i1 %r15193, label %L_330, label %L_70

L_68:
	; RP(0): Objptr (opt_34, opt_33, opt_32, opt_31)  = Cast (glob {index = 9, isRoot = true, ty = Objptr (opt_31)}, Objptr (opt_34, opt_33, opt_32, opt_31))
	%r15194 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 9
	%r15195 = load %Objptr, %Objptr* %r15194
	%r15196 = bitcast %Objptr %r15195 to %Objptr
	store %Objptr %r15196, %Objptr* %regP_0
	; Goto L_14
	br label %L_14

L_67:
	; RW32(0): Word32  = Word32_add (OW32 (<GCState>, 68): Word32, 0xFFFFFFFF)
	%r15197 = bitcast %struct.GC_state* @gcState to %Pointer
	%r15198 = getelementptr inbounds i8, %Pointer %r15197, i32 68
	%r15199 = bitcast %Pointer %r15198 to %Word32*
	%r15200 = load %Word32, %Word32* %r15199
	%r15201 = add %Word32 %r15200, 4294967295
	store %Word32 %r15201, %Word32* %regW32_0
	; OW32 (<GCState>, 68): Word32  = RW32(0): Word32
	%r15202 = load %Word32, %Word32* %regW32_0
	%r15203 = bitcast %struct.GC_state* @gcState to %Pointer
	%r15204 = getelementptr inbounds i8, %Pointer %r15203, i32 68
	%r15205 = bitcast %Pointer %r15204 to %Word32*
	store %Word32 %r15202, %Word32* %r15205
	; RP(0): Objptr (opt_34, opt_33, opt_32, opt_31)  = Cast (0x1, Objptr (opt_34, opt_33, opt_32, opt_31))
	%r15206 = inttoptr %Word64 1 to %Objptr
	store %Objptr %r15206, %Objptr* %regP_0
	; Goto L_14
	br label %L_14

L_66:
	; RW32(0): Word32  = OW32 (<GCState>, 68): Word32
	%r15207 = bitcast %struct.GC_state* @gcState to %Pointer
	%r15208 = getelementptr inbounds i8, %Pointer %r15207, i32 68
	%r15209 = bitcast %Pointer %r15208 to %Word32*
	%r15210 = load %Word32, %Word32* %r15209
	store %Word32 %r15210, %Word32* %regW32_0
	; RW32(1): Word32  = Word32_equal (RW32(0): Word32, 0x0)
	%r15211 = load %Word32, %Word32* %regW32_0
	%r15213 = icmp eq %Word32 %r15211, 0
	%r15212 = zext i1 %r15213 to %Word32
	store %Word32 %r15212, %Word32* %regW32_1
	; switch {test = RW32(1): Word32, default = None, cases = ((0x0, L_67), (0x1, L_68))}
	%r15214 = load %Word32, %Word32* %regW32_1
	%r15215 = trunc %Word32 %r15214 to i1
	br i1 %r15215, label %L_68, label %L_67

L_65:
	; Goto L_66
	br label %L_66

L_64:
	%r15216 = load %Word64, %Word64* @CReturnW64
	store %Word64 %r15216, %Word64* %regW64_0
	; RW32(0): Word32  = WordU64_extdToWord32 (RW64(0): Word64)
	%r15217 = load %Word64, %Word64* %regW64_0
	%r15218 = trunc %Word64 %r15217 to %Word32
	store %Word32 %r15218, %Word32* %regW32_0
	; RW64(1): Word64  = WordU32_extdToWord64 (RW32(0): Word32)
	%r15219 = load %Word32, %Word32* %regW32_0
	%r15220 = zext %Word32 %r15219 to %Word64
	store %Word64 %r15220, %Word64* %regW64_1
	; RW32(1): Word32  = Word64_equal (RW64(1): Word64, RW64(0): Word64)
	%r15221 = load %Word64, %Word64* %regW64_1
	%r15222 = load %Word64, %Word64* %regW64_0
	%r15224 = icmp eq %Word64 %r15221, %r15222
	%r15223 = zext i1 %r15224 to %Word32
	store %Word32 %r15223, %Word32* %regW32_1
	; switch {test = RW32(1): Word32, default = None, cases = ((0x0, L_65), (0x1, L_69))}
	%r15225 = load %Word32, %Word32* %regW32_1
	%r15226 = trunc %Word32 %r15225 to i1
	br i1 %r15226, label %L_69, label %L_65

L_63:
	%r15228 = load %Pointer, %Pointer* %stackTop
	%r15229 = getelementptr inbounds i8, %Pointer %r15228, i32 100
	%r15230 = bitcast %Pointer %r15229 to %Word32*
	%r15227 = load %Word32, %Word32* @CReturnW32
	store %Word32 %r15227, %Word32* %r15230
	; CCall {args = (), frameInfo = None, func = {args = (), convention = cdecl, kind = Impure, prototype = {args = (), res = Some Word64}, return = Word64, symbolScope = private, target = Posix_FileSys_Stat_getNLink}, return = Some L_64}
	; GetOperands
	; Call
	%r15231 = call %Word64 @Posix_FileSys_Stat_getNLink()
	store %Word64 %r15231, %Word64* @CReturnW64
	br label %L_64

L_62:
	; CCall {args = (), frameInfo = None, func = {args = (), convention = cdecl, kind = Impure, prototype = {args = (), res = Some Word32}, return = Word32, symbolScope = private, target = Posix_FileSys_Stat_getMode}, return = Some L_63}
	; GetOperands
	; Call
	%r15232 = call %Word32 @Posix_FileSys_Stat_getMode()
	store %Word32 %r15232, %Word32* @CReturnW32
	br label %L_63

L_61:
	; CCall {args = (), frameInfo = None, func = {args = (), convention = cdecl, kind = Impure, prototype = {args = (), res = Some Word64}, return = Word64, symbolScope = private, target = Posix_FileSys_Stat_getINo}, return = Some L_62}
	; GetOperands
	; Call
	%r15233 = call %Word64 @Posix_FileSys_Stat_getINo()
	store %Word64 %r15233, %Word64* @CReturnW64
	br label %L_62

L_60:
	; CCall {args = (), frameInfo = None, func = {args = (), convention = cdecl, kind = Impure, prototype = {args = (), res = Some Word64}, return = Word64, symbolScope = private, target = Posix_FileSys_Stat_getDev}, return = Some L_61}
	; GetOperands
	; Call
	%r15234 = call %Word64 @Posix_FileSys_Stat_getDev()
	store %Word64 %r15234, %Word64* @CReturnW64
	br label %L_61

L_59:
	%r15235 = load %Word32, %Word32* @CReturnW32
	store %Word32 %r15235, %Word32* %regW32_0
	; RW32(1): Word32  = Word32_equal (RW32(0): Word32, 0xFFFFFFFF)
	%r15236 = load %Word32, %Word32* %regW32_0
	%r15238 = icmp eq %Word32 %r15236, 4294967295
	%r15237 = zext i1 %r15238 to %Word32
	store %Word32 %r15237, %Word32* %regW32_1
	; switch {test = RW32(1): Word32, default = None, cases = ((0x0, L_60), (0x1, L_331))}
	%r15239 = load %Word32, %Word32* %regW32_1
	%r15240 = trunc %Word32 %r15239 to i1
	br i1 %r15240, label %L_331, label %L_60

L_58:
	; CW64 (<Frontier>)  = 0x1B
	%r15241 = load %Pointer, %Pointer* %frontier
	%r15242 = bitcast %Pointer %r15241 to %Word64*
	store %Word64 27, %Word64* %r15242
	; RQ(15): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r15243 = load %Pointer, %Pointer* %frontier
	%r15245 = ptrtoint %Pointer %r15243 to %uintptr_t
	%r15246 = add %uintptr_t %r15245, 8
	%r15244 = inttoptr %uintptr_t %r15246 to %Pointer
	store %CPointer %r15244, %CPointer* %regQ_15
	; SP(104): Objptr (opt_13)  = Cast (RQ(15): CPointer, Objptr (opt_13))
	%r15247 = load %CPointer, %CPointer* %regQ_15
	%r15248 = bitcast %CPointer %r15247 to %Objptr
	%r15249 = load %Pointer, %Pointer* %stackTop
	%r15250 = getelementptr inbounds i8, %Pointer %r15249, i32 104
	%r15251 = bitcast %Pointer %r15250 to %Objptr*
	store %Objptr %r15248, %Objptr* %r15251
	; <Frontier>  = CPointer_add (<Frontier>, 0x10)
	%r15252 = load %Pointer, %Pointer* %frontier
	%r15254 = ptrtoint %Pointer %r15252 to %uintptr_t
	%r15255 = add %uintptr_t %r15254, 16
	%r15253 = inttoptr %uintptr_t %r15255 to %Pointer
	store %Pointer %r15253, %Pointer* %frontier
	; OW32 (SP(104): Objptr (opt_13), 0): Word32  = 0x0
	%r15256 = load %Pointer, %Pointer* %stackTop
	%r15257 = getelementptr inbounds i8, %Pointer %r15256, i32 104
	%r15258 = bitcast %Pointer %r15257 to %Objptr*
	%r15259 = load %Objptr, %Objptr* %r15258
	%r15260 = getelementptr inbounds i8, %Objptr %r15259, i32 0
	%r15261 = bitcast %Objptr %r15260 to %Word32*
	store %Word32 0, %Word32* %r15261
	; RW32(0): Word32  = Word32_add (OW32 (<GCState>, 68): Word32, 0x1)
	%r15262 = bitcast %struct.GC_state* @gcState to %Pointer
	%r15263 = getelementptr inbounds i8, %Pointer %r15262, i32 68
	%r15264 = bitcast %Pointer %r15263 to %Word32*
	%r15265 = load %Word32, %Word32* %r15264
	%r15266 = add %Word32 %r15265, 1
	store %Word32 %r15266, %Word32* %regW32_0
	; OW32 (<GCState>, 68): Word32  = RW32(0): Word32
	%r15267 = load %Word32, %Word32* %regW32_0
	%r15268 = bitcast %struct.GC_state* @gcState to %Pointer
	%r15269 = getelementptr inbounds i8, %Pointer %r15268, i32 68
	%r15270 = bitcast %Pointer %r15269 to %Word32*
	store %Word32 %r15267, %Word32* %r15270
	; CCall {args = (0x1), frameInfo = None, func = {args = (Word32), convention = cdecl, kind = Impure, prototype = {args = (Int32), res = Some Int32}, return = Word32, symbolScope = private, target = Posix_FileSys_Stat_fstat}, return = Some L_59}
	; GetOperands
	; Call
	%r15271 = call %Word32 @Posix_FileSys_Stat_fstat(%Word32 1)
	store %Word32 %r15271, %Word32* @CReturnW32
	br label %L_59

L_57:
	; SW8(96): [Word1, Bits7]  = Cast (0x1, [Word1, Bits7])
	%r15272 = bitcast %Word8 1 to %Word8
	%r15273 = load %Pointer, %Pointer* %stackTop
	%r15274 = getelementptr inbounds i8, %Pointer %r15273, i32 96
	%r15275 = bitcast %Pointer %r15274 to %Word8*
	store %Word8 %r15272, %Word8* %r15275
	; Goto L_58
	br label %L_58

L_56:
	%r15276 = load %Word32, %Word32* @CReturnW32
	store %Word32 %r15276, %Word32* %regW32_0
	; RW32(1): Word32  = Word32_equal (RW32(0): Word32, 0x0)
	%r15277 = load %Word32, %Word32* %regW32_0
	%r15279 = icmp eq %Word32 %r15277, 0
	%r15278 = zext i1 %r15279 to %Word32
	store %Word32 %r15278, %Word32* %regW32_1
	; switch {test = RW32(1): Word32, default = None, cases = ((0x0, L_57), (0x1, L_354))}
	%r15280 = load %Word32, %Word32* %regW32_1
	%r15281 = trunc %Word32 %r15280 to i1
	br i1 %r15281, label %L_354, label %L_57

L_55:
	; RP(0): Objptr (opt_35)  = OP (SP(40): Objptr (opt_7), 0): Objptr (opt_35)
	%r15282 = load %Pointer, %Pointer* %stackTop
	%r15283 = getelementptr inbounds i8, %Pointer %r15282, i32 40
	%r15284 = bitcast %Pointer %r15283 to %Objptr*
	%r15285 = load %Objptr, %Objptr* %r15284
	%r15286 = getelementptr inbounds i8, %Objptr %r15285, i32 0
	%r15287 = bitcast %Objptr %r15286 to %Objptr*
	%r15288 = load %Objptr, %Objptr* %r15287
	store %Objptr %r15288, %Objptr* %regP_0
	; CW64 (<Frontier>)  = 0x47
	%r15289 = load %Pointer, %Pointer* %frontier
	%r15290 = bitcast %Pointer %r15289 to %Word64*
	store %Word64 71, %Word64* %r15290
	; RQ(14): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r15291 = load %Pointer, %Pointer* %frontier
	%r15293 = ptrtoint %Pointer %r15291 to %uintptr_t
	%r15294 = add %uintptr_t %r15293, 8
	%r15292 = inttoptr %uintptr_t %r15294 to %Pointer
	store %CPointer %r15292, %CPointer* %regQ_14
	; RP(1): Objptr (opt_35)  = Cast (RQ(14): CPointer, Objptr (opt_35))
	%r15295 = load %CPointer, %CPointer* %regQ_14
	%r15296 = bitcast %CPointer %r15295 to %Objptr
	store %Objptr %r15296, %Objptr* %regP_1
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r15297 = load %Pointer, %Pointer* %frontier
	%r15299 = ptrtoint %Pointer %r15297 to %uintptr_t
	%r15300 = add %uintptr_t %r15299, 24
	%r15298 = inttoptr %uintptr_t %r15300 to %Pointer
	store %Pointer %r15298, %Pointer* %frontier
	; OP (RP(1): Objptr (opt_35), 0): Objptr (opt_7)  = Cast (0x1, Objptr (opt_7))
	%r15301 = inttoptr %Word64 1 to %Objptr
	%r15302 = load %Objptr, %Objptr* %regP_1
	%r15303 = getelementptr inbounds i8, %Objptr %r15302, i32 0
	%r15304 = bitcast %Objptr %r15303 to %Objptr*
	store %Objptr %r15301, %Objptr* %r15304
	; OP (RP(1): Objptr (opt_35), 8): Objptr (opt_35)  = RP(0): Objptr (opt_35)
	%r15305 = load %Objptr, %Objptr* %regP_0
	%r15306 = load %Objptr, %Objptr* %regP_1
	%r15307 = getelementptr inbounds i8, %Objptr %r15306, i32 8
	%r15308 = bitcast %Objptr %r15307 to %Objptr*
	store %Objptr %r15305, %Objptr* %r15308
	; RW64(0): Word64  = WordU64_rshift (Cast (SP(40): Objptr (opt_7), Bits64), 0x8)
	%r15309 = load %Pointer, %Pointer* %stackTop
	%r15310 = getelementptr inbounds i8, %Pointer %r15309, i32 40
	%r15311 = bitcast %Pointer %r15310 to %Objptr*
	%r15312 = load %Objptr, %Objptr* %r15311
	%r15313 = ptrtoint %Objptr %r15312 to %Word64
	%r15314 = zext %Word32 8 to %Word64
	%r15315 = lshr %Word64 %r15313, %r15314
	store %Word64 %r15315, %Word64* %regW64_0
	; XW8 (OQ (<GCState>, 976): CPointer, RW64(0): Word64, 1, 0): Word8  = 0x1
	%r15316 = bitcast %struct.GC_state* @gcState to %Pointer
	%r15317 = getelementptr inbounds i8, %Pointer %r15316, i32 976
	%r15318 = bitcast %Pointer %r15317 to %CPointer*
	%r15319 = load %CPointer, %CPointer* %r15318
	%r15320 = load %Word64, %Word64* %regW64_0
	%r15321 = mul nsw %Word64 %r15320, 1
	%r15322 = add nsw %Word64 %r15321, 0
	%r15323 = getelementptr inbounds i8, %CPointer %r15319, %Word64 %r15322
	%r15324 = bitcast %CPointer %r15323 to %Word8*
	store %Word8 1, %Word8* %r15324
	; OP (SP(40): Objptr (opt_7), 0): Objptr (opt_35)  = RP(1): Objptr (opt_35)
	%r15325 = load %Objptr, %Objptr* %regP_1
	%r15326 = load %Pointer, %Pointer* %stackTop
	%r15327 = getelementptr inbounds i8, %Pointer %r15326, i32 40
	%r15328 = bitcast %Pointer %r15327 to %Objptr*
	%r15329 = load %Objptr, %Objptr* %r15328
	%r15330 = getelementptr inbounds i8, %Objptr %r15329, i32 0
	%r15331 = bitcast %Objptr %r15330 to %Objptr*
	store %Objptr %r15325, %Objptr* %r15331
	; CW64 (<Frontier>)  = 0x35
	%r15332 = load %Pointer, %Pointer* %frontier
	%r15333 = bitcast %Pointer %r15332 to %Word64*
	store %Word64 53, %Word64* %r15333
	; RQ(13): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r15334 = load %Pointer, %Pointer* %frontier
	%r15336 = ptrtoint %Pointer %r15334 to %uintptr_t
	%r15337 = add %uintptr_t %r15336, 8
	%r15335 = inttoptr %uintptr_t %r15337 to %Pointer
	store %CPointer %r15335, %CPointer* %regQ_13
	; SP(64): Objptr (opt_26)  = Cast (RQ(13): CPointer, Objptr (opt_26))
	%r15338 = load %CPointer, %CPointer* %regQ_13
	%r15339 = bitcast %CPointer %r15338 to %Objptr
	%r15340 = load %Pointer, %Pointer* %stackTop
	%r15341 = getelementptr inbounds i8, %Pointer %r15340, i32 64
	%r15342 = bitcast %Pointer %r15341 to %Objptr*
	store %Objptr %r15339, %Objptr* %r15342
	; <Frontier>  = CPointer_add (<Frontier>, 0x10)
	%r15343 = load %Pointer, %Pointer* %frontier
	%r15345 = ptrtoint %Pointer %r15343 to %uintptr_t
	%r15346 = add %uintptr_t %r15345, 16
	%r15344 = inttoptr %uintptr_t %r15346 to %Pointer
	store %Pointer %r15344, %Pointer* %frontier
	; OP (SP(64): Objptr (opt_26), 0): Objptr (opt_37)  = Cast (0x1, Objptr (opt_37))
	%r15347 = inttoptr %Word64 1 to %Objptr
	%r15348 = load %Pointer, %Pointer* %stackTop
	%r15349 = getelementptr inbounds i8, %Pointer %r15348, i32 64
	%r15350 = bitcast %Pointer %r15349 to %Objptr*
	%r15351 = load %Objptr, %Objptr* %r15350
	%r15352 = getelementptr inbounds i8, %Objptr %r15351, i32 0
	%r15353 = bitcast %Objptr %r15352 to %Objptr*
	store %Objptr %r15347, %Objptr* %r15353
	; RP(2): Objptr (opt_35)  = OP (SP(40): Objptr (opt_7), 0): Objptr (opt_35)
	%r15354 = load %Pointer, %Pointer* %stackTop
	%r15355 = getelementptr inbounds i8, %Pointer %r15354, i32 40
	%r15356 = bitcast %Pointer %r15355 to %Objptr*
	%r15357 = load %Objptr, %Objptr* %r15356
	%r15358 = getelementptr inbounds i8, %Objptr %r15357, i32 0
	%r15359 = bitcast %Objptr %r15358 to %Objptr*
	%r15360 = load %Objptr, %Objptr* %r15359
	store %Objptr %r15360, %Objptr* %regP_2
	; CW64 (<Frontier>)  = 0x47
	%r15361 = load %Pointer, %Pointer* %frontier
	%r15362 = bitcast %Pointer %r15361 to %Word64*
	store %Word64 71, %Word64* %r15362
	; RQ(12): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r15363 = load %Pointer, %Pointer* %frontier
	%r15365 = ptrtoint %Pointer %r15363 to %uintptr_t
	%r15366 = add %uintptr_t %r15365, 8
	%r15364 = inttoptr %uintptr_t %r15366 to %Pointer
	store %CPointer %r15364, %CPointer* %regQ_12
	; RP(3): Objptr (opt_35)  = Cast (RQ(12): CPointer, Objptr (opt_35))
	%r15367 = load %CPointer, %CPointer* %regQ_12
	%r15368 = bitcast %CPointer %r15367 to %Objptr
	store %Objptr %r15368, %Objptr* %regP_3
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r15369 = load %Pointer, %Pointer* %frontier
	%r15371 = ptrtoint %Pointer %r15369 to %uintptr_t
	%r15372 = add %uintptr_t %r15371, 24
	%r15370 = inttoptr %uintptr_t %r15372 to %Pointer
	store %Pointer %r15370, %Pointer* %frontier
	; OP (RP(3): Objptr (opt_35), 0): Objptr (opt_7)  = Cast (0x2, Objptr (opt_7))
	%r15373 = inttoptr %Word64 2 to %Objptr
	%r15374 = load %Objptr, %Objptr* %regP_3
	%r15375 = getelementptr inbounds i8, %Objptr %r15374, i32 0
	%r15376 = bitcast %Objptr %r15375 to %Objptr*
	store %Objptr %r15373, %Objptr* %r15376
	; OP (RP(3): Objptr (opt_35), 8): Objptr (opt_35)  = RP(2): Objptr (opt_35)
	%r15377 = load %Objptr, %Objptr* %regP_2
	%r15378 = load %Objptr, %Objptr* %regP_3
	%r15379 = getelementptr inbounds i8, %Objptr %r15378, i32 8
	%r15380 = bitcast %Objptr %r15379 to %Objptr*
	store %Objptr %r15377, %Objptr* %r15380
	; RW64(1): Word64  = WordU64_rshift (Cast (SP(40): Objptr (opt_7), Bits64), 0x8)
	%r15381 = load %Pointer, %Pointer* %stackTop
	%r15382 = getelementptr inbounds i8, %Pointer %r15381, i32 40
	%r15383 = bitcast %Pointer %r15382 to %Objptr*
	%r15384 = load %Objptr, %Objptr* %r15383
	%r15385 = ptrtoint %Objptr %r15384 to %Word64
	%r15386 = zext %Word32 8 to %Word64
	%r15387 = lshr %Word64 %r15385, %r15386
	store %Word64 %r15387, %Word64* %regW64_1
	; XW8 (OQ (<GCState>, 976): CPointer, RW64(1): Word64, 1, 0): Word8  = 0x1
	%r15388 = bitcast %struct.GC_state* @gcState to %Pointer
	%r15389 = getelementptr inbounds i8, %Pointer %r15388, i32 976
	%r15390 = bitcast %Pointer %r15389 to %CPointer*
	%r15391 = load %CPointer, %CPointer* %r15390
	%r15392 = load %Word64, %Word64* %regW64_1
	%r15393 = mul nsw %Word64 %r15392, 1
	%r15394 = add nsw %Word64 %r15393, 0
	%r15395 = getelementptr inbounds i8, %CPointer %r15391, %Word64 %r15394
	%r15396 = bitcast %CPointer %r15395 to %Word8*
	store %Word8 1, %Word8* %r15396
	; OP (SP(40): Objptr (opt_7), 0): Objptr (opt_35)  = RP(3): Objptr (opt_35)
	%r15397 = load %Objptr, %Objptr* %regP_3
	%r15398 = load %Pointer, %Pointer* %stackTop
	%r15399 = getelementptr inbounds i8, %Pointer %r15398, i32 40
	%r15400 = bitcast %Pointer %r15399 to %Objptr*
	%r15401 = load %Objptr, %Objptr* %r15400
	%r15402 = getelementptr inbounds i8, %Objptr %r15401, i32 0
	%r15403 = bitcast %Objptr %r15402 to %Objptr*
	store %Objptr %r15397, %Objptr* %r15403
	; CW64 (<Frontier>)  = 0x1B
	%r15404 = load %Pointer, %Pointer* %frontier
	%r15405 = bitcast %Pointer %r15404 to %Word64*
	store %Word64 27, %Word64* %r15405
	; RQ(11): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r15406 = load %Pointer, %Pointer* %frontier
	%r15408 = ptrtoint %Pointer %r15406 to %uintptr_t
	%r15409 = add %uintptr_t %r15408, 8
	%r15407 = inttoptr %uintptr_t %r15409 to %Pointer
	store %CPointer %r15407, %CPointer* %regQ_11
	; SP(80): Objptr (opt_13)  = Cast (RQ(11): CPointer, Objptr (opt_13))
	%r15410 = load %CPointer, %CPointer* %regQ_11
	%r15411 = bitcast %CPointer %r15410 to %Objptr
	%r15412 = load %Pointer, %Pointer* %stackTop
	%r15413 = getelementptr inbounds i8, %Pointer %r15412, i32 80
	%r15414 = bitcast %Pointer %r15413 to %Objptr*
	store %Objptr %r15411, %Objptr* %r15414
	; <Frontier>  = CPointer_add (<Frontier>, 0x10)
	%r15415 = load %Pointer, %Pointer* %frontier
	%r15417 = ptrtoint %Pointer %r15415 to %uintptr_t
	%r15418 = add %uintptr_t %r15417, 16
	%r15416 = inttoptr %uintptr_t %r15418 to %Pointer
	store %Pointer %r15416, %Pointer* %frontier
	; OW32 (SP(80): Objptr (opt_13), 0): Word32  = 0x0
	%r15419 = load %Pointer, %Pointer* %stackTop
	%r15420 = getelementptr inbounds i8, %Pointer %r15419, i32 80
	%r15421 = bitcast %Pointer %r15420 to %Objptr*
	%r15422 = load %Objptr, %Objptr* %r15421
	%r15423 = getelementptr inbounds i8, %Objptr %r15422, i32 0
	%r15424 = bitcast %Objptr %r15423 to %Word32*
	store %Word32 0, %Word32* %r15424
	; RP(4): Objptr (opt_35)  = OP (SP(40): Objptr (opt_7), 0): Objptr (opt_35)
	%r15425 = load %Pointer, %Pointer* %stackTop
	%r15426 = getelementptr inbounds i8, %Pointer %r15425, i32 40
	%r15427 = bitcast %Pointer %r15426 to %Objptr*
	%r15428 = load %Objptr, %Objptr* %r15427
	%r15429 = getelementptr inbounds i8, %Objptr %r15428, i32 0
	%r15430 = bitcast %Objptr %r15429 to %Objptr*
	%r15431 = load %Objptr, %Objptr* %r15430
	store %Objptr %r15431, %Objptr* %regP_4
	; CW64 (<Frontier>)  = 0x47
	%r15432 = load %Pointer, %Pointer* %frontier
	%r15433 = bitcast %Pointer %r15432 to %Word64*
	store %Word64 71, %Word64* %r15433
	; RQ(10): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r15434 = load %Pointer, %Pointer* %frontier
	%r15436 = ptrtoint %Pointer %r15434 to %uintptr_t
	%r15437 = add %uintptr_t %r15436, 8
	%r15435 = inttoptr %uintptr_t %r15437 to %Pointer
	store %CPointer %r15435, %CPointer* %regQ_10
	; RP(5): Objptr (opt_35)  = Cast (RQ(10): CPointer, Objptr (opt_35))
	%r15438 = load %CPointer, %CPointer* %regQ_10
	%r15439 = bitcast %CPointer %r15438 to %Objptr
	store %Objptr %r15439, %Objptr* %regP_5
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r15440 = load %Pointer, %Pointer* %frontier
	%r15442 = ptrtoint %Pointer %r15440 to %uintptr_t
	%r15443 = add %uintptr_t %r15442, 24
	%r15441 = inttoptr %uintptr_t %r15443 to %Pointer
	store %Pointer %r15441, %Pointer* %frontier
	; OP (RP(5): Objptr (opt_35), 0): Objptr (opt_7)  = SP(40): Objptr (opt_7)
	%r15444 = load %Pointer, %Pointer* %stackTop
	%r15445 = getelementptr inbounds i8, %Pointer %r15444, i32 40
	%r15446 = bitcast %Pointer %r15445 to %Objptr*
	%r15447 = load %Objptr, %Objptr* %r15446
	%r15448 = load %Objptr, %Objptr* %regP_5
	%r15449 = getelementptr inbounds i8, %Objptr %r15448, i32 0
	%r15450 = bitcast %Objptr %r15449 to %Objptr*
	store %Objptr %r15447, %Objptr* %r15450
	; OP (RP(5): Objptr (opt_35), 8): Objptr (opt_35)  = RP(4): Objptr (opt_35)
	%r15451 = load %Objptr, %Objptr* %regP_4
	%r15452 = load %Objptr, %Objptr* %regP_5
	%r15453 = getelementptr inbounds i8, %Objptr %r15452, i32 8
	%r15454 = bitcast %Objptr %r15453 to %Objptr*
	store %Objptr %r15451, %Objptr* %r15454
	; RW64(2): Word64  = WordU64_rshift (Cast (SP(40): Objptr (opt_7), Bits64), 0x8)
	%r15455 = load %Pointer, %Pointer* %stackTop
	%r15456 = getelementptr inbounds i8, %Pointer %r15455, i32 40
	%r15457 = bitcast %Pointer %r15456 to %Objptr*
	%r15458 = load %Objptr, %Objptr* %r15457
	%r15459 = ptrtoint %Objptr %r15458 to %Word64
	%r15460 = zext %Word32 8 to %Word64
	%r15461 = lshr %Word64 %r15459, %r15460
	store %Word64 %r15461, %Word64* %regW64_2
	; XW8 (OQ (<GCState>, 976): CPointer, RW64(2): Word64, 1, 0): Word8  = 0x1
	%r15462 = bitcast %struct.GC_state* @gcState to %Pointer
	%r15463 = getelementptr inbounds i8, %Pointer %r15462, i32 976
	%r15464 = bitcast %Pointer %r15463 to %CPointer*
	%r15465 = load %CPointer, %CPointer* %r15464
	%r15466 = load %Word64, %Word64* %regW64_2
	%r15467 = mul nsw %Word64 %r15466, 1
	%r15468 = add nsw %Word64 %r15467, 0
	%r15469 = getelementptr inbounds i8, %CPointer %r15465, %Word64 %r15468
	%r15470 = bitcast %CPointer %r15469 to %Word8*
	store %Word8 1, %Word8* %r15470
	; OP (SP(40): Objptr (opt_7), 0): Objptr (opt_35)  = RP(5): Objptr (opt_35)
	%r15471 = load %Objptr, %Objptr* %regP_5
	%r15472 = load %Pointer, %Pointer* %stackTop
	%r15473 = getelementptr inbounds i8, %Pointer %r15472, i32 40
	%r15474 = bitcast %Pointer %r15473 to %Objptr*
	%r15475 = load %Objptr, %Objptr* %r15474
	%r15476 = getelementptr inbounds i8, %Objptr %r15475, i32 0
	%r15477 = bitcast %Objptr %r15476 to %Objptr*
	store %Objptr %r15471, %Objptr* %r15477
	; CW64 (<Frontier>)  = 0x29
	%r15478 = load %Pointer, %Pointer* %frontier
	%r15479 = bitcast %Pointer %r15478 to %Word64*
	store %Word64 41, %Word64* %r15479
	; RQ(9): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r15480 = load %Pointer, %Pointer* %frontier
	%r15482 = ptrtoint %Pointer %r15480 to %uintptr_t
	%r15483 = add %uintptr_t %r15482, 8
	%r15481 = inttoptr %uintptr_t %r15483 to %Pointer
	store %CPointer %r15481, %CPointer* %regQ_9
	; SP(88): Objptr (opt_20)  = Cast (RQ(9): CPointer, Objptr (opt_20))
	%r15484 = load %CPointer, %CPointer* %regQ_9
	%r15485 = bitcast %CPointer %r15484 to %Objptr
	%r15486 = load %Pointer, %Pointer* %stackTop
	%r15487 = getelementptr inbounds i8, %Pointer %r15486, i32 88
	%r15488 = bitcast %Pointer %r15487 to %Objptr*
	store %Objptr %r15485, %Objptr* %r15488
	; <Frontier>  = CPointer_add (<Frontier>, 0x10)
	%r15489 = load %Pointer, %Pointer* %frontier
	%r15491 = ptrtoint %Pointer %r15489 to %uintptr_t
	%r15492 = add %uintptr_t %r15491, 16
	%r15490 = inttoptr %uintptr_t %r15492 to %Pointer
	store %Pointer %r15490, %Pointer* %frontier
	; OP (SP(88): Objptr (opt_20), 0): Objptr (opt_39)  = Cast (0x1, Objptr (opt_39))
	%r15493 = inttoptr %Word64 1 to %Objptr
	%r15494 = load %Pointer, %Pointer* %stackTop
	%r15495 = getelementptr inbounds i8, %Pointer %r15494, i32 88
	%r15496 = bitcast %Pointer %r15495 to %Objptr*
	%r15497 = load %Objptr, %Objptr* %r15496
	%r15498 = getelementptr inbounds i8, %Objptr %r15497, i32 0
	%r15499 = bitcast %Objptr %r15498 to %Objptr*
	store %Objptr %r15493, %Objptr* %r15499
	; RP(6): Objptr (opt_37)  = OP (SP(64): Objptr (opt_26), 0): Objptr (opt_37)
	%r15500 = load %Pointer, %Pointer* %stackTop
	%r15501 = getelementptr inbounds i8, %Pointer %r15500, i32 64
	%r15502 = bitcast %Pointer %r15501 to %Objptr*
	%r15503 = load %Objptr, %Objptr* %r15502
	%r15504 = getelementptr inbounds i8, %Objptr %r15503, i32 0
	%r15505 = bitcast %Objptr %r15504 to %Objptr*
	%r15506 = load %Objptr, %Objptr* %r15505
	store %Objptr %r15506, %Objptr* %regP_6
	; CW64 (<Frontier>)  = 0x4B
	%r15507 = load %Pointer, %Pointer* %frontier
	%r15508 = bitcast %Pointer %r15507 to %Word64*
	store %Word64 75, %Word64* %r15508
	; RQ(8): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r15509 = load %Pointer, %Pointer* %frontier
	%r15511 = ptrtoint %Pointer %r15509 to %uintptr_t
	%r15512 = add %uintptr_t %r15511, 8
	%r15510 = inttoptr %uintptr_t %r15512 to %Pointer
	store %CPointer %r15510, %CPointer* %regQ_8
	; RP(7): Objptr (opt_37)  = Cast (RQ(8): CPointer, Objptr (opt_37))
	%r15513 = load %CPointer, %CPointer* %regQ_8
	%r15514 = bitcast %CPointer %r15513 to %Objptr
	store %Objptr %r15514, %Objptr* %regP_7
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r15515 = load %Pointer, %Pointer* %frontier
	%r15517 = ptrtoint %Pointer %r15515 to %uintptr_t
	%r15518 = add %uintptr_t %r15517, 24
	%r15516 = inttoptr %uintptr_t %r15518 to %Pointer
	store %Pointer %r15516, %Pointer* %frontier
	; OP (RP(7): Objptr (opt_37), 0): Objptr (opt_20)  = SP(88): Objptr (opt_20)
	%r15519 = load %Pointer, %Pointer* %stackTop
	%r15520 = getelementptr inbounds i8, %Pointer %r15519, i32 88
	%r15521 = bitcast %Pointer %r15520 to %Objptr*
	%r15522 = load %Objptr, %Objptr* %r15521
	%r15523 = load %Objptr, %Objptr* %regP_7
	%r15524 = getelementptr inbounds i8, %Objptr %r15523, i32 0
	%r15525 = bitcast %Objptr %r15524 to %Objptr*
	store %Objptr %r15522, %Objptr* %r15525
	; OP (RP(7): Objptr (opt_37), 8): Objptr (opt_37)  = RP(6): Objptr (opt_37)
	%r15526 = load %Objptr, %Objptr* %regP_6
	%r15527 = load %Objptr, %Objptr* %regP_7
	%r15528 = getelementptr inbounds i8, %Objptr %r15527, i32 8
	%r15529 = bitcast %Objptr %r15528 to %Objptr*
	store %Objptr %r15526, %Objptr* %r15529
	; RW64(3): Word64  = WordU64_rshift (Cast (SP(64): Objptr (opt_26), Bits64), 0x8)
	%r15530 = load %Pointer, %Pointer* %stackTop
	%r15531 = getelementptr inbounds i8, %Pointer %r15530, i32 64
	%r15532 = bitcast %Pointer %r15531 to %Objptr*
	%r15533 = load %Objptr, %Objptr* %r15532
	%r15534 = ptrtoint %Objptr %r15533 to %Word64
	%r15535 = zext %Word32 8 to %Word64
	%r15536 = lshr %Word64 %r15534, %r15535
	store %Word64 %r15536, %Word64* %regW64_3
	; XW8 (OQ (<GCState>, 976): CPointer, RW64(3): Word64, 1, 0): Word8  = 0x1
	%r15537 = bitcast %struct.GC_state* @gcState to %Pointer
	%r15538 = getelementptr inbounds i8, %Pointer %r15537, i32 976
	%r15539 = bitcast %Pointer %r15538 to %CPointer*
	%r15540 = load %CPointer, %CPointer* %r15539
	%r15541 = load %Word64, %Word64* %regW64_3
	%r15542 = mul nsw %Word64 %r15541, 1
	%r15543 = add nsw %Word64 %r15542, 0
	%r15544 = getelementptr inbounds i8, %CPointer %r15540, %Word64 %r15543
	%r15545 = bitcast %CPointer %r15544 to %Word8*
	store %Word8 1, %Word8* %r15545
	; OP (SP(64): Objptr (opt_26), 0): Objptr (opt_37)  = RP(7): Objptr (opt_37)
	%r15546 = load %Objptr, %Objptr* %regP_7
	%r15547 = load %Pointer, %Pointer* %stackTop
	%r15548 = getelementptr inbounds i8, %Pointer %r15547, i32 64
	%r15549 = bitcast %Pointer %r15548 to %Objptr*
	%r15550 = load %Objptr, %Objptr* %r15549
	%r15551 = getelementptr inbounds i8, %Objptr %r15550, i32 0
	%r15552 = bitcast %Objptr %r15551 to %Objptr*
	store %Objptr %r15546, %Objptr* %r15552
	; CCall {args = (0x1), frameInfo = None, func = {args = (Word32), convention = cdecl, kind = Impure, prototype = {args = (Int32), res = Some Int32}, return = Word32, symbolScope = private, target = Posix_ProcEnv_isatty}, return = Some L_56}
	; GetOperands
	; Call
	%r15553 = call %Word32 @Posix_ProcEnv_isatty(%Word32 1)
	store %Word32 %r15553, %Word32* @CReturnW32
	br label %L_56

L_54:
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r15554 = bitcast %struct.GC_state* @gcState to %Pointer
	%r15555 = getelementptr inbounds i8, %Pointer %r15554, i32 8
	%r15556 = bitcast %Pointer %r15555 to %CPointer*
	%r15557 = load %CPointer, %CPointer* %r15556
	%r15558 = load %Pointer, %Pointer* %frontier
	%r15560 = icmp ult %Pointer %r15557, %r15558
	%r15559 = zext i1 %r15560 to %Word32
	store %Word32 %r15559, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_55), (0x1, L_355))}
	%r15561 = load %Word32, %Word32* %regW32_0
	%r15562 = trunc %Word32 %r15561 to i1
	br i1 %r15562, label %L_355, label %L_55

loop_8:
	; RW32(0): Word32  = WordS64_lt (RW64(0): Word64, 0x1)
	%r15563 = load %Word64, %Word64* %regW64_0
	%r15565 = icmp slt %Word64 %r15563, 1
	%r15564 = zext i1 %r15565 to %Word32
	store %Word32 %r15564, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_54), (0x1, L_357))}
	%r15566 = load %Word32, %Word32* %regW32_0
	%r15567 = trunc %Word32 %r15566 to i1
	br i1 %r15567, label %L_357, label %L_54

L_53:
	; Push(-88)
	%r15568 = load %Pointer, %Pointer* %stackTop
	%r15569 = getelementptr inbounds i8, %Pointer %r15568, i32 -88
	store %Pointer %r15569, %Pointer* %stackTop
	%r15570 = load %Objptr, %Objptr* @CReturnP
	store %Objptr %r15570, %Objptr* %regP_0
	; RW64(0): Word64  = 0x0
	store %Word64 0, %Word64* %regW64_0
	; Goto loop_8
	br label %loop_8

L_52:
	; CCall {args = (<GCState>, 0x0, 0x1, 0x17), frameInfo = Some {frameLayoutsIndex = 9}, func = {args = (GCState, Word64, Word64, Word64), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int64, Word64), res = Some Objptr}, return = Objptr (opt_11), symbolScope = private, target = GC_arrayAllocate}, return = Some L_53}
	; GetOperands
	%r15571 = bitcast %struct.GC_state* @gcState to %Pointer
	%r15572 = load %Pointer, %Pointer* %stackTop
	%r15573 = getelementptr inbounds i8, %Pointer %r15572, i32 80
	%r15574 = bitcast %Pointer %r15573 to %uintptr_t*
	store %uintptr_t 9, %uintptr_t* %r15574
	; Push(88)
	%r15575 = load %Pointer, %Pointer* %stackTop
	%r15576 = getelementptr inbounds i8, %Pointer %r15575, i32 88
	store %Pointer %r15576, %Pointer* %stackTop
	; FlushFrontier
	%r15577 = bitcast %struct.GC_state* @gcState to %Pointer
	%r15578 = getelementptr inbounds i8, %Pointer %r15577, i32 0
	%r15579 = bitcast %Pointer %r15578 to %Pointer*
	%r15580 = load %Pointer, %Pointer* %frontier
	store %Pointer %r15580, %Pointer* %r15579
	; FlushStackTop
	%r15581 = bitcast %struct.GC_state* @gcState to %Pointer
	%r15582 = getelementptr inbounds i8, %Pointer %r15581, i32 16
	%r15583 = bitcast %Pointer %r15582 to %Pointer*
	%r15584 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r15584, %Pointer* %r15583
	; Call
	%r15585 = call %Objptr @GC_arrayAllocate(%Pointer %r15571, %Word64 0, %Word64 1, %Word64 23)
	store %Objptr %r15585, %Objptr* @CReturnP
	; CacheFrontier
	%r15586 = bitcast %struct.GC_state* @gcState to %Pointer
	%r15587 = getelementptr inbounds i8, %Pointer %r15586, i32 0
	%r15588 = bitcast %Pointer %r15587 to %Pointer*
	%r15589 = load %Pointer, %Pointer* %r15588
	store %Pointer %r15589, %Pointer* %frontier
	; CacheStackTop
	%r15590 = bitcast %struct.GC_state* @gcState to %Pointer
	%r15591 = getelementptr inbounds i8, %Pointer %r15590, i32 16
	%r15592 = bitcast %Pointer %r15591 to %Pointer*
	%r15593 = load %Pointer, %Pointer* %r15592
	store %Pointer %r15593, %Pointer* %stackTop
	br label %L_53

loop_7:
	; RW32(0): Word32  = WordS64_lt (RW64(0): Word64, 0x41)
	%r15594 = load %Word64, %Word64* %regW64_0
	%r15596 = icmp slt %Word64 %r15594, 65
	%r15595 = zext i1 %r15596 to %Word32
	store %Word32 %r15595, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_52), (0x1, L_358))}
	%r15597 = load %Word32, %Word32* %regW32_0
	%r15598 = trunc %Word32 %r15597 to i1
	br i1 %r15598, label %L_358, label %L_52

L_51:
	; Push(-88)
	%r15599 = load %Pointer, %Pointer* %stackTop
	%r15600 = getelementptr inbounds i8, %Pointer %r15599, i32 -88
	store %Pointer %r15600, %Pointer* %stackTop
	%r15601 = load %Objptr, %Objptr* @CReturnP
	store %Objptr %r15601, %Objptr* %regP_0
	; RW64(0): Word64  = 0x0
	store %Word64 0, %Word64* %regW64_0
	; Goto loop_7
	br label %loop_7

L_50:
	; CW64 (<Frontier>)  = 0x1B
	%r15602 = load %Pointer, %Pointer* %frontier
	%r15603 = bitcast %Pointer %r15602 to %Word64*
	store %Word64 27, %Word64* %r15603
	; RQ(7): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r15604 = load %Pointer, %Pointer* %frontier
	%r15606 = ptrtoint %Pointer %r15604 to %uintptr_t
	%r15607 = add %uintptr_t %r15606, 8
	%r15605 = inttoptr %uintptr_t %r15607 to %Pointer
	store %CPointer %r15605, %CPointer* %regQ_7
	; RP(0): Objptr (opt_13)  = Cast (RQ(7): CPointer, Objptr (opt_13))
	%r15608 = load %CPointer, %CPointer* %regQ_7
	%r15609 = bitcast %CPointer %r15608 to %Objptr
	store %Objptr %r15609, %Objptr* %regP_0
	; <Frontier>  = CPointer_add (<Frontier>, 0x10)
	%r15610 = load %Pointer, %Pointer* %frontier
	%r15612 = ptrtoint %Pointer %r15610 to %uintptr_t
	%r15613 = add %uintptr_t %r15612, 16
	%r15611 = inttoptr %uintptr_t %r15613 to %Pointer
	store %Pointer %r15611, %Pointer* %frontier
	; OW32 (RP(0): Objptr (opt_13), 0): Word32  = 0x0
	%r15614 = load %Objptr, %Objptr* %regP_0
	%r15615 = getelementptr inbounds i8, %Objptr %r15614, i32 0
	%r15616 = bitcast %Objptr %r15615 to %Word32*
	store %Word32 0, %Word32* %r15616
	; CW64 (<Frontier>)  = 0x33
	%r15617 = load %Pointer, %Pointer* %frontier
	%r15618 = bitcast %Pointer %r15617 to %Word64*
	store %Word64 51, %Word64* %r15618
	; RQ(6): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r15619 = load %Pointer, %Pointer* %frontier
	%r15621 = ptrtoint %Pointer %r15619 to %uintptr_t
	%r15622 = add %uintptr_t %r15621, 8
	%r15620 = inttoptr %uintptr_t %r15622 to %Pointer
	store %CPointer %r15620, %CPointer* %regQ_6
	; SP(72): Objptr (opt_25)  = Cast (RQ(6): CPointer, Objptr (opt_25))
	%r15623 = load %CPointer, %CPointer* %regQ_6
	%r15624 = bitcast %CPointer %r15623 to %Objptr
	%r15625 = load %Pointer, %Pointer* %stackTop
	%r15626 = getelementptr inbounds i8, %Pointer %r15625, i32 72
	%r15627 = bitcast %Pointer %r15626 to %Objptr*
	store %Objptr %r15624, %Objptr* %r15627
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r15628 = load %Pointer, %Pointer* %frontier
	%r15630 = ptrtoint %Pointer %r15628 to %uintptr_t
	%r15631 = add %uintptr_t %r15630, 24
	%r15629 = inttoptr %uintptr_t %r15631 to %Pointer
	store %Pointer %r15629, %Pointer* %frontier
	; OP (SP(72): Objptr (opt_25), 0): Objptr (opt_13)  = RP(0): Objptr (opt_13)
	%r15632 = load %Objptr, %Objptr* %regP_0
	%r15633 = load %Pointer, %Pointer* %stackTop
	%r15634 = getelementptr inbounds i8, %Pointer %r15633, i32 72
	%r15635 = bitcast %Pointer %r15634 to %Objptr*
	%r15636 = load %Objptr, %Objptr* %r15635
	%r15637 = getelementptr inbounds i8, %Objptr %r15636, i32 0
	%r15638 = bitcast %Objptr %r15637 to %Objptr*
	store %Objptr %r15632, %Objptr* %r15638
	; OP (SP(72): Objptr (opt_25), 8): Objptr (opt_11)  = SP(64): Objptr (opt_11)
	%r15639 = load %Pointer, %Pointer* %stackTop
	%r15640 = getelementptr inbounds i8, %Pointer %r15639, i32 64
	%r15641 = bitcast %Pointer %r15640 to %Objptr*
	%r15642 = load %Objptr, %Objptr* %r15641
	%r15643 = load %Pointer, %Pointer* %stackTop
	%r15644 = getelementptr inbounds i8, %Pointer %r15643, i32 72
	%r15645 = bitcast %Pointer %r15644 to %Objptr*
	%r15646 = load %Objptr, %Objptr* %r15645
	%r15647 = getelementptr inbounds i8, %Objptr %r15646, i32 8
	%r15648 = bitcast %Objptr %r15647 to %Objptr*
	store %Objptr %r15642, %Objptr* %r15648
	; CCall {args = (<GCState>, 0x0, 0x41, 0x17), frameInfo = Some {frameLayoutsIndex = 8}, func = {args = (GCState, Word64, Word64, Word64), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int64, Word64), res = Some Objptr}, return = Objptr (opt_11), symbolScope = private, target = GC_arrayAllocate}, return = Some L_51}
	; GetOperands
	%r15649 = bitcast %struct.GC_state* @gcState to %Pointer
	%r15650 = load %Pointer, %Pointer* %stackTop
	%r15651 = getelementptr inbounds i8, %Pointer %r15650, i32 80
	%r15652 = bitcast %Pointer %r15651 to %uintptr_t*
	store %uintptr_t 8, %uintptr_t* %r15652
	; Push(88)
	%r15653 = load %Pointer, %Pointer* %stackTop
	%r15654 = getelementptr inbounds i8, %Pointer %r15653, i32 88
	store %Pointer %r15654, %Pointer* %stackTop
	; FlushFrontier
	%r15655 = bitcast %struct.GC_state* @gcState to %Pointer
	%r15656 = getelementptr inbounds i8, %Pointer %r15655, i32 0
	%r15657 = bitcast %Pointer %r15656 to %Pointer*
	%r15658 = load %Pointer, %Pointer* %frontier
	store %Pointer %r15658, %Pointer* %r15657
	; FlushStackTop
	%r15659 = bitcast %struct.GC_state* @gcState to %Pointer
	%r15660 = getelementptr inbounds i8, %Pointer %r15659, i32 16
	%r15661 = bitcast %Pointer %r15660 to %Pointer*
	%r15662 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r15662, %Pointer* %r15661
	; Call
	%r15663 = call %Objptr @GC_arrayAllocate(%Pointer %r15649, %Word64 0, %Word64 65, %Word64 23)
	store %Objptr %r15663, %Objptr* @CReturnP
	; CacheFrontier
	%r15664 = bitcast %struct.GC_state* @gcState to %Pointer
	%r15665 = getelementptr inbounds i8, %Pointer %r15664, i32 0
	%r15666 = bitcast %Pointer %r15665 to %Pointer*
	%r15667 = load %Pointer, %Pointer* %r15666
	store %Pointer %r15667, %Pointer* %frontier
	; CacheStackTop
	%r15668 = bitcast %struct.GC_state* @gcState to %Pointer
	%r15669 = getelementptr inbounds i8, %Pointer %r15668, i32 16
	%r15670 = bitcast %Pointer %r15669 to %Pointer*
	%r15671 = load %Pointer, %Pointer* %r15670
	store %Pointer %r15671, %Pointer* %stackTop
	br label %L_51

L_49:
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r15672 = bitcast %struct.GC_state* @gcState to %Pointer
	%r15673 = getelementptr inbounds i8, %Pointer %r15672, i32 8
	%r15674 = bitcast %Pointer %r15673 to %CPointer*
	%r15675 = load %CPointer, %CPointer* %r15674
	%r15676 = load %Pointer, %Pointer* %frontier
	%r15678 = icmp ult %Pointer %r15675, %r15676
	%r15677 = zext i1 %r15678 to %Word32
	store %Word32 %r15677, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_50), (0x1, L_359))}
	%r15679 = load %Word32, %Word32* %regW32_0
	%r15680 = trunc %Word32 %r15679 to i1
	br i1 %r15680, label %L_359, label %L_50

loop_6:
	; RW32(0): Word32  = WordS64_lt (RW64(0): Word64, 0x21)
	%r15681 = load %Word64, %Word64* %regW64_0
	%r15683 = icmp slt %Word64 %r15681, 33
	%r15682 = zext i1 %r15683 to %Word32
	store %Word32 %r15682, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_49), (0x1, L_361))}
	%r15684 = load %Word32, %Word32* %regW32_0
	%r15685 = trunc %Word32 %r15684 to i1
	br i1 %r15685, label %L_361, label %L_49

L_48:
	; Push(-72)
	%r15686 = load %Pointer, %Pointer* %stackTop
	%r15687 = getelementptr inbounds i8, %Pointer %r15686, i32 -72
	store %Pointer %r15687, %Pointer* %stackTop
	%r15689 = load %Pointer, %Pointer* %stackTop
	%r15690 = getelementptr inbounds i8, %Pointer %r15689, i32 64
	%r15691 = bitcast %Pointer %r15690 to %Objptr*
	%r15688 = load %Objptr, %Objptr* @CReturnP
	store %Objptr %r15688, %Objptr* %r15691
	; RW64(0): Word64  = 0x0
	store %Word64 0, %Word64* %regW64_0
	; Goto loop_6
	br label %loop_6

L_47:
	; CCall {args = (<GCState>, 0x0, 0x21, 0x17), frameInfo = Some {frameLayoutsIndex = 7}, func = {args = (GCState, Word64, Word64, Word64), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int64, Word64), res = Some Objptr}, return = Objptr (opt_11), symbolScope = private, target = GC_arrayAllocate}, return = Some L_48}
	; GetOperands
	%r15692 = bitcast %struct.GC_state* @gcState to %Pointer
	%r15693 = load %Pointer, %Pointer* %stackTop
	%r15694 = getelementptr inbounds i8, %Pointer %r15693, i32 64
	%r15695 = bitcast %Pointer %r15694 to %uintptr_t*
	store %uintptr_t 7, %uintptr_t* %r15695
	; Push(72)
	%r15696 = load %Pointer, %Pointer* %stackTop
	%r15697 = getelementptr inbounds i8, %Pointer %r15696, i32 72
	store %Pointer %r15697, %Pointer* %stackTop
	; FlushFrontier
	%r15698 = bitcast %struct.GC_state* @gcState to %Pointer
	%r15699 = getelementptr inbounds i8, %Pointer %r15698, i32 0
	%r15700 = bitcast %Pointer %r15699 to %Pointer*
	%r15701 = load %Pointer, %Pointer* %frontier
	store %Pointer %r15701, %Pointer* %r15700
	; FlushStackTop
	%r15702 = bitcast %struct.GC_state* @gcState to %Pointer
	%r15703 = getelementptr inbounds i8, %Pointer %r15702, i32 16
	%r15704 = bitcast %Pointer %r15703 to %Pointer*
	%r15705 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r15705, %Pointer* %r15704
	; Call
	%r15706 = call %Objptr @GC_arrayAllocate(%Pointer %r15692, %Word64 0, %Word64 33, %Word64 23)
	store %Objptr %r15706, %Objptr* @CReturnP
	; CacheFrontier
	%r15707 = bitcast %struct.GC_state* @gcState to %Pointer
	%r15708 = getelementptr inbounds i8, %Pointer %r15707, i32 0
	%r15709 = bitcast %Pointer %r15708 to %Pointer*
	%r15710 = load %Pointer, %Pointer* %r15709
	store %Pointer %r15710, %Pointer* %frontier
	; CacheStackTop
	%r15711 = bitcast %struct.GC_state* @gcState to %Pointer
	%r15712 = getelementptr inbounds i8, %Pointer %r15711, i32 16
	%r15713 = bitcast %Pointer %r15712 to %Pointer*
	%r15714 = load %Pointer, %Pointer* %r15713
	store %Pointer %r15714, %Pointer* %stackTop
	br label %L_48

loop_5:
	; RW32(0): Word32  = WordS64_lt (RW64(0): Word64, 0x100)
	%r15715 = load %Word64, %Word64* %regW64_0
	%r15717 = icmp slt %Word64 %r15715, 256
	%r15716 = zext i1 %r15717 to %Word32
	store %Word32 %r15716, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_47), (0x1, L_362))}
	%r15718 = load %Word32, %Word32* %regW32_0
	%r15719 = trunc %Word32 %r15718 to i1
	br i1 %r15719, label %L_362, label %L_47

L_46:
	; Push(-64)
	%r15720 = load %Pointer, %Pointer* %stackTop
	%r15721 = getelementptr inbounds i8, %Pointer %r15720, i32 -64
	store %Pointer %r15721, %Pointer* %stackTop
	%r15723 = load %Pointer, %Pointer* %stackTop
	%r15724 = getelementptr inbounds i8, %Pointer %r15723, i32 56
	%r15725 = bitcast %Pointer %r15724 to %Objptr*
	%r15722 = load %Objptr, %Objptr* @CReturnP
	store %Objptr %r15722, %Objptr* %r15725
	; RW64(0): Word64  = 0x0
	store %Word64 0, %Word64* %regW64_0
	; Goto loop_5
	br label %loop_5

L_45:
	; CCall {args = (<GCState>, 0x0, 0x100, 0x31), frameInfo = Some {frameLayoutsIndex = 6}, func = {args = (GCState, Word64, Word64, Word64), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int64, Word64), res = Some Objptr}, return = Objptr (opt_24), symbolScope = private, target = GC_arrayAllocate}, return = Some L_46}
	; GetOperands
	%r15726 = bitcast %struct.GC_state* @gcState to %Pointer
	%r15727 = load %Pointer, %Pointer* %stackTop
	%r15728 = getelementptr inbounds i8, %Pointer %r15727, i32 56
	%r15729 = bitcast %Pointer %r15728 to %uintptr_t*
	store %uintptr_t 6, %uintptr_t* %r15729
	; Push(64)
	%r15730 = load %Pointer, %Pointer* %stackTop
	%r15731 = getelementptr inbounds i8, %Pointer %r15730, i32 64
	store %Pointer %r15731, %Pointer* %stackTop
	; FlushFrontier
	%r15732 = bitcast %struct.GC_state* @gcState to %Pointer
	%r15733 = getelementptr inbounds i8, %Pointer %r15732, i32 0
	%r15734 = bitcast %Pointer %r15733 to %Pointer*
	%r15735 = load %Pointer, %Pointer* %frontier
	store %Pointer %r15735, %Pointer* %r15734
	; FlushStackTop
	%r15736 = bitcast %struct.GC_state* @gcState to %Pointer
	%r15737 = getelementptr inbounds i8, %Pointer %r15736, i32 16
	%r15738 = bitcast %Pointer %r15737 to %Pointer*
	%r15739 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r15739, %Pointer* %r15738
	; Call
	%r15740 = call %Objptr @GC_arrayAllocate(%Pointer %r15726, %Word64 0, %Word64 256, %Word64 49)
	store %Objptr %r15740, %Objptr* @CReturnP
	; CacheFrontier
	%r15741 = bitcast %struct.GC_state* @gcState to %Pointer
	%r15742 = getelementptr inbounds i8, %Pointer %r15741, i32 0
	%r15743 = bitcast %Pointer %r15742 to %Pointer*
	%r15744 = load %Pointer, %Pointer* %r15743
	store %Pointer %r15744, %Pointer* %frontier
	; CacheStackTop
	%r15745 = bitcast %struct.GC_state* @gcState to %Pointer
	%r15746 = getelementptr inbounds i8, %Pointer %r15745, i32 16
	%r15747 = bitcast %Pointer %r15746 to %Pointer*
	%r15748 = load %Pointer, %Pointer* %r15747
	store %Pointer %r15748, %Pointer* %stackTop
	br label %L_46

loop_4:
	; RW32(0): Word32  = WordS64_lt (RW64(0): Word64, 0x100)
	%r15749 = load %Word64, %Word64* %regW64_0
	%r15751 = icmp slt %Word64 %r15749, 256
	%r15750 = zext i1 %r15751 to %Word32
	store %Word32 %r15750, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_45), (0x1, L_375))}
	%r15752 = load %Word32, %Word32* %regW32_0
	%r15753 = trunc %Word32 %r15752 to i1
	br i1 %r15753, label %L_375, label %L_45

L_44:
	; RW64(0): Word64  = 0x0
	store %Word64 0, %Word64* %regW64_0
	; Goto loop_4
	br label %loop_4

loop_3:
	; RW32(0): Word32  = WordS64_lt (RW64(0): Word64, 0x100)
	%r15754 = load %Word64, %Word64* %regW64_0
	%r15756 = icmp slt %Word64 %r15754, 256
	%r15755 = zext i1 %r15756 to %Word32
	store %Word32 %r15755, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_44), (0x1, L_385))}
	%r15757 = load %Word32, %Word32* %regW32_0
	%r15758 = trunc %Word32 %r15757 to i1
	br i1 %r15758, label %L_385, label %L_44

L_43:
	; Push(-56)
	%r15759 = load %Pointer, %Pointer* %stackTop
	%r15760 = getelementptr inbounds i8, %Pointer %r15759, i32 -56
	store %Pointer %r15760, %Pointer* %stackTop
	%r15762 = load %Pointer, %Pointer* %stackTop
	%r15763 = getelementptr inbounds i8, %Pointer %r15762, i32 48
	%r15764 = bitcast %Pointer %r15763 to %Objptr*
	%r15761 = load %Objptr, %Objptr* @CReturnP
	store %Objptr %r15761, %Objptr* %r15764
	; RW64(0): Word64  = 0x0
	store %Word64 0, %Word64* %regW64_0
	; Goto loop_3
	br label %loop_3

L_42:
	; CCall {args = (<GCState>, 0x0, 0x100, 0x2F), frameInfo = Some {frameLayoutsIndex = 5}, func = {args = (GCState, Word64, Word64, Word64), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int64, Word64), res = Some Objptr}, return = Objptr (opt_23), symbolScope = private, target = GC_arrayAllocate}, return = Some L_43}
	; GetOperands
	%r15765 = bitcast %struct.GC_state* @gcState to %Pointer
	%r15766 = load %Pointer, %Pointer* %stackTop
	%r15767 = getelementptr inbounds i8, %Pointer %r15766, i32 48
	%r15768 = bitcast %Pointer %r15767 to %uintptr_t*
	store %uintptr_t 5, %uintptr_t* %r15768
	; Push(56)
	%r15769 = load %Pointer, %Pointer* %stackTop
	%r15770 = getelementptr inbounds i8, %Pointer %r15769, i32 56
	store %Pointer %r15770, %Pointer* %stackTop
	; FlushFrontier
	%r15771 = bitcast %struct.GC_state* @gcState to %Pointer
	%r15772 = getelementptr inbounds i8, %Pointer %r15771, i32 0
	%r15773 = bitcast %Pointer %r15772 to %Pointer*
	%r15774 = load %Pointer, %Pointer* %frontier
	store %Pointer %r15774, %Pointer* %r15773
	; FlushStackTop
	%r15775 = bitcast %struct.GC_state* @gcState to %Pointer
	%r15776 = getelementptr inbounds i8, %Pointer %r15775, i32 16
	%r15777 = bitcast %Pointer %r15776 to %Pointer*
	%r15778 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r15778, %Pointer* %r15777
	; Call
	%r15779 = call %Objptr @GC_arrayAllocate(%Pointer %r15765, %Word64 0, %Word64 256, %Word64 47)
	store %Objptr %r15779, %Objptr* @CReturnP
	; CacheFrontier
	%r15780 = bitcast %struct.GC_state* @gcState to %Pointer
	%r15781 = getelementptr inbounds i8, %Pointer %r15780, i32 0
	%r15782 = bitcast %Pointer %r15781 to %Pointer*
	%r15783 = load %Pointer, %Pointer* %r15782
	store %Pointer %r15783, %Pointer* %frontier
	; CacheStackTop
	%r15784 = bitcast %struct.GC_state* @gcState to %Pointer
	%r15785 = getelementptr inbounds i8, %Pointer %r15784, i32 16
	%r15786 = bitcast %Pointer %r15785 to %Pointer*
	%r15787 = load %Pointer, %Pointer* %r15786
	store %Pointer %r15787, %Pointer* %stackTop
	br label %L_43

loop_2:
	; RW32(0): Word32  = WordS64_lt (RW64(0): Word64, 0x100)
	%r15788 = load %Word64, %Word64* %regW64_0
	%r15790 = icmp slt %Word64 %r15788, 256
	%r15789 = zext i1 %r15790 to %Word32
	store %Word32 %r15789, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_42), (0x1, L_392))}
	%r15791 = load %Word32, %Word32* %regW32_0
	%r15792 = trunc %Word32 %r15791 to i1
	br i1 %r15792, label %L_392, label %L_42

L_41:
	; RW64(0): Word64  = 0x0
	store %Word64 0, %Word64* %regW64_0
	; Goto loop_2
	br label %loop_2

loop_1:
	; RW32(0): Word32  = WordS64_lt (RW64(0): Word64, 0x100)
	%r15793 = load %Word64, %Word64* %regW64_0
	%r15795 = icmp slt %Word64 %r15793, 256
	%r15794 = zext i1 %r15795 to %Word32
	store %Word32 %r15794, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_41), (0x1, L_393))}
	%r15796 = load %Word32, %Word32* %regW32_0
	%r15797 = trunc %Word32 %r15796 to i1
	br i1 %r15797, label %L_393, label %L_41

L_40:
	; CW64 (<Frontier>)  = 0xF
	%r15798 = load %Pointer, %Pointer* %frontier
	%r15799 = bitcast %Pointer %r15798 to %Word64*
	store %Word64 15, %Word64* %r15799
	; RQ(5): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r15800 = load %Pointer, %Pointer* %frontier
	%r15802 = ptrtoint %Pointer %r15800 to %uintptr_t
	%r15803 = add %uintptr_t %r15802, 8
	%r15801 = inttoptr %uintptr_t %r15803 to %Pointer
	store %CPointer %r15801, %CPointer* %regQ_5
	; SP(40): Objptr (opt_7)  = Cast (RQ(5): CPointer, Objptr (opt_7))
	%r15804 = load %CPointer, %CPointer* %regQ_5
	%r15805 = bitcast %CPointer %r15804 to %Objptr
	%r15806 = load %Pointer, %Pointer* %stackTop
	%r15807 = getelementptr inbounds i8, %Pointer %r15806, i32 40
	%r15808 = bitcast %Pointer %r15807 to %Objptr*
	store %Objptr %r15805, %Objptr* %r15808
	; <Frontier>  = CPointer_add (<Frontier>, 0x10)
	%r15809 = load %Pointer, %Pointer* %frontier
	%r15811 = ptrtoint %Pointer %r15809 to %uintptr_t
	%r15812 = add %uintptr_t %r15811, 16
	%r15810 = inttoptr %uintptr_t %r15812 to %Pointer
	store %Pointer %r15810, %Pointer* %frontier
	; OP (SP(40): Objptr (opt_7), 0): Objptr (opt_35)  = Cast (0x1, Objptr (opt_35))
	%r15813 = inttoptr %Word64 1 to %Objptr
	%r15814 = load %Pointer, %Pointer* %stackTop
	%r15815 = getelementptr inbounds i8, %Pointer %r15814, i32 40
	%r15816 = bitcast %Pointer %r15815 to %Objptr*
	%r15817 = load %Objptr, %Objptr* %r15816
	%r15818 = getelementptr inbounds i8, %Objptr %r15817, i32 0
	%r15819 = bitcast %Objptr %r15818 to %Objptr*
	store %Objptr %r15813, %Objptr* %r15819
	; RW64(0): Word64  = 0x0
	store %Word64 0, %Word64* %regW64_0
	; Goto loop_1
	br label %loop_1

L_39:
	; Goto L_40
	br label %L_40

L_38:
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r15820 = bitcast %struct.GC_state* @gcState to %Pointer
	%r15821 = getelementptr inbounds i8, %Pointer %r15820, i32 8
	%r15822 = bitcast %Pointer %r15821 to %CPointer*
	%r15823 = load %CPointer, %CPointer* %r15822
	%r15824 = load %Pointer, %Pointer* %frontier
	%r15826 = icmp ult %Pointer %r15823, %r15824
	%r15825 = zext i1 %r15826 to %Word32
	store %Word32 %r15825, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_39), (0x1, L_394))}
	%r15827 = load %Word32, %Word32* %regW32_0
	%r15828 = trunc %Word32 %r15827 to i1
	br i1 %r15828, label %L_394, label %L_39

L_37:
	; RP(2): Objptr (opt_46)  = OP (RP(1): Objptr (opt_46), 8): Objptr (opt_46)
	%r15829 = load %Objptr, %Objptr* %regP_1
	%r15830 = getelementptr inbounds i8, %Objptr %r15829, i32 8
	%r15831 = bitcast %Objptr %r15830 to %Objptr*
	%r15832 = load %Objptr, %Objptr* %r15831
	store %Objptr %r15832, %Objptr* %regP_2
	; RP(3): Objptr (opt_8)  = OP (RP(1): Objptr (opt_46), 0): Objptr (opt_8)
	%r15833 = load %Objptr, %Objptr* %regP_1
	%r15834 = getelementptr inbounds i8, %Objptr %r15833, i32 0
	%r15835 = bitcast %Objptr %r15834 to %Objptr*
	%r15836 = load %Objptr, %Objptr* %r15835
	store %Objptr %r15836, %Objptr* %regP_3
	; RP(1): Objptr (opt_46)  = RP(2): Objptr (opt_46)
	%r15837 = load %Objptr, %Objptr* %regP_2
	store %Objptr %r15837, %Objptr* %regP_1
	; RP(2): Objptr (opt_8)  = RP(3): Objptr (opt_8)
	%r15838 = load %Objptr, %Objptr* %regP_3
	store %Objptr %r15838, %Objptr* %regP_2
	; Goto L_36
	br label %L_36

L_36:
	; RW64(0): Word64  = OW64 (RP(2): Objptr (opt_8), 0): Word64
	%r15839 = load %Objptr, %Objptr* %regP_2
	%r15840 = getelementptr inbounds i8, %Objptr %r15839, i32 0
	%r15841 = bitcast %Objptr %r15840 to %Word64*
	%r15842 = load %Word64, %Word64* %r15841
	store %Word64 %r15842, %Word64* %regW64_0
	; RW64(1): Word64  = OW64 (RP(2): Objptr (opt_8), 8): Word64
	%r15843 = load %Objptr, %Objptr* %regP_2
	%r15844 = getelementptr inbounds i8, %Objptr %r15843, i32 8
	%r15845 = bitcast %Objptr %r15844 to %Word64*
	%r15846 = load %Word64, %Word64* %r15845
	store %Word64 %r15846, %Word64* %regW64_1
	; XW64 (RP(0): Objptr (opt_22), RW64(1): Word64, 8, 0): Word64  = RW64(0): Word64
	%r15847 = load %Word64, %Word64* %regW64_0
	%r15848 = load %Objptr, %Objptr* %regP_0
	%r15849 = load %Word64, %Word64* %regW64_1
	%r15850 = mul nsw %Word64 %r15849, 8
	%r15851 = add nsw %Word64 %r15850, 0
	%r15852 = getelementptr inbounds i8, %Objptr %r15848, %Word64 %r15851
	%r15853 = bitcast %Objptr %r15852 to %Word64*
	store %Word64 %r15847, %Word64* %r15853
	; switch {test = Cast (RP(1): Objptr (opt_46), Bits64), default = Some L_37, cases = ((0x1, L_38))}
	%r15854 = load %Objptr, %Objptr* %regP_1
	%r15855 = ptrtoint %Objptr %r15854 to %Word64
	switch %Word64 %r15855, label %L_37 [
		%Word64 1, label %L_38
	]

L_35:
	; RP(1): Objptr (opt_46)  = OP (SP(40): Objptr (opt_46), 8): Objptr (opt_46)
	%r15856 = load %Pointer, %Pointer* %stackTop
	%r15857 = getelementptr inbounds i8, %Pointer %r15856, i32 40
	%r15858 = bitcast %Pointer %r15857 to %Objptr*
	%r15859 = load %Objptr, %Objptr* %r15858
	%r15860 = getelementptr inbounds i8, %Objptr %r15859, i32 8
	%r15861 = bitcast %Objptr %r15860 to %Objptr*
	%r15862 = load %Objptr, %Objptr* %r15861
	store %Objptr %r15862, %Objptr* %regP_1
	; RP(2): Objptr (opt_8)  = OP (SP(40): Objptr (opt_46), 0): Objptr (opt_8)
	%r15863 = load %Pointer, %Pointer* %stackTop
	%r15864 = getelementptr inbounds i8, %Pointer %r15863, i32 40
	%r15865 = bitcast %Pointer %r15864 to %Objptr*
	%r15866 = load %Objptr, %Objptr* %r15865
	%r15867 = getelementptr inbounds i8, %Objptr %r15866, i32 0
	%r15868 = bitcast %Objptr %r15867 to %Objptr*
	%r15869 = load %Objptr, %Objptr* %r15868
	store %Objptr %r15869, %Objptr* %regP_2
	; Goto L_36
	br label %L_36

L_34:
	; Push(-56)
	%r15870 = load %Pointer, %Pointer* %stackTop
	%r15871 = getelementptr inbounds i8, %Pointer %r15870, i32 -56
	store %Pointer %r15871, %Pointer* %stackTop
	%r15872 = load %Objptr, %Objptr* @CReturnP
	store %Objptr %r15872, %Objptr* %regP_0
	; switch {test = Cast (SP(40): Objptr (opt_46), Bits64), default = Some L_35, cases = ((0x1, L_396))}
	%r15873 = load %Pointer, %Pointer* %stackTop
	%r15874 = getelementptr inbounds i8, %Pointer %r15873, i32 40
	%r15875 = bitcast %Pointer %r15874 to %Objptr*
	%r15876 = load %Objptr, %Objptr* %r15875
	%r15877 = ptrtoint %Objptr %r15876 to %Word64
	switch %Word64 %r15877, label %L_35 [
		%Word64 1, label %L_396
	]

L_33:
	; CCall {args = (<GCState>, 0x10, SW64(48): Word64, 0x2D), frameInfo = Some {frameLayoutsIndex = 4}, func = {args = (GCState, Word64, Word64, Word64), convention = cdecl, kind = Runtime {bytesNeeded = None, ensuresBytesFree = true, mayGC = true, maySwitchThreads = false, modifiesFrontier = true, readsStackTop = true, writesStackTop = true}, prototype = {args = (CPointer, Word64, Int64, Word64), res = Some Objptr}, return = Objptr (opt_22), symbolScope = private, target = GC_arrayAllocate}, return = Some L_34}
	; GetOperands
	%r15878 = bitcast %struct.GC_state* @gcState to %Pointer
	%r15879 = load %Pointer, %Pointer* %stackTop
	%r15880 = getelementptr inbounds i8, %Pointer %r15879, i32 48
	%r15881 = bitcast %Pointer %r15880 to %Word64*
	%r15882 = load %Word64, %Word64* %r15881
	%r15883 = load %Pointer, %Pointer* %stackTop
	%r15884 = getelementptr inbounds i8, %Pointer %r15883, i32 48
	%r15885 = bitcast %Pointer %r15884 to %uintptr_t*
	store %uintptr_t 4, %uintptr_t* %r15885
	; Push(56)
	%r15886 = load %Pointer, %Pointer* %stackTop
	%r15887 = getelementptr inbounds i8, %Pointer %r15886, i32 56
	store %Pointer %r15887, %Pointer* %stackTop
	; FlushFrontier
	%r15888 = bitcast %struct.GC_state* @gcState to %Pointer
	%r15889 = getelementptr inbounds i8, %Pointer %r15888, i32 0
	%r15890 = bitcast %Pointer %r15889 to %Pointer*
	%r15891 = load %Pointer, %Pointer* %frontier
	store %Pointer %r15891, %Pointer* %r15890
	; FlushStackTop
	%r15892 = bitcast %struct.GC_state* @gcState to %Pointer
	%r15893 = getelementptr inbounds i8, %Pointer %r15892, i32 16
	%r15894 = bitcast %Pointer %r15893 to %Pointer*
	%r15895 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r15895, %Pointer* %r15894
	; Call
	%r15896 = call %Objptr @GC_arrayAllocate(%Pointer %r15878, %Word64 16, %Word64 %r15882, %Word64 45)
	store %Objptr %r15896, %Objptr* @CReturnP
	; CacheFrontier
	%r15897 = bitcast %struct.GC_state* @gcState to %Pointer
	%r15898 = getelementptr inbounds i8, %Pointer %r15897, i32 0
	%r15899 = bitcast %Pointer %r15898 to %Pointer*
	%r15900 = load %Pointer, %Pointer* %r15899
	store %Pointer %r15900, %Pointer* %frontier
	; CacheStackTop
	%r15901 = bitcast %struct.GC_state* @gcState to %Pointer
	%r15902 = getelementptr inbounds i8, %Pointer %r15901, i32 16
	%r15903 = bitcast %Pointer %r15902 to %Pointer*
	%r15904 = load %Pointer, %Pointer* %r15903
	store %Pointer %r15904, %Pointer* %stackTop
	br label %L_34

L_32:
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r15905 = bitcast %struct.GC_state* @gcState to %Pointer
	%r15906 = getelementptr inbounds i8, %Pointer %r15905, i32 8
	%r15907 = bitcast %Pointer %r15906 to %CPointer*
	%r15908 = load %CPointer, %CPointer* %r15907
	%r15909 = load %Pointer, %Pointer* %frontier
	%r15911 = icmp ult %Pointer %r15908, %r15909
	%r15910 = zext i1 %r15911 to %Word32
	store %Word32 %r15910, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_33), (0x1, L_397))}
	%r15912 = load %Word32, %Word32* %regW32_0
	%r15913 = trunc %Word32 %r15912 to i1
	br i1 %r15913, label %L_397, label %L_33

L_31:
	; CW64 (<Frontier>)  = 0x11
	%r15914 = load %Pointer, %Pointer* %frontier
	%r15915 = bitcast %Pointer %r15914 to %Word64*
	store %Word64 17, %Word64* %r15915
	; RQ(4): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r15916 = load %Pointer, %Pointer* %frontier
	%r15918 = ptrtoint %Pointer %r15916 to %uintptr_t
	%r15919 = add %uintptr_t %r15918, 8
	%r15917 = inttoptr %uintptr_t %r15919 to %Pointer
	store %CPointer %r15917, %CPointer* %regQ_4
	; RP(0): Objptr (opt_8)  = Cast (RQ(4): CPointer, Objptr (opt_8))
	%r15920 = load %CPointer, %CPointer* %regQ_4
	%r15921 = bitcast %CPointer %r15920 to %Objptr
	store %Objptr %r15921, %Objptr* %regP_0
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r15922 = load %Pointer, %Pointer* %frontier
	%r15924 = ptrtoint %Pointer %r15922 to %uintptr_t
	%r15925 = add %uintptr_t %r15924, 24
	%r15923 = inttoptr %uintptr_t %r15925 to %Pointer
	store %Pointer %r15923, %Pointer* %frontier
	; OW64 (RP(0): Objptr (opt_8), 0): Word64  = SW64(56): Word64
	%r15926 = load %Pointer, %Pointer* %stackTop
	%r15927 = getelementptr inbounds i8, %Pointer %r15926, i32 56
	%r15928 = bitcast %Pointer %r15927 to %Word64*
	%r15929 = load %Word64, %Word64* %r15928
	%r15930 = load %Objptr, %Objptr* %regP_0
	%r15931 = getelementptr inbounds i8, %Objptr %r15930, i32 0
	%r15932 = bitcast %Objptr %r15931 to %Word64*
	store %Word64 %r15929, %Word64* %r15932
	; OW64 (RP(0): Objptr (opt_8), 8): Word64  = SW64(48): Word64
	%r15933 = load %Pointer, %Pointer* %stackTop
	%r15934 = getelementptr inbounds i8, %Pointer %r15933, i32 48
	%r15935 = bitcast %Pointer %r15934 to %Word64*
	%r15936 = load %Word64, %Word64* %r15935
	%r15937 = load %Objptr, %Objptr* %regP_0
	%r15938 = getelementptr inbounds i8, %Objptr %r15937, i32 8
	%r15939 = bitcast %Objptr %r15938 to %Word64*
	store %Word64 %r15936, %Word64* %r15939
	; CW64 (<Frontier>)  = 0x5D
	%r15940 = load %Pointer, %Pointer* %frontier
	%r15941 = bitcast %Pointer %r15940 to %Word64*
	store %Word64 93, %Word64* %r15941
	; RQ(3): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r15942 = load %Pointer, %Pointer* %frontier
	%r15944 = ptrtoint %Pointer %r15942 to %uintptr_t
	%r15945 = add %uintptr_t %r15944, 8
	%r15943 = inttoptr %uintptr_t %r15945 to %Pointer
	store %CPointer %r15943, %CPointer* %regQ_3
	; RP(1): Objptr (opt_46)  = Cast (RQ(3): CPointer, Objptr (opt_46))
	%r15946 = load %CPointer, %CPointer* %regQ_3
	%r15947 = bitcast %CPointer %r15946 to %Objptr
	store %Objptr %r15947, %Objptr* %regP_1
	; <Frontier>  = CPointer_add (<Frontier>, 0x18)
	%r15948 = load %Pointer, %Pointer* %frontier
	%r15950 = ptrtoint %Pointer %r15948 to %uintptr_t
	%r15951 = add %uintptr_t %r15950, 24
	%r15949 = inttoptr %uintptr_t %r15951 to %Pointer
	store %Pointer %r15949, %Pointer* %frontier
	; OP (RP(1): Objptr (opt_46), 0): Objptr (opt_8)  = RP(0): Objptr (opt_8)
	%r15952 = load %Objptr, %Objptr* %regP_0
	%r15953 = load %Objptr, %Objptr* %regP_1
	%r15954 = getelementptr inbounds i8, %Objptr %r15953, i32 0
	%r15955 = bitcast %Objptr %r15954 to %Objptr*
	store %Objptr %r15952, %Objptr* %r15955
	; OP (RP(1): Objptr (opt_46), 8): Objptr (opt_46)  = SP(40): Objptr (opt_46)
	%r15956 = load %Pointer, %Pointer* %stackTop
	%r15957 = getelementptr inbounds i8, %Pointer %r15956, i32 40
	%r15958 = bitcast %Pointer %r15957 to %Objptr*
	%r15959 = load %Objptr, %Objptr* %r15958
	%r15960 = load %Objptr, %Objptr* %regP_1
	%r15961 = getelementptr inbounds i8, %Objptr %r15960, i32 8
	%r15962 = bitcast %Objptr %r15961 to %Objptr*
	store %Objptr %r15959, %Objptr* %r15962
	; SP(40): Objptr (opt_46)  = RP(1): Objptr (opt_46)
	%r15963 = load %Objptr, %Objptr* %regP_1
	%r15964 = load %Pointer, %Pointer* %stackTop
	%r15965 = getelementptr inbounds i8, %Pointer %r15964, i32 40
	%r15966 = bitcast %Pointer %r15965 to %Objptr*
	store %Objptr %r15963, %Objptr* %r15966
	; SW64(48): Word64  = RW64(0): Word64
	%r15967 = load %Word64, %Word64* %regW64_0
	%r15968 = load %Pointer, %Pointer* %stackTop
	%r15969 = getelementptr inbounds i8, %Pointer %r15968, i32 48
	%r15970 = bitcast %Pointer %r15969 to %Word64*
	store %Word64 %r15967, %Word64* %r15970
	; SW64(56): Word64  = 0x0
	%r15971 = load %Pointer, %Pointer* %stackTop
	%r15972 = getelementptr inbounds i8, %Pointer %r15971, i32 56
	%r15973 = bitcast %Pointer %r15972 to %Word64*
	store %Word64 0, %Word64* %r15973
	; Goto loop_0
	br label %loop_0

L_30:
	; RP(0): Objptr (opt_3)  = glob {index = 124, isRoot = true, ty = Objptr (opt_3)}
	%r15974 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 124
	%r15975 = load %Objptr, %Objptr* %r15974
	store %Objptr %r15975, %Objptr* %regP_0
	; Goto print_1
	br label %print_1

L_29:
	; RP(0): Objptr (opt_3)  = glob {index = 123, isRoot = true, ty = Objptr (opt_3)}
	%r15976 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 123
	%r15977 = load %Objptr, %Objptr* %r15976
	store %Objptr %r15977, %Objptr* %regP_0
	; Goto print_1
	br label %print_1

L_28:
	; RP(0): Objptr (opt_3)  = glob {index = 122, isRoot = true, ty = Objptr (opt_3)}
	%r15978 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 122
	%r15979 = load %Objptr, %Objptr* %r15978
	store %Objptr %r15979, %Objptr* %regP_0
	; Goto print_1
	br label %print_1

L_27:
	; RP(0): Objptr (opt_3)  = glob {index = 121, isRoot = true, ty = Objptr (opt_3)}
	%r15980 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 121
	%r15981 = load %Objptr, %Objptr* %r15980
	store %Objptr %r15981, %Objptr* %regP_0
	; Goto print_1
	br label %print_1

L_26:
	; RP(0): Objptr (opt_3)  = glob {index = 120, isRoot = true, ty = Objptr (opt_3)}
	%r15982 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 120
	%r15983 = load %Objptr, %Objptr* %r15982
	store %Objptr %r15983, %Objptr* %regP_0
	; Goto print_1
	br label %print_1

L_25:
	; RP(0): Objptr (opt_3)  = glob {index = 119, isRoot = true, ty = Objptr (opt_3)}
	%r15984 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 119
	%r15985 = load %Objptr, %Objptr* %r15984
	store %Objptr %r15985, %Objptr* %regP_0
	; Goto print_1
	br label %print_1

L_24:
	; RP(0): Objptr (opt_3)  = glob {index = 118, isRoot = true, ty = Objptr (opt_3)}
	%r15986 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 118
	%r15987 = load %Objptr, %Objptr* %r15986
	store %Objptr %r15987, %Objptr* %regP_0
	; Goto print_1
	br label %print_1

L_23:
	; Goto print_0
	br label %print_0

print_1:
	; CCall {args = (RP(0): Objptr (opt_3)), frameInfo = None, func = {args = (Objptr (opt_3)), convention = cdecl, kind = Impure, prototype = {args = (Objptr), res = None}, return = Bits0, symbolScope = private, target = Stdio_print}, return = Some L_23}
	; GetOperands
	%r15988 = load %Objptr, %Objptr* %regP_0
	; Call
	call void @Stdio_print(%Objptr %r15988)
	br label %L_23

L_22:
	; RP(0): Objptr (opt_3)  = glob {index = 117, isRoot = true, ty = Objptr (opt_3)}
	%r15989 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 117
	%r15990 = load %Objptr, %Objptr* %r15989
	store %Objptr %r15990, %Objptr* %regP_0
	; Goto print_1
	br label %print_1

L_21:
	; Return
	%r15991 = load %Pointer, %Pointer* %stackTop
	%r15992 = getelementptr inbounds i8, %Pointer %r15991, i32 -8
	%r15993 = bitcast %Pointer %r15992 to %uintptr_t*
	%r15994 = load %uintptr_t, %uintptr_t* %r15993
	store %uintptr_t %r15994, %uintptr_t* %l_nextFun
	br label %top

L_20:
	; CCall {args = (glob {index = 116, isRoot = true, ty = Objptr (opt_3)}), frameInfo = None, func = {args = (Objptr (opt_3)), convention = cdecl, kind = Impure, prototype = {args = (Objptr), res = None}, return = Bits0, symbolScope = private, target = MLton_bug}, return = Some L_21}
	; GetOperands
	%r15995 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 116
	%r15996 = load %Objptr, %Objptr* %r15995
	; Call
	call void @MLton_bug(%Objptr %r15996)
	br label %L_21

print_0:
	; CCall {args = (glob {index = 112, isRoot = true, ty = Objptr (opt_3)}), frameInfo = None, func = {args = (Objptr (opt_3)), convention = cdecl, kind = Impure, prototype = {args = (Objptr), res = None}, return = Bits0, symbolScope = private, target = Stdio_print}, return = Some L_20}
	; GetOperands
	%r15997 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 112
	%r15998 = load %Objptr, %Objptr* %r15997
	; Call
	call void @Stdio_print(%Objptr %r15998)
	br label %L_20

L_19:
	; Goto print_0
	br label %print_0

L_18:
	; CCall {args = (RP(1): Objptr (opt_3)), frameInfo = None, func = {args = (Objptr (opt_3)), convention = cdecl, kind = Impure, prototype = {args = (Objptr), res = None}, return = Bits0, symbolScope = private, target = Stdio_print}, return = Some L_19}
	; GetOperands
	%r15999 = load %Objptr, %Objptr* %regP_1
	; Call
	call void @Stdio_print(%Objptr %r15999)
	br label %L_19

L_17:
	; RP(1): Objptr (opt_3)  = OP (Cast (RP(0): Objptr (opt_34, opt_33, opt_32, opt_31), Objptr (opt_31)), 0): Objptr (opt_3)
	%r16000 = load %Objptr, %Objptr* %regP_0
	%r16001 = bitcast %Objptr %r16000 to %Objptr
	%r16002 = getelementptr inbounds i8, %Objptr %r16001, i32 0
	%r16003 = bitcast %Objptr %r16002 to %Objptr*
	%r16004 = load %Objptr, %Objptr* %r16003
	store %Objptr %r16004, %Objptr* %regP_1
	; CCall {args = (glob {index = 115, isRoot = true, ty = Objptr (opt_3)}), frameInfo = None, func = {args = (Objptr (opt_3)), convention = cdecl, kind = Impure, prototype = {args = (Objptr), res = None}, return = Bits0, symbolScope = private, target = Stdio_print}, return = Some L_18}
	; GetOperands
	%r16005 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 115
	%r16006 = load %Objptr, %Objptr* %r16005
	; Call
	call void @Stdio_print(%Objptr %r16006)
	br label %L_18

L_16:
	; RW64(0): Word64  = WordU64_rshift (OW64 (RP(0): Objptr (opt_34, opt_33, opt_32, opt_31), ~8): Word64, 0x1)
	%r16007 = load %Objptr, %Objptr* %regP_0
	%r16008 = getelementptr inbounds i8, %Objptr %r16007, i32 -8
	%r16009 = bitcast %Objptr %r16008 to %Word64*
	%r16010 = load %Word64, %Word64* %r16009
	%r16011 = zext %Word32 1 to %Word64
	%r16012 = lshr %Word64 %r16010, %r16011
	store %Word64 %r16012, %Word64* %regW64_0
	; switch {test = RW64(0): Word64, default = None, cases = ((0x1F, L_17), (0x20, L_22), (0x21, L_24), (0x22, L_25))}
	%r16013 = load %Word64, %Word64* %regW64_0
	switch %Word64 %r16013, label %L_17 [
		%Word64 32, label %L_22
		%Word64 33, label %L_24
		%Word64 34, label %L_25
	]

L_15:
	; switch {test = Cast (RP(0): Objptr (opt_34, opt_33, opt_32, opt_31), Bits64), default = Some L_16, cases = ((0x1, L_26), (0x2, L_27), (0x3, L_28), (0x5, L_29), (0x6, L_30))}
	%r16014 = load %Objptr, %Objptr* %regP_0
	%r16015 = ptrtoint %Objptr %r16014 to %Word64
	switch %Word64 %r16015, label %L_16 [
		%Word64 1, label %L_26
		%Word64 2, label %L_27
		%Word64 3, label %L_28
		%Word64 5, label %L_29
		%Word64 6, label %L_30
	]

L_14:
	; CCall {args = (glob {index = 114, isRoot = true, ty = Objptr (opt_3)}), frameInfo = None, func = {args = (Objptr (opt_3)), convention = cdecl, kind = Impure, prototype = {args = (Objptr), res = None}, return = Bits0, symbolScope = private, target = Stdio_print}, return = Some L_15}
	; GetOperands
	%r16016 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 114
	%r16017 = load %Objptr, %Objptr* %r16016
	; Call
	call void @Stdio_print(%Objptr %r16017)
	br label %L_15

L_13:
	; RP(0): Objptr (opt_34, opt_33, opt_32, opt_31)  = Cast (0x1, Objptr (opt_34, opt_33, opt_32, opt_31))
	%r16018 = inttoptr %Word64 1 to %Objptr
	store %Objptr %r16018, %Objptr* %regP_0
	; Goto L_14
	br label %L_14

L_12:
	; Arith {prim = WordS64_addCheck, args = (SW64(48): Word64, 0x1), dst = RW64(0): Word64, overflow = L_13, success = L_31}
	%r16019 = load %Pointer, %Pointer* %stackTop
	%r16020 = getelementptr inbounds i8, %Pointer %r16019, i32 48
	%r16021 = bitcast %Pointer %r16020 to %Word64*
	%r16022 = load %Word64, %Word64* %r16021
	%r16023 = call {%Word64, i1} @llvm.sadd.with.overflow.i64(%Word64 %r16022, %Word64 1)
	%r16024 = extractvalue {%Word64, i1} %r16023, 0
	%r16025 = extractvalue {%Word64, i1} %r16023, 1
	store %Word64 %r16024, %Word64* %regW64_0
	br i1 %r16025, label %L_13, label %L_31

L_11:
	; RW32(0): Word32  = Word64_equal (SW64(56): Word64, 0x0)
	%r16026 = load %Pointer, %Pointer* %stackTop
	%r16027 = getelementptr inbounds i8, %Pointer %r16026, i32 56
	%r16028 = bitcast %Pointer %r16027 to %Word64*
	%r16029 = load %Word64, %Word64* %r16028
	%r16031 = icmp eq %Word64 %r16029, 0
	%r16030 = zext i1 %r16031 to %Word32
	store %Word32 %r16030, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_12), (0x1, L_32))}
	%r16032 = load %Word32, %Word32* %regW32_0
	%r16033 = trunc %Word32 %r16032 to i1
	br i1 %r16033, label %L_32, label %L_12

loop_0:
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r16034 = bitcast %struct.GC_state* @gcState to %Pointer
	%r16035 = getelementptr inbounds i8, %Pointer %r16034, i32 8
	%r16036 = bitcast %Pointer %r16035 to %CPointer*
	%r16037 = load %CPointer, %CPointer* %r16036
	%r16038 = load %Pointer, %Pointer* %frontier
	%r16040 = icmp ult %Pointer %r16037, %r16038
	%r16039 = zext i1 %r16040 to %Word32
	store %Word32 %r16039, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_11), (0x1, L_399))}
	%r16041 = load %Word32, %Word32* %regW32_0
	%r16042 = trunc %Word32 %r16041 to i1
	br i1 %r16042, label %L_399, label %L_11

L_10:
	; CW64 (<Frontier>)  = 0x19
	%r16043 = load %Pointer, %Pointer* %frontier
	%r16044 = bitcast %Pointer %r16043 to %Word64*
	store %Word64 25, %Word64* %r16044
	; RQ(2): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r16045 = load %Pointer, %Pointer* %frontier
	%r16047 = ptrtoint %Pointer %r16045 to %uintptr_t
	%r16048 = add %uintptr_t %r16047, 8
	%r16046 = inttoptr %uintptr_t %r16048 to %Pointer
	store %CPointer %r16046, %CPointer* %regQ_2
	; SP(16): Objptr (opt_12)  = Cast (RQ(2): CPointer, Objptr (opt_12))
	%r16049 = load %CPointer, %CPointer* %regQ_2
	%r16050 = bitcast %CPointer %r16049 to %Objptr
	%r16051 = load %Pointer, %Pointer* %stackTop
	%r16052 = getelementptr inbounds i8, %Pointer %r16051, i32 16
	%r16053 = bitcast %Pointer %r16052 to %Objptr*
	store %Objptr %r16050, %Objptr* %r16053
	; <Frontier>  = CPointer_add (<Frontier>, 0x10)
	%r16054 = load %Pointer, %Pointer* %frontier
	%r16056 = ptrtoint %Pointer %r16054 to %uintptr_t
	%r16057 = add %uintptr_t %r16056, 16
	%r16055 = inttoptr %uintptr_t %r16057 to %Pointer
	store %Pointer %r16055, %Pointer* %frontier
	; OW64 (SP(16): Objptr (opt_12), 0): Word64  = 0x0
	%r16058 = load %Pointer, %Pointer* %stackTop
	%r16059 = getelementptr inbounds i8, %Pointer %r16058, i32 16
	%r16060 = bitcast %Pointer %r16059 to %Objptr*
	%r16061 = load %Objptr, %Objptr* %r16060
	%r16062 = getelementptr inbounds i8, %Objptr %r16061, i32 0
	%r16063 = bitcast %Objptr %r16062 to %Word64*
	store %Word64 0, %Word64* %r16063
	; CW64 (<Frontier>)  = 0x19
	%r16064 = load %Pointer, %Pointer* %frontier
	%r16065 = bitcast %Pointer %r16064 to %Word64*
	store %Word64 25, %Word64* %r16065
	; RQ(1): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r16066 = load %Pointer, %Pointer* %frontier
	%r16068 = ptrtoint %Pointer %r16066 to %uintptr_t
	%r16069 = add %uintptr_t %r16068, 8
	%r16067 = inttoptr %uintptr_t %r16069 to %Pointer
	store %CPointer %r16067, %CPointer* %regQ_1
	; SP(24): Objptr (opt_12)  = Cast (RQ(1): CPointer, Objptr (opt_12))
	%r16070 = load %CPointer, %CPointer* %regQ_1
	%r16071 = bitcast %CPointer %r16070 to %Objptr
	%r16072 = load %Pointer, %Pointer* %stackTop
	%r16073 = getelementptr inbounds i8, %Pointer %r16072, i32 24
	%r16074 = bitcast %Pointer %r16073 to %Objptr*
	store %Objptr %r16071, %Objptr* %r16074
	; <Frontier>  = CPointer_add (<Frontier>, 0x10)
	%r16075 = load %Pointer, %Pointer* %frontier
	%r16077 = ptrtoint %Pointer %r16075 to %uintptr_t
	%r16078 = add %uintptr_t %r16077, 16
	%r16076 = inttoptr %uintptr_t %r16078 to %Pointer
	store %Pointer %r16076, %Pointer* %frontier
	; OW64 (SP(24): Objptr (opt_12), 0): Word64  = 0x0
	%r16079 = load %Pointer, %Pointer* %stackTop
	%r16080 = getelementptr inbounds i8, %Pointer %r16079, i32 24
	%r16081 = bitcast %Pointer %r16080 to %Objptr*
	%r16082 = load %Objptr, %Objptr* %r16081
	%r16083 = getelementptr inbounds i8, %Objptr %r16082, i32 0
	%r16084 = bitcast %Objptr %r16083 to %Word64*
	store %Word64 0, %Word64* %r16084
	; CW64 (<Frontier>)  = 0x15
	%r16085 = load %Pointer, %Pointer* %frontier
	%r16086 = bitcast %Pointer %r16085 to %Word64*
	store %Word64 21, %Word64* %r16086
	; RQ(0): CPointer  = CPointer_add (<Frontier>, 0x8)
	%r16087 = load %Pointer, %Pointer* %frontier
	%r16089 = ptrtoint %Pointer %r16087 to %uintptr_t
	%r16090 = add %uintptr_t %r16089, 8
	%r16088 = inttoptr %uintptr_t %r16090 to %Pointer
	store %CPointer %r16088, %CPointer* %regQ_0
	; SP(32): Objptr (opt_10)  = Cast (RQ(0): CPointer, Objptr (opt_10))
	%r16091 = load %CPointer, %CPointer* %regQ_0
	%r16092 = bitcast %CPointer %r16091 to %Objptr
	%r16093 = load %Pointer, %Pointer* %stackTop
	%r16094 = getelementptr inbounds i8, %Pointer %r16093, i32 32
	%r16095 = bitcast %Pointer %r16094 to %Objptr*
	store %Objptr %r16092, %Objptr* %r16095
	; <Frontier>  = CPointer_add (<Frontier>, 0x10)
	%r16096 = load %Pointer, %Pointer* %frontier
	%r16098 = ptrtoint %Pointer %r16096 to %uintptr_t
	%r16099 = add %uintptr_t %r16098, 16
	%r16097 = inttoptr %uintptr_t %r16099 to %Pointer
	store %Pointer %r16097, %Pointer* %frontier
	; OW32 (SP(32): Objptr (opt_10), 0): Word32  = 0x0
	%r16100 = load %Pointer, %Pointer* %stackTop
	%r16101 = getelementptr inbounds i8, %Pointer %r16100, i32 32
	%r16102 = bitcast %Pointer %r16101 to %Objptr*
	%r16103 = load %Objptr, %Objptr* %r16102
	%r16104 = getelementptr inbounds i8, %Objptr %r16103, i32 0
	%r16105 = bitcast %Objptr %r16104 to %Word32*
	store %Word32 0, %Word32* %r16105
	; SP(40): Objptr (opt_46)  = glob {index = 0, isRoot = true, ty = Objptr (opt_46)}
	%r16106 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 0
	%r16107 = load %Objptr, %Objptr* %r16106
	%r16108 = load %Pointer, %Pointer* %stackTop
	%r16109 = getelementptr inbounds i8, %Pointer %r16108, i32 40
	%r16110 = bitcast %Pointer %r16109 to %Objptr*
	store %Objptr %r16107, %Objptr* %r16110
	; SW64(48): Word64  = 0x1
	%r16111 = load %Pointer, %Pointer* %stackTop
	%r16112 = getelementptr inbounds i8, %Pointer %r16111, i32 48
	%r16113 = bitcast %Pointer %r16112 to %Word64*
	store %Word64 1, %Word64* %r16113
	; SW64(56): Word64  = 0x4000000000000000
	%r16114 = load %Pointer, %Pointer* %stackTop
	%r16115 = getelementptr inbounds i8, %Pointer %r16114, i32 56
	%r16116 = bitcast %Pointer %r16115 to %Word64*
	store %Word64 4611686018427387904, %Word64* %r16116
	; Goto loop_0
	br label %loop_0

L_9:
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
	%r16117 = bitcast %struct.GC_state* @gcState to %Pointer
	%r16118 = getelementptr inbounds i8, %Pointer %r16117, i32 8
	%r16119 = bitcast %Pointer %r16118 to %CPointer*
	%r16120 = load %CPointer, %CPointer* %r16119
	%r16121 = load %Pointer, %Pointer* %frontier
	%r16123 = icmp ult %Pointer %r16120, %r16121
	%r16122 = zext i1 %r16123 to %Word32
	store %Word32 %r16122, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_10), (0x1, L_401))}
	%r16124 = load %Word32, %Word32* %regW32_0
	%r16125 = trunc %Word32 %r16124 to i1
	br i1 %r16125, label %L_401, label %L_10

L_8:
	; SW64(8): ExnStack  = OW64 (<GCState>, 32): ExnStack
	%r16126 = bitcast %struct.GC_state* @gcState to %Pointer
	%r16127 = getelementptr inbounds i8, %Pointer %r16126, i32 32
	%r16128 = bitcast %Pointer %r16127 to %Word64*
	%r16129 = load %Word64, %Word64* %r16128
	%r16130 = load %Pointer, %Pointer* %stackTop
	%r16131 = getelementptr inbounds i8, %Pointer %r16130, i32 8
	%r16132 = bitcast %Pointer %r16131 to %Word64*
	store %Word64 %r16129, %Word64* %r16132
	; RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 24): CPointer, <StackTop>)
	%r16133 = bitcast %struct.GC_state* @gcState to %Pointer
	%r16134 = getelementptr inbounds i8, %Pointer %r16133, i32 24
	%r16135 = bitcast %Pointer %r16134 to %CPointer*
	%r16136 = load %CPointer, %CPointer* %r16135
	%r16137 = load %Pointer, %Pointer* %stackTop
	%r16139 = icmp ult %Pointer %r16136, %r16137
	%r16138 = zext i1 %r16139 to %Word32
	store %Word32 %r16138, %Word32* %regW32_0
	; switch {test = RW32(0): Word32, default = None, cases = ((0x0, L_9), (0x1, L_401))}
	%r16140 = load %Word32, %Word32* %regW32_0
	%r16141 = trunc %Word32 %r16140 to i1
	br i1 %r16141, label %L_401, label %L_9

main_0:
	; Goto L_8
	br label %L_8

L_5:
	; Push(-8)
	%r16142 = load %Pointer, %Pointer* %stackTop
	%r16143 = getelementptr inbounds i8, %Pointer %r16142, i32 -8
	store %Pointer %r16143, %Pointer* %stackTop
	; CCall {args = (glob {index = 113, isRoot = true, ty = Objptr (opt_3)}), frameInfo = None, func = {args = (Objptr (opt_3)), convention = cdecl, kind = Impure, prototype = {args = (Objptr), res = None}, return = Bits0, symbolScope = private, target = MLton_bug}, return = None}
	; GetOperands
	%r16144 = getelementptr inbounds [153 x %Objptr], [153 x %Objptr]* @globalObjptr, i32 0, i32 113
	%r16145 = load %Objptr, %Objptr* %r16144
	; Call
	call void @MLton_bug(%Objptr %r16145)
	unreachable

default:
	%r16146 = load %uintptr_t, %uintptr_t* %l_nextFun
	store %uintptr_t %r16146, %uintptr_t* @nextFun
	%r16147 = getelementptr inbounds [0 x void (%struct.cont*)*], [0 x void (%struct.cont*)*]* @nextChunks, i32 0, %uintptr_t %r16146
	%r16148 = load void (%struct.cont*)*, void (%struct.cont*)** %r16147
	%r16149 = bitcast void (%struct.cont*)* %r16148 to i8*
	%r16150 = getelementptr inbounds %struct.cont, %struct.cont* %cont, i32 0, i32 0
	store i8* %r16149, i8** %r16150
	br label %leaveChunk
leaveChunk:
	; FlushFrontier
	%r16151 = bitcast %struct.GC_state* @gcState to %Pointer
	%r16152 = getelementptr inbounds i8, %Pointer %r16151, i32 0
	%r16153 = bitcast %Pointer %r16152 to %Pointer*
	%r16154 = load %Pointer, %Pointer* %frontier
	store %Pointer %r16154, %Pointer* %r16153
	; FlushStackTop
	%r16155 = bitcast %struct.GC_state* @gcState to %Pointer
	%r16156 = getelementptr inbounds i8, %Pointer %r16155, i32 16
	%r16157 = bitcast %Pointer %r16156 to %Pointer*
	%r16158 = load %Pointer, %Pointer* %stackTop
	store %Pointer %r16158, %Pointer* %r16157
	%r16159 = load %struct.cont, %struct.cont* %cont
	ret %struct.cont %r16159
}

declare %Word32 @Posix_ProcEnv_isatty(%Word32)
declare %Word32 @Posix_FileSys_Stat_fstat(%Word32)
declare %Word64 @Posix_FileSys_Stat_getDev()
declare %Word64 @Posix_FileSys_Stat_getINo()
declare %Word32 @Posix_FileSys_Stat_getMode()
declare %Word64 @Posix_FileSys_Stat_getNLink()
declare %Word32 @Posix_FileSys_Stat_getUId()
declare %Word32 @Posix_FileSys_Stat_getGId()
declare %Word64 @Posix_FileSys_Stat_getSize()
declare %Word64 @Posix_FileSys_Stat_getATime()
declare %Word64 @Posix_FileSys_Stat_getMTime()
declare %Word64 @Posix_FileSys_Stat_getCTime()
declare %Word32 @Posix_FileSys_ST_isReg(%Word32)
declare %Word64 @Posix_IO_lseek(%Word32, %Word64, %Word32)
declare void @MLton_bug(%Objptr)
declare void @Stdio_print(%Objptr)
declare %Word64 @Posix_IO_writeChar8Vec(%Word32, %Objptr, %Word32, %Word64)
declare %Word64 @Posix_Error_strError(%Word32)
declare %Word64 @Posix_IO_writeChar8Arr(%Word32, %Objptr, %Word32, %Word64)
declare %Word32 @Posix_Error_getErrno()
declare %Word32 @IEEEReal_getRoundingMode()
declare %Word64 @Real64_gdtoa(%Real64, %Word32, %Word32, %Word32, %Objptr)
declare void @GC_arrayCopy(%Pointer, %Objptr, %Word64, %Objptr, %Word64, %Word64)
declare %Objptr @GC_arrayAllocate(%Pointer, %Word64, %Word64, %Word64)
declare void @MLton_halt(%Pointer, %Word32)
declare void @GC_collect(%Pointer, %Word64, %Word32)
