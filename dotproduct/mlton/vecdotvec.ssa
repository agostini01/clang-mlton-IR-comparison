MLton 20180207
  created this file on Fri Nov 30 15:12:32 2018.
Do not edit this file.
Flag settings: 
   align: 8
   atMLtons: (@MLton, --)
   chunk: chunk per function
   closureConvertGlobalize: true
   closureConvertShrink: true
   codegen: amd64
   contifyIntoMain: false
   debug: false
   defaultChar: char8
   defaultWideChar: widechar32
   defaultInt: int32
   defaultReal: real64
   defaultWord: word32
   diag passes: []
   execute passes: []
   elaborate allowConstant (default): false
   elaborate allowConstant (enabled): true
   elaborate allowFFI (default): false
   elaborate allowFFI (enabled): true
   elaborate allowPrim (default): false
   elaborate allowPrim (enabled): true
   elaborate allowOverload (default): false
   elaborate allowOverload (enabled): true
   elaborate allowRedefineSpecialIds (default): false
   elaborate allowRedefineSpecialIds (enabled): true
   elaborate allowSpecifySpecialIds (default): false
   elaborate allowSpecifySpecialIds (enabled): true
   elaborate deadCode (default): false
   elaborate deadCode (enabled): true
   elaborate forceUsed (default): false
   elaborate forceUsed (enabled): true
   elaborate ffiStr (default): 
   elaborate ffiStr (enabled): true
   elaborate nonexhaustiveBind (default): warn
   elaborate nonexhaustiveBind (enabled): true
   elaborate nonexhaustiveExnBind (default): default
   elaborate nonexhaustiveExnBind (enabled): true
   elaborate redundantBind (default): warn
   elaborate redundantBind (enabled): true
   elaborate nonexhaustiveMatch (default): warn
   elaborate nonexhaustiveMatch (enabled): true
   elaborate nonexhaustiveExnMatch (default): default
   elaborate nonexhaustiveExnMatch (enabled): true
   elaborate redundantMatch (default): warn
   elaborate redundantMatch (enabled): true
   elaborate nonexhaustiveRaise (default): ignore
   elaborate nonexhaustiveRaise (enabled): true
   elaborate nonexhaustiveExnRaise (default): ignore
   elaborate nonexhaustiveExnRaise (enabled): true
   elaborate redundantRaise (default): warn
   elaborate redundantRaise (enabled): true
   elaborate resolveScope (default): strdec
   elaborate resolveScope (enabled): true
   elaborate sequenceNonUnit (default): ignore
   elaborate sequenceNonUnit (enabled): true
   elaborate valrecConstr (default): warn
   elaborate valrecConstr (enabled): true
   elaborate warnUnused (default): false
   elaborate warnUnused (enabled): true
   elaborate allowDoDecls (default): false
   elaborate allowDoDecls (enabled): true
   elaborate allowExtendedNumConsts (default): false
   elaborate allowExtendedNumConsts (enabled): true
   elaborate allowExtendedTextConsts (default): false
   elaborate allowExtendedTextConsts (enabled): true
   elaborate allowLineComments (default): false
   elaborate allowLineComments (enabled): true
   elaborate allowOptBar (default): false
   elaborate allowOptBar (enabled): true
   elaborate allowOptSemicolon (default): false
   elaborate allowOptSemicolon (enabled): true
   elaborate allowOrPats (default): false
   elaborate allowOrPats (enabled): true
   elaborate allowRecordPunExps (default): false
   elaborate allowRecordPunExps (enabled): true
   elaborate allowSigWithtype (default): false
   elaborate allowSigWithtype (enabled): true
   elaborate allowVectorExps (default): false
   elaborate allowVectorExps (enabled): true
   elaborate allowVectorPats (default): false
   elaborate allowVectorPats (enabled): true
   elaborate only: false
   emit main: true
   export header: None
   exn history: false
   generated output format: executable
   gc check: Limit
   indentation: 3
   inlineIntoMain: true
   inlineLeafA: {loops = true, repeat = true, size = Some 20}
   inlineLeafB: {loops = true, repeat = true, size = Some 40}
   inlineNonRec: {small = 60, product = 320}
   input file: vecdotvec.ssa
   keep AST: false
   keep CoreML: false
   keep def use: true
   keep dot: false
   keep Machine: false
   keep passes: []
   keep RSSA: false
   keep SSA: true
   keep SSA2: false
   keep SXML: false
   keep XML: false
   extra_: false
   lib dir: /usr/local/lib/mlton
   lib target dir: /usr/local/lib/mlton/targets/self
   loop ssa passes: 1
   loop ssa2 passes: 1
   loop unrolling limit: 150
   loop unswitching limit: 300
   mark cards: true
   max function size: 10000
   mlb path vars: [{var = SML_LIB, path = $(LIB_MLTON_DIR)/sml}]
   native commented: 0
   native live stack: false
   native optimize: 1
   native move hoist: true
   native copy prop: true
   native copy prop cutoff: 1000
   native cutoff: 100
   native live transfer: 8
   native shuffle: true
   native ieee fp: false
   native split: Some 20000
   optFuel: None
   optimizationPasses: [<ssa2::default>, <ssa::default>, <sxml::default>, <xml::default>]
   polyvariance: Some {hofo = true, rounds = 2, small = 30, product = 300}
   prefer abs paths: false
   prof passes: []
   profile: None
   profile branch: false
   profile C: []
   profile IL: ProfileSource
   profile include/exclude: [(Seq [Star [.], Or [Seq [Seq [[$], [(], [S], [M], [L], [_], [L], [I], [B], [)]]]], Star [.]], false)]
   profile raise: false
   profile stack: false
   profile val: false
   show basis: None
   show basis compact: false
   show basis def: true
   show basis flat: true
   show def-use: None
   show types: true
   target: self
   target arch: AMD64
   target OS: Linux
   type check: false
   verbosity: Silent
   warn unrecognized annotation: true
   warn deprecated features: true
   zone cut depth: 100


Datatypes:
lambdas_0 = Env_1 | Env_0 | Env_2 of (list_0 ref)
list_1 = nil_0 | ::_0 of (list_1, (word64 * word64))
list_2 = nil_5 | ::_5 of (list_2, (word64 * word8 vector * word64))
list_3 = nil_4 | ::_6 of (list_3)
list_4 = nil_1 | ::_2 of (list_4, word8 vector)
list_5 = nil_9 | ::_4 of (list_5, real64)
bufferMode_0 = LINE_BUF_1 of (word32 ref, word8 array)
             | BLOCK_BUF_1 of (word32 ref, word8 array)
buffer_mode_0 = LINE_BUF_0 | BLOCK_BUF_0
list_6 = nil_8
       | ::_7 of (list_6,
                  ((word8 vector *
                    (word64 ref * bool ref) *
                    (word64 ref * bool ref)) *
                   bufferMode_0 ref *
                   unit ref *
                   (word8 vector *
                    (word64 ref * bool ref) *
                    (word64 ref * bool ref))))
list_7 = nil_2 | ::_1 of (list_7, (word32 * word8 vector))
list_8 = nil_7 | ::_8 of (list_8, list_6 ref)
list_9 = nil_3 | ::_3 of (list_9, (word32 * word32 * word8 * word8))
list_0 = nil_6 | ::_9 of (list_0, lambdas_0)
t_0 = NONE_0 | SOME_0 of (word32)
bool = false | true
exn = Io_0 of (word8 vector, word8 vector, exn)
    | ClosedStream_0
    | SysErr_0 of (t_0, word8 vector)
    | Option_0
    | Fail_0 of (word8 vector)
    | Subscript_0
    | Size_0
    | Overflow_0
    | Fail8_0 of (word8 vector)


Globals:
x_0: word32 = 0x1
x_1: unit = ()
global_0: word8 vector = "unhandled exception: "
global_1: word8 vector = "Overflow"
global_2: word8 vector = "Fail8"
global_3: word8 vector = "Size"
global_4: word8 vector = "Subscript"
global_5: word8 vector = "Fail"
global_6: word8 vector = "Option"
global_7: word8 vector = "SysErr"
global_8: word8 vector = "ClosedStream"
global_9: word8 vector = "Io"
global_10: word8 vector = "\n"
global_11: word8 vector = "Fail "
global_12: word8 vector = "unhandled exception in Basis Library"
global_13: word32 = 0x0
global_14: word32 = 0x1
global_15: exn = Overflow_0
global_16: word64 = 0x0
global_17: word64 = 0x1
global_18: word64 = 0x5
global_19: word64 = 0x7FFFFFFF
global_20: exn = Size_0
global_21: word32 = 0x2
global_23: (word64 * word64) = (global_16 (*0x0*), global_16 (*0x0*))
global_22: list_1 = nil_0
global_24: list_1 = ::_0 (global_22 (*nil_0*), global_23)
global_25: (word64 * word64) = (global_16 (*0x0*), global_17 (*0x1*))
global_26: list_1 = ::_0 (global_22 (*nil_0*), global_25)
global_27: list_4 = nil_1
global_28: word8 vector = "\" failed with "
global_29: word8 vector = " \""
global_30: word8 vector = "Io: "
global_31: word8 vector = "Fail: "
global_32: word32 = 0xD
global_33: word8 vector = "acces"
global_464: (word32 * word8 vector) = (global_32 (*0xD*), global_33 (*"acces"*))
global_34: word32 = 0x62
global_35: word8 vector = "addrinuse"
global_341: (word32 * word8 vector) =
  (global_34 (*0x62*), global_35 (*"addrinuse"*))
global_36: word32 = 0x63
global_37: word8 vector = "addrnotavail"
global_339: (word32 * word8 vector) =
  (global_36 (*0x63*), global_37 (*"addrnotavail"*))
global_38: word32 = 0x61
global_39: word8 vector = "afnosupport"
global_337: (word32 * word8 vector) =
  (global_38 (*0x61*), global_39 (*"afnosupport"*))
global_40: word32 = 0xB
global_41: word8 vector = "again"
global_335: (word32 * word8 vector) = (global_40 (*0xB*), global_41 (*"again"*))
global_42: word32 = 0x72
global_43: word8 vector = "already"
global_333: (word32 * word8 vector) =
  (global_42 (*0x72*), global_43 (*"already"*))
global_44: word32 = 0x9
global_45: word8 vector = "badf"
global_331: (word32 * word8 vector) = (global_44 (*0x9*), global_45 (*"badf"*))
global_46: word32 = 0x4A
global_47: word8 vector = "badmsg"
global_329: (word32 * word8 vector) =
  (global_46 (*0x4A*), global_47 (*"badmsg"*))
global_48: word32 = 0x10
global_49: word8 vector = "busy"
global_327: (word32 * word8 vector) = (global_48 (*0x10*), global_49 (*"busy"*))
global_50: word32 = 0x7D
global_51: word8 vector = "canceled"
global_325: (word32 * word8 vector) =
  (global_50 (*0x7D*), global_51 (*"canceled"*))
global_52: word32 = 0xA
global_53: word8 vector = "child"
global_323: (word32 * word8 vector) = (global_52 (*0xA*), global_53 (*"child"*))
global_54: word32 = 0x67
global_55: word8 vector = "connaborted"
global_321: (word32 * word8 vector) =
  (global_54 (*0x67*), global_55 (*"connaborted"*))
global_56: word32 = 0x6F
global_57: word8 vector = "connrefused"
global_319: (word32 * word8 vector) =
  (global_56 (*0x6F*), global_57 (*"connrefused"*))
global_58: word32 = 0x68
global_59: word8 vector = "connreset"
global_317: (word32 * word8 vector) =
  (global_58 (*0x68*), global_59 (*"connreset"*))
global_60: word32 = 0x23
global_61: word8 vector = "deadlk"
global_315: (word32 * word8 vector) =
  (global_60 (*0x23*), global_61 (*"deadlk"*))
global_62: word32 = 0x59
global_63: word8 vector = "destaddrreq"
global_313: (word32 * word8 vector) =
  (global_62 (*0x59*), global_63 (*"destaddrreq"*))
global_64: word32 = 0x21
global_65: word8 vector = "dom"
global_311: (word32 * word8 vector) = (global_64 (*0x21*), global_65 (*"dom"*))
global_66: word32 = 0x7A
global_67: word8 vector = "dquot"
global_309: (word32 * word8 vector) =
  (global_66 (*0x7A*), global_67 (*"dquot"*))
global_68: word32 = 0x11
global_69: word8 vector = "exist"
global_307: (word32 * word8 vector) =
  (global_68 (*0x11*), global_69 (*"exist"*))
global_70: word32 = 0xE
global_71: word8 vector = "fault"
global_305: (word32 * word8 vector) = (global_70 (*0xE*), global_71 (*"fault"*))
global_72: word32 = 0x1B
global_73: word8 vector = "fbig"
global_303: (word32 * word8 vector) = (global_72 (*0x1B*), global_73 (*"fbig"*))
global_74: word32 = 0x71
global_75: word8 vector = "hostunreach"
global_301: (word32 * word8 vector) =
  (global_74 (*0x71*), global_75 (*"hostunreach"*))
global_76: word32 = 0x2B
global_77: word8 vector = "idrm"
global_299: (word32 * word8 vector) = (global_76 (*0x2B*), global_77 (*"idrm"*))
global_78: word32 = 0x54
global_79: word8 vector = "ilseq"
global_297: (word32 * word8 vector) =
  (global_78 (*0x54*), global_79 (*"ilseq"*))
global_80: word32 = 0x73
global_81: word8 vector = "inprogress"
global_295: (word32 * word8 vector) =
  (global_80 (*0x73*), global_81 (*"inprogress"*))
global_82: word32 = 0x4
global_83: word8 vector = "intr"
global_293: (word32 * word8 vector) = (global_82 (*0x4*), global_83 (*"intr"*))
global_84: word32 = 0x16
global_85: word8 vector = "inval"
global_291: (word32 * word8 vector) =
  (global_84 (*0x16*), global_85 (*"inval"*))
global_86: word32 = 0x5
global_87: word8 vector = "io"
global_289: (word32 * word8 vector) = (global_86 (*0x5*), global_87 (*"io"*))
global_88: word32 = 0x6A
global_89: word8 vector = "isconn"
global_287: (word32 * word8 vector) =
  (global_88 (*0x6A*), global_89 (*"isconn"*))
global_90: word32 = 0x15
global_91: word8 vector = "isdir"
global_285: (word32 * word8 vector) =
  (global_90 (*0x15*), global_91 (*"isdir"*))
global_92: word32 = 0x28
global_93: word8 vector = "loop"
global_283: (word32 * word8 vector) = (global_92 (*0x28*), global_93 (*"loop"*))
global_94: word32 = 0x18
global_95: word8 vector = "mfile"
global_281: (word32 * word8 vector) =
  (global_94 (*0x18*), global_95 (*"mfile"*))
global_96: word32 = 0x1F
global_97: word8 vector = "mlink"
global_279: (word32 * word8 vector) =
  (global_96 (*0x1F*), global_97 (*"mlink"*))
global_98: word32 = 0x5A
global_99: word8 vector = "msgsize"
global_277: (word32 * word8 vector) =
  (global_98 (*0x5A*), global_99 (*"msgsize"*))
global_100: word32 = 0x48
global_101: word8 vector = "multihop"
global_275: (word32 * word8 vector) =
  (global_100 (*0x48*), global_101 (*"multihop"*))
global_102: word32 = 0x24
global_103: word8 vector = "nametoolong"
global_273: (word32 * word8 vector) =
  (global_102 (*0x24*), global_103 (*"nametoolong"*))
global_104: word32 = 0x64
global_105: word8 vector = "netdown"
global_271: (word32 * word8 vector) =
  (global_104 (*0x64*), global_105 (*"netdown"*))
global_106: word32 = 0x66
global_107: word8 vector = "netreset"
global_269: (word32 * word8 vector) =
  (global_106 (*0x66*), global_107 (*"netreset"*))
global_108: word32 = 0x65
global_109: word8 vector = "netunreach"
global_267: (word32 * word8 vector) =
  (global_108 (*0x65*), global_109 (*"netunreach"*))
global_110: word32 = 0x17
global_111: word8 vector = "nfile"
global_265: (word32 * word8 vector) =
  (global_110 (*0x17*), global_111 (*"nfile"*))
global_112: word32 = 0x69
global_113: word8 vector = "nobufs"
global_263: (word32 * word8 vector) =
  (global_112 (*0x69*), global_113 (*"nobufs"*))
global_114: word32 = 0x3D
global_115: word8 vector = "nodata"
global_261: (word32 * word8 vector) =
  (global_114 (*0x3D*), global_115 (*"nodata"*))
global_116: word32 = 0x13
global_117: word8 vector = "nodev"
global_259: (word32 * word8 vector) =
  (global_116 (*0x13*), global_117 (*"nodev"*))
global_118: word8 vector = "noent"
global_257: (word32 * word8 vector) =
  (global_21 (*0x2*), global_118 (*"noent"*))
global_119: word32 = 0x8
global_120: word8 vector = "noexec"
global_255: (word32 * word8 vector) =
  (global_119 (*0x8*), global_120 (*"noexec"*))
global_121: word32 = 0x25
global_122: word8 vector = "nolck"
global_253: (word32 * word8 vector) =
  (global_121 (*0x25*), global_122 (*"nolck"*))
global_123: word32 = 0x43
global_124: word8 vector = "nolink"
global_251: (word32 * word8 vector) =
  (global_123 (*0x43*), global_124 (*"nolink"*))
global_125: word32 = 0xC
global_126: word8 vector = "nomem"
global_249: (word32 * word8 vector) =
  (global_125 (*0xC*), global_126 (*"nomem"*))
global_127: word32 = 0x2A
global_128: word8 vector = "nomsg"
global_247: (word32 * word8 vector) =
  (global_127 (*0x2A*), global_128 (*"nomsg"*))
global_129: word32 = 0x5C
global_130: word8 vector = "noprotoopt"
global_245: (word32 * word8 vector) =
  (global_129 (*0x5C*), global_130 (*"noprotoopt"*))
global_131: word32 = 0x1C
global_132: word8 vector = "nospc"
global_243: (word32 * word8 vector) =
  (global_131 (*0x1C*), global_132 (*"nospc"*))
global_133: word32 = 0x3F
global_134: word8 vector = "nosr"
global_241: (word32 * word8 vector) =
  (global_133 (*0x3F*), global_134 (*"nosr"*))
global_135: word32 = 0x3C
global_136: word8 vector = "nostr"
global_239: (word32 * word8 vector) =
  (global_135 (*0x3C*), global_136 (*"nostr"*))
global_137: word32 = 0x26
global_138: word8 vector = "nosys"
global_237: (word32 * word8 vector) =
  (global_137 (*0x26*), global_138 (*"nosys"*))
global_139: word32 = 0x6B
global_140: word8 vector = "notconn"
global_235: (word32 * word8 vector) =
  (global_139 (*0x6B*), global_140 (*"notconn"*))
global_141: word32 = 0x14
global_142: word8 vector = "notdir"
global_233: (word32 * word8 vector) =
  (global_141 (*0x14*), global_142 (*"notdir"*))
global_143: word32 = 0x27
global_144: word8 vector = "notempty"
global_231: (word32 * word8 vector) =
  (global_143 (*0x27*), global_144 (*"notempty"*))
global_145: word32 = 0x58
global_146: word8 vector = "notsock"
global_229: (word32 * word8 vector) =
  (global_145 (*0x58*), global_146 (*"notsock"*))
global_147: word32 = 0x5F
global_148: word8 vector = "notsup"
global_227: (word32 * word8 vector) =
  (global_147 (*0x5F*), global_148 (*"notsup"*))
global_149: word32 = 0x19
global_150: word8 vector = "notty"
global_225: (word32 * word8 vector) =
  (global_149 (*0x19*), global_150 (*"notty"*))
global_151: word32 = 0x6
global_152: word8 vector = "nxio"
global_223: (word32 * word8 vector) =
  (global_151 (*0x6*), global_152 (*"nxio"*))
global_153: word8 vector = "opnotsupp"
global_221: (word32 * word8 vector) =
  (global_147 (*0x5F*), global_153 (*"opnotsupp"*))
global_154: word32 = 0x4B
global_155: word8 vector = "overflow"
global_219: (word32 * word8 vector) =
  (global_154 (*0x4B*), global_155 (*"overflow"*))
global_156: word8 vector = "perm"
global_217: (word32 * word8 vector) = (global_14 (*0x1*), global_156 (*"perm"*))
global_157: word32 = 0x20
global_158: word8 vector = "pipe"
global_215: (word32 * word8 vector) =
  (global_157 (*0x20*), global_158 (*"pipe"*))
global_159: word32 = 0x47
global_160: word8 vector = "proto"
global_213: (word32 * word8 vector) =
  (global_159 (*0x47*), global_160 (*"proto"*))
global_161: word32 = 0x5D
global_162: word8 vector = "protonosupport"
global_211: (word32 * word8 vector) =
  (global_161 (*0x5D*), global_162 (*"protonosupport"*))
global_163: word32 = 0x5B
global_164: word8 vector = "prototype"
global_209: (word32 * word8 vector) =
  (global_163 (*0x5B*), global_164 (*"prototype"*))
global_165: word32 = 0x22
global_166: word8 vector = "range"
global_207: (word32 * word8 vector) =
  (global_165 (*0x22*), global_166 (*"range"*))
global_167: word32 = 0x1E
global_168: word8 vector = "rofs"
global_205: (word32 * word8 vector) =
  (global_167 (*0x1E*), global_168 (*"rofs"*))
global_169: word32 = 0x1D
global_170: word8 vector = "spipe"
global_203: (word32 * word8 vector) =
  (global_169 (*0x1D*), global_170 (*"spipe"*))
global_171: word32 = 0x3
global_172: word8 vector = "srch"
global_201: (word32 * word8 vector) =
  (global_171 (*0x3*), global_172 (*"srch"*))
global_173: word32 = 0x74
global_174: word8 vector = "stale"
global_199: (word32 * word8 vector) =
  (global_173 (*0x74*), global_174 (*"stale"*))
global_175: word32 = 0x3E
global_176: word8 vector = "time"
global_197: (word32 * word8 vector) =
  (global_175 (*0x3E*), global_176 (*"time"*))
global_177: word32 = 0x6E
global_178: word8 vector = "timedout"
global_195: (word32 * word8 vector) =
  (global_177 (*0x6E*), global_178 (*"timedout"*))
global_179: word32 = 0x7
global_180: word8 vector = "toobig"
global_193: (word32 * word8 vector) =
  (global_179 (*0x7*), global_180 (*"toobig"*))
global_181: word32 = 0x1A
global_182: word8 vector = "txtbsy"
global_191: (word32 * word8 vector) =
  (global_181 (*0x1A*), global_182 (*"txtbsy"*))
global_183: word8 vector = "wouldblock"
global_189: (word32 * word8 vector) =
  (global_40 (*0xB*), global_183 (*"wouldblock"*))
global_184: word32 = 0x12
global_185: word8 vector = "xdev"
global_187: (word32 * word8 vector) =
  (global_184 (*0x12*), global_185 (*"xdev"*))
global_186: list_7 = nil_2
global_188: list_7 = ::_1 (global_186 (*nil_2*), global_187)
global_190: list_7 = ::_1 (global_188 (*::_1 (glob ... _187)*), global_189)
global_192: list_7 = ::_1 (global_190 (*::_1 (glob ... _189)*), global_191)
global_194: list_7 = ::_1 (global_192 (*::_1 (glob ... _191)*), global_193)
global_196: list_7 = ::_1 (global_194 (*::_1 (glob ... _193)*), global_195)
global_198: list_7 = ::_1 (global_196 (*::_1 (glob ... _195)*), global_197)
global_200: list_7 = ::_1 (global_198 (*::_1 (glob ... _197)*), global_199)
global_202: list_7 = ::_1 (global_200 (*::_1 (glob ... _199)*), global_201)
global_204: list_7 = ::_1 (global_202 (*::_1 (glob ... _201)*), global_203)
global_206: list_7 = ::_1 (global_204 (*::_1 (glob ... _203)*), global_205)
global_208: list_7 = ::_1 (global_206 (*::_1 (glob ... _205)*), global_207)
global_210: list_7 = ::_1 (global_208 (*::_1 (glob ... _207)*), global_209)
global_212: list_7 = ::_1 (global_210 (*::_1 (glob ... _209)*), global_211)
global_214: list_7 = ::_1 (global_212 (*::_1 (glob ... _211)*), global_213)
global_216: list_7 = ::_1 (global_214 (*::_1 (glob ... _213)*), global_215)
global_218: list_7 = ::_1 (global_216 (*::_1 (glob ... _215)*), global_217)
global_220: list_7 = ::_1 (global_218 (*::_1 (glob ... _217)*), global_219)
global_222: list_7 = ::_1 (global_220 (*::_1 (glob ... _219)*), global_221)
global_224: list_7 = ::_1 (global_222 (*::_1 (glob ... _221)*), global_223)
global_226: list_7 = ::_1 (global_224 (*::_1 (glob ... _223)*), global_225)
global_228: list_7 = ::_1 (global_226 (*::_1 (glob ... _225)*), global_227)
global_230: list_7 = ::_1 (global_228 (*::_1 (glob ... _227)*), global_229)
global_232: list_7 = ::_1 (global_230 (*::_1 (glob ... _229)*), global_231)
global_234: list_7 = ::_1 (global_232 (*::_1 (glob ... _231)*), global_233)
global_236: list_7 = ::_1 (global_234 (*::_1 (glob ... _233)*), global_235)
global_238: list_7 = ::_1 (global_236 (*::_1 (glob ... _235)*), global_237)
global_240: list_7 = ::_1 (global_238 (*::_1 (glob ... _237)*), global_239)
global_242: list_7 = ::_1 (global_240 (*::_1 (glob ... _239)*), global_241)
global_244: list_7 = ::_1 (global_242 (*::_1 (glob ... _241)*), global_243)
global_246: list_7 = ::_1 (global_244 (*::_1 (glob ... _243)*), global_245)
global_248: list_7 = ::_1 (global_246 (*::_1 (glob ... _245)*), global_247)
global_250: list_7 = ::_1 (global_248 (*::_1 (glob ... _247)*), global_249)
global_252: list_7 = ::_1 (global_250 (*::_1 (glob ... _249)*), global_251)
global_254: list_7 = ::_1 (global_252 (*::_1 (glob ... _251)*), global_253)
global_256: list_7 = ::_1 (global_254 (*::_1 (glob ... _253)*), global_255)
global_258: list_7 = ::_1 (global_256 (*::_1 (glob ... _255)*), global_257)
global_260: list_7 = ::_1 (global_258 (*::_1 (glob ... _257)*), global_259)
global_262: list_7 = ::_1 (global_260 (*::_1 (glob ... _259)*), global_261)
global_264: list_7 = ::_1 (global_262 (*::_1 (glob ... _261)*), global_263)
global_266: list_7 = ::_1 (global_264 (*::_1 (glob ... _263)*), global_265)
global_268: list_7 = ::_1 (global_266 (*::_1 (glob ... _265)*), global_267)
global_270: list_7 = ::_1 (global_268 (*::_1 (glob ... _267)*), global_269)
global_272: list_7 = ::_1 (global_270 (*::_1 (glob ... _269)*), global_271)
global_274: list_7 = ::_1 (global_272 (*::_1 (glob ... _271)*), global_273)
global_276: list_7 = ::_1 (global_274 (*::_1 (glob ... _273)*), global_275)
global_278: list_7 = ::_1 (global_276 (*::_1 (glob ... _275)*), global_277)
global_280: list_7 = ::_1 (global_278 (*::_1 (glob ... _277)*), global_279)
global_282: list_7 = ::_1 (global_280 (*::_1 (glob ... _279)*), global_281)
global_284: list_7 = ::_1 (global_282 (*::_1 (glob ... _281)*), global_283)
global_286: list_7 = ::_1 (global_284 (*::_1 (glob ... _283)*), global_285)
global_288: list_7 = ::_1 (global_286 (*::_1 (glob ... _285)*), global_287)
global_290: list_7 = ::_1 (global_288 (*::_1 (glob ... _287)*), global_289)
global_292: list_7 = ::_1 (global_290 (*::_1 (glob ... _289)*), global_291)
global_294: list_7 = ::_1 (global_292 (*::_1 (glob ... _291)*), global_293)
global_296: list_7 = ::_1 (global_294 (*::_1 (glob ... _293)*), global_295)
global_298: list_7 = ::_1 (global_296 (*::_1 (glob ... _295)*), global_297)
global_300: list_7 = ::_1 (global_298 (*::_1 (glob ... _297)*), global_299)
global_302: list_7 = ::_1 (global_300 (*::_1 (glob ... _299)*), global_301)
global_304: list_7 = ::_1 (global_302 (*::_1 (glob ... _301)*), global_303)
global_306: list_7 = ::_1 (global_304 (*::_1 (glob ... _303)*), global_305)
global_308: list_7 = ::_1 (global_306 (*::_1 (glob ... _305)*), global_307)
global_310: list_7 = ::_1 (global_308 (*::_1 (glob ... _307)*), global_309)
global_312: list_7 = ::_1 (global_310 (*::_1 (glob ... _309)*), global_311)
global_314: list_7 = ::_1 (global_312 (*::_1 (glob ... _311)*), global_313)
global_316: list_7 = ::_1 (global_314 (*::_1 (glob ... _313)*), global_315)
global_318: list_7 = ::_1 (global_316 (*::_1 (glob ... _315)*), global_317)
global_320: list_7 = ::_1 (global_318 (*::_1 (glob ... _317)*), global_319)
global_322: list_7 = ::_1 (global_320 (*::_1 (glob ... _319)*), global_321)
global_324: list_7 = ::_1 (global_322 (*::_1 (glob ... _321)*), global_323)
global_326: list_7 = ::_1 (global_324 (*::_1 (glob ... _323)*), global_325)
global_328: list_7 = ::_1 (global_326 (*::_1 (glob ... _325)*), global_327)
global_330: list_7 = ::_1 (global_328 (*::_1 (glob ... _327)*), global_329)
global_332: list_7 = ::_1 (global_330 (*::_1 (glob ... _329)*), global_331)
global_334: list_7 = ::_1 (global_332 (*::_1 (glob ... _331)*), global_333)
global_336: list_7 = ::_1 (global_334 (*::_1 (glob ... _333)*), global_335)
global_338: list_7 = ::_1 (global_336 (*::_1 (glob ... _335)*), global_337)
global_340: list_7 = ::_1 (global_338 (*::_1 (glob ... _337)*), global_339)
global_342: list_7 = ::_1 (global_340 (*::_1 (glob ... _339)*), global_341)
global_343: word8 vector = "<UNKNOWN>"
global_344: word8 vector = "]"
global_345: list_4 = ::_2 (global_27 (*nil_1*), global_344 (*"]"*))
global_346: word8 vector = " ["
global_347: word8 vector = ""
global_348: word8 vector = "SysErr: "
global_349: exn = Subscript_0
global_350: word8 vector = "Sequence.Slice.base"
global_351: word8 vector = global_350 (*"Sequence. ... base"*)
global_352: exn = Fail_0 (global_351)
global_353: word8 = 0x0
global_354: word8 vector = "Sequence.fromList"
global_355: word8 vector = global_354 (*"Sequence.fromList"*)
global_356: exn = Fail_0 (global_355)
global_357: word64 = 0x100
global_358: word32 = 0x30
global_359: word8 = 0x30
global_360: t_0 = NONE_0
global_361: word8 = 0x39
global_465: (word32 * word32 * word8 * word8) =
  (global_358 (*0x30*),
   global_13 (*0x0*),
   global_361 (*0x39*),
   global_359 (*0x30*))
global_362: word8 = 0x66
global_363: word8 = 0x61
global_466: (word32 * word32 * word8 * word8) =
  (global_38 (*0x61*),
   global_52 (*0xA*),
   global_362 (*0x66*),
   global_363 (*0x61*))
global_370: (word32 * word32 * word8 * word8) = global_466
global_364: word32 = 0x41
global_365: word8 = 0x46
global_366: word8 = 0x41
global_467: (word32 * word32 * word8 * word8) =
  (global_364 (*0x41*),
   global_52 (*0xA*),
   global_365 (*0x46*),
   global_366 (*0x41*))
global_368: (word32 * word32 * word8 * word8) = global_467
global_367: list_9 = nil_3
global_369: list_9 = ::_3 (global_367 (*nil_3*), global_368)
global_371: list_9 = ::_3 (global_369 (*::_3 (glob ... _368)*), global_370)
global_372: word8 = 0x20
global_373: word8 = 0x9
global_374: word8 = 0xD
global_375: word8 = 0xA
global_376: word8 = 0xB
global_377: word8 = 0xC
global_378: bool = true
global_379: word8 vector = "Thread.atomicEnd"
global_380: word8 vector = global_379 (*"Thread.atomicEnd"*)
global_381: exn = Fail8_0 (global_380)
global_382: word64 = 0x10
global_383: word8 vector = "0123456789ABCDEF"
global_384: word8 = 0x7E
global_385: bool = false
global_386: pointer = NULL
global_387: word8 vector = "Unknown error"
global_388: word32 = 0xFFFFFFFF
global_389: word64 = 0xFFFFFFFFFFFFFFFF
global_390: word8 vector = "Sequence.length"
global_391: word8 vector = global_390 (*"Sequence.length"*)
global_392: exn = Fail_0 (global_391)
global_393: list_3 = nil_4
global_394: word8 vector = "."
global_468: word32 ref = Ref_ref(word32) (global_13 (*0x0*))
global_395: real64 = 0.0
global_396: word64 = 0xFFFFFFFFFFFFF
global_397: word64 = 0x7FF0000000000000
global_398: word8 vector = "~"
global_399: word32 = 0x400
global_400: word32 = 0x800
global_401: word32 = 0xC00
global_402: word8 vector = "IEEEReal.RoundingMode.fromInt"
global_403: word8 vector = global_402 (*"IEEEReal. ... mInt"*)
global_404: exn = Fail_0 (global_403)
global_405: word64 = 0xB
global_406: word8 vector = "E"
global_407: word8 = 0x45
global_408: list_2 = nil_5
global_409: word32 = 0xFFFFFFFD
global_410: word32 = 0xFFFFFFFE
global_411: word8 vector = "0."
global_412: exn = Option_0
global_413: word8 vector = "nan"
global_414: word8 vector = "~inf"
global_415: word8 vector = "inf"
global_416: word8 vector = "partial write"
global_417: word8 vector = global_416 (*"partial write"*)
global_418: exn = Fail_0 (global_417)
global_419: exn = ClosedStream_0
global_420: word8 vector = "flushOut"
global_421: word8 vector = "output"
global_469: word32 ref = Ref_ref(word32) (global_13 (*0x0*))
global_422: word32 = 0x100
global_423: word8 vector = "): "
global_424: word8 vector = "exit must have 0 <= status < 256"
global_425: list_4 =
  ::_2 (global_27 (*nil_1*), global_424 (*"exit must ...  256"*))
global_426: list_4 =
  ::_2 (global_425 (*::_2 (glob ... 6"*))*), global_423 (*"): "*))
global_427: word8 vector = "MLton.Exit.exit("
global_428: word8 vector = "Top-level suffix raised exception.\n"
global_429: word8 vector = "MLton.Exit.wrapSuffix"
global_430: word8 vector = global_429 (*"MLton.Exi ... ffix"*)
global_431: exn = Fail_0 (global_430)
global_432: list_4 = ::_2 (global_27 (*nil_1*), global_10 (*"\n"*))
global_433: word8 vector = "Top-level handler raised exception.\n"
global_434: word8 vector = "[| "
global_435: word8 vector = ", "
global_436: word8 vector = "|]\n"
global_437: word64 = 0x4000000000000000
global_438: list_0 = nil_6
global_439: lambdas_0 = Env_0
global_440: list_8 = nil_7
global_441: lambdas_0 = Env_1
global_442: list_6 = nil_8
global_443: buffer_mode_0 = LINE_BUF_0
global_444: buffer_mode_0 = BLOCK_BUF_0
global_445: word8 vector = "<stdout>"
global_446: real64 = 0.1E1
global_447: real64 = 0.2E1
global_448: real64 = 0.3E1
global_449: real64 = 0.4E1
global_450: real64 = 0.5E1
global_451: list_5 = nil_9
global_452: list_5 = ::_4 (global_451 (*nil_9*), global_450 (*0.5E1*))
global_453: list_5 =
  ::_4 (global_452 (*::_4 (glob ... E1*))*), global_449 (*0.4E1*))
global_454: list_5 =
  ::_4 (global_453 (*::_4 (glob ... E1*))*), global_448 (*0.3E1*))
global_455: list_5 =
  ::_4 (global_454 (*::_4 (glob ... E1*))*), global_447 (*0.2E1*))
global_456: list_5 =
  ::_4 (global_455 (*::_4 (glob ... E1*))*), global_446 (*0.1E1*))
global_457: list_5 = ::_4 (global_451 (*nil_9*), global_446 (*0.1E1*))
global_458: list_5 =
  ::_4 (global_457 (*::_4 (glob ... E1*))*), global_447 (*0.2E1*))
global_459: list_5 =
  ::_4 (global_458 (*::_4 (glob ... E1*))*), global_448 (*0.3E1*))
global_460: list_5 =
  ::_4 (global_459 (*::_4 (glob ... E1*))*), global_449 (*0.4E1*))
global_461: list_5 =
  ::_4 (global_460 (*::_4 (glob ... E1*))*), global_450 (*0.5E1*))
global_462: word8 vector = "result = "
global_463: word8 vector = "toplevel handler not installed"
zeroArr_0: word64 array = Array_alloc(word64) (global_16 (*0x0*))
zeroArr_1: word8 array = Array_alloc(word8) (global_16 (*0x0*))


Main: main_0


Functions:
fun main_0 (): {returns = Some (), raises = None} = L_0 ()
  L_0 ()
    global_472: word64 ref = Ref_ref(word64) (global_16 (*0x0*))
    global_471: word64 ref = Ref_ref(word64) (global_16 (*0x0*))
    global_470: word32 ref = Ref_ref(word32) (global_13 (*0x0*))
    loop_0 (global_24 (*::_0 (glob ... l_23)*),
            global_17 (*0x1*),
            global_437 (*0x4000000000000000*))
  loop_0 (x_4: list_1, x_3: word64, x_2: word64)
    x_5: bool = Word64_equal (x_2, global_16 (*0x0*))
    case x_5 of
      true => L_2 | false => L_1
  L_2 ()
    x_6: word64 array = Array_alloc(word64) (x_3)
    case x_4 of
      nil_0 => L_4 | ::_0 => L_3
  L_4 ()
    messagers_0: list_0 ref = Ref_ref(list_0) (global_438 (*nil_6*))
    loop_1 (global_16 (*0x0*))
  loop_1 (x_7: word64)
    x_8: bool = WordS64_lt (x_7, global_357 (*0x100*))
    case x_8 of
      true => L_6 | false => L_5
  L_6 ()
    x_9: word64 = Word64_add (x_7, global_17 (*0x1*))
    loop_1 (x_9)
  L_5 ()
    loop_2 (global_16 (*0x0*))
  loop_2 (x_10: word64)
    x_11: bool = WordS64_lt (x_10, global_357 (*0x100*))
    case x_11 of
      true => L_8 | false => L_7
  L_8 ()
    x_12: word64 = Word64_add (x_10, global_17 (*0x1*))
    loop_2 (x_12)
  L_7 ()
    x_13: t_0 array = Array_alloc(t_0) (global_357 (*0x100*))
    loop_3 (global_16 (*0x0*))
  loop_3 (x_14: word64)
    x_15: bool = WordS64_lt (x_14, global_357 (*0x100*))
    case x_15 of
      true => L_10 | false => L_9
  L_10 ()
    x_17: word8 = WordS64_extdToWord8 (x_14)
    x_16: bool = WordU8_lt (x_17, global_359 (*0x30*))
    case x_16 of
      true => L_12 | false => L_11
  L_12 ()
    L_13 (global_360 (*NONE_0*))
  L_13 (x_18: t_0)
    _: unit = Array_update(t_0) (x_13, x_14, x_18)
    x_19: word64 = Word64_add (x_14, global_17 (*0x1*))
    loop_3 (x_19)
  L_11 ()
    x_20: bool = WordU8_lt (global_361 (*0x39*), x_17)
    case x_20 of
      true => L_12 | false => L_14
  L_14 ()
    x_23: word32 = WordU8_extdToWord32 (x_17)
    x_22: word32 = Word32_sub (x_23, global_358 (*0x30*))
    x_21: t_0 = SOME_0 (x_22)
    L_13 (x_21)
  L_9 ()
    loop_4 (global_16 (*0x0*))
  loop_4 (x_24: word64)
    x_25: bool = WordS64_lt (x_24, global_357 (*0x100*))
    case x_25 of
      true => L_16 | false => L_15
  L_16 ()
    x_26: word8 = WordS64_extdToWord8 (x_24)
    L_17 (global_371 (*::_3 (glob ... _370)*), global_465)
  L_17 (x_28: list_9, x_27: (word32 * word32 * word8 * word8))
    cmax_0: word8 = #2 (x_27)
    cmin_0: word8 = #3 (x_27)
    x_29: bool = WordU8_lt (x_26, cmin_0)
    case x_29 of
      true => L_19 | false => L_18
  L_19 ()
    case x_28 of
      nil_3 => L_20 | ::_3 => L_17
  L_20 ()
    x_30: word64 = Word64_add (x_24, global_17 (*0x1*))
    loop_4 (x_30)
  L_18 ()
    x_31: bool = WordU8_lt (cmax_0, x_26)
    case x_31 of
      true => L_19 | false => L_20
  L_15 ()
    x_32: bool array = Array_alloc(bool) (global_357 (*0x100*))
    loop_5 (global_16 (*0x0*))
  loop_5 (x_33: word64)
    x_34: bool = WordS64_lt (x_33, global_357 (*0x100*))
    case x_34 of
      true => L_22 | false => L_21
  L_22 ()
    x_36: word8 = WordS64_extdToWord8 (x_33)
    x_35: bool = Word8_equal (x_36, global_372 (*0x20*))
    case x_35 of
      true => L_24 | false => L_23
  L_24 ()
    L_25 (global_378 (*true*))
  L_25 (x_37: bool)
    _: unit = Array_update(bool) (x_32, x_33, x_37)
    x_38: word64 = Word64_add (x_33, global_17 (*0x1*))
    loop_5 (x_38)
  L_23 ()
    x_39: bool = Word8_equal (x_36, global_373 (*0x9*))
    case x_39 of
      true => L_24 | false => L_26
  L_26 ()
    x_40: bool = Word8_equal (x_36, global_374 (*0xD*))
    case x_40 of
      true => L_24 | false => L_27
  L_27 ()
    x_41: bool = Word8_equal (x_36, global_375 (*0xA*))
    case x_41 of
      true => L_24 | false => L_28
  L_28 ()
    x_42: bool = Word8_equal (x_36, global_376 (*0xB*))
    case x_42 of
      true => L_24 | false => L_29
  L_29 ()
    x_43: bool = Word8_equal (x_36, global_377 (*0xC*))
    L_25 (x_43)
  L_21 ()
    x_45: word64 = 0x21
    x_44: word8 array = Array_alloc(word8) (x_45)
    loop_6 (global_16 (*0x0*))
  loop_6 (x_46: word64)
    x_47: bool = WordS64_lt (x_46, x_45)
    case x_47 of
      true => L_31 | false => L_30
  L_31 ()
    _: unit = Array_update(word8) (x_44, x_46, global_353 (*0x0*))
    x_48: word64 = Word64_add (x_46, global_17 (*0x1*))
    loop_6 (x_48)
  L_30 ()
    x_52: bool ref = Ref_ref(bool) (global_385 (*false*))
    x_51: (word8 array * bool ref) = (x_44, x_52)
    x_50: word64 = 0x41
    x_49: word8 array = Array_alloc(word8) (x_50)
    loop_7 (global_16 (*0x0*))
  loop_7 (x_53: word64)
    x_54: bool = WordS64_lt (x_53, x_50)
    case x_54 of
      true => L_33 | false => L_32
  L_33 ()
    _: unit = Array_update(word8) (x_49, x_53, global_353 (*0x0*))
    x_55: word64 = Word64_add (x_53, global_17 (*0x1*))
    loop_7 (x_55)
  L_32 ()
    x_56: word8 array = Array_alloc(word8) (global_17 (*0x1*))
    loop_8 (global_16 (*0x0*))
  loop_8 (x_57: word64)
    x_58: bool = WordS64_lt (x_57, global_17 (*0x1*))
    case x_58 of
      true => L_35 | false => L_34
  L_35 ()
    _: unit = Array_update(word8) (x_56, x_57, global_353 (*0x0*))
    x_59: word64 = Word64_add (x_57, global_17 (*0x1*))
    loop_8 (x_59)
  L_34 ()
    x_72: list_0 = Ref_deref(list_0) (messagers_0)
    x_71: list_0 = ::_9 (x_72, global_439 (*Env_0*))
    _: unit = Ref_assign(list_0) (messagers_0, x_71)
    x_63: list_8 ref = Ref_ref(list_8) (global_440 (*nil_7*))
    x_70: list_0 = Ref_deref(list_0) (messagers_0)
    x_69: list_0 = ::_9 (x_70, global_441 (*Env_1*))
    _: unit = Ref_assign(list_0) (messagers_0, x_69)
    x_68: bool ref = Ref_ref(bool) (global_385 (*false*))
    x_67: list_0 = Ref_deref(list_0) (messagers_0)
    x_66: lambdas_0 = Env_2 (messagers_0)
    x_65: list_0 = ::_9 (x_67, x_66)
    _: unit = Ref_assign(list_0) (messagers_0, x_65)
    openOutstreams_0: list_6 ref = Ref_ref(list_6) (global_442 (*nil_8*))
    x_64: list_8 = Ref_deref(list_8) (x_63)
    x_62: list_8 = ::_8 (x_64, openOutstreams_0)
    _: unit = Ref_assign(list_8) (x_63, x_62)
    x_61: word32 = Posix_ProcEnv_isatty (global_14 (*0x1*))
    x_60: bool = Word32_equal (x_61, global_13 (*0x0*))
    case x_60 of
      true => L_37 | false => L_36
  L_37 ()
    L_38 (global_444 (*BLOCK_BUF_0*))
  L_38 (x_73: buffer_mode_0)
    closed_0: bool ref = Ref_ref(bool) (global_385 (*false*))
    _: unit = Thread_atomicBegin ()
    x_75: word32 = Posix_FileSys_Stat_fstat (global_14 (*0x1*))
    x_74: bool = Word32_equal (x_75, global_388 (*0xFFFFFFFF*))
    case x_74 of
      true => L_40 | false => L_39
  L_40 ()
    x_78: word32 = Posix_Error_getErrno ()
    x_77: word32 = Thread_atomicState ()
    x_76: bool = Word32_equal (x_77, global_13 (*0x0*))
    case x_76 of
      true => L_42 | false => L_41
  L_42 ()
    L_43 (global_381 (*Fail8_0 (global_380)*))
  L_43 (x_79: exn)
    _: unit = Stdio_print (global_0 (*"unhandled ... on: "*))
    case x_79 of
      Fail8_0 => L_52
    | Io_0 => L_51
    | ClosedStream_0 => L_50
    | SysErr_0 => L_49
    | Option_0 => L_48
    | Fail_0 => L_47
    | Subscript_0 => L_46
    | Size_0 => L_45
    | Overflow_0 => L_44
  L_52 (x_80: word8 vector)
    _: unit = Stdio_print (global_11 (*"Fail "*))
    _: unit = Stdio_print (x_80)
    print_0 ()
  print_0 ()
    _: unit = Stdio_print (global_10 (*"\n"*))
    _: unit = MLton_bug (global_12 (*"unhandled ... rary"*))
    return ()
  L_51 (x_83: word8 vector, x_82: word8 vector, x_81: exn)
    print_1 (global_9 (*"Io"*))
  print_1 (x_84: word8 vector)
    _: unit = Stdio_print (x_84)
    print_0 ()
  L_50 ()
    print_1 (global_8 (*"ClosedStream"*))
  L_49 (x_86: t_0, x_85: word8 vector)
    print_1 (global_7 (*"SysErr"*))
  L_48 ()
    print_1 (global_6 (*"Option"*))
  L_47 (x_87: word8 vector)
    print_1 (global_5 (*"Fail"*))
  L_46 ()
    print_1 (global_4 (*"Subscript"*))
  L_45 ()
    print_1 (global_3 (*"Size"*))
  L_44 ()
    print_1 (global_1 (*"Overflow"*))
  L_41 ()
    _: unit = Thread_atomicEnd ()
    x_90: word64 = Posix_Error_strError (x_78)
    x_89: pointer = CPointer_fromWord (x_90)
    x_88: bool = CPointer_equal (x_89, global_386 (*NULL*))
    case x_88 of
      true => L_54 | false => L_53
  L_54 ()
    L_55 (global_387 (*"Unknown error"*))
  L_55 (x_91: word8 vector)
    x_93: t_0 = SOME_0 (x_78)
    x_92: exn = SysErr_0 (x_93, x_91)
    L_43 (x_92)
  L_53 ()
    loop_9 (global_13 (*0x0*))
  loop_9 (x_94: word32)
    x_96: word64 = WordS32_extdToWord64 (x_94)
    x_95: word8 = CPointer_getWord8 (x_89, x_96)
    case x_95 of
      0x0 => L_56 | _ => L_57
  L_56 ()
    x_97: bool = WordU64_lt (global_19 (*0x7FFFFFFF*), x_96)
    case x_97 of
      true => L_59 | false => L_58
  L_59 ()
    L_43 (global_20 (*Size_0*))
  L_58 ()
    isZero_0: bool = Word64_equal (global_16 (*0x0*), x_96)
    case isZero_0 of
      true => L_zeroLen_0 | false => L_nonZeroLen_0
  L_zeroLen_0 ()
    L_join_0 (zeroArr_1)
  L_join_0 (x_98: word8 array)
    loop_10 (global_16 (*0x0*))
  loop_10 (x_99: word64)
    x_100: bool = WordS64_lt (x_99, x_96)
    case x_100 of
      true => L_61 | false => L_60
  L_61 ()
    x_104: word32 = WordS64_extdToWord32 (x_99)
    x_103: word64 = WordS32_extdToWord64 (x_104)
    x_102: word8 = CPointer_getWord8 (x_89, x_103)
    _: unit = Array_update(word8) (x_98, x_99, x_102)
    x_101: word64 = Word64_add (x_99, global_17 (*0x1*))
    loop_10 (x_101)
  L_60 ()
    x_105: word8 vector = Array_toVector(word8) (x_98)
    L_55 (x_105)
  L_nonZeroLen_0 ()
    x_106: word8 array = Array_alloc(word8) (x_96)
    L_join_0 (x_106)
  L_57 ()
    x_107: word32 = Word32_add (x_94, global_14 (*0x1*))
    loop_9 (x_107)
  L_39 ()
    _: word64 = Posix_FileSys_Stat_getDev ()
    _: word64 = Posix_FileSys_Stat_getINo ()
    x_112: word32 = Posix_FileSys_Stat_getMode ()
    x_109: word64 = Posix_FileSys_Stat_getNLink ()
    x_111: word32 = WordU64_extdToWord32 (x_109)
    x_110: word64 = WordU32_extdToWord64 (x_111)
    x_108: bool = Word64_equal (x_110, x_109)
    case x_108 of
      true => L_63 | false => L_62
  L_63 ()
    x_113: bool = WordS32_lt (x_111, global_13 (*0x0*))
    case x_113 of
      true => L_62 | false => L_64
  L_62 ()
    x_115: word32 = Thread_atomicState ()
    x_114: bool = Word32_equal (x_115, global_13 (*0x0*))
    case x_114 of
      true => L_66 | false => L_65
  L_66 ()
    L_43 (global_381 (*Fail8_0 (global_380)*))
  L_65 ()
    _: unit = Thread_atomicEnd ()
    L_43 (global_15 (*Overflow_0*))
  L_64 ()
    _: word32 = Posix_FileSys_Stat_getUId ()
    _: word32 = Posix_FileSys_Stat_getGId ()
    _: word64 = Posix_FileSys_Stat_getSize ()
    x_118: word64 = Posix_FileSys_Stat_getATime ()
    x_117: word64 = WordS64_rshift (x_118, global_175 (*0x3E*))
    x_116: bool = Word64_equal (x_117, global_16 (*0x0*))
    case x_116 of
      true => L_68 | false => L_67
  L_68 ()
    x_121: word64 = Word64_lshift (x_118, global_14 (*0x1*))
    x_120: word64 = Word64_orb (x_121, global_17 (*0x1*))
    x_119: intInf = Word_toIntInf (x_120)
    L_69 (x_119)
  L_69 (x_122: intInf)
    x_126: word64 = IntInf_toWord (x_122)
    x_127: word64 = 0x77359401
    x_125: word64 = Word64_andb (x_127, x_126)
    x_124: word64 = Word64_andb (x_125, global_17 (*0x1*))
    x_123: bool = Word64_equal (x_124, global_16 (*0x0*))
    case x_123 of
      true => numLimbs_0 | false => L_70
  numLimbs_0 ()
    x_129: word64 = Word64_andb (x_126, global_17 (*0x1*))
    x_128: bool = Word64_equal (x_129, global_16 (*0x0*))
    case x_128 of
      true => L_72 | false => L_71
  L_72 ()
    x_131: word64 vector = IntInf_toVector (x_122)
    x_130: word64 = Vector_length(word64) (x_131)
    L_73 (WordS64_subCheck (x_130, global_17 (*0x1*))) handle Overflow => L_62
  L_73 (x_132: word64)
    L_74 (WordS64_addCheck (x_132, global_17 (*0x1*))) handle Overflow => L_62
  L_74 (x_133: word64)
    L_75 ()
  L_75 ()
    x_136: word64 = Posix_FileSys_Stat_getMTime ()
    x_135: word64 = WordS64_rshift (x_136, global_175 (*0x3E*))
    x_134: bool = Word64_equal (x_135, global_16 (*0x0*))
    case x_134 of
      true => L_77 | false => L_76
  L_77 ()
    x_139: word64 = Word64_lshift (x_136, global_14 (*0x1*))
    x_138: word64 = Word64_orb (x_139, global_17 (*0x1*))
    x_137: intInf = Word_toIntInf (x_138)
    L_78 (x_137)
  L_78 (x_140: intInf)
    x_144: word64 = IntInf_toWord (x_140)
    x_143: word64 = Word64_andb (x_144, x_127)
    x_142: word64 = Word64_andb (x_143, global_17 (*0x1*))
    x_141: bool = Word64_equal (x_142, global_16 (*0x0*))
    case x_141 of
      true => numLimbs_1 | false => L_79
  numLimbs_1 ()
    x_146: word64 = Word64_andb (x_144, global_17 (*0x1*))
    x_145: bool = Word64_equal (x_146, global_16 (*0x0*))
    case x_145 of
      true => L_81 | false => L_80
  L_81 ()
    x_148: word64 vector = IntInf_toVector (x_140)
    x_147: word64 = Vector_length(word64) (x_148)
    L_82 (WordS64_subCheck (x_147, global_17 (*0x1*))) handle Overflow => L_62
  L_82 (x_149: word64)
    L_83 (WordS64_addCheck (x_149, global_17 (*0x1*))) handle Overflow => L_62
  L_83 (x_150: word64)
    L_84 ()
  L_84 ()
    x_153: word64 = Posix_FileSys_Stat_getCTime ()
    x_152: word64 = WordS64_rshift (x_153, global_175 (*0x3E*))
    x_151: bool = Word64_equal (x_152, global_16 (*0x0*))
    case x_151 of
      true => L_86 | false => L_85
  L_86 ()
    x_156: word64 = Word64_lshift (x_153, global_14 (*0x1*))
    x_155: word64 = Word64_orb (x_156, global_17 (*0x1*))
    x_154: intInf = Word_toIntInf (x_155)
    L_87 (x_154)
  L_87 (x_157: intInf)
    x_161: word64 = IntInf_toWord (x_157)
    x_160: word64 = Word64_andb (x_161, x_127)
    x_159: word64 = Word64_andb (x_160, global_17 (*0x1*))
    x_158: bool = Word64_equal (x_159, global_16 (*0x0*))
    case x_158 of
      true => numLimbs_2 | false => L_88
  numLimbs_2 ()
    x_163: word64 = Word64_andb (x_161, global_17 (*0x1*))
    x_162: bool = Word64_equal (x_163, global_16 (*0x0*))
    case x_162 of
      true => L_90 | false => L_89
  L_90 ()
    x_165: word64 vector = IntInf_toVector (x_157)
    x_164: word64 = Vector_length(word64) (x_165)
    L_91 (WordS64_subCheck (x_164, global_17 (*0x1*))) handle Overflow => L_62
  L_91 (x_166: word64)
    L_92 (WordS64_addCheck (x_166, global_17 (*0x1*))) handle Overflow => L_62
  L_92 (x_167: word64)
    L_93 ()
  L_93 ()
    x_169: word32 = Thread_atomicState ()
    x_168: bool = Word32_equal (x_169, global_13 (*0x0*))
    case x_168 of
      true => L_95 | false => L_94
  L_95 ()
    L_43 (global_381 (*Fail8_0 (global_380)*))
  L_94 ()
    _: unit = Thread_atomicEnd ()
    x_171: word32 = Posix_FileSys_ST_isReg (x_112)
    x_170: bool = Word32_equal (x_171, global_13 (*0x0*))
    case x_170 of
      true => L_97 | false => L_96
  L_97 ()
    L_98 (global_471)
  L_98 (x_172: word64 ref)
    x_175: (word64 ref * bool ref) = (x_172, closed_0)
    x_174: (word8 vector * (word64 ref * bool ref) * (word64 ref * bool ref)) =
      (global_445 (*"<stdout>"*), x_175, x_175)
    x_173: unit ref = Ref_ref(unit) (x_1 (*()*))
    case x_73 of
      BLOCK_BUF_0 => L_100 | LINE_BUF_0 => L_99
  L_100 ()
    x_177: word64 = 0x1000
    x_176: word8 array = Array_alloc(word8) (x_177)
    loop_11 (global_16 (*0x0*))
  loop_11 (x_178: word64)
    x_179: bool = WordS64_lt (x_178, x_177)
    case x_179 of
      true => L_102 | false => L_101
  L_102 ()
    _: unit = Array_update(word8) (x_176, x_178, global_353 (*0x0*))
    x_180: word64 = Word64_add (x_178, global_17 (*0x1*))
    loop_11 (x_180)
  L_101 ()
    x_181: bufferMode_0 = BLOCK_BUF_1 (global_469, x_176)
    L_103 (x_181)
  L_103 (x_182: bufferMode_0)
    x_187: bufferMode_0 ref = Ref_ref(bufferMode_0) (x_182)
    x_184:
      ((word8 vector * (word64 ref * bool ref) * (word64 ref * bool ref)) *
       bufferMode_0 ref *
       unit ref *
       (word8 vector * (word64 ref * bool ref) * (word64 ref * bool ref))) =
      (x_174, x_187, x_173, x_174)
    x_186: list_6 = Ref_deref(list_6) (openOutstreams_0)
    x_185: list_6 = ::_7 (x_186, x_184)
    _: unit = Ref_assign(list_6) (openOutstreams_0, x_185)
    x_183:
      ((word8 vector * (word64 ref * bool ref) * (word64 ref * bool ref)) *
       bufferMode_0 ref *
       unit ref *
       (word8 vector * (word64 ref * bool ref) * (word64 ref * bool ref))) ref =
      Ref_ref(((word8 vector * (word64 ref * bool ref) * (word64 ref * bool ref)) *
               bufferMode_0 ref *
               unit ref *
               (word8 vector * (word64 ref * bool ref) * (word64 ref * bool ref)))) (x_184)
    exiting_0: bool ref = Ref_ref(bool) (global_385 (*false*))
    tuple_0: (bool ref * list_8 ref * (word8 array * bool ref)) =
      (exiting_0, x_63, x_51)
    L_104 (global_455 (*::_4 (glob ... E1*))*), global_13 (*0x0*))
  L_104 (x_189: list_5, x_188: word32)
    x_190: word32 = Word32_add (x_188, global_14 (*0x1*))
    case x_189 of
      nil_9 => L_106 | ::_4 => L_105
  L_106 ()
    x_192: word64 = WordS32_extdToWord64 (x_190)
    x_191: bool = WordU64_lt (global_19 (*0x7FFFFFFF*), x_192)
    case x_191 of
      true => L_108 | false => L_107
  L_108 ()
    L_109 (tuple_0, messagers_0, global_20 (*Size_0*))
  L_109 (x_195: (bool ref * list_8 ref * (word8 array * bool ref)),
         x_194: list_0 ref,
         x_193: exn)
    L_110 (exnMessage_0 (x_193, x_194)) handle _ => print_2
  L_110 (x_196: word8 vector)
    x_198: list_4 = ::_2 (global_432 (*::_2 (glob ... n"*))*), x_196)
    x_197: list_4 = ::_2 (x_198, global_0 (*"unhandled ... on: "*))
    print_3 (concat_0 (x_197)) handle _ => L_111
  print_3 (x_199: word8 vector)
    _: unit = Stdio_print (x_199)
    L_112 (exit_0 (global_14 (*0x1*), x_195)) handle _ => print_2
  L_112 ()
    Bug
  print_2 ()
    _: unit = Stdio_print (global_433 (*"Top-level ... n.\n"*))
    L_113 (MLton_halt (global_14 (*0x1*)))
  L_113 ()
    _: unit = MLton_bug (global_463 (*"toplevel  ... lled"*))
    return ()
  L_111 (x_200: exn)
    print_2 ()
  L_107 ()
    x_201: real64 array = Array_alloc(real64) (x_192)
    loop_12 (global_456 (*::_4 (glob ... E1*))*), global_16 (*0x0*))
  loop_12 (x_203: list_5, x_202: word64)
    x_204: bool = WordS64_lt (x_202, x_192)
    case x_204 of
      true => L_115 | false => L_114
  L_115 ()
    case x_203 of
      nil_9 => L_117 | ::_4 => L_116
  L_117 ()
    L_109 (tuple_0, messagers_0, global_356 (*Fail_0 (global_355)*))
  L_116 (x_206: list_5, x_205: real64)
    _: unit = Array_update(real64) (x_201, x_202, x_205)
    x_207: word64 = Word64_add (x_202, global_17 (*0x1*))
    loop_12 (x_206, x_207)
  L_114 ()
    L_118 (global_460 (*::_4 (glob ... E1*))*), global_13 (*0x0*))
  L_118 (x_209: list_5, x_208: word32)
    x_210: word32 = Word32_add (x_208, global_14 (*0x1*))
    case x_209 of
      nil_9 => L_120 | ::_4 => L_119
  L_120 ()
    x_212: word64 = WordS32_extdToWord64 (x_210)
    x_211: bool = WordU64_lt (global_19 (*0x7FFFFFFF*), x_212)
    case x_211 of
      true => L_122 | false => L_121
  L_122 ()
    L_109 (tuple_0, messagers_0, global_20 (*Size_0*))
  L_121 ()
    x_213: real64 array = Array_alloc(real64) (x_212)
    loop_13 (global_461 (*::_4 (glob ... E1*))*), global_16 (*0x0*))
  loop_13 (x_215: list_5, x_214: word64)
    x_216: bool = WordS64_lt (x_214, x_212)
    case x_216 of
      true => L_124 | false => L_123
  L_124 ()
    case x_215 of
      nil_9 => L_126 | ::_4 => L_125
  L_126 ()
    L_109 (tuple_0, messagers_0, global_356 (*Fail_0 (global_355)*))
  L_125 (x_218: list_5, x_217: real64)
    _: unit = Array_update(real64) (x_213, x_214, x_217)
    x_219: word64 = Word64_add (x_214, global_17 (*0x1*))
    loop_13 (x_218, x_219)
  L_123 ()
    L_127 (print_4 (global_434 (*"[| "*), x_183)) handle _ => L_128
  L_127 ()
    x_220: word64 = Word64_sub (x_192, global_17 (*0x1*))
    loop_14 (global_16 (*0x0*))
  loop_14 (x_221: word64)
    x_222: bool = WordS64_lt (x_220, x_221)
    case x_222 of
      true => L_130 | false => L_129
  L_130 ()
    L_131 (print_4 (global_436 (*"|]\n"*), x_183)) handle _ => L_128
  L_131 ()
    L_132 (print_4 (global_434 (*"[| "*), x_183)) handle _ => L_128
  L_132 ()
    x_223: word64 = Word64_sub (x_212, global_17 (*0x1*))
    loop_15 (global_16 (*0x0*))
  loop_15 (x_224: word64)
    x_225: bool = WordS64_lt (x_223, x_224)
    case x_225 of
      true => L_134 | false => L_133
  L_134 ()
    L_135 (print_4 (global_436 (*"|]\n"*), x_183)) handle _ => L_128
  L_135 ()
    loop_16 (global_395 (*0.0*), global_16 (*0x0*))
  loop_16 (x_227: real64, x_226: word64)
    x_228: bool = WordS64_lt (x_220, x_226)
    case x_228 of
      true => L_137 | false => L_136
  L_137 ()
    L_138 (x_229 (x_227, x_68, x_51, x_32, x_13)) handle _ => L_128
  L_138 (x_230: word8 vector)
    x_233: word64 = 0x9
    x_232: word64 = Vector_length(word8) (x_230)
    x_231: bool = Word64_equal (x_232, global_16 (*0x0*))
    case x_231 of
      true => L_140 | false => L_139
  L_140 ()
    L_141 (global_462 (*"result = "*))
  L_141 (x_234: word8 vector)
    x_236: word64 = Vector_length(word8) (x_234)
    x_235: bool = Word64_equal (x_236, global_16 (*0x0*))
    case x_235 of
      true => L_143 | false => L_142
  L_143 ()
    L_144 (global_10 (*"\n"*))
  L_144 (x_237: word8 vector)
    L_145 (print_4 (x_237, x_183)) handle _ => L_128
  L_145 ()
    L_146 (exit_0 (global_13 (*0x0*), tuple_0)) handle _ => L_147
  L_146 ()
    Bug
  L_147 ()
    _: unit = Stdio_print (global_428 (*"Top-level ... n.\n"*))
    L_148 (MLton_halt (global_14 (*0x1*)))
  L_148 ()
    L_109 (tuple_0, messagers_0, global_431 (*Fail_0 (global_430)*))
  L_128 (x_238: exn)
    L_109 (tuple_0, messagers_0, x_238)
  L_142 ()
    x_240: word64 = Word64_add (x_236, global_17 (*0x1*))
    x_239: bool = WordU64_lt (global_19 (*0x7FFFFFFF*), x_240)
    case x_239 of
      true => L_150 | false => L_149
  L_150 ()
    L_109 (tuple_0, messagers_0, global_20 (*Size_0*))
  L_149 ()
    isZero_1: bool = Word64_equal (global_16 (*0x0*), x_240)
    case isZero_1 of
      true => L_zeroLen_1 | false => L_nonZeroLen_1
  L_zeroLen_1 ()
    L_join_1 (zeroArr_1)
  L_join_1 (x_241: word8 array)
    _: unit =
      Array_copyVector(word8) (x_241,
                               global_16 (*0x0*),
                               x_234,
                               global_16 (*0x0*),
                               x_236)
    _: unit =
      Array_copyVector(word8) (x_241,
                               x_236,
                               global_10 (*"\n"*),
                               global_16 (*0x0*),
                               global_17 (*0x1*))
    x_242: word8 vector = Array_toVector(word8) (x_241)
    L_144 (x_242)
  L_nonZeroLen_1 ()
    x_243: word8 array = Array_alloc(word8) (x_240)
    L_join_1 (x_243)
  L_139 ()
    x_245: word64 = Word64_add (x_232, x_233)
    x_244: bool = WordU64_lt (global_19 (*0x7FFFFFFF*), x_245)
    case x_244 of
      true => L_152 | false => L_151
  L_152 ()
    L_109 (tuple_0, messagers_0, global_20 (*Size_0*))
  L_151 ()
    isZero_2: bool = Word64_equal (global_16 (*0x0*), x_245)
    case isZero_2 of
      true => L_zeroLen_2 | false => L_nonZeroLen_2
  L_zeroLen_2 ()
    L_join_2 (zeroArr_1)
  L_join_2 (x_246: word8 array)
    _: unit =
      Array_copyVector(word8) (x_246,
                               global_16 (*0x0*),
                               global_462 (*"result = "*),
                               global_16 (*0x0*),
                               x_233)
    _: unit =
      Array_copyVector(word8) (x_246, x_233, x_230, global_16 (*0x0*), x_232)
    x_247: word8 vector = Array_toVector(word8) (x_246)
    L_141 (x_247)
  L_nonZeroLen_2 ()
    x_248: word8 array = Array_alloc(word8) (x_245)
    L_join_2 (x_248)
  L_136 ()
    x_253: word64 = Word64_add (x_226, global_17 (*0x1*))
    x_252: real64 = Array_sub(real64) (x_201, x_226)
    x_251: word32 = WordS64_extdToWord32 (x_226)
    x_250: word64 = WordS32_extdToWord64 (x_251)
    x_249: bool = WordU64_lt (x_250, x_212)
    case x_249 of
      true => L_154 | false => L_153
  L_154 ()
    x_256: real64 = Array_sub(real64) (x_213, x_250)
    x_255: real64 = Real64_mul (x_256, x_252)
    x_254: real64 = Real64_add (x_255, x_227)
    loop_16 (x_254, x_253)
  L_153 ()
    L_109 (tuple_0, messagers_0, global_349 (*Subscript_0*))
  L_133 ()
    x_258: word64 = Word64_add (x_224, global_17 (*0x1*))
    x_257: real64 = Array_sub(real64) (x_213, x_224)
    L_155 (x_229 (x_257, x_68, x_51, x_32, x_13)) handle _ => L_128
  L_155 (x_259: word8 vector)
    x_261: word64 = Vector_length(word8) (x_259)
    x_262: word64 = 0x2
    x_260: bool = Word64_equal (x_261, global_16 (*0x0*))
    case x_260 of
      true => L_157 | false => L_156
  L_157 ()
    L_158 (global_435 (*", "*))
  L_158 (x_263: word8 vector)
    L_159 (print_4 (x_263, x_183)) handle _ => L_128
  L_159 ()
    loop_15 (x_258)
  L_156 ()
    x_265: word64 = Word64_add (x_262, x_261)
    x_264: bool = WordU64_lt (global_19 (*0x7FFFFFFF*), x_265)
    case x_264 of
      true => L_161 | false => L_160
  L_161 ()
    L_109 (tuple_0, messagers_0, global_20 (*Size_0*))
  L_160 ()
    isZero_3: bool = Word64_equal (global_16 (*0x0*), x_265)
    case isZero_3 of
      true => L_zeroLen_3 | false => L_nonZeroLen_3
  L_zeroLen_3 ()
    L_join_3 (zeroArr_1)
  L_join_3 (x_266: word8 array)
    _: unit =
      Array_copyVector(word8) (x_266,
                               global_16 (*0x0*),
                               x_259,
                               global_16 (*0x0*),
                               x_261)
    _: unit =
      Array_copyVector(word8) (x_266,
                               x_261,
                               global_435 (*", "*),
                               global_16 (*0x0*),
                               x_262)
    x_267: word8 vector = Array_toVector(word8) (x_266)
    L_158 (x_267)
  L_nonZeroLen_3 ()
    x_268: word8 array = Array_alloc(word8) (x_265)
    L_join_3 (x_268)
  L_129 ()
    x_270: word64 = Word64_add (x_221, global_17 (*0x1*))
    x_269: real64 = Array_sub(real64) (x_201, x_221)
    L_162 (x_229 (x_269, x_68, x_51, x_32, x_13)) handle _ => L_128
  L_162 (x_271: word8 vector)
    x_273: word64 = Vector_length(word8) (x_271)
    x_274: word64 = 0x2
    x_272: bool = Word64_equal (x_273, global_16 (*0x0*))
    case x_272 of
      true => L_164 | false => L_163
  L_164 ()
    L_165 (global_435 (*", "*))
  L_165 (x_275: word8 vector)
    L_166 (print_4 (x_275, x_183)) handle _ => L_128
  L_166 ()
    loop_14 (x_270)
  L_163 ()
    x_277: word64 = Word64_add (x_274, x_273)
    x_276: bool = WordU64_lt (global_19 (*0x7FFFFFFF*), x_277)
    case x_276 of
      true => L_168 | false => L_167
  L_168 ()
    L_109 (tuple_0, messagers_0, global_20 (*Size_0*))
  L_167 ()
    isZero_4: bool = Word64_equal (global_16 (*0x0*), x_277)
    case isZero_4 of
      true => L_zeroLen_4 | false => L_nonZeroLen_4
  L_zeroLen_4 ()
    L_join_4 (zeroArr_1)
  L_join_4 (x_278: word8 array)
    _: unit =
      Array_copyVector(word8) (x_278,
                               global_16 (*0x0*),
                               x_271,
                               global_16 (*0x0*),
                               x_273)
    _: unit =
      Array_copyVector(word8) (x_278,
                               x_273,
                               global_435 (*", "*),
                               global_16 (*0x0*),
                               x_274)
    x_279: word8 vector = Array_toVector(word8) (x_278)
    L_165 (x_279)
  L_nonZeroLen_4 ()
    x_280: word8 array = Array_alloc(word8) (x_277)
    L_join_4 (x_280)
  L_119 (x_282: list_5, x_281: real64)
    L_118 (x_282, x_210)
  L_105 (x_284: list_5, x_283: real64)
    L_104 (x_284, x_190)
  L_99 ()
    x_286: word64 = 0x1000
    x_285: word8 array = Array_alloc(word8) (x_286)
    loop_17 (global_16 (*0x0*))
  loop_17 (x_287: word64)
    x_288: bool = WordS64_lt (x_287, x_286)
    case x_288 of
      true => L_170 | false => L_169
  L_170 ()
    _: unit = Array_update(word8) (x_285, x_287, global_353 (*0x0*))
    x_289: word64 = Word64_add (x_287, global_17 (*0x1*))
    loop_17 (x_289)
  L_169 ()
    x_290: bufferMode_0 = LINE_BUF_1 (global_470, x_285)
    L_103 (x_290)
  L_96 ()
    _: unit = Thread_atomicBegin ()
    x_292: word64 =
      Posix_IO_lseek (global_14 (*0x1*), global_16 (*0x0*), global_14 (*0x1*))
    x_291: bool = Word64_equal (x_292, global_389 (*0xFFFFFFFFFFFFFFFF*))
    case x_291 of
      true => L_172 | false => L_171
  L_172 ()
    x_295: word32 = Posix_Error_getErrno ()
    x_294: word32 = Thread_atomicState ()
    x_293: bool = Word32_equal (x_294, global_13 (*0x0*))
    case x_293 of
      true => L_174 | false => L_173
  L_174 ()
    L_43 (global_381 (*Fail8_0 (global_380)*))
  L_173 ()
    _: unit = Thread_atomicEnd ()
    x_298: word64 = Posix_Error_strError (x_295)
    x_297: pointer = CPointer_fromWord (x_298)
    x_296: bool = CPointer_equal (x_297, global_386 (*NULL*))
    case x_296 of
      true => L_176 | false => L_175
  L_176 ()
    L_177 (global_387 (*"Unknown error"*))
  L_177 (x_299: word8 vector)
    x_301: t_0 = SOME_0 (x_295)
    x_300: exn = SysErr_0 (x_301, x_299)
    L_43 (x_300)
  L_175 ()
    loop_18 (global_13 (*0x0*))
  loop_18 (x_302: word32)
    x_304: word64 = WordS32_extdToWord64 (x_302)
    x_303: word8 = CPointer_getWord8 (x_297, x_304)
    case x_303 of
      0x0 => L_178 | _ => L_179
  L_178 ()
    x_305: bool = WordU64_lt (global_19 (*0x7FFFFFFF*), x_304)
    case x_305 of
      true => L_181 | false => L_180
  L_181 ()
    L_43 (global_20 (*Size_0*))
  L_180 ()
    isZero_5: bool = Word64_equal (global_16 (*0x0*), x_304)
    case isZero_5 of
      true => L_zeroLen_5 | false => L_nonZeroLen_5
  L_zeroLen_5 ()
    L_join_5 (zeroArr_1)
  L_join_5 (x_306: word8 array)
    loop_19 (global_16 (*0x0*))
  loop_19 (x_307: word64)
    x_308: bool = WordS64_lt (x_307, x_304)
    case x_308 of
      true => L_183 | false => L_182
  L_183 ()
    x_312: word32 = WordS64_extdToWord32 (x_307)
    x_311: word64 = WordS32_extdToWord64 (x_312)
    x_310: word8 = CPointer_getWord8 (x_297, x_311)
    _: unit = Array_update(word8) (x_306, x_307, x_310)
    x_309: word64 = Word64_add (x_307, global_17 (*0x1*))
    loop_19 (x_309)
  L_182 ()
    x_313: word8 vector = Array_toVector(word8) (x_306)
    L_177 (x_313)
  L_nonZeroLen_5 ()
    x_314: word8 array = Array_alloc(word8) (x_304)
    L_join_5 (x_314)
  L_179 ()
    x_315: word32 = Word32_add (x_302, global_14 (*0x1*))
    loop_18 (x_315)
  L_171 ()
    x_317: word32 = Thread_atomicState ()
    x_316: bool = Word32_equal (x_317, global_13 (*0x0*))
    case x_316 of
      true => L_185 | false => L_184
  L_185 ()
    L_43 (global_381 (*Fail8_0 (global_380)*))
  L_184 ()
    _: unit = Thread_atomicEnd ()
    _: unit = Ref_assign(word64) (global_472, x_292)
    L_98 (global_472)
  L_89 ()
    L_91 (global_17 (*0x1*))
  L_88 ()
    x_319: word64 = WordS64_rshift (x_161, global_14 (*0x1*))
    x_318: word64 = 0x3B9ACA00
    zextdFromInt64ToWord64_0 (WordS64_mulCheck (x_319, x_318)) handle Overflow => numLimbs_2
  zextdFromInt64ToWord64_0 (x_320: word64)
    x_324: word64 = Word64_lshift (x_320, global_14 (*0x1*))
    x_323: word64 = Word64_orb (x_324, global_17 (*0x1*))
    x_322: word64 = Word64_xorb (x_323, x_320)
    x_321: bool = WordS64_lt (x_322, global_16 (*0x0*))
    case x_321 of
      true => numLimbs_2 | false => L_93
  L_85 ()
    x_325: bool = Word64_equal (x_152, global_389 (*0xFFFFFFFFFFFFFFFF*))
    case x_325 of
      true => L_86 | false => L_186
  L_186 ()
    x_326: bool = WordS64_lt (x_153, global_16 (*0x0*))
    case x_326 of
      true => L_188 | false => L_187
  L_188 ()
    x_327: word64 = Word64_neg (x_153)
    loop_20 (global_26 (*::_0 (glob ... l_25)*), global_17 (*0x1*), x_327)
  loop_20 (x_330: list_1, x_329: word64, x_328: word64)
    x_331: bool = Word64_equal (x_328, global_16 (*0x0*))
    case x_331 of
      true => L_190 | false => L_189
  L_190 ()
    isZero_6: bool = Word64_equal (global_16 (*0x0*), x_329)
    case isZero_6 of
      true => L_zeroLen_6 | false => L_nonZeroLen_6
  L_zeroLen_6 ()
    case x_330 of
      nil_0 => L_192 | ::_0 => L_191
  L_192 ()
    L_193 (zeroArr_0)
  L_193 (x_332: word64 array)
    x_334: word64 vector = Array_toVector(word64) (x_332)
    x_333: intInf = WordVector_toIntInf (x_334)
    L_87 (x_333)
  L_191 (x_336: list_1, x_335: (word64 * word64))
    L_194 (x_336, x_335, zeroArr_0)
  L_194 (x_339: list_1, x_338: (word64 * word64), x_337: word64 array)
    x_340: word64 = #1 (x_338)
    x_341: word64 = #0 (x_338)
    _: unit = Array_update(word64) (x_337, x_341, x_340)
    case x_339 of
      nil_0 => L_196 | ::_0 => L_195
  L_196 ()
    L_193 (x_337)
  L_195 (x_343: list_1, x_342: (word64 * word64))
    L_194 (x_343, x_342, x_337)
  L_nonZeroLen_6 ()
    x_344: word64 array = Array_alloc(word64) (x_329)
    case x_330 of
      nil_0 => L_198 | ::_0 => L_197
  L_198 ()
    L_193 (x_344)
  L_197 (x_346: list_1, x_345: (word64 * word64))
    L_194 (x_346, x_345, x_344)
  L_189 ()
    L_199 (WordS64_addCheck (x_329, global_17 (*0x1*))) handle Overflow => L_62
  L_199 (x_347: word64)
    x_349: (word64 * word64) = (x_329, x_328)
    x_348: list_1 = ::_0 (x_330, x_349)
    loop_20 (x_348, x_347, global_16 (*0x0*))
  L_187 ()
    loop_20 (global_24 (*::_0 (glob ... l_23)*), global_17 (*0x1*), x_153)
  L_80 ()
    L_82 (global_17 (*0x1*))
  L_79 ()
    x_351: word64 = WordS64_rshift (x_144, global_14 (*0x1*))
    x_350: word64 = 0x3B9ACA00
    zextdFromInt64ToWord64_1 (WordS64_mulCheck (x_351, x_350)) handle Overflow => numLimbs_1
  zextdFromInt64ToWord64_1 (x_352: word64)
    x_356: word64 = Word64_lshift (x_352, global_14 (*0x1*))
    x_355: word64 = Word64_orb (x_356, global_17 (*0x1*))
    x_354: word64 = Word64_xorb (x_355, x_352)
    x_353: bool = WordS64_lt (x_354, global_16 (*0x0*))
    case x_353 of
      true => numLimbs_1 | false => L_84
  L_76 ()
    x_357: bool = Word64_equal (x_135, global_389 (*0xFFFFFFFFFFFFFFFF*))
    case x_357 of
      true => L_77 | false => L_200
  L_200 ()
    x_358: bool = WordS64_lt (x_136, global_16 (*0x0*))
    case x_358 of
      true => L_202 | false => L_201
  L_202 ()
    x_359: word64 = Word64_neg (x_136)
    loop_21 (global_26 (*::_0 (glob ... l_25)*), global_17 (*0x1*), x_359)
  loop_21 (x_362: list_1, x_361: word64, x_360: word64)
    x_363: bool = Word64_equal (x_360, global_16 (*0x0*))
    case x_363 of
      true => L_204 | false => L_203
  L_204 ()
    isZero_7: bool = Word64_equal (global_16 (*0x0*), x_361)
    case isZero_7 of
      true => L_zeroLen_7 | false => L_nonZeroLen_7
  L_zeroLen_7 ()
    case x_362 of
      nil_0 => L_206 | ::_0 => L_205
  L_206 ()
    L_207 (zeroArr_0)
  L_207 (x_364: word64 array)
    x_366: word64 vector = Array_toVector(word64) (x_364)
    x_365: intInf = WordVector_toIntInf (x_366)
    L_78 (x_365)
  L_205 (x_368: list_1, x_367: (word64 * word64))
    L_208 (x_368, x_367, zeroArr_0)
  L_208 (x_371: list_1, x_370: (word64 * word64), x_369: word64 array)
    x_372: word64 = #1 (x_370)
    x_373: word64 = #0 (x_370)
    _: unit = Array_update(word64) (x_369, x_373, x_372)
    case x_371 of
      nil_0 => L_210 | ::_0 => L_209
  L_210 ()
    L_207 (x_369)
  L_209 (x_375: list_1, x_374: (word64 * word64))
    L_208 (x_375, x_374, x_369)
  L_nonZeroLen_7 ()
    x_376: word64 array = Array_alloc(word64) (x_361)
    case x_362 of
      nil_0 => L_212 | ::_0 => L_211
  L_212 ()
    L_207 (x_376)
  L_211 (x_378: list_1, x_377: (word64 * word64))
    L_208 (x_378, x_377, x_376)
  L_203 ()
    L_213 (WordS64_addCheck (x_361, global_17 (*0x1*))) handle Overflow => L_62
  L_213 (x_379: word64)
    x_381: (word64 * word64) = (x_361, x_360)
    x_380: list_1 = ::_0 (x_362, x_381)
    loop_21 (x_380, x_379, global_16 (*0x0*))
  L_201 ()
    loop_21 (global_24 (*::_0 (glob ... l_23)*), global_17 (*0x1*), x_136)
  L_71 ()
    L_73 (global_17 (*0x1*))
  L_70 ()
    x_383: word64 = WordS64_rshift (x_126, global_14 (*0x1*))
    x_382: word64 = 0x3B9ACA00
    zextdFromInt64ToWord64_2 (WordS64_mulCheck (x_383, x_382)) handle Overflow => numLimbs_0
  zextdFromInt64ToWord64_2 (x_384: word64)
    x_388: word64 = Word64_lshift (x_384, global_14 (*0x1*))
    x_387: word64 = Word64_orb (x_388, global_17 (*0x1*))
    x_386: word64 = Word64_xorb (x_387, x_384)
    x_385: bool = WordS64_lt (x_386, global_16 (*0x0*))
    case x_385 of
      true => numLimbs_0 | false => L_75
  L_67 ()
    x_389: bool = Word64_equal (x_117, global_389 (*0xFFFFFFFFFFFFFFFF*))
    case x_389 of
      true => L_68 | false => L_214
  L_214 ()
    x_390: bool = WordS64_lt (x_118, global_16 (*0x0*))
    case x_390 of
      true => L_216 | false => L_215
  L_216 ()
    x_391: word64 = Word64_neg (x_118)
    loop_22 (global_26 (*::_0 (glob ... l_25)*), global_17 (*0x1*), x_391)
  loop_22 (x_394: list_1, x_393: word64, x_392: word64)
    x_395: bool = Word64_equal (x_392, global_16 (*0x0*))
    case x_395 of
      true => L_218 | false => L_217
  L_218 ()
    isZero_8: bool = Word64_equal (global_16 (*0x0*), x_393)
    case isZero_8 of
      true => L_zeroLen_8 | false => L_nonZeroLen_8
  L_zeroLen_8 ()
    case x_394 of
      nil_0 => L_220 | ::_0 => L_219
  L_220 ()
    L_221 (zeroArr_0)
  L_221 (x_396: word64 array)
    x_398: word64 vector = Array_toVector(word64) (x_396)
    x_397: intInf = WordVector_toIntInf (x_398)
    L_69 (x_397)
  L_219 (x_400: list_1, x_399: (word64 * word64))
    L_222 (x_400, x_399, zeroArr_0)
  L_222 (x_403: list_1, x_402: (word64 * word64), x_401: word64 array)
    x_404: word64 = #1 (x_402)
    x_405: word64 = #0 (x_402)
    _: unit = Array_update(word64) (x_401, x_405, x_404)
    case x_403 of
      nil_0 => L_224 | ::_0 => L_223
  L_224 ()
    L_221 (x_401)
  L_223 (x_407: list_1, x_406: (word64 * word64))
    L_222 (x_407, x_406, x_401)
  L_nonZeroLen_8 ()
    x_408: word64 array = Array_alloc(word64) (x_393)
    case x_394 of
      nil_0 => L_226 | ::_0 => L_225
  L_226 ()
    L_221 (x_408)
  L_225 (x_410: list_1, x_409: (word64 * word64))
    L_222 (x_410, x_409, x_408)
  L_217 ()
    L_227 (WordS64_addCheck (x_393, global_17 (*0x1*))) handle Overflow => L_62
  L_227 (x_411: word64)
    x_413: (word64 * word64) = (x_393, x_392)
    x_412: list_1 = ::_0 (x_394, x_413)
    loop_22 (x_412, x_411, global_16 (*0x0*))
  L_215 ()
    loop_22 (global_24 (*::_0 (glob ... l_23)*), global_17 (*0x1*), x_118)
  L_36 ()
    L_38 (global_443 (*LINE_BUF_0*))
  L_3 (x_415: list_1, x_414: (word64 * word64))
    x_416: word64 = #1 (x_414)
    x_417: word64 = #0 (x_414)
    _: unit = Array_update(word64) (x_6, x_417, x_416)
    case x_415 of
      nil_0 => L_4 | ::_0 => L_3
  L_1 ()
    L_228 (WordS64_addCheck (x_3, global_17 (*0x1*))) handle Overflow => L_229
  L_229 ()
    L_43 (global_15 (*Overflow_0*))
  L_228 (x_418: word64)
    x_420: (word64 * word64) = (x_3, x_2)
    x_419: list_1 = ::_0 (x_4, x_420)
    loop_0 (x_419, x_418, global_16 (*0x0*))
fun exnMessage_0 (x_421: exn, env_0: list_0 ref):
  {returns = Some (word8 vector), raises = Some ()} =
L_230 ()
  L_230 ()
    x_422: list_0 = Ref_deref(list_0) (env_0)
    case x_422 of
      nil_6 => L_232 | ::_9 => L_231
  L_232 ()
    case x_421 of
      Io_0 => L_241
    | ClosedStream_0 => L_240
    | SysErr_0 => L_239
    | Option_0 => L_238
    | Fail_0 => L_237
    | Subscript_0 => L_236
    | Size_0 => L_235
    | Overflow_0 => L_234
    | Fail8_0 => L_233
  L_241 (x_425: word8 vector, x_424: word8 vector, x_423: exn)
    return (global_9 (*"Io"*))
  L_240 ()
    return (global_8 (*"ClosedStream"*))
  L_239 (x_427: t_0, x_426: word8 vector)
    return (global_7 (*"SysErr"*))
  L_238 ()
    return (global_6 (*"Option"*))
  L_237 (x_428: word8 vector)
    return (global_5 (*"Fail"*))
  L_236 ()
    return (global_4 (*"Subscript"*))
  L_235 ()
    return (global_3 (*"Size"*))
  L_234 ()
    return (global_1 (*"Overflow"*))
  L_233 (x_429: word8 vector)
    return (global_2 (*"Fail8"*))
  L_231 (x_431: list_0, x_430: lambdas_0)
    case x_430 of
      Env_1 => L_244 | Env_0 => L_243 | Env_2 => L_242
  L_244 ()
    case x_421 of
      SysErr_0 => L_245 | _ => L_246
  L_245 (x_433: t_0, x_432: word8 vector)
    case x_433 of
      NONE_0 => L_248 | SOME_0 => L_247
  L_248 ()
    L_249 (global_347 (*""*))
  L_249 (x_434: word8 vector)
    x_437: list_4 = ::_2 (global_27 (*nil_1*), x_434)
    x_436: list_4 = ::_2 (x_437, x_432)
    x_435: list_4 = ::_2 (x_436, global_348 (*"SysErr: "*))
    L_250 (concat_0 (x_435)) handle _ => L_251
  L_250 (x_438: word8 vector)
    return (x_438)
  L_251 (x_439: exn)
    raise ()
  L_247 (x_440: word32)
    L_252 (global_342 (*::_1 (glob ... _341)*), global_464)
  L_252 (x_442: list_7, x_441: (word32 * word8 vector))
    m_0: word32 = #0 (x_441)
    x_443: bool = Word32_equal (m_0, x_440)
    case x_443 of
      true => L_254 | false => L_253
  L_254 ()
    x_444: word8 vector = #1 (x_441)
    L_255 (x_444)
  L_255 (x_445: word8 vector)
    x_447: list_4 = ::_2 (global_345 (*::_2 (glob ... ]"*))*), x_445)
    x_446: list_4 = ::_2 (x_447, global_346 (*" ["*))
    L_249 (concat_0 (x_446)) handle _ => L_251
  L_253 ()
    case x_442 of
      nil_2 => L_256 | ::_1 => L_252
  L_256 ()
    L_255 (global_343 (*"<UNKNOWN>"*))
  L_246 ()
    case x_431 of
      nil_6 => L_232 | ::_9 => L_231
  L_243 ()
    case x_421 of
      Fail_0 => L_257 | _ => L_258
  L_257 (x_448: word8 vector)
    x_450: list_4 = ::_2 (global_27 (*nil_1*), x_448)
    x_449: list_4 = ::_2 (x_450, global_31 (*"Fail: "*))
    L_259 (concat_0 (x_449)) handle _ => L_260
  L_259 (x_451: word8 vector)
    return (x_451)
  L_260 (x_452: exn)
    raise ()
  L_258 ()
    case x_431 of
      nil_6 => L_232 | ::_9 => L_231
  L_242 (env_1: list_0 ref)
    case x_421 of
      Io_0 => L_261 | _ => L_262
  L_261 (x_455: word8 vector, x_454: word8 vector, x_453: exn)
    L_263 (exnMessage_0 (x_453, env_1)) handle _ => raise
  L_263 (x_456: word8 vector)
    x_462: list_4 = ::_2 (global_27 (*nil_1*), x_456)
    x_461: list_4 = ::_2 (x_462, global_28 (*"\" failed with "*))
    x_460: list_4 = ::_2 (x_461, x_455)
    x_459: list_4 = ::_2 (x_460, global_29 (*" \""*))
    x_458: list_4 = ::_2 (x_459, x_454)
    x_457: list_4 = ::_2 (x_458, global_30 (*"Io: "*))
    L_264 (concat_0 (x_457)) handle _ => L_265
  L_264 (x_463: word8 vector)
    return (x_463)
  L_265 (x_464: exn)
    raise ()
  L_262 ()
    case x_431 of
      nil_6 => L_232 | ::_9 => L_231
fun concat_0 (x_465: list_4):
  {returns = Some (word8 vector), raises = Some (exn)} =
L_266 ()
  L_266 ()
    case x_465 of
      nil_1 => L_268 | ::_2 => L_267
  L_268 ()
    return (global_347 (*""*))
  L_267 (x_467: list_4, x_466: word8 vector)
    case x_467 of
      nil_1 => L_269 | _ => L_270
  L_269 ()
    return (x_466)
  L_270 ()
    L_271 (x_467, x_466, global_16 (*0x0*))
  L_271 (x_470: list_4, x_469: word8 vector, x_468: word64)
    x_471: word64 = Vector_length(word8) (x_469)
    L_272 (WordS64_addCheck (x_468, x_471)) handle Overflow => L_273
  L_273 ()
    raise (global_20 (*Size_0*))
  L_272 (x_472: word64)
    case x_470 of
      nil_1 => L_275 | ::_2 => L_274
  L_275 ()
    x_473: bool = WordU64_lt (global_19 (*0x7FFFFFFF*), x_472)
    case x_473 of
      true => L_273 | false => L_276
  L_276 ()
    isZero_9: bool = Word64_equal (global_16 (*0x0*), x_472)
    case isZero_9 of
      true => L_zeroLen_9 | false => L_nonZeroLen_9
  L_zeroLen_9 ()
    L_277 (x_467, x_466, zeroArr_1, global_16 (*0x0*))
  L_277 (x_477: list_4, x_476: word8 vector, x_475: word8 array, x_474: word64)
    x_479: word64 = Vector_length(word8) (x_476)
    x_478: bool = WordS64_lt (x_479, global_18 (*0x5*))
    case x_478 of
      true => L_279 | false => L_278
  L_279 ()
    x_480: word64 = Word64_sub (x_479, global_17 (*0x1*))
    loop_23 (global_16 (*0x0*))
  loop_23 (x_481: word64)
    x_482: bool = WordS64_lt (x_480, x_481)
    case x_482 of
      true => L_281 | false => L_280
  L_281 ()
    x_483: word64 = Word64_add (x_479, x_474)
    case x_477 of
      nil_1 => L_283 | ::_2 => L_282
  L_283 ()
    x_484: word8 vector = Array_toVector(word8) (x_475)
    return (x_484)
  L_282 (x_486: list_4, x_485: word8 vector)
    L_277 (x_486, x_485, x_475, x_483)
  L_280 ()
    x_489: word64 = Word64_add (x_481, x_474)
    x_488: word8 = Vector_sub(word8) (x_476, x_481)
    _: unit = Array_update(word8) (x_475, x_489, x_488)
    x_487: word64 = Word64_add (x_481, global_17 (*0x1*))
    loop_23 (x_487)
  L_278 ()
    _: unit =
      Array_copyVector(word8) (x_475, x_474, x_476, global_16 (*0x0*), x_479)
    L_281 ()
  L_nonZeroLen_9 ()
    x_490: word8 array = Array_alloc(word8) (x_472)
    L_277 (x_467, x_466, x_490, global_16 (*0x0*))
  L_274 (x_492: list_4, x_491: word8 vector)
    L_271 (x_492, x_491, x_472)
fun exit_0 (x_493: word32,
            env_2: (bool ref * list_8 ref * (word8 array * bool ref))):
  {returns = None, raises = Some ()} =
L_284 ()
  L_284 ()
    exiting_1: bool ref = #0 (env_2)
    atExit_0: list_8 ref = #1 (env_2)
    x_495: (word8 array * bool ref) = #2 (env_2)
    x_494: bool = Ref_deref(bool) (exiting_1)
    case x_494 of
      true => L_286 | false => L_285
  L_286 ()
    raise ()
  L_285 ()
    _: unit = Ref_assign(bool) (exiting_1, global_378 (*true*))
    x_496: bool = WordS32_lt (x_493, global_13 (*0x0*))
    case x_496 of
      true => L_288 | false => L_287
  L_288 ()
    x_499: word8 array = #0 (x_495)
    x_498: bool ref = #1 (x_495)
    _: unit = Thread_atomicBegin ()
    x_497: bool = Ref_deref(bool) (x_498)
    case x_497 of
      true => L_290 | false => L_289
  L_290 ()
    x_501: word32 = Thread_atomicState ()
    x_500: bool = Word32_equal (x_501, global_13 (*0x0*))
    case x_500 of
      true => L_292 | false => L_291
  L_292 ()
    raise ()
  L_291 ()
    _: unit = Thread_atomicEnd ()
    x_503: word64 = 0x21
    x_502: word8 array = Array_alloc(word8) (x_503)
    loop_24 (global_16 (*0x0*))
  loop_24 (x_504: word64)
    x_505: bool = WordS64_lt (x_504, x_503)
    case x_505 of
      true => L_294 | false => L_293
  L_294 ()
    _: unit = Array_update(word8) (x_502, x_504, global_353 (*0x0*))
    x_506: word64 = Word64_add (x_504, global_17 (*0x1*))
    loop_24 (x_506)
  L_293 ()
    case x_496 of
      true => L_296 | false => L_295
  L_296 ()
    loop_25 (global_157 (*0x20*), x_493, x_502)
  loop_25 (x_509: word32, x_508: word32, x_507: word8 array)
    x_513: word32 = WordS32_rem (x_508, global_52 (*0xA*))
    x_512: word32 = Word32_neg (x_513)
    x_511: word64 = WordS32_extdToWord64 (x_512)
    x_510: bool = WordU64_lt (x_511, global_382 (*0x10*))
    case x_510 of
      true => L_298 | false => L_297
  L_298 ()
    x_517: word8 = Vector_sub(word8) (global_383 (*"0123456789ABCDEF"*), x_511)
    x_515: word64 = Array_length(word8) (x_507)
    x_516: word64 = WordS32_extdToWord64 (x_509)
    x_514: bool = WordU64_lt (x_516, x_515)
    case x_514 of
      true => L_299 | false => L_297
  L_299 ()
    _: unit = Array_update(word8) (x_507, x_516, x_517)
    x_519: word32 = WordS32_quot (x_508, global_52 (*0xA*))
    x_518: bool = Word32_equal (x_519, global_13 (*0x0*))
    case x_518 of
      true => L_301 | false => L_300
  L_301 ()
    case x_496 of
      true => L_303 | false => L_302
  L_303 ()
    L_304 (WordS32_subCheck (x_509, global_14 (*0x1*))) handle Overflow => L_297
  L_297 ()
    case x_497 of
      true => L_306 | false => L_305
  L_306 ()
    raise ()
  L_305 ()
    _: unit = Ref_assign(bool) (x_498, global_385 (*false*))
    raise ()
  L_304 (i_0: word32)
    x_521: word64 = WordS32_extdToWord64 (i_0)
    x_520: bool = WordU64_lt (x_521, x_515)
    case x_520 of
      true => L_307 | false => L_297
  L_307 ()
    _: unit = Array_update(word8) (x_507, x_521, global_384 (*0x7E*))
    L_308 (i_0)
  L_308 (x_522: word32)
    x_524: word64 = WordS32_extdToWord64 (x_522)
    x_523: bool = WordU64_lt (x_515, x_524)
    case x_523 of
      true => L_297 | false => L_309
  L_309 ()
    x_525: word64 = Word64_sub (x_515, x_524)
    isZero_10: bool = Word64_equal (global_16 (*0x0*), x_525)
    case isZero_10 of
      true => L_zeroLen_10 | false => L_nonZeroLen_10
  L_zeroLen_10 ()
    L_join_6 (zeroArr_1)
  L_join_6 (x_526: word8 array)
    x_527: bool = WordS64_lt (x_525, global_18 (*0x5*))
    case x_527 of
      true => L_311 | false => L_310
  L_311 ()
    x_528: word64 = Word64_sub (x_525, global_17 (*0x1*))
    loop_26 (global_16 (*0x0*))
  loop_26 (x_529: word64)
    x_530: bool = WordS64_lt (x_528, x_529)
    case x_530 of
      true => L_313 | false => L_312
  L_313 ()
    x_531: word8 vector = Array_toVector(word8) (x_526)
    case x_497 of
      true => L_315 | false => L_314
  L_315 ()
    x_533: list_4 = ::_2 (global_426 (*::_2 (glob ...  "*))*), x_531)
    x_532: list_4 = ::_2 (x_533, global_427 (*"MLton.Exit.exit("*))
    L_316 (concat_0 (x_532)) handle _ => L_317
  L_316 (x_534: word8 vector)
    raise ()
  L_317 (x_535: exn)
    raise ()
  L_314 ()
    _: unit = Ref_assign(bool) (x_498, global_385 (*false*))
    L_315 ()
  L_312 ()
    x_538: word64 = Word64_add (x_529, x_524)
    x_537: word8 = Array_sub(word8) (x_507, x_538)
    _: unit = Array_update(word8) (x_526, x_529, x_537)
    x_536: word64 = Word64_add (x_529, global_17 (*0x1*))
    loop_26 (x_536)
  L_310 ()
    _: unit =
      Array_copyArray(word8) (x_526, global_16 (*0x0*), x_507, x_524, x_525)
    L_313 ()
  L_nonZeroLen_10 ()
    x_539: word8 array = Array_alloc(word8) (x_525)
    L_join_6 (x_539)
  L_302 ()
    L_308 (x_509)
  L_300 ()
    L_318 (WordS32_subCheck (x_509, global_14 (*0x1*))) handle Overflow => L_297
  L_318 (x_540: word32)
    loop_25 (x_540, x_519, x_507)
  L_295 ()
    L_319 (x_502)
  L_319 (x_541: word8 array)
    x_542: word32 = Word32_neg (x_493)
    loop_25 (global_157 (*0x20*), x_542, x_541)
  L_289 ()
    _: unit = Ref_assign(bool) (x_498, global_378 (*true*))
    x_544: word32 = Thread_atomicState ()
    x_543: bool = Word32_equal (x_544, global_13 (*0x0*))
    case x_543 of
      true => L_321 | false => L_320
  L_321 ()
    raise ()
  L_320 ()
    _: unit = Thread_atomicEnd ()
    case x_496 of
      true => L_323 | false => L_322
  L_323 ()
    loop_25 (global_157 (*0x20*), x_493, x_499)
  L_322 ()
    L_319 (x_499)
  L_287 ()
    x_545: bool = WordS32_lt (x_493, global_422 (*0x100*))
    case x_545 of
      true => L_324 | false => L_288
  L_324 ()
    x_546: list_8 = Ref_deref(list_8) (atExit_0)
    case x_546 of
      nil_7 => L_326 | ::_8 => L_325
  L_326 ()
    L_327 (MLton_halt (x_493))
  L_327 ()
    raise ()
  L_325 (x_548: list_8, x_547: list_6 ref)
    x_549: list_6 = Ref_deref(list_6) (x_547)
    case x_549 of
      nil_8 => L_329 | ::_7 => L_328
  L_329 ()
    case x_548 of
      nil_7 => L_326 | ::_8 => L_325
  L_328 (x_551: list_6,
         x_550: ((word8 vector *
                  (word64 ref * bool ref) *
                  (word64 ref * bool ref)) *
                 bufferMode_0 ref *
                 unit ref *
                 (word8 vector *
                  (word64 ref * bool ref) *
                  (word64 ref * bool ref))))
    x_553: bufferMode_0 ref = #1 (x_550)
    x_554: (word8 vector * (word64 ref * bool ref) * (word64 ref * bool ref)) =
      #0 (x_550)
    x_552: bufferMode_0 = Ref_deref(bufferMode_0) (x_553)
    case x_552 of
      BLOCK_BUF_1 => L_331 | LINE_BUF_1 => L_330
  L_331 (x_556: word32 ref, x_555: word8 array)
    x_557: (word8 array * word32 ref) = (x_555, x_556)
    L_332 (flushBuf_0 (x_557, x_554)) handle _ => L_333
  L_332 ()
    case x_551 of
      nil_8 => L_329 | ::_7 => L_328
  L_333 (x_558: exn)
    case x_548 of
      nil_7 => L_326 | ::_8 => L_325
  L_330 (x_560: word32 ref, x_559: word8 array)
    x_561: (word8 array * word32 ref) = (x_559, x_560)
    L_332 (flushBuf_0 (x_561, x_554)) handle _ => L_334
  L_334 (x_562: exn)
    case x_548 of
      nil_7 => L_326 | ::_8 => L_325
fun flushBuf_0 (x_564: (word8 array * word32 ref),
                x_563: (word8 vector *
                        (word64 ref * bool ref) *
                        (word64 ref * bool ref))):
  {returns = Some (), raises = Some (exn)} =
L_335 ()
  L_335 ()
    x_570: word32 ref = #1 (x_564)
    x_569: word8 array = #0 (x_564)
    x_568: word32 = Ref_deref(word32) (x_570)
    _: unit = Ref_assign(word32) (x_570, global_13 (*0x0*))
    x_567: word64 = Array_length(word8) (x_569)
    x_566: word64 = WordS32_extdToWord64 (x_568)
    x_565: bool = WordU64_lt (x_567, x_566)
    case x_565 of
      true => L_337 | false => L_336
  L_337 ()
    raise (global_349 (*Subscript_0*))
  L_336 ()
    #_0: (word64 ref * bool ref) = #1 (x_563)
    loop_27 (global_13 (*0x0*))
  loop_27 (x_571: word32)
    x_572: bool = Word32_equal (x_571, x_568)
    case x_572 of
      true => L_339 | false => L_338
  L_339 ()
    return ()
  L_338 ()
    L_340 (WordS32_subCheck (x_568, x_571)) handle Overflow => L_341
  L_341 ()
    raise (global_15 (*Overflow_0*))
  L_340 (x_573: word32)
    x_575: word64 = WordS32_extdToWord64 (x_571)
    x_576: word64 = WordS32_extdToWord64 (x_573)
    x_574: bool = WordU64_lt (x_567, x_575)
    case x_574 of
      true => L_337 | false => L_342
  L_342 ()
    x_578: word64 = Word64_sub (x_567, x_575)
    x_577: bool = WordU64_lt (x_578, x_576)
    case x_577 of
      true => L_337 | false => L_343
  L_343 ()
    putA_0: word64 ref = #0 (#_0)
    closed_1: bool ref = #1 (#_0)
    x_579: bool = Ref_deref(bool) (closed_1)
    case x_579 of
      true => L_345 | false => L_344
  L_345 ()
    raise (global_419 (*ClosedStream_0*))
  L_344 ()
    _: unit = Thread_atomicBegin ()
    x_581: word64 =
      Posix_IO_writeChar8Arr (global_14 (*0x1*), x_569, x_571, x_576)
    x_580: bool = Word64_equal (x_581, global_389 (*0xFFFFFFFFFFFFFFFF*))
    case x_580 of
      true => L_347 | false => L_346
  L_347 ()
    x_584: word32 = Posix_Error_getErrno ()
    x_583: word32 = Thread_atomicState ()
    x_582: bool = Word32_equal (x_583, global_13 (*0x0*))
    case x_582 of
      true => L_349 | false => L_348
  L_349 ()
    raise (global_381 (*Fail8_0 (global_380)*))
  L_348 ()
    _: unit = Thread_atomicEnd ()
    loop_28 (x_584)
  loop_28 (x_585: word32)
    x_586: bool = Word32_equal (x_585, global_82 (*0x4*))
    case x_586 of
      true => L_351 | false => L_350
  L_351 ()
    x_588: word32 = Thread_atomicState ()
    x_587: bool = Word32_equal (x_588, global_13 (*0x0*))
    case x_587 of
      true => L_353 | false => L_352
  L_353 ()
    _: unit = Thread_atomicBegin ()
    x_590: word64 =
      Posix_IO_writeChar8Arr (global_14 (*0x1*), x_569, x_571, x_576)
    x_589: bool = Word64_equal (x_590, global_389 (*0xFFFFFFFFFFFFFFFF*))
    case x_589 of
      true => L_355 | false => L_354
  L_355 ()
    x_593: word32 = Posix_Error_getErrno ()
    x_592: word32 = Thread_atomicState ()
    x_591: bool = Word32_equal (x_592, global_13 (*0x0*))
    case x_591 of
      true => L_349 | false => L_356
  L_356 ()
    _: unit = Thread_atomicEnd ()
    loop_28 (x_593)
  L_354 ()
    x_595: word32 = Thread_atomicState ()
    x_594: bool = Word32_equal (x_595, global_13 (*0x0*))
    case x_594 of
      true => L_349 | false => L_357
  L_357 ()
    _: unit = Thread_atomicEnd ()
    x_596 (x_590)
  x_596 (x_597: word64)
    x_600: word32 = WordS64_extdToWord32 (x_597)
    x_599: word64 = WordS32_extdToWord64 (x_600)
    x_598: bool = Word64_equal (x_599, x_597)
    case x_598 of
      true => L_358 | false => L_341
  L_358 ()
    x_601: word64 = Ref_deref(word64) (putA_0)
    L_359 (WordS64_addCheck (x_601, x_599)) handle Overflow => L_341
  L_359 (x_602: word64)
    _: unit = Ref_assign(word64) (putA_0, x_602)
    x_603: bool = Word32_equal (x_600, global_13 (*0x0*))
    case x_603 of
      true => L_361 | false => L_360
  L_361 ()
    raise (global_418 (*Fail_0 (global_417)*))
  L_360 ()
    loop_27 (WordS32_addCheck (x_571, x_600)) handle Overflow => L_341
  L_352 ()
    _: unit = Thread_atomicBegin ()
    x_605: word64 =
      Posix_IO_writeChar8Arr (global_14 (*0x1*), x_569, x_571, x_576)
    x_604: bool = Word64_equal (x_605, global_389 (*0xFFFFFFFFFFFFFFFF*))
    case x_604 of
      true => L_363 | false => L_362
  L_363 ()
    x_608: word32 = Posix_Error_getErrno ()
    x_607: word32 = Thread_atomicState ()
    x_606: bool = Word32_equal (x_607, global_13 (*0x0*))
    case x_606 of
      true => L_349 | false => L_364
  L_364 ()
    _: unit = Thread_atomicEnd ()
    x_611: word64 = Posix_Error_strError (x_608)
    x_610: pointer = CPointer_fromWord (x_611)
    x_609: bool = CPointer_equal (x_610, global_386 (*NULL*))
    case x_609 of
      true => L_366 | false => L_365
  L_366 ()
    L_367 (global_387 (*"Unknown error"*))
  L_367 (x_612: word8 vector)
    x_614: t_0 = SOME_0 (x_608)
    x_613: exn = SysErr_0 (x_614, x_612)
    raise (x_613)
  L_365 ()
    loop_29 (global_13 (*0x0*))
  loop_29 (x_615: word32)
    x_617: word64 = WordS32_extdToWord64 (x_615)
    x_616: word8 = CPointer_getWord8 (x_610, x_617)
    case x_616 of
      0x0 => L_368 | _ => L_369
  L_368 ()
    x_618: bool = WordU64_lt (global_19 (*0x7FFFFFFF*), x_617)
    case x_618 of
      true => L_371 | false => L_370
  L_371 ()
    raise (global_20 (*Size_0*))
  L_370 ()
    isZero_11: bool = Word64_equal (global_16 (*0x0*), x_617)
    case isZero_11 of
      true => L_zeroLen_11 | false => L_nonZeroLen_11
  L_zeroLen_11 ()
    L_join_7 (zeroArr_1)
  L_join_7 (x_619: word8 array)
    loop_30 (global_16 (*0x0*))
  loop_30 (x_620: word64)
    x_621: bool = WordS64_lt (x_620, x_617)
    case x_621 of
      true => L_373 | false => L_372
  L_373 ()
    x_625: word32 = WordS64_extdToWord32 (x_620)
    x_624: word64 = WordS32_extdToWord64 (x_625)
    x_623: word8 = CPointer_getWord8 (x_610, x_624)
    _: unit = Array_update(word8) (x_619, x_620, x_623)
    x_622: word64 = Word64_add (x_620, global_17 (*0x1*))
    loop_30 (x_622)
  L_372 ()
    x_626: word8 vector = Array_toVector(word8) (x_619)
    L_367 (x_626)
  L_nonZeroLen_11 ()
    x_627: word8 array = Array_alloc(word8) (x_617)
    L_join_7 (x_627)
  L_369 ()
    x_628: word32 = Word32_add (x_615, global_14 (*0x1*))
    loop_29 (x_628)
  L_362 ()
    x_630: word32 = Thread_atomicState ()
    x_629: bool = Word32_equal (x_630, global_13 (*0x0*))
    case x_629 of
      true => L_349 | false => L_374
  L_374 ()
    _: unit = Thread_atomicEnd ()
    x_596 (x_605)
  L_350 ()
    x_633: word64 = Posix_Error_strError (x_585)
    x_632: pointer = CPointer_fromWord (x_633)
    x_631: bool = CPointer_equal (x_632, global_386 (*NULL*))
    case x_631 of
      true => L_376 | false => L_375
  L_376 ()
    L_377 (global_387 (*"Unknown error"*))
  L_377 (x_634: word8 vector)
    x_636: t_0 = SOME_0 (x_585)
    x_635: exn = SysErr_0 (x_636, x_634)
    raise (x_635)
  L_375 ()
    loop_31 (global_13 (*0x0*))
  loop_31 (x_637: word32)
    x_639: word64 = WordS32_extdToWord64 (x_637)
    x_638: word8 = CPointer_getWord8 (x_632, x_639)
    case x_638 of
      0x0 => L_378 | _ => L_379
  L_378 ()
    x_640: bool = WordU64_lt (global_19 (*0x7FFFFFFF*), x_639)
    case x_640 of
      true => L_371 | false => L_380
  L_380 ()
    isZero_12: bool = Word64_equal (global_16 (*0x0*), x_639)
    case isZero_12 of
      true => L_zeroLen_12 | false => L_nonZeroLen_12
  L_zeroLen_12 ()
    L_join_8 (zeroArr_1)
  L_join_8 (x_641: word8 array)
    loop_32 (global_16 (*0x0*))
  loop_32 (x_642: word64)
    x_643: bool = WordS64_lt (x_642, x_639)
    case x_643 of
      true => L_382 | false => L_381
  L_382 ()
    x_647: word32 = WordS64_extdToWord32 (x_642)
    x_646: word64 = WordS32_extdToWord64 (x_647)
    x_645: word8 = CPointer_getWord8 (x_632, x_646)
    _: unit = Array_update(word8) (x_641, x_642, x_645)
    x_644: word64 = Word64_add (x_642, global_17 (*0x1*))
    loop_32 (x_644)
  L_381 ()
    x_648: word8 vector = Array_toVector(word8) (x_641)
    L_377 (x_648)
  L_nonZeroLen_12 ()
    x_649: word8 array = Array_alloc(word8) (x_639)
    L_join_8 (x_649)
  L_379 ()
    x_650: word32 = Word32_add (x_637, global_14 (*0x1*))
    loop_31 (x_650)
  L_346 ()
    x_652: word32 = Thread_atomicState ()
    x_651: bool = Word32_equal (x_652, global_13 (*0x0*))
    case x_651 of
      true => L_349 | false => L_383
  L_383 ()
    _: unit = Thread_atomicEnd ()
    x_596 (x_581)
fun print_4 (x_653: word8 vector,
             env_3: ((word8 vector *
                      (word64 ref * bool ref) *
                      (word64 ref * bool ref)) *
                     bufferMode_0 ref *
                     unit ref *
                     (word8 vector *
                      (word64 ref * bool ref) *
                      (word64 ref * bool ref))) ref):
  {returns = Some (), raises = Some (exn)} =
L_384 ()
  L_384 ()
    x_657:
      ((word8 vector * (word64 ref * bool ref) * (word64 ref * bool ref)) *
       bufferMode_0 ref *
       unit ref *
       (word8 vector * (word64 ref * bool ref) * (word64 ref * bool ref))) =
      Ref_deref(((word8 vector *
                  (word64 ref * bool ref) *
                  (word64 ref * bool ref)) *
                 bufferMode_0 ref *
                 unit ref *
                 (word8 vector *
                  (word64 ref * bool ref) *
                  (word64 ref * bool ref)))) (env_3)
    x_655: bufferMode_0 ref = #1 (x_657)
    x_656: (word8 vector * (word64 ref * bool ref) * (word64 ref * bool ref)) =
      #0 (x_657)
    x_654: bufferMode_0 = Ref_deref(bufferMode_0) (x_655)
    case x_654 of
      BLOCK_BUF_1 => L_386 | LINE_BUF_1 => L_385
  L_386 (x_659: word32 ref, x_658: word8 array)
    x_665: (word8 array * word32 ref) = (x_658, x_659)
    x_664: word32 = Ref_deref(word32) (global_469)
    x_661: word64 = Vector_length(word8) (x_653)
    x_663: word32 = WordS64_extdToWord32 (x_661)
    x_662: word64 = WordS32_extdToWord64 (x_663)
    x_660: bool = Word64_equal (x_662, x_661)
    case x_660 of
      true => L_388 | false => L_387
  L_388 ()
    L_389 (WordS32_addCheck (x_664, x_663)) handle Overflow => L_390
  L_390 ()
    L_391 (global_15 (*Overflow_0*))
  L_391 (x_666: exn)
    #_2: (word8 vector * (word64 ref * bool ref) * (word64 ref * bool ref)) =
      #3 (x_657)
    #_1: word8 vector = #0 (#_2)
    x_667: exn = Io_0 (#_1, global_421 (*"output"*), x_666)
    raise (x_667)
  L_389 (newSize_0: word32)
    x_669: word64 = Array_length(word8) (x_658)
    x_671: word32 = WordS64_extdToWord32 (x_669)
    x_670: word64 = WordS32_extdToWord64 (x_671)
    x_668: bool = Word64_equal (x_670, x_669)
    case x_668 of
      true => L_392 | false => L_387
  L_392 ()
    x_672: bool = WordS32_lt (newSize_0, x_671)
    case x_672 of
      true => L_394 | false => L_393
  L_394 ()
    x_674: word64 = WordS32_extdToWord64 (x_664)
    x_673: bool = WordU64_lt (x_669, x_674)
    case x_673 of
      true => L_396 | false => L_395
  L_396 ()
    L_391 (global_349 (*Subscript_0*))
  L_395 ()
    x_676: word64 = Word64_add (x_674, x_661)
    x_675: bool = WordU64_lt (x_669, x_676)
    case x_675 of
      true => L_396 | false => L_397
  L_397 ()
    x_677: bool = WordS64_lt (x_661, global_18 (*0x5*))
    case x_677 of
      true => L_399 | false => L_398
  L_399 ()
    x_678: word64 = Word64_sub (x_661, global_17 (*0x1*))
    loop_33 (global_16 (*0x0*))
  loop_33 (x_679: word64)
    x_680: bool = WordS64_lt (x_678, x_679)
    case x_680 of
      true => L_401 | false => L_400
  L_401 ()
    _: unit = Ref_assign(word32) (global_469, newSize_0)
    L_402 ()
  L_402 ()
    x_684:
      ((word8 vector * (word64 ref * bool ref) * (word64 ref * bool ref)) *
       bufferMode_0 ref *
       unit ref *
       (word8 vector * (word64 ref * bool ref) * (word64 ref * bool ref))) =
      Ref_deref(((word8 vector *
                  (word64 ref * bool ref) *
                  (word64 ref * bool ref)) *
                 bufferMode_0 ref *
                 unit ref *
                 (word8 vector *
                  (word64 ref * bool ref) *
                  (word64 ref * bool ref)))) (env_3)
    x_682: bufferMode_0 ref = #1 (x_684)
    x_683: (word8 vector * (word64 ref * bool ref) * (word64 ref * bool ref)) =
      #0 (x_684)
    x_681: bufferMode_0 = Ref_deref(bufferMode_0) (x_682)
    case x_681 of
      BLOCK_BUF_1 => L_404 | LINE_BUF_1 => L_403
  L_404 (x_686: word32 ref, x_685: word8 array)
    x_687: (word8 array * word32 ref) = (x_685, x_686)
    L_405 (flushBuf_0 (x_687, x_683)) handle _ => L_406
  L_405 ()
    return ()
  L_406 (x_688: exn)
    #_4: (word8 vector * (word64 ref * bool ref) * (word64 ref * bool ref)) =
      #3 (x_684)
    #_3: word8 vector = #0 (#_4)
    x_689: exn = Io_0 (#_3, global_420 (*"flushOut"*), x_688)
    raise (x_689)
  L_403 (x_691: word32 ref, x_690: word8 array)
    x_692: (word8 array * word32 ref) = (x_690, x_691)
    return (flushBuf_0 (x_692, x_683))
  L_400 ()
    x_695: word64 = Word64_add (x_679, x_674)
    x_694: word8 = Vector_sub(word8) (x_653, x_679)
    _: unit = Array_update(word8) (x_658, x_695, x_694)
    x_693: word64 = Word64_add (x_679, global_17 (*0x1*))
    loop_33 (x_693)
  L_398 ()
    _: unit =
      Array_copyVector(word8) (x_658, x_674, x_653, global_16 (*0x0*), x_661)
    L_401 ()
  L_393 ()
    put_0 (flushBuf_0 (x_665, x_656)) handle _ => L_391
  put_0 ()
    x_697: word64 = Vector_length(word8) (x_653)
    #_5: (word64 ref * bool ref) = #2 (x_656)
    x_699: word32 = WordS64_extdToWord32 (x_697)
    x_698: word64 = WordS32_extdToWord64 (x_699)
    x_696: bool = Word64_equal (x_698, x_697)
    case x_696 of
      true => L_408 | false => L_407
  L_408 ()
    loop_34 (global_13 (*0x0*))
  loop_34 (x_700: word32)
    x_701: bool = Word32_equal (x_700, x_699)
    case x_701 of
      true => L_402 | false => L_409
  L_409 ()
    L_410 (WordS32_subCheck (x_699, x_700)) handle Overflow => L_390
  L_410 (x_702: word32)
    x_704: word64 = WordS32_extdToWord64 (x_700)
    x_705: word64 = WordS32_extdToWord64 (x_702)
    x_703: bool = WordU64_lt (x_697, x_704)
    case x_703 of
      true => L_396 | false => L_411
  L_411 ()
    x_707: word64 = Word64_sub (x_697, x_704)
    x_706: bool = WordU64_lt (x_707, x_705)
    case x_706 of
      true => L_396 | false => L_412
  L_412 ()
    putV_0: word64 ref = #0 (#_5)
    closed_2: bool ref = #1 (#_5)
    x_708: bool = Ref_deref(bool) (closed_2)
    case x_708 of
      true => L_414 | false => L_413
  L_414 ()
    L_391 (global_419 (*ClosedStream_0*))
  L_413 ()
    _: unit = Thread_atomicBegin ()
    x_710: word64 =
      Posix_IO_writeChar8Vec (global_14 (*0x1*), x_653, x_700, x_705)
    x_709: bool = Word64_equal (x_710, global_389 (*0xFFFFFFFFFFFFFFFF*))
    case x_709 of
      true => L_416 | false => L_415
  L_416 ()
    x_713: word32 = Posix_Error_getErrno ()
    x_712: word32 = Thread_atomicState ()
    x_711: bool = Word32_equal (x_712, global_13 (*0x0*))
    case x_711 of
      true => L_418 | false => L_417
  L_418 ()
    L_391 (global_381 (*Fail8_0 (global_380)*))
  L_417 ()
    _: unit = Thread_atomicEnd ()
    loop_35 (x_713)
  loop_35 (x_714: word32)
    x_715: bool = Word32_equal (x_714, global_82 (*0x4*))
    case x_715 of
      true => L_420 | false => L_419
  L_420 ()
    x_717: word32 = Thread_atomicState ()
    x_716: bool = Word32_equal (x_717, global_13 (*0x0*))
    case x_716 of
      true => L_422 | false => L_421
  L_422 ()
    _: unit = Thread_atomicBegin ()
    x_719: word64 =
      Posix_IO_writeChar8Vec (global_14 (*0x1*), x_653, x_700, x_705)
    x_718: bool = Word64_equal (x_719, global_389 (*0xFFFFFFFFFFFFFFFF*))
    case x_718 of
      true => L_424 | false => L_423
  L_424 ()
    x_722: word32 = Posix_Error_getErrno ()
    x_721: word32 = Thread_atomicState ()
    x_720: bool = Word32_equal (x_721, global_13 (*0x0*))
    case x_720 of
      true => L_418 | false => L_425
  L_425 ()
    _: unit = Thread_atomicEnd ()
    loop_35 (x_722)
  L_423 ()
    x_724: word32 = Thread_atomicState ()
    x_723: bool = Word32_equal (x_724, global_13 (*0x0*))
    case x_723 of
      true => L_418 | false => L_426
  L_426 ()
    _: unit = Thread_atomicEnd ()
    x_725 (x_719)
  x_725 (x_726: word64)
    x_729: word32 = WordS64_extdToWord32 (x_726)
    x_728: word64 = WordS32_extdToWord64 (x_729)
    x_727: bool = Word64_equal (x_728, x_726)
    case x_727 of
      true => L_427 | false => L_390
  L_427 ()
    x_730: word64 = Ref_deref(word64) (putV_0)
    L_428 (WordS64_addCheck (x_730, x_728)) handle Overflow => L_390
  L_428 (x_731: word64)
    _: unit = Ref_assign(word64) (putV_0, x_731)
    x_732: bool = Word32_equal (x_729, global_13 (*0x0*))
    case x_732 of
      true => L_430 | false => L_429
  L_430 ()
    L_391 (global_418 (*Fail_0 (global_417)*))
  L_429 ()
    loop_34 (WordS32_addCheck (x_700, x_729)) handle Overflow => L_390
  L_421 ()
    _: unit = Thread_atomicBegin ()
    x_734: word64 =
      Posix_IO_writeChar8Vec (global_14 (*0x1*), x_653, x_700, x_705)
    x_733: bool = Word64_equal (x_734, global_389 (*0xFFFFFFFFFFFFFFFF*))
    case x_733 of
      true => L_432 | false => L_431
  L_432 ()
    x_737: word32 = Posix_Error_getErrno ()
    x_736: word32 = Thread_atomicState ()
    x_735: bool = Word32_equal (x_736, global_13 (*0x0*))
    case x_735 of
      true => L_418 | false => L_433
  L_433 ()
    _: unit = Thread_atomicEnd ()
    x_740: word64 = Posix_Error_strError (x_737)
    x_739: pointer = CPointer_fromWord (x_740)
    x_738: bool = CPointer_equal (x_739, global_386 (*NULL*))
    case x_738 of
      true => L_435 | false => L_434
  L_435 ()
    L_436 (global_387 (*"Unknown error"*))
  L_436 (x_741: word8 vector)
    x_743: t_0 = SOME_0 (x_737)
    x_742: exn = SysErr_0 (x_743, x_741)
    L_391 (x_742)
  L_434 ()
    loop_36 (global_13 (*0x0*))
  loop_36 (x_744: word32)
    x_746: word64 = WordS32_extdToWord64 (x_744)
    x_745: word8 = CPointer_getWord8 (x_739, x_746)
    case x_745 of
      0x0 => L_437 | _ => L_438
  L_437 ()
    x_747: bool = WordU64_lt (global_19 (*0x7FFFFFFF*), x_746)
    case x_747 of
      true => L_440 | false => L_439
  L_440 ()
    L_391 (global_20 (*Size_0*))
  L_439 ()
    isZero_13: bool = Word64_equal (global_16 (*0x0*), x_746)
    case isZero_13 of
      true => L_zeroLen_13 | false => L_nonZeroLen_13
  L_zeroLen_13 ()
    L_join_9 (zeroArr_1)
  L_join_9 (x_748: word8 array)
    loop_37 (global_16 (*0x0*))
  loop_37 (x_749: word64)
    x_750: bool = WordS64_lt (x_749, x_746)
    case x_750 of
      true => L_442 | false => L_441
  L_442 ()
    x_754: word32 = WordS64_extdToWord32 (x_749)
    x_753: word64 = WordS32_extdToWord64 (x_754)
    x_752: word8 = CPointer_getWord8 (x_739, x_753)
    _: unit = Array_update(word8) (x_748, x_749, x_752)
    x_751: word64 = Word64_add (x_749, global_17 (*0x1*))
    loop_37 (x_751)
  L_441 ()
    x_755: word8 vector = Array_toVector(word8) (x_748)
    L_436 (x_755)
  L_nonZeroLen_13 ()
    x_756: word8 array = Array_alloc(word8) (x_746)
    L_join_9 (x_756)
  L_438 ()
    x_757: word32 = Word32_add (x_744, global_14 (*0x1*))
    loop_36 (x_757)
  L_431 ()
    x_759: word32 = Thread_atomicState ()
    x_758: bool = Word32_equal (x_759, global_13 (*0x0*))
    case x_758 of
      true => L_418 | false => L_443
  L_443 ()
    _: unit = Thread_atomicEnd ()
    x_725 (x_734)
  L_419 ()
    x_762: word64 = Posix_Error_strError (x_714)
    x_761: pointer = CPointer_fromWord (x_762)
    x_760: bool = CPointer_equal (x_761, global_386 (*NULL*))
    case x_760 of
      true => L_445 | false => L_444
  L_445 ()
    L_446 (global_387 (*"Unknown error"*))
  L_446 (x_763: word8 vector)
    x_765: t_0 = SOME_0 (x_714)
    x_764: exn = SysErr_0 (x_765, x_763)
    L_391 (x_764)
  L_444 ()
    loop_38 (global_13 (*0x0*))
  loop_38 (x_766: word32)
    x_768: word64 = WordS32_extdToWord64 (x_766)
    x_767: word8 = CPointer_getWord8 (x_761, x_768)
    case x_767 of
      0x0 => L_447 | _ => L_448
  L_447 ()
    x_769: bool = WordU64_lt (global_19 (*0x7FFFFFFF*), x_768)
    case x_769 of
      true => L_440 | false => L_449
  L_449 ()
    isZero_14: bool = Word64_equal (global_16 (*0x0*), x_768)
    case isZero_14 of
      true => L_zeroLen_14 | false => L_nonZeroLen_14
  L_zeroLen_14 ()
    L_join_10 (zeroArr_1)
  L_join_10 (x_770: word8 array)
    loop_39 (global_16 (*0x0*))
  loop_39 (x_771: word64)
    x_772: bool = WordS64_lt (x_771, x_768)
    case x_772 of
      true => L_451 | false => L_450
  L_451 ()
    x_776: word32 = WordS64_extdToWord32 (x_771)
    x_775: word64 = WordS32_extdToWord64 (x_776)
    x_774: word8 = CPointer_getWord8 (x_761, x_775)
    _: unit = Array_update(word8) (x_770, x_771, x_774)
    x_773: word64 = Word64_add (x_771, global_17 (*0x1*))
    loop_39 (x_773)
  L_450 ()
    x_777: word8 vector = Array_toVector(word8) (x_770)
    L_446 (x_777)
  L_nonZeroLen_14 ()
    x_778: word8 array = Array_alloc(word8) (x_768)
    L_join_10 (x_778)
  L_448 ()
    x_779: word32 = Word32_add (x_766, global_14 (*0x1*))
    loop_38 (x_779)
  L_415 ()
    x_781: word32 = Thread_atomicState ()
    x_780: bool = Word32_equal (x_781, global_13 (*0x0*))
    case x_780 of
      true => L_418 | false => L_452
  L_452 ()
    _: unit = Thread_atomicEnd ()
    x_725 (x_710)
  L_407 ()
    L_391 (global_352 (*Fail_0 (global_351)*))
  L_387 ()
    L_391 (global_392 (*Fail_0 (global_391)*))
  L_385 (x_783: word32 ref, x_782: word8 array)
    x_789: (word8 array * word32 ref) = (x_782, x_783)
    x_788: word32 = Ref_deref(word32) (x_783)
    x_785: word64 = Vector_length(word8) (x_653)
    x_787: word32 = WordS64_extdToWord32 (x_785)
    x_786: word64 = WordS32_extdToWord64 (x_787)
    x_784: bool = Word64_equal (x_786, x_785)
    case x_784 of
      true => L_453 | false => L_387
  L_453 ()
    L_454 (WordS32_addCheck (x_788, x_787)) handle Overflow => L_390
  L_454 (newSize_1: word32)
    x_791: word64 = Array_length(word8) (x_782)
    x_793: word32 = WordS64_extdToWord32 (x_791)
    x_792: word64 = WordS32_extdToWord64 (x_793)
    x_790: bool = Word64_equal (x_792, x_791)
    case x_790 of
      true => L_455 | false => L_387
  L_455 ()
    x_794: bool = WordS32_lt (newSize_1, x_793)
    case x_794 of
      true => L_457 | false => L_456
  L_457 ()
    x_795: word64 = Word64_sub (x_785, global_17 (*0x1*))
    loop_40 (global_16 (*0x0*))
  loop_40 (x_796: word64)
    x_797: bool = WordS64_lt (x_795, x_796)
    case x_797 of
      true => L_459 | false => L_458
  L_459 ()
    x_799: word64 = WordS32_extdToWord64 (x_788)
    x_798: bool = WordU64_lt (x_791, x_799)
    case x_798 of
      true => L_396 | false => L_460
  L_460 ()
    x_801: word64 = Word64_add (x_799, x_785)
    x_800: bool = WordU64_lt (x_791, x_801)
    case x_800 of
      true => L_396 | false => L_461
  L_461 ()
    x_802: bool = WordS64_lt (x_785, global_18 (*0x5*))
    case x_802 of
      true => L_463 | false => L_462
  L_463 ()
    loop_41 (global_16 (*0x0*))
  loop_41 (x_803: word64)
    x_804: bool = WordS64_lt (x_795, x_803)
    case x_804 of
      true => L_465 | false => L_464
  L_465 ()
    _: unit = Ref_assign(word32) (x_783, newSize_1)
    L_402 ()
  L_464 ()
    x_807: word64 = Word64_add (x_803, x_799)
    x_806: word8 = Vector_sub(word8) (x_653, x_803)
    _: unit = Array_update(word8) (x_782, x_807, x_806)
    x_805: word64 = Word64_add (x_803, global_17 (*0x1*))
    loop_41 (x_805)
  L_462 ()
    _: unit =
      Array_copyVector(word8) (x_782, x_799, x_653, global_16 (*0x0*), x_785)
    L_465 ()
  L_458 ()
    x_809: word8 = Vector_sub(word8) (x_653, x_796)
    x_808: bool = Word8_equal (x_809, global_375 (*0xA*))
    case x_808 of
      true => L_456 | false => L_466
  L_456 ()
    put_0 (flushBuf_0 (x_789, x_656)) handle _ => L_391
  L_466 ()
    x_810: word64 = Word64_add (x_796, global_17 (*0x1*))
    loop_40 (x_810)
fun x_229 (x_815: real64,
           x_814: bool ref,
           x_813: (word8 array * bool ref),
           x_812: bool array,
           x_811: t_0 array):
  {returns = Some (word8 vector), raises = Some (exn)} =
L_467 ()
  L_467 ()
    x_818: word64 = Real64_castToWord64 (x_815)
    x_817: word64 = Word64_andb (x_818, global_397 (*0x7FF0000000000000*))
    x_816: bool = Word64_equal (x_817, global_397 (*0x7FF0000000000000*))
    case x_816 of
      true => L_469 | false => L_468
  L_469 ()
    x_820: word64 = Word64_andb (x_818, global_396 (*0xFFFFFFFFFFFFF*))
    x_819: bool = Word64_equal (x_820, global_16 (*0x0*))
    case x_819 of
      true => L_471 | false => L_470
  L_471 ()
    x_821: bool = Real64_lt (global_395 (*0.0*), x_815)
    case x_821 of
      true => L_473 | false => L_472
  L_473 ()
    return (global_415 (*"inf"*))
  L_472 ()
    return (global_414 (*"~inf"*))
  L_470 ()
    return (global_413 (*"nan"*))
  L_468 ()
    x_822: bool = Real64_lt (x_815, global_395 (*0.0*))
    case x_822 of
      true => L_475 | false => L_474
  L_475 ()
    x_823: real64 = Real64_neg (x_815)
    L_476 (x_823, global_398 (*"~"*))
  L_476 (x_825: real64, x_824: word8 vector)
    x_826: bool = Real64_lt (x_825, global_395 (*0.0*))
    case x_826 of
      true => L_478 | false => L_477
  L_478 ()
    L_479 (global_398 (*"~"*))
  L_479 (x_827: word8 vector)
    x_829: word32 = IEEEReal_getRoundingMode ()
    x_828: bool = Word32_equal (x_829, global_13 (*0x0*))
    case x_828 of
      true => L_481 | false => L_480
  L_481 ()
    L_482 (global_14 (*0x1*))
  L_482 (x_830: word32)
    _: unit = Thread_atomicBegin ()
    x_831: bool = Ref_deref(bool) (x_814)
    case x_831 of
      true => L_484 | false => L_483
  L_484 ()
    x_833: word32 = Thread_atomicState ()
    x_832: bool = Word32_equal (x_833, global_13 (*0x0*))
    case x_832 of
      true => L_486 | false => L_485
  L_486 ()
    raise (global_381 (*Fail8_0 (global_380)*))
  L_485 ()
    _: unit = Thread_atomicEnd ()
    x_834: word32 ref = Ref_ref(word32) (global_13 (*0x0*))
    L_487 (x_834)
  L_487 (x_835: word32 ref)
    x_837: word64 =
      Real64_gdtoa (x_825, global_21 (*0x2*), global_125 (*0xC*), x_830, x_835)
    x_836: word32 = Ref_deref(word32) (x_835)
    case x_831 of
      true => L_489 | false => L_488
  L_489 ()
    loop_42 (global_13 (*0x0*))
  loop_42 (x_838: word32)
    x_841: pointer = CPointer_fromWord (x_837)
    x_840: word64 = WordS32_extdToWord64 (x_838)
    x_839: word8 = CPointer_getWord8 (x_841, x_840)
    case x_839 of
      0x0 => L_490 | _ => L_491
  L_490 ()
    x_842: word8 array = Array_alloc(word8) (global_17 (*0x1*))
    loop_43 (global_16 (*0x0*))
  loop_43 (x_843: word64)
    x_844: bool = WordS64_lt (x_843, global_17 (*0x1*))
    case x_844 of
      true => L_493 | false => L_492
  L_493 ()
    x_846: word8 = CPointer_getWord8 (x_841, global_16 (*0x0*))
    _: unit = Array_update(word8) (x_842, x_843, x_846)
    x_845: word64 = Word64_add (x_843, global_17 (*0x1*))
    loop_43 (x_845)
  L_492 ()
    x_848: word8 vector = Array_toVector(word8) (x_842)
    x_847: word8 array = Array_alloc(word8) (global_405 (*0xB*))
    loop_44 (global_16 (*0x0*))
  loop_44 (x_849: word64)
    x_850: bool = WordS64_lt (x_849, global_405 (*0xB*))
    case x_850 of
      true => L_495 | false => L_494
  L_495 ()
    x_851: word32 = WordS64_extdToWord32 (x_849)
    L_496 (WordS32_addCheck (x_851, global_14 (*0x1*))) handle Overflow => L_497
  L_497 ()
    raise (global_15 (*Overflow_0*))
  L_496 (j_0: word32)
    x_852: bool = WordS32_lt (j_0, x_838)
    case x_852 of
      true => L_499 | false => L_498
  L_499 ()
    x_854: word64 = WordS32_extdToWord64 (j_0)
    x_853: word8 = CPointer_getWord8 (x_841, x_854)
    L_500 (x_853)
  L_500 (x_855: word8)
    _: unit = Array_update(word8) (x_847, x_849, x_855)
    x_856: word64 = Word64_add (x_849, global_17 (*0x1*))
    loop_44 (x_856)
  L_498 ()
    L_500 (global_359 (*0x30*))
  L_494 ()
    x_859: word8 vector = Array_toVector(word8) (x_847)
    x_858: list_4 = ::_2 (global_27 (*nil_1*), x_859)
    x_857: list_4 = ::_2 (x_858, global_394 (*"."*))
    L_501 (concat_0 (x_857)) handle _ => raise
  L_501 (x_860: word8 vector)
    L_502 (WordS32_subCheck (x_836, global_14 (*0x1*))) handle Overflow => L_497
  L_502 (exp_0: word32)
    x_861: bool = WordS32_lt (exp_0, global_13 (*0x0*))
    case x_861 of
      true => L_504 | false => L_503
  L_504 ()
    L_505 (Word32_negCheck (exp_0)) handle Overflow => L_497
  L_505 (x_862: word32)
    L_506 (global_398 (*"~"*), x_862)
  L_506 (x_864: word8 vector, x_863: word32)
    x_867: word8 array = #0 (x_813)
    x_866: bool ref = #1 (x_813)
    _: unit = Thread_atomicBegin ()
    x_865: bool = Ref_deref(bool) (x_866)
    case x_865 of
      true => L_508 | false => L_507
  L_508 ()
    x_869: word32 = Thread_atomicState ()
    x_868: bool = Word32_equal (x_869, global_13 (*0x0*))
    case x_868 of
      true => L_486 | false => L_509
  L_509 ()
    _: unit = Thread_atomicEnd ()
    x_871: word64 = 0x21
    x_870: word8 array = Array_alloc(word8) (x_871)
    loop_45 (global_16 (*0x0*))
  loop_45 (x_872: word64)
    x_873: bool = WordS64_lt (x_872, x_871)
    case x_873 of
      true => L_511 | false => L_510
  L_511 ()
    _: unit = Array_update(word8) (x_870, x_872, global_353 (*0x0*))
    x_874: word64 = Word64_add (x_872, global_17 (*0x1*))
    loop_45 (x_874)
  L_510 ()
    L_512 (x_870)
  L_512 (x_875: word8 array)
    x_876: bool = WordS32_lt (x_863, global_13 (*0x0*))
    case x_876 of
      true => L_514 | false => L_513
  L_514 ()
    loop_46 (global_157 (*0x20*), x_863)
  loop_46 (x_878: word32, x_877: word32)
    x_882: word32 = WordS32_rem (x_877, global_52 (*0xA*))
    x_881: word32 = Word32_neg (x_882)
    x_880: word64 = WordS32_extdToWord64 (x_881)
    x_879: bool = WordU64_lt (x_880, global_382 (*0x10*))
    case x_879 of
      true => L_516 | false => L_515
  L_516 ()
    x_886: word8 = Vector_sub(word8) (global_383 (*"0123456789ABCDEF"*), x_880)
    x_884: word64 = Array_length(word8) (x_875)
    x_885: word64 = WordS32_extdToWord64 (x_878)
    x_883: bool = WordU64_lt (x_885, x_884)
    case x_883 of
      true => L_517 | false => L_515
  L_517 ()
    _: unit = Array_update(word8) (x_875, x_885, x_886)
    x_888: word32 = WordS32_quot (x_877, global_52 (*0xA*))
    x_887: bool = Word32_equal (x_888, global_13 (*0x0*))
    case x_887 of
      true => L_519 | false => L_518
  L_519 ()
    case x_876 of
      true => L_521 | false => L_520
  L_521 ()
    L_522 (WordS32_subCheck (x_878, global_14 (*0x1*))) handle Overflow => L_523
  L_523 ()
    case x_865 of
      true => L_525 | false => L_524
  L_525 ()
    raise (global_15 (*Overflow_0*))
  L_524 ()
    L_526 (global_15 (*Overflow_0*))
  L_526 (x_889: exn)
    _: unit = Ref_assign(bool) (x_866, global_385 (*false*))
    raise (x_889)
  L_522 (i_1: word32)
    x_891: word64 = WordS32_extdToWord64 (i_1)
    x_890: bool = WordU64_lt (x_891, x_884)
    case x_890 of
      true => L_527 | false => L_515
  L_527 ()
    _: unit = Array_update(word8) (x_875, x_891, global_384 (*0x7E*))
    L_528 (i_1)
  L_528 (x_892: word32)
    x_894: word64 = WordS32_extdToWord64 (x_892)
    x_893: bool = WordU64_lt (x_884, x_894)
    case x_893 of
      true => L_515 | false => L_529
  L_515 ()
    case x_865 of
      true => L_531 | false => L_530
  L_531 ()
    raise (global_349 (*Subscript_0*))
  L_530 ()
    L_526 (global_349 (*Subscript_0*))
  L_529 ()
    x_895: word64 = Word64_sub (x_884, x_894)
    isZero_15: bool = Word64_equal (global_16 (*0x0*), x_895)
    case isZero_15 of
      true => L_zeroLen_15 | false => L_nonZeroLen_15
  L_zeroLen_15 ()
    L_join_11 (zeroArr_1)
  L_join_11 (x_896: word8 array)
    x_897: bool = WordS64_lt (x_895, global_18 (*0x5*))
    case x_897 of
      true => L_533 | false => L_532
  L_533 ()
    x_898: word64 = Word64_sub (x_895, global_17 (*0x1*))
    loop_47 (global_16 (*0x0*))
  loop_47 (x_899: word64)
    x_900: bool = WordS64_lt (x_898, x_899)
    case x_900 of
      true => L_535 | false => L_534
  L_535 ()
    x_901: word8 vector = Array_toVector(word8) (x_896)
    case x_865 of
      true => L_537 | false => L_536
  L_537 ()
    x_903: list_4 = ::_2 (global_27 (*nil_1*), x_901)
    x_902: list_4 = ::_2 (x_903, x_864)
    L_538 (concat_0 (x_902)) handle _ => raise
  L_538 (exp_1: word8 vector)
    x_908: list_4 = ::_2 (global_27 (*nil_1*), exp_1)
    x_907: list_4 = ::_2 (x_908, global_406 (*"E"*))
    x_906: list_4 = ::_2 (x_907, x_860)
    x_905: list_4 = ::_2 (x_906, x_848)
    x_904: list_4 = ::_2 (x_905, x_827)
    full_0 (concat_0 (x_904)) handle _ => raise
  full_0 (x_909: word8 vector)
    x_911: word64 = Vector_length(word8) (x_909)
    x_910: word64 = Word64_sub (x_911, global_17 (*0x1*))
    loop_48 (x_910)
  loop_48 (x_912: word64)
    x_913: bool = WordS64_lt (x_912, global_16 (*0x0*))
    case x_913 of
      true => L_540 | false => L_539
  L_540 ()
    L_541 (global_16 (*0x0*))
  L_541 (x_914: word64)
    x_916: word64 = Word64_sub (x_911, x_914)
    x_915: bool = Word64_equal (x_914, global_16 (*0x0*))
    case x_915 of
      true => L_543 | false => L_542
  L_543 ()
    x_917: bool = Word64_equal (x_916, x_911)
    case x_917 of
      true => L_544 | false => L_542
  L_544 ()
    L_545 (x_909)
  L_545 (expS_0: word8 vector)
    loop_49 (global_393 (*nil_4*), global_13 (*0x0*))
  loop_49 (x_919: list_3, x_918: word32)
    x_921: word64 = Vector_length(word8) (expS_0)
    x_923: word32 = WordS64_extdToWord32 (x_921)
    x_922: word64 = WordS32_extdToWord64 (x_923)
    x_920: bool = Word64_equal (x_922, x_921)
    case x_920 of
      true => L_547 | false => L_546
  L_547 ()
    x_924: bool = WordS32_lt (x_918, x_923)
    case x_924 of
      true => L_549 | false => L_548
  L_549 ()
    x_926: word64 = WordS32_extdToWord64 (x_918)
    x_925: bool = WordU64_lt (x_926, x_921)
    case x_925 of
      true => L_551 | false => L_550
  L_551 ()
    x_929: word8 = Vector_sub(word8) (expS_0, x_926)
    x_930: word32 = Word32_add (x_918, x_0 (*0x1*))
    x_928: word64 = WordU8_extdToWord64 (x_929)
    x_927: bool = WordU64_lt (x_928, global_357 (*0x100*))
    case x_927 of
      true => L_552 | false => L_550
  L_552 ()
    x_931: bool = Array_sub(bool) (x_812, x_928)
    case x_931 of
      true => L_554 | false => L_553
  L_554 ()
    x_932: list_3 = ::_6 (x_919)
    loop_49 (x_932, x_930)
  L_553 ()
    case x_919 of
      nil_4 => L_556 | ::_6 => L_555
  L_556 ()
    L_557 (global_393 (*nil_4*))
  L_557 (x_933: list_3)
    case x_933 of
      nil_4 => L_559 | ::_6 => L_558
  L_559 ()
    L_560 (global_13 (*0x0*))
  L_560 (x_934: word32)
    x_936: word64 = WordS32_extdToWord64 (x_934)
    x_935: bool = WordU64_lt (global_19 (*0x7FFFFFFF*), x_936)
    case x_935 of
      true => L_562 | false => L_561
  L_562 ()
    raise (global_20 (*Size_0*))
  L_561 ()
    loop_50 (x_933, global_16 (*0x0*))
  loop_50 (x_938: list_3, x_937: word64)
    x_939: bool = WordS64_lt (x_937, x_936)
    case x_939 of
      true => L_564 | false => L_563
  L_564 ()
    case x_938 of
      nil_4 => L_566 | ::_6 => L_565
  L_566 ()
    raise (global_356 (*Fail_0 (global_355)*))
  L_565 (x_940: list_3)
    x_941: word64 = Word64_add (x_937, global_17 (*0x1*))
    loop_50 (x_940, x_941)
  L_563 ()
    case x_924 of
      true => L_568 | false => L_567
  L_568 ()
    x_943: word64 = WordS32_extdToWord64 (x_918)
    x_942: bool = WordU64_lt (x_943, x_921)
    case x_942 of
      true => L_569 | false => L_550
  L_569 ()
    x_945: word8 = Vector_sub(word8) (expS_0, x_943)
    x_944: word32 = Word32_add (x_918, x_0 (*0x1*))
    case x_945 of
      0x7E => L_572 | 0x2B => L_571 | 0x2D => L_570 | _ => L_573
  L_572 ()
    x_946: bool = WordS32_lt (x_944, x_923)
    case x_946 of
      true => L_574 | false => L_567
  L_574 ()
    x_948: word64 = WordS32_extdToWord64 (x_944)
    x_947: bool = WordU64_lt (x_948, x_921)
    case x_947 of
      true => L_575 | false => L_550
  L_575 ()
    x_951: word8 = Vector_sub(word8) (expS_0, x_948)
    x_952: word32 = Word32_add (x_944, x_0 (*0x1*))
    x_950: word64 = WordU8_extdToWord64 (x_951)
    x_949: bool = WordU64_lt (x_950, global_357 (*0x100*))
    case x_949 of
      true => L_576 | false => L_550
  L_576 ()
    x_953: t_0 = Array_sub(t_0) (x_811, x_950)
    case x_953 of
      NONE_0 => L_567 | SOME_0 => sextdFromInt32ToInt32_0
  L_567 ()
    raise (global_412 (*Option_0*))
  sextdFromInt32ToInt32_0 (x_954: word32)
    x_955: word32 = Word32_neg (x_954)
    L_577 (x_955, x_952)
  L_577 (x_957: word32, x_956: word32)
    x_958: bool = WordS32_lt (x_956, x_923)
    case x_958 of
      true => L_579 | false => L_578
  L_579 ()
    x_960: word64 = WordS32_extdToWord64 (x_956)
    x_959: bool = WordU64_lt (x_960, x_921)
    case x_959 of
      true => L_580 | false => L_550
  L_580 ()
    x_963: word8 = Vector_sub(word8) (expS_0, x_960)
    x_964: word32 = Word32_add (x_956, x_0 (*0x1*))
    x_962: word64 = WordU8_extdToWord64 (x_963)
    x_961: bool = WordU64_lt (x_962, global_357 (*0x100*))
    case x_961 of
      true => L_581 | false => L_550
  L_581 ()
    x_965: t_0 = Array_sub(t_0) (x_811, x_962)
    case x_965 of
      NONE_0 => L_582 | SOME_0 => sextdFromInt32ToInt32_1
  L_582 ()
    L_583 (x_957)
  L_583 (x_966: word32)
    loop_51 (global_16 (*0x0*))
  loop_51 (x_967: word64)
    x_968: bool = WordS64_lt (x_967, x_911)
    case x_968 of
      true => L_585 | false => L_584
  L_585 ()
    x_970: word8 = Vector_sub(word8) (x_909, x_967)
    x_969: bool = Word8_equal (x_970, global_407 (*0x45*))
    case x_969 of
      true => L_584 | false => L_586
  L_584 ()
    x_971: word64 = Word64_sub (x_967, global_17 (*0x1*))
    loop_52 (x_971)
  loop_52 (x_972: word64)
    x_973: bool = WordS64_lt (x_972, global_16 (*0x0*))
    case x_973 of
      true => L_588 | false => L_587
  L_588 ()
    L_589 (global_16 (*0x0*))
  L_589 (x_974: word64)
    x_975: bool = Word64_equal (x_974, x_911)
    case x_975 of
      true => L_591 | false => L_590
  L_591 ()
    full_1 (x_909)
  full_1 (x_976: word8 vector)
    x_978: word64 = Vector_length(word8) (x_976)
    x_977: word64 = Word64_sub (x_978, global_17 (*0x1*))
    loop_53 (global_408 (*nil_5*), global_16 (*0x0*))
  loop_53 (x_980: list_2, x_979: word64)
    x_981: bool = WordS64_lt (x_977, x_979)
    case x_981 of
      true => L_593 | false => L_592
  L_593 ()
    case x_980 of
      nil_5 => L_595 | ::_5 => L_594
  L_595 ()
    L_596 (global_347 (*""*))
  L_596 (x_982: word8 vector)
    x_984: word64 = Vector_length(word8) (x_982)
    x_986: word32 = WordS64_extdToWord32 (x_984)
    x_985: word64 = WordS32_extdToWord64 (x_986)
    x_983: bool = Word64_equal (x_985, x_984)
    case x_983 of
      true => L_597 | false => L_546
  L_597 ()
    x_987: bool = Word32_equal (x_986, global_14 (*0x1*))
    case x_987 of
      true => L_599 | false => L_598
  L_599 ()
    L_600 (global_171 (*0x3*))
  L_600 (x_988: word32)
    x_989: bool = WordS32_lt (x_966, x_988)
    case x_989 of
      true => L_601 | false => sci_0
  L_601 ()
    L_602 (WordS32_subCheck (x_986, global_14 (*0x1*))) handle Overflow => L_497
  L_602 (x_990: word32)
    x_991: bool = WordS32_lt (x_966, x_990)
    case x_991 of
      true => L_604 | false => L_603
  L_604 ()
    x_992: bool = WordS32_lt (x_966, global_13 (*0x0*))
    case x_992 of
      true => L_606 | false => L_605
  L_606 ()
    case x_987 of
      true => L_608 | false => L_607
  L_608 ()
    L_609 (global_410 (*0xFFFFFFFE*))
  L_609 (x_993: word32)
    x_994: bool = WordS32_lt (x_966, x_993)
    case x_994 of
      true => sci_0 | false => L_610
  sci_0 ()
    x_996: list_4 = ::_2 (global_27 (*nil_1*), expS_0)
    x_995: list_4 = ::_2 (x_996, global_406 (*"E"*))
    case x_987 of
      true => L_612 | false => L_611
  L_612 ()
    L_613 (x_982)
  L_613 (x_997: word8 vector)
    x_999: list_4 = ::_2 (x_995, x_997)
    x_998: list_4 = ::_2 (x_999, x_824)
    return (concat_0 (x_998))
  L_611 ()
    x_1000: bool = WordU64_lt (x_984, global_17 (*0x1*))
    case x_1000 of
      true => L_550 | false => L_614
  L_550 ()
    raise (global_349 (*Subscript_0*))
  L_614 ()
    x_1001: bool = Word64_equal (x_984, global_17 (*0x1*))
    case x_1001 of
      true => L_616 | false => L_615
  L_616 ()
    L_617 (x_982)
  L_617 (x_1002: word8 vector)
    x_1004: word64 = Word64_sub (x_984, global_17 (*0x1*))
    x_1003: bool = WordU64_lt (global_19 (*0x7FFFFFFF*), x_1004)
    case x_1003 of
      true => L_562 | false => L_618
  L_618 ()
    isZero_16: bool = Word64_equal (global_16 (*0x0*), x_1004)
    case isZero_16 of
      true => L_zeroLen_16 | false => L_nonZeroLen_16
  L_zeroLen_16 ()
    L_join_12 (zeroArr_1)
  L_join_12 (x_1005: word8 array)
    _: unit =
      Array_copyVector(word8) (x_1005,
                               global_16 (*0x0*),
                               x_982,
                               global_17 (*0x1*),
                               x_1004)
    x_1009: word8 vector = Array_toVector(word8) (x_1005)
    x_1008: list_4 = ::_2 (global_27 (*nil_1*), x_1009)
    x_1007: list_4 = ::_2 (x_1008, global_394 (*"."*))
    x_1006: list_4 = ::_2 (x_1007, x_1002)
    L_613 (concat_0 (x_1006)) handle _ => raise
  L_nonZeroLen_16 ()
    x_1010: word8 array = Array_alloc(word8) (x_1004)
    L_join_12 (x_1010)
  L_615 ()
    x_1012: word8 array = Array_alloc(word8) (global_17 (*0x1*))
    _: unit =
      Array_copyVector(word8) (x_1012,
                               global_16 (*0x0*),
                               x_982,
                               global_16 (*0x0*),
                               global_17 (*0x1*))
    x_1011: word8 vector = Array_toVector(word8) (x_1012)
    L_617 (x_1011)
  L_610 ()
    x_1013: list_4 = ::_2 (global_27 (*nil_1*), x_982)
    L_619 (Word32_negCheck (x_966)) handle Overflow => L_497
  L_619 (x_1014: word32)
    zeros_0 (WordS32_subCheck (x_1014, global_14 (*0x1*))) handle Overflow => L_497
  zeros_0 (x_1015: word32)
    x_1017: word64 = WordS32_extdToWord64 (x_1015)
    x_1016: bool = WordU64_lt (global_19 (*0x7FFFFFFF*), x_1017)
    case x_1016 of
      true => L_562 | false => L_620
  L_620 ()
    isZero_17: bool = Word64_equal (global_16 (*0x0*), x_1017)
    case isZero_17 of
      true => L_zeroLen_17 | false => L_nonZeroLen_17
  L_zeroLen_17 ()
    L_join_13 (zeroArr_1)
  L_join_13 (x_1018: word8 array)
    loop_54 (global_16 (*0x0*))
  loop_54 (x_1019: word64)
    x_1020: bool = WordS64_lt (x_1019, x_1017)
    case x_1020 of
      true => L_622 | false => L_621
  L_622 ()
    _: unit = Array_update(word8) (x_1018, x_1019, global_359 (*0x30*))
    x_1021: word64 = Word64_add (x_1019, global_17 (*0x1*))
    loop_54 (x_1021)
  L_621 ()
    x_1025: word8 vector = Array_toVector(word8) (x_1018)
    x_1024: list_4 = ::_2 (x_1013, x_1025)
    x_1023: list_4 = ::_2 (x_1024, global_411 (*"0."*))
    x_1022: list_4 = ::_2 (x_1023, x_824)
    return (concat_0 (x_1022))
  L_nonZeroLen_17 ()
    x_1026: word8 array = Array_alloc(word8) (x_1017)
    L_join_13 (x_1026)
  L_607 ()
    L_609 (global_409 (*0xFFFFFFFD*))
  L_605 ()
    x_1029: word32 = Word32_add (x_966, x_0 (*0x1*))
    x_1028: word64 = WordS32_extdToWord64 (x_1029)
    x_1027: bool = WordU64_lt (x_984, x_1028)
    case x_1027 of
      true => L_550 | false => L_623
  L_623 ()
    x_1030: bool = Word64_equal (x_1028, x_984)
    case x_1030 of
      true => L_625 | false => L_624
  L_625 ()
    L_626 (x_982)
  L_626 (x_1031: word8 vector)
    x_1033: word64 = Word64_sub (x_984, x_1028)
    x_1032: bool = Word64_equal (x_1028, global_16 (*0x0*))
    case x_1032 of
      true => L_628 | false => L_627
  L_628 ()
    x_1034: bool = Word64_equal (x_1033, x_984)
    case x_1034 of
      true => L_629 | false => L_627
  L_629 ()
    L_630 (x_982)
  L_630 (x_1035: word8 vector)
    x_1038: list_4 = ::_2 (global_27 (*nil_1*), x_1035)
    x_1037: list_4 = ::_2 (x_1038, global_394 (*"."*))
    x_1036: list_4 = ::_2 (x_1037, x_1031)
    L_631 (concat_0 (x_1036)) handle _ => raise
  L_631 (x_1039: word8 vector)
    x_1041: list_4 = ::_2 (global_27 (*nil_1*), x_1039)
    x_1040: list_4 = ::_2 (x_1041, x_824)
    return (concat_0 (x_1040))
  L_627 ()
    x_1042: bool = WordU64_lt (global_19 (*0x7FFFFFFF*), x_1033)
    case x_1042 of
      true => L_562 | false => L_632
  L_632 ()
    isZero_18: bool = Word64_equal (global_16 (*0x0*), x_1033)
    case isZero_18 of
      true => L_zeroLen_18 | false => L_nonZeroLen_18
  L_zeroLen_18 ()
    L_join_14 (zeroArr_1)
  L_join_14 (x_1043: word8 array)
    _: unit =
      Array_copyVector(word8) (x_1043, global_16 (*0x0*), x_982, x_1028, x_1033)
    x_1044: word8 vector = Array_toVector(word8) (x_1043)
    L_630 (x_1044)
  L_nonZeroLen_18 ()
    x_1045: word8 array = Array_alloc(word8) (x_1033)
    L_join_14 (x_1045)
  L_624 ()
    x_1046: bool = WordU64_lt (global_19 (*0x7FFFFFFF*), x_1028)
    case x_1046 of
      true => L_562 | false => L_633
  L_633 ()
    isZero_19: bool = Word64_equal (global_16 (*0x0*), x_1028)
    case isZero_19 of
      true => L_zeroLen_19 | false => L_nonZeroLen_19
  L_zeroLen_19 ()
    L_join_15 (zeroArr_1)
  L_join_15 (x_1047: word8 array)
    _: unit =
      Array_copyVector(word8) (x_1047,
                               global_16 (*0x0*),
                               x_982,
                               global_16 (*0x0*),
                               x_1028)
    x_1048: word8 vector = Array_toVector(word8) (x_1047)
    L_626 (x_1048)
  L_nonZeroLen_19 ()
    x_1049: word8 array = Array_alloc(word8) (x_1028)
    L_join_15 (x_1049)
  L_603 ()
    zeros_1 (WordS32_subCheck (x_966, x_990)) handle Overflow => L_497
  zeros_1 (x_1050: word32)
    x_1052: word64 = WordS32_extdToWord64 (x_1050)
    x_1051: bool = WordU64_lt (global_19 (*0x7FFFFFFF*), x_1052)
    case x_1051 of
      true => L_562 | false => L_634
  L_634 ()
    isZero_20: bool = Word64_equal (global_16 (*0x0*), x_1052)
    case isZero_20 of
      true => L_zeroLen_20 | false => L_nonZeroLen_20
  L_zeroLen_20 ()
    L_join_16 (zeroArr_1)
  L_join_16 (x_1053: word8 array)
    loop_55 (global_16 (*0x0*))
  loop_55 (x_1054: word64)
    x_1055: bool = WordS64_lt (x_1054, x_1052)
    case x_1055 of
      true => L_636 | false => L_635
  L_636 ()
    _: unit = Array_update(word8) (x_1053, x_1054, global_359 (*0x30*))
    x_1056: word64 = Word64_add (x_1054, global_17 (*0x1*))
    loop_55 (x_1056)
  L_635 ()
    x_1060: word8 vector = Array_toVector(word8) (x_1053)
    x_1059: list_4 = ::_2 (global_27 (*nil_1*), x_1060)
    x_1058: list_4 = ::_2 (x_1059, x_982)
    x_1057: list_4 = ::_2 (x_1058, x_824)
    return (concat_0 (x_1057))
  L_nonZeroLen_20 ()
    x_1061: word8 array = Array_alloc(word8) (x_1052)
    L_join_16 (x_1061)
  L_598 ()
    L_600 (WordS32_addCheck (x_986, global_171 (*0x3*))) handle Overflow => L_497
  L_546 ()
    raise (global_392 (*Fail_0 (global_391)*))
  L_594 (x_1063: list_2, x_1062: (word64 * word8 vector * word64))
    L_637 (x_1063, x_1062, global_408 (*nil_5*))
  L_637 (x_1066: list_2,
         x_1065: (word64 * word8 vector * word64),
         x_1064: list_2)
    x_1067: list_2 = ::_5 (x_1064, x_1065)
    case x_1066 of
      nil_5 => L_639 | ::_5 => L_638
  L_639 ()
    case x_1064 of
      nil_5 => L_640 | _ => L_641
  L_640 ()
    x_1069: word64 = #2 (x_1065)
    x_1071: word8 vector = #1 (x_1065)
    x_1070: word64 = #0 (x_1065)
    x_1068: bool = Word64_equal (x_1069, global_16 (*0x0*))
    case x_1068 of
      true => L_643 | false => L_642
  L_643 ()
    x_1073: word64 = Vector_length(word8) (x_1071)
    x_1072: bool = Word64_equal (x_1073, x_1070)
    case x_1072 of
      true => L_644 | false => L_642
  L_644 ()
    L_596 (x_1071)
  L_642 ()
    x_1074: bool = WordU64_lt (global_19 (*0x7FFFFFFF*), x_1070)
    case x_1074 of
      true => L_562 | false => L_645
  L_645 ()
    isZero_21: bool = Word64_equal (global_16 (*0x0*), x_1070)
    case isZero_21 of
      true => L_zeroLen_21 | false => L_nonZeroLen_21
  L_zeroLen_21 ()
    L_join_17 (zeroArr_1)
  L_join_17 (x_1075: word8 array)
    _: unit =
      Array_copyVector(word8) (x_1075, global_16 (*0x0*), x_1071, x_1069, x_1070)
    x_1076: word8 vector = Array_toVector(word8) (x_1075)
    L_596 (x_1076)
  L_nonZeroLen_21 ()
    x_1077: word8 array = Array_alloc(word8) (x_1070)
    L_join_17 (x_1077)
  L_641 ()
    L_646 (x_1064, x_1065, global_16 (*0x0*))
  L_646 (x_1080: list_2,
         x_1079: (word64 * word8 vector * word64),
         x_1078: word64)
    x_1081: word64 = #0 (x_1079)
    L_647 (WordS64_addCheck (x_1078, x_1081)) handle Overflow => L_562
  L_647 (x_1082: word64)
    case x_1080 of
      nil_5 => L_649 | ::_5 => L_648
  L_649 ()
    x_1083: bool = WordU64_lt (global_19 (*0x7FFFFFFF*), x_1082)
    case x_1083 of
      true => L_562 | false => L_650
  L_650 ()
    isZero_22: bool = Word64_equal (global_16 (*0x0*), x_1082)
    case isZero_22 of
      true => L_zeroLen_22 | false => L_nonZeroLen_22
  L_zeroLen_22 ()
    L_651 (x_1064, x_1065, zeroArr_1, global_16 (*0x0*))
  L_651 (x_1087: list_2,
         x_1086: (word64 * word8 vector * word64),
         x_1085: word8 array,
         x_1084: word64)
    x_1091: word64 = #2 (x_1086)
    x_1090: word8 vector = #1 (x_1086)
    x_1089: word64 = #0 (x_1086)
    x_1088: bool = WordS64_lt (x_1089, global_18 (*0x5*))
    case x_1088 of
      true => L_653 | false => L_652
  L_653 ()
    x_1092: word64 = Word64_sub (x_1089, global_17 (*0x1*))
    loop_56 (global_16 (*0x0*))
  loop_56 (x_1093: word64)
    x_1094: bool = WordS64_lt (x_1092, x_1093)
    case x_1094 of
      true => L_655 | false => L_654
  L_655 ()
    x_1095: word64 = Word64_add (x_1089, x_1084)
    case x_1087 of
      nil_5 => L_657 | ::_5 => L_656
  L_657 ()
    x_1096: word8 vector = Array_toVector(word8) (x_1085)
    L_596 (x_1096)
  L_656 (x_1098: list_2, x_1097: (word64 * word8 vector * word64))
    L_651 (x_1098, x_1097, x_1085, x_1095)
  L_654 ()
    x_1101: word64 = Word64_add (x_1093, x_1084)
    x_1102: word64 = Word64_add (x_1093, x_1091)
    x_1100: word8 = Vector_sub(word8) (x_1090, x_1102)
    _: unit = Array_update(word8) (x_1085, x_1101, x_1100)
    x_1099: word64 = Word64_add (x_1093, global_17 (*0x1*))
    loop_56 (x_1099)
  L_652 ()
    _: unit = Array_copyVector(word8) (x_1085, x_1084, x_1090, x_1091, x_1089)
    L_655 ()
  L_nonZeroLen_22 ()
    x_1103: word8 array = Array_alloc(word8) (x_1082)
    L_651 (x_1064, x_1065, x_1103, global_16 (*0x0*))
  L_648 (x_1105: list_2, x_1104: (word64 * word8 vector * word64))
    L_646 (x_1105, x_1104, x_1082)
  L_638 (x_1107: list_2, x_1106: (word64 * word8 vector * word64))
    L_637 (x_1107, x_1106, x_1067)
  L_592 ()
    x_1109: word64 = Word64_add (x_979, global_17 (*0x1*))
    x_1108: word8 = Vector_sub(word8) (x_976, x_979)
    case x_1108 of
      0x2E => L_658 | _ => L_659
  L_658 ()
    full_2 (global_347 (*""*))
  full_2 (x_1110: word8 vector)
    x_1113: word64 = Vector_length(word8) (x_1110)
    x_1112: (word64 * word8 vector * word64) =
      (x_1113, x_1110, global_16 (*0x0*))
    x_1111: list_2 = ::_5 (x_980, x_1112)
    loop_53 (x_1111, x_1109)
  L_659 ()
    x_1114: word8 array = Array_alloc(word8) (global_17 (*0x1*))
    loop_57 (global_16 (*0x0*))
  loop_57 (x_1115: word64)
    x_1116: bool = WordS64_lt (x_1115, global_17 (*0x1*))
    case x_1116 of
      true => L_661 | false => L_660
  L_661 ()
    _: unit = Array_update(word8) (x_1114, x_1115, x_1108)
    x_1117: word64 = Word64_add (x_1115, global_17 (*0x1*))
    loop_57 (x_1117)
  L_660 ()
    x_1118: word8 vector = Array_toVector(word8) (x_1114)
    full_2 (x_1118)
  L_590 ()
    x_1119: bool = WordU64_lt (global_19 (*0x7FFFFFFF*), x_974)
    case x_1119 of
      true => L_562 | false => L_662
  L_662 ()
    isZero_23: bool = Word64_equal (global_16 (*0x0*), x_974)
    case isZero_23 of
      true => L_zeroLen_23 | false => L_nonZeroLen_23
  L_zeroLen_23 ()
    L_join_18 (zeroArr_1)
  L_join_18 (x_1120: word8 array)
    _: unit =
      Array_copyVector(word8) (x_1120,
                               global_16 (*0x0*),
                               x_909,
                               global_16 (*0x0*),
                               x_974)
    x_1121: word8 vector = Array_toVector(word8) (x_1120)
    full_1 (x_1121)
  L_nonZeroLen_23 ()
    x_1122: word8 array = Array_alloc(word8) (x_974)
    L_join_18 (x_1122)
  L_587 ()
    x_1124: word8 = Vector_sub(word8) (x_909, x_972)
    x_1123: bool = Word8_equal (x_1124, global_359 (*0x30*))
    case x_1123 of
      true => L_664 | false => L_663
  L_664 ()
    x_1125: word64 = Word64_sub (x_972, global_17 (*0x1*))
    loop_52 (x_1125)
  L_663 ()
    x_1126: word64 = Word64_add (x_972, global_17 (*0x1*))
    L_589 (x_1126)
  L_586 ()
    x_1127: word64 = Word64_add (x_967, global_17 (*0x1*))
    loop_51 (x_1127)
  sextdFromInt32ToInt32_1 (x_1128: word32)
    L_665 (WordS32_mulCheck (x_957, global_52 (*0xA*))) handle Overflow => L_497
  L_665 (x_1129: word32)
    L_666 (WordS32_subCheck (x_1129, x_1128)) handle Overflow => L_497
  L_666 (x_1130: word32)
    L_577 (x_1130, x_964)
  L_578 ()
    L_583 (x_957)
  L_571 ()
    L_667 (x_944)
  L_667 (x_1131: word32)
    x_1132: bool = WordS32_lt (x_1131, x_923)
    case x_1132 of
      true => L_668 | false => L_567
  L_668 ()
    x_1134: word64 = WordS32_extdToWord64 (x_1131)
    x_1133: bool = WordU64_lt (x_1134, x_921)
    case x_1133 of
      true => L_669 | false => L_550
  L_669 ()
    x_1137: word8 = Vector_sub(word8) (expS_0, x_1134)
    x_1138: word32 = Word32_add (x_1131, x_0 (*0x1*))
    x_1136: word64 = WordU8_extdToWord64 (x_1137)
    x_1135: bool = WordU64_lt (x_1136, global_357 (*0x100*))
    case x_1135 of
      true => L_670 | false => L_550
  L_670 ()
    x_1139: t_0 = Array_sub(t_0) (x_811, x_1136)
    case x_1139 of
      NONE_0 => L_567 | SOME_0 => sextdFromInt32ToInt32_2
  sextdFromInt32ToInt32_2 (x_1140: word32)
    x_1141: word32 = Word32_neg (x_1140)
    L_671 (x_1141, x_1138)
  L_671 (x_1143: word32, x_1142: word32)
    x_1144: bool = WordS32_lt (x_1142, x_923)
    case x_1144 of
      true => L_673 | false => L_672
  L_673 ()
    x_1146: word64 = WordS32_extdToWord64 (x_1142)
    x_1145: bool = WordU64_lt (x_1146, x_921)
    case x_1145 of
      true => L_674 | false => L_550
  L_674 ()
    x_1149: word8 = Vector_sub(word8) (expS_0, x_1146)
    x_1150: word32 = Word32_add (x_1142, x_0 (*0x1*))
    x_1148: word64 = WordU8_extdToWord64 (x_1149)
    x_1147: bool = WordU64_lt (x_1148, global_357 (*0x100*))
    case x_1147 of
      true => L_675 | false => L_550
  L_675 ()
    x_1151: t_0 = Array_sub(t_0) (x_811, x_1148)
    case x_1151 of
      NONE_0 => L_672 | SOME_0 => sextdFromInt32ToInt32_3
  L_672 ()
    L_583 (Word32_negCheck (x_1143)) handle Overflow => L_497
  sextdFromInt32ToInt32_3 (x_1152: word32)
    L_676 (WordS32_mulCheck (x_1143, global_52 (*0xA*))) handle Overflow => L_497
  L_676 (x_1153: word32)
    L_677 (WordS32_subCheck (x_1153, x_1152)) handle Overflow => L_497
  L_677 (x_1154: word32)
    L_671 (x_1154, x_1150)
  L_570 ()
    x_1155: bool = WordS32_lt (x_944, x_923)
    case x_1155 of
      true => L_678 | false => L_567
  L_678 ()
    x_1157: word64 = WordS32_extdToWord64 (x_944)
    x_1156: bool = WordU64_lt (x_1157, x_921)
    case x_1156 of
      true => L_679 | false => L_550
  L_679 ()
    x_1160: word8 = Vector_sub(word8) (expS_0, x_1157)
    x_1161: word32 = Word32_add (x_944, x_0 (*0x1*))
    x_1159: word64 = WordU8_extdToWord64 (x_1160)
    x_1158: bool = WordU64_lt (x_1159, global_357 (*0x100*))
    case x_1158 of
      true => L_680 | false => L_550
  L_680 ()
    x_1162: t_0 = Array_sub(t_0) (x_811, x_1159)
    case x_1162 of
      NONE_0 => L_567 | SOME_0 => sextdFromInt32ToInt32_4
  sextdFromInt32ToInt32_4 (x_1163: word32)
    x_1164: word32 = Word32_neg (x_1163)
    L_681 (x_1164, x_1161)
  L_681 (x_1166: word32, x_1165: word32)
    x_1167: bool = WordS32_lt (x_1165, x_923)
    case x_1167 of
      true => L_683 | false => L_682
  L_683 ()
    x_1169: word64 = WordS32_extdToWord64 (x_1165)
    x_1168: bool = WordU64_lt (x_1169, x_921)
    case x_1168 of
      true => L_684 | false => L_550
  L_684 ()
    x_1172: word8 = Vector_sub(word8) (expS_0, x_1169)
    x_1173: word32 = Word32_add (x_1165, x_0 (*0x1*))
    x_1171: word64 = WordU8_extdToWord64 (x_1172)
    x_1170: bool = WordU64_lt (x_1171, global_357 (*0x100*))
    case x_1170 of
      true => L_685 | false => L_550
  L_685 ()
    x_1174: t_0 = Array_sub(t_0) (x_811, x_1171)
    case x_1174 of
      NONE_0 => L_686 | SOME_0 => sextdFromInt32ToInt32_5
  L_686 ()
    L_583 (x_1166)
  sextdFromInt32ToInt32_5 (x_1175: word32)
    L_687 (WordS32_mulCheck (x_1166, global_52 (*0xA*))) handle Overflow => L_497
  L_687 (x_1176: word32)
    L_688 (WordS32_subCheck (x_1176, x_1175)) handle Overflow => L_497
  L_688 (x_1177: word32)
    L_681 (x_1177, x_1173)
  L_682 ()
    L_583 (x_1166)
  L_573 ()
    L_667 (x_918)
  L_558 (x_1178: list_3)
    L_689 (x_1178, global_13 (*0x0*))
  L_689 (x_1180: list_3, x_1179: word32)
    x_1181: word32 = Word32_add (x_1179, global_14 (*0x1*))
    case x_1180 of
      nil_4 => L_691 | ::_6 => L_690
  L_691 ()
    L_560 (x_1181)
  L_690 (x_1182: list_3)
    L_689 (x_1182, x_1181)
  L_555 (x_1183: list_3)
    L_692 (x_1183, global_393 (*nil_4*))
  L_692 (x_1185: list_3, x_1184: list_3)
    x_1186: list_3 = ::_6 (x_1184)
    case x_1185 of
      nil_4 => L_694 | ::_6 => L_693
  L_694 ()
    L_557 (x_1186)
  L_693 (x_1187: list_3)
    L_692 (x_1187, x_1186)
  L_548 ()
    case x_919 of
      nil_4 => L_696 | ::_6 => L_695
  L_696 ()
    L_697 (global_393 (*nil_4*))
  L_697 (x_1188: list_3)
    case x_1188 of
      nil_4 => L_699 | ::_6 => L_698
  L_699 ()
    L_700 (global_13 (*0x0*))
  L_700 (x_1189: word32)
    x_1191: word64 = WordS32_extdToWord64 (x_1189)
    x_1190: bool = WordU64_lt (global_19 (*0x7FFFFFFF*), x_1191)
    case x_1190 of
      true => L_562 | false => L_701
  L_701 ()
    loop_58 (x_1188, global_16 (*0x0*))
  loop_58 (x_1193: list_3, x_1192: word64)
    x_1194: bool = WordS64_lt (x_1192, x_1191)
    case x_1194 of
      true => L_702 | false => L_563
  L_702 ()
    case x_1193 of
      nil_4 => L_566 | ::_6 => L_703
  L_703 (x_1195: list_3)
    x_1196: word64 = Word64_add (x_1192, global_17 (*0x1*))
    loop_58 (x_1195, x_1196)
  L_698 (x_1197: list_3)
    L_704 (x_1197, global_13 (*0x0*))
  L_704 (x_1199: list_3, x_1198: word32)
    x_1200: word32 = Word32_add (x_1198, global_14 (*0x1*))
    case x_1199 of
      nil_4 => L_706 | ::_6 => L_705
  L_706 ()
    L_700 (x_1200)
  L_705 (x_1201: list_3)
    L_704 (x_1201, x_1200)
  L_695 (x_1202: list_3)
    L_707 (x_1202, global_393 (*nil_4*))
  L_707 (x_1204: list_3, x_1203: list_3)
    x_1205: list_3 = ::_6 (x_1203)
    case x_1204 of
      nil_4 => L_709 | ::_6 => L_708
  L_709 ()
    L_697 (x_1205)
  L_708 (x_1206: list_3)
    L_707 (x_1206, x_1205)
  L_542 ()
    x_1207: bool = WordU64_lt (global_19 (*0x7FFFFFFF*), x_916)
    case x_1207 of
      true => L_562 | false => L_710
  L_710 ()
    isZero_24: bool = Word64_equal (global_16 (*0x0*), x_916)
    case isZero_24 of
      true => L_zeroLen_24 | false => L_nonZeroLen_24
  L_zeroLen_24 ()
    L_join_19 (zeroArr_1)
  L_join_19 (x_1208: word8 array)
    _: unit =
      Array_copyVector(word8) (x_1208, global_16 (*0x0*), x_909, x_914, x_916)
    x_1209: word8 vector = Array_toVector(word8) (x_1208)
    L_545 (x_1209)
  L_nonZeroLen_24 ()
    x_1210: word8 array = Array_alloc(word8) (x_916)
    L_join_19 (x_1210)
  L_539 ()
    x_1212: word8 = Vector_sub(word8) (x_909, x_912)
    x_1211: bool = Word8_equal (x_1212, global_407 (*0x45*))
    case x_1211 of
      true => L_712 | false => L_711
  L_712 ()
    x_1213: word64 = Word64_add (x_912, global_17 (*0x1*))
    L_541 (x_1213)
  L_711 ()
    x_1214: word64 = Word64_sub (x_912, global_17 (*0x1*))
    loop_48 (x_1214)
  L_536 ()
    _: unit = Ref_assign(bool) (x_866, global_385 (*false*))
    L_537 ()
  L_534 ()
    x_1217: word64 = Word64_add (x_899, x_894)
    x_1216: word8 = Array_sub(word8) (x_875, x_1217)
    _: unit = Array_update(word8) (x_896, x_899, x_1216)
    x_1215: word64 = Word64_add (x_899, global_17 (*0x1*))
    loop_47 (x_1215)
  L_532 ()
    _: unit =
      Array_copyArray(word8) (x_896, global_16 (*0x0*), x_875, x_894, x_895)
    L_535 ()
  L_nonZeroLen_15 ()
    x_1218: word8 array = Array_alloc(word8) (x_895)
    L_join_11 (x_1218)
  L_520 ()
    L_528 (x_878)
  L_518 ()
    L_713 (WordS32_subCheck (x_878, global_14 (*0x1*))) handle Overflow => L_523
  L_713 (x_1219: word32)
    loop_46 (x_1219, x_888)
  L_513 ()
    x_1220: word32 = Word32_neg (x_863)
    loop_46 (global_157 (*0x20*), x_1220)
  L_507 ()
    _: unit = Ref_assign(bool) (x_866, global_378 (*true*))
    x_1222: word32 = Thread_atomicState ()
    x_1221: bool = Word32_equal (x_1222, global_13 (*0x0*))
    case x_1221 of
      true => L_486 | false => L_714
  L_714 ()
    _: unit = Thread_atomicEnd ()
    L_512 (x_867)
  L_503 ()
    L_506 (global_347 (*""*), exp_0)
  L_491 ()
    x_1223: word32 = Word32_add (x_838, global_14 (*0x1*))
    loop_42 (x_1223)
  L_488 ()
    _: unit = Ref_assign(bool) (x_814, global_385 (*false*))
    L_489 ()
  L_483 ()
    _: unit = Ref_assign(bool) (x_814, global_378 (*true*))
    x_1225: word32 = Thread_atomicState ()
    x_1224: bool = Word32_equal (x_1225, global_13 (*0x0*))
    case x_1224 of
      true => L_486 | false => L_715
  L_715 ()
    _: unit = Thread_atomicEnd ()
    L_487 (global_468)
  L_480 ()
    x_1226: bool = Word32_equal (x_829, global_399 (*0x400*))
    case x_1226 of
      true => L_717 | false => L_716
  L_717 ()
    L_482 (global_171 (*0x3*))
  L_716 ()
    x_1227: bool = Word32_equal (x_829, global_400 (*0x800*))
    case x_1227 of
      true => L_719 | false => L_718
  L_719 ()
    L_482 (global_21 (*0x2*))
  L_718 ()
    x_1228: bool = Word32_equal (x_829, global_401 (*0xC00*))
    case x_1228 of
      true => L_721 | false => L_720
  L_721 ()
    L_482 (global_13 (*0x0*))
  L_720 ()
    raise (global_404 (*Fail_0 (global_403)*))
  L_477 ()
    L_479 (global_347 (*""*))
  L_474 ()
    L_476 (x_815, global_347 (*""*))
