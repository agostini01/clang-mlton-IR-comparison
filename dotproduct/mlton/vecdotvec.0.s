/* MLton 20180207 */
/*   created this file on Sat Dec 01 01:26:25 2018. */
/* Do not edit this file. */
/* Flag settings:  */
/*    align: 8 */
/*    atMLtons: (@MLton, --) */
/*    chunk: chunk per function */
/*    closureConvertGlobalize: true */
/*    closureConvertShrink: true */
/*    codegen: amd64 */
/*    contifyIntoMain: false */
/*    debug: false */
/*    defaultChar: char8 */
/*    defaultWideChar: widechar32 */
/*    defaultInt: int32 */
/*    defaultReal: real64 */
/*    defaultWord: word32 */
/*    diag passes: [] */
/*    execute passes: [] */
/*    elaborate allowConstant (default): false */
/*    elaborate allowConstant (enabled): true */
/*    elaborate allowFFI (default): false */
/*    elaborate allowFFI (enabled): true */
/*    elaborate allowPrim (default): false */
/*    elaborate allowPrim (enabled): true */
/*    elaborate allowOverload (default): false */
/*    elaborate allowOverload (enabled): true */
/*    elaborate allowRedefineSpecialIds (default): false */
/*    elaborate allowRedefineSpecialIds (enabled): true */
/*    elaborate allowSpecifySpecialIds (default): false */
/*    elaborate allowSpecifySpecialIds (enabled): true */
/*    elaborate deadCode (default): false */
/*    elaborate deadCode (enabled): true */
/*    elaborate forceUsed (default): false */
/*    elaborate forceUsed (enabled): true */
/*    elaborate ffiStr (default):  */
/*    elaborate ffiStr (enabled): true */
/*    elaborate nonexhaustiveBind (default): warn */
/*    elaborate nonexhaustiveBind (enabled): true */
/*    elaborate nonexhaustiveExnBind (default): default */
/*    elaborate nonexhaustiveExnBind (enabled): true */
/*    elaborate redundantBind (default): warn */
/*    elaborate redundantBind (enabled): true */
/*    elaborate nonexhaustiveMatch (default): warn */
/*    elaborate nonexhaustiveMatch (enabled): true */
/*    elaborate nonexhaustiveExnMatch (default): default */
/*    elaborate nonexhaustiveExnMatch (enabled): true */
/*    elaborate redundantMatch (default): warn */
/*    elaborate redundantMatch (enabled): true */
/*    elaborate nonexhaustiveRaise (default): ignore */
/*    elaborate nonexhaustiveRaise (enabled): true */
/*    elaborate nonexhaustiveExnRaise (default): ignore */
/*    elaborate nonexhaustiveExnRaise (enabled): true */
/*    elaborate redundantRaise (default): warn */
/*    elaborate redundantRaise (enabled): true */
/*    elaborate resolveScope (default): strdec */
/*    elaborate resolveScope (enabled): true */
/*    elaborate sequenceNonUnit (default): ignore */
/*    elaborate sequenceNonUnit (enabled): true */
/*    elaborate valrecConstr (default): warn */
/*    elaborate valrecConstr (enabled): true */
/*    elaborate warnUnused (default): false */
/*    elaborate warnUnused (enabled): true */
/*    elaborate allowDoDecls (default): false */
/*    elaborate allowDoDecls (enabled): true */
/*    elaborate allowExtendedNumConsts (default): false */
/*    elaborate allowExtendedNumConsts (enabled): true */
/*    elaborate allowExtendedTextConsts (default): false */
/*    elaborate allowExtendedTextConsts (enabled): true */
/*    elaborate allowLineComments (default): false */
/*    elaborate allowLineComments (enabled): true */
/*    elaborate allowOptBar (default): false */
/*    elaborate allowOptBar (enabled): true */
/*    elaborate allowOptSemicolon (default): false */
/*    elaborate allowOptSemicolon (enabled): true */
/*    elaborate allowOrPats (default): false */
/*    elaborate allowOrPats (enabled): true */
/*    elaborate allowRecordPunExps (default): false */
/*    elaborate allowRecordPunExps (enabled): true */
/*    elaborate allowSigWithtype (default): false */
/*    elaborate allowSigWithtype (enabled): true */
/*    elaborate allowVectorExps (default): false */
/*    elaborate allowVectorExps (enabled): true */
/*    elaborate allowVectorPats (default): false */
/*    elaborate allowVectorPats (enabled): true */
/*    elaborate only: false */
/*    emit main: true */
/*    export header: None */
/*    exn history: false */
/*    generated output format: executable */
/*    gc check: Limit */
/*    indentation: 3 */
/*    inlineIntoMain: true */
/*    inlineLeafA: {loops = true, repeat = true, size = Some 20} */
/*    inlineLeafB: {loops = true, repeat = true, size = Some 40} */
/*    inlineNonRec: {small = 60, product = 320} */
/*    input file: vecdotvec */
/*    keep AST: false */
/*    keep CoreML: false */
/*    keep def use: true */
/*    keep dot: false */
/*    keep Machine: false */
/*    keep passes: [] */
/*    keep RSSA: false */
/*    keep SSA: false */
/*    keep SSA2: false */
/*    keep SXML: false */
/*    keep XML: false */
/*    extra_: false */
/*    lib dir: /usr/local/lib/mlton */
/*    lib target dir: /usr/local/lib/mlton/targets/self */
/*    loop ssa passes: 1 */
/*    loop ssa2 passes: 1 */
/*    loop unrolling limit: 150 */
/*    loop unswitching limit: 300 */
/*    mark cards: true */
/*    max function size: 10000 */
/*    mlb path vars: [{var = SML_LIB, path = $(LIB_MLTON_DIR)/sml}] */
/*    native commented: 0 */
/*    native live stack: false */
/*    native optimize: 1 */
/*    native move hoist: true */
/*    native copy prop: true */
/*    native copy prop cutoff: 1000 */
/*    native cutoff: 100 */
/*    native live transfer: 8 */
/*    native shuffle: true */
/*    native ieee fp: false */
/*    native split: Some 20000 */
/*    optFuel: None */
/*    optimizationPasses: [<ssa2::default>, <ssa::default>, <sxml::default>, <xml::default>] */
/*    polyvariance: Some {hofo = true, rounds = 2, small = 30, product = 300} */
/*    prefer abs paths: false */
/*    prof passes: [] */
/*    profile: None */
/*    profile branch: false */
/*    profile C: [] */
/*    profile IL: ProfileSource */
/*    profile include/exclude: [(Seq [Star [.], Or [Seq [Seq [[$], [(], [S], [M], [L], [_], [L], [I], [B], [)]]]], Star [.]], false)] */
/*    profile raise: false */
/*    profile stack: false */
/*    profile val: false */
/*    show basis: None */
/*    show basis compact: false */
/*    show basis def: true */
/*    show basis flat: true */
/*    show def-use: None */
/*    show types: true */
/*    target: self */
/*    target arch: AMD64 */
/*    target OS: Linux */
/*    type check: false */
/*    verbosity: Silent */
/*    warn unrecognized annotation: true */
/*    warn deprecated features: true */
/*    zone cut depth: 100 */
.text
.p2align 0x4
.globl MLton_jumpToSML
.hidden MLton_jumpToSML
MLton_jumpToSML:
	subq $0x48,%rsp
	movq %rbp,0x40(%rsp)
	movq %rbx,0x38(%rsp)
	movq %r12,0x30(%rsp)
	movq %r13,0x28(%rsp)
	movq %r14,0x20(%rsp)
	movq %r15,0x18(%rsp)
	movq c_stackP(%rip),%rbx
	movq %rbx,0x10(%rsp)
	movq %rsp,c_stackP(%rip)
	movq (gcState+0x10)(%rip),%rbp
	movq (gcState+0x0)(%rip),%r12
	jmp *%rdi
.p2align 0x4
.globl Thread_returnToC
.hidden Thread_returnToC
Thread_returnToC:
	movq c_stackP(%rip),%rsp
	movq 0x10(%rsp),%rbx
	movq %rbx,c_stackP(%rip)
	movq 0x18(%rsp),%r15
	movq 0x20(%rsp),%r14
	movq 0x28(%rsp),%r13
	movq 0x30(%rsp),%r12
	movq 0x38(%rsp),%rbx
	movq 0x40(%rsp),%rbp
	addq $0x48,%rsp
	ret
.text
.p2align 0x4
.globl F_0
.hidden F_0
F_0:
L_0:
	movq (gcState+0x18)(%rip),%r15
	cmpq %rbp,%r15
	setb %al
	movzbl %al,%eax
	testl %eax,%eax
	jnz L_6
L_1:
	movq (gcState+0x450)(%rip),%r14
	movq %r14,%r13
	subq %r12,%r13
	cmpq $0x1170,%r13
	setb %al
	movzbl %al,%eax
	testl %eax,%eax
	jnz L_1319
L_2:
	movq $0x11,%r15
	movq %r12,%r14
	addq $0x8,%r14
	movq %r14,%r13
	movq %r15,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	xorq %r15,%r15
	xorq %r14,%r14
	movq %r14,0x8(%r13)
	movq %r15,0x0(%r13)
	movq $0x5D,%r11
	movq %r12,%r10
	addq $0x8,%r10
	movq %r10,%r9
	movq %r11,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq %r13,%r11
	movq $0x1,%r15
	movq %r15,0x8(%r9)
	movq %r11,0x0(%r9)
	movq $0x11,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%r10
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq $0x1,%r14
	xorq %r13,%r13
	movq %r13,0x8(%r10)
	movq %r14,0x0(%r10)
	movq $0x5D,%r8
	movq %r12,%rsp
	addq $0x8,%rsp
	movq %rsp,%rsi
	movq %r8,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq %r10,%r8
	movq $0x1,%r14
	movq %r14,0x8(%rsi)
	movq %r8,0x0(%rsi)
	movq $0x27,%r13
	movq %r12,%r10
	addq $0x8,%r10
	movq %r10,%rsp
	movq %r13,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0xD,%r13d
	movq (globalObjptr+0xB8)(%rip),%r10
	movq %r10,%rdi
	movq %rdi,0x8(%rsp)
	movl %r13d,0x0(%rsp)
	movq $0x27,%rdx
	movq %r12,%rcx
	addq $0x8,%rcx
	movq %rcx,%rbx
	movq %rdx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x62,%edx
	movq (globalObjptr+0xC0)(%rip),%rcx
	movq %rcx,%rax
	movq %rax,0x8(%rbx)
	movl %edx,0x0(%rbx)
	movq $0x27,%r11
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,%r8
	movq %r11,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x63,%r15d
	movq (globalObjptr+0xC8)(%rip),%r11
	movq %r11,%r14
	movq %r14,0x8(%r8)
	movl %r15d,0x0(%r8)
	movq $0x27,%r13
	movq %r12,%r10
	addq $0x8,%r10
	movq %r10,%rdi
	movq %r13,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x61,%r13d
	movq (globalObjptr+0xD0)(%rip),%r10
	movq %r10,%rdx
	movq %rdx,0x8(%rdi)
	movl %r13d,0x0(%rdi)
	movq $0x27,%rcx
	movq %r12,%rax
	addq $0x8,%rax
	movq %rax,%r15
	movq %rcx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0xB,%ecx
	movq (globalObjptr+0xD8)(%rip),%rax
	movq %rax,%r11
	movq %r11,0x8(%r15)
	movl %ecx,0x0(%r15)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%r10
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x72,%r14d
	movq (globalObjptr+0xE0)(%rip),%r13
	movq %r13,%rdx
	movq %rdx,0x8(%r10)
	movl %r14d,0x0(%r10)
	movq $0x27,%rcx
	movq %r12,%rax
	addq $0x8,%rax
	movq %rax,%r11
	movq %rcx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x9,%ecx
	movq (globalObjptr+0xE8)(%rip),%rax
	movq %rax,%r14
	movq %r14,0x8(%r11)
	movl %ecx,0x0(%r11)
	movq $0x27,%r13
	movq %r12,%rdx
	addq $0x8,%rdx
	movq %rdx,%rcx
	movq %r13,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x4A,%r13d
	movq (globalObjptr+0xF0)(%rip),%rdx
	movq %rdx,%rax
	movq %rax,0x8(%rcx)
	movl %r13d,0x0(%rcx)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%rdx
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x10,%r14d
	movq (globalObjptr+0xF8)(%rip),%r13
	movq %r13,%rax
	movq %rax,0x8(%rdx)
	movl %r14d,0x0(%rdx)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%rax
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x7D,%r14d
	movq (globalObjptr+0x100)(%rip),%r13
	movq %rbp,(gcState+0x10)(%rip)
	movq %r13,%rbp
	movq %rbp,0x8(%rax)
	movl %r14d,0x0(%rax)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%rbp
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0xA,%r14d
	movq (globalObjptr+0x108)(%rip),%r13
	movq %r9,(globalObjptr+0x0)(%rip)
	movq %r13,%r9
	movq %r9,0x8(%rbp)
	movl %r14d,0x0(%rbp)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%r9
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x67,%r14d
	movq (globalObjptr+0x110)(%rip),%r13
	movq %rsi,(globalObjptr+0x8)(%rip)
	movq %r13,%rsi
	movq %rsi,0x8(%r9)
	movl %r14d,0x0(%r9)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%rsi
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x6F,%r14d
	movq (globalObjptr+0x118)(%rip),%r13
	movq %rsp,(globalObjptr+0x10)(%rip)
	movq %r13,%rsp
	movq %rsp,0x8(%rsi)
	movl %r14d,0x0(%rsi)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%rsp
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x68,%r14d
	movq (globalObjptr+0x120)(%rip),%r13
	movq %rbx,(localObjptr+0x10)(%rip)
	movq %r13,%rbx
	movq %rbx,0x8(%rsp)
	movl %r14d,0x0(%rsp)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%rbx
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x23,%r14d
	movq (globalObjptr+0x128)(%rip),%r13
	movq %r8,(localObjptr+0x18)(%rip)
	movq %r13,%r8
	movq %r8,0x8(%rbx)
	movl %r14d,0x0(%rbx)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%r8
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x59,%r14d
	movq (globalObjptr+0x130)(%rip),%r13
	movq %rdi,(localObjptr+0x20)(%rip)
	movq %r13,%rdi
	movq %rdi,0x8(%r8)
	movl %r14d,0x0(%r8)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%rdi
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x21,%r14d
	movq (globalObjptr+0x138)(%rip),%r13
	movq %r15,(localObjptr+0x28)(%rip)
	movq %r13,%r15
	movq %r15,0x8(%rdi)
	movl %r14d,0x0(%rdi)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%r15
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x7A,%r14d
	movq (globalObjptr+0x140)(%rip),%r13
	movq %r10,(localObjptr+0x30)(%rip)
	movq %r13,%r10
	movq %r10,0x8(%r15)
	movl %r14d,0x0(%r15)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%r10
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x11,%r14d
	movq (globalObjptr+0x148)(%rip),%r13
	movq %r11,(localObjptr+0x38)(%rip)
	movq %r13,%r11
	movq %r11,0x8(%r10)
	movl %r14d,0x0(%r10)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%r11
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0xE,%r14d
	movq (globalObjptr+0x150)(%rip),%r13
	movq %rcx,(localObjptr+0x40)(%rip)
	movq %r13,%rcx
	movq %rcx,0x8(%r11)
	movl %r14d,0x0(%r11)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%rcx
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x1B,%r14d
	movq (globalObjptr+0x158)(%rip),%r13
	movq %rdx,(localObjptr+0x48)(%rip)
	movq %r13,%rdx
	movq %rdx,0x8(%rcx)
	movl %r14d,0x0(%rcx)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%rdx
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x71,%r14d
	movq (globalObjptr+0x160)(%rip),%r13
	movq %rax,(localObjptr+0x50)(%rip)
	movq %r13,%rax
	movq %rax,0x8(%rdx)
	movl %r14d,0x0(%rdx)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%rax
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x2B,%r14d
	movq (globalObjptr+0x168)(%rip),%r13
	movq %rbp,(localObjptr+0x58)(%rip)
	movq %r13,%rbp
	movq %rbp,0x8(%rax)
	movl %r14d,0x0(%rax)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%rbp
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x54,%r14d
	movq (globalObjptr+0x170)(%rip),%r13
	movq %r9,(localObjptr+0x60)(%rip)
	movq %r13,%r9
	movq %r9,0x8(%rbp)
	movl %r14d,0x0(%rbp)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%r9
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x73,%r14d
	movq (globalObjptr+0x178)(%rip),%r13
	movq %rsi,(localObjptr+0x68)(%rip)
	movq %r13,%rsi
	movq %rsi,0x8(%r9)
	movl %r14d,0x0(%r9)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%rsi
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x4,%r14d
	movq (globalObjptr+0x180)(%rip),%r13
	movq %rsp,(localObjptr+0x70)(%rip)
	movq %r13,%rsp
	movq %rsp,0x8(%rsi)
	movl %r14d,0x0(%rsi)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%rsp
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x16,%r14d
	movq (globalObjptr+0x188)(%rip),%r13
	movq %rbx,(localObjptr+0x78)(%rip)
	movq %r13,%rbx
	movq %rbx,0x8(%rsp)
	movl %r14d,0x0(%rsp)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%rbx
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x5,%r14d
	movq (globalObjptr+0x190)(%rip),%r13
	movq %r8,(localObjptr+0x80)(%rip)
	movq %r13,%r8
	movq %r8,0x8(%rbx)
	movl %r14d,0x0(%rbx)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%r8
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x6A,%r14d
	movq (globalObjptr+0x198)(%rip),%r13
	movq %rdi,(localObjptr+0x88)(%rip)
	movq %r13,%rdi
	movq %rdi,0x8(%r8)
	movl %r14d,0x0(%r8)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%rdi
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x15,%r14d
	movq (globalObjptr+0x1A0)(%rip),%r13
	movq %r15,(localObjptr+0x90)(%rip)
	movq %r13,%r15
	movq %r15,0x8(%rdi)
	movl %r14d,0x0(%rdi)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%r15
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x28,%r14d
	movq (globalObjptr+0x1A8)(%rip),%r13
	movq %r10,(localObjptr+0x98)(%rip)
	movq %r13,%r10
	movq %r10,0x8(%r15)
	movl %r14d,0x0(%r15)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%r10
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x18,%r14d
	movq (globalObjptr+0x1B0)(%rip),%r13
	movq %r11,(localObjptr+0xA0)(%rip)
	movq %r13,%r11
	movq %r11,0x8(%r10)
	movl %r14d,0x0(%r10)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%r11
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x1F,%r14d
	movq (globalObjptr+0x1B8)(%rip),%r13
	movq %rcx,(localObjptr+0xA8)(%rip)
	movq %r13,%rcx
	movq %rcx,0x8(%r11)
	movl %r14d,0x0(%r11)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%rcx
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x5A,%r14d
	movq (globalObjptr+0x1C0)(%rip),%r13
	movq %rdx,(localObjptr+0xB0)(%rip)
	movq %r13,%rdx
	movq %rdx,0x8(%rcx)
	movl %r14d,0x0(%rcx)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%rdx
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x48,%r14d
	movq (globalObjptr+0x1C8)(%rip),%r13
	movq %rax,(localObjptr+0xB8)(%rip)
	movq %r13,%rax
	movq %rax,0x8(%rdx)
	movl %r14d,0x0(%rdx)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%rax
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x24,%r14d
	movq (globalObjptr+0x1D0)(%rip),%r13
	movq %rbp,(localObjptr+0xC0)(%rip)
	movq %r13,%rbp
	movq %rbp,0x8(%rax)
	movl %r14d,0x0(%rax)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%rbp
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x64,%r14d
	movq (globalObjptr+0x1D8)(%rip),%r13
	movq %r9,(localObjptr+0xC8)(%rip)
	movq %r13,%r9
	movq %r9,0x8(%rbp)
	movl %r14d,0x0(%rbp)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%r9
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x66,%r14d
	movq (globalObjptr+0x1E0)(%rip),%r13
	movq %rsi,(localObjptr+0xD0)(%rip)
	movq %r13,%rsi
	movq %rsi,0x8(%r9)
	movl %r14d,0x0(%r9)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%rsi
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x65,%r14d
	movq (globalObjptr+0x1E8)(%rip),%r13
	movq %rsp,(localObjptr+0xD8)(%rip)
	movq %r13,%rsp
	movq %rsp,0x8(%rsi)
	movl %r14d,0x0(%rsi)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%rsp
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x17,%r14d
	movq (globalObjptr+0x1F0)(%rip),%r13
	movq %rbx,(localObjptr+0xE0)(%rip)
	movq %r13,%rbx
	movq %rbx,0x8(%rsp)
	movl %r14d,0x0(%rsp)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%rbx
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x69,%r14d
	movq (globalObjptr+0x1F8)(%rip),%r13
	movq %r8,(localObjptr+0xE8)(%rip)
	movq %r13,%r8
	movq %r8,0x8(%rbx)
	movl %r14d,0x0(%rbx)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%r8
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x3D,%r14d
	movq (globalObjptr+0x200)(%rip),%r13
	movq %rdi,(localObjptr+0xF0)(%rip)
	movq %r13,%rdi
	movq %rdi,0x8(%r8)
	movl %r14d,0x0(%r8)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%rdi
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x13,%r14d
	movq (globalObjptr+0x208)(%rip),%r13
	movq %r15,(localObjptr+0xF8)(%rip)
	movq %r13,%r15
	movq %r15,0x8(%rdi)
	movl %r14d,0x0(%rdi)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%r15
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x2,%r14d
	movq (globalObjptr+0x210)(%rip),%r13
	movq %r10,(localObjptr+0x100)(%rip)
	movq %r13,%r10
	movq %r10,0x8(%r15)
	movl %r14d,0x0(%r15)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%r10
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x8,%r14d
	movq (globalObjptr+0x218)(%rip),%r13
	movq %r11,(localObjptr+0x108)(%rip)
	movq %r13,%r11
	movq %r11,0x8(%r10)
	movl %r14d,0x0(%r10)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%r11
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x25,%r14d
	movq (globalObjptr+0x220)(%rip),%r13
	movq %rcx,(localObjptr+0x110)(%rip)
	movq %r13,%rcx
	movq %rcx,0x8(%r11)
	movl %r14d,0x0(%r11)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%rcx
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x43,%r14d
	movq (globalObjptr+0x228)(%rip),%r13
	movq %rdx,(localObjptr+0x118)(%rip)
	movq %r13,%rdx
	movq %rdx,0x8(%rcx)
	movl %r14d,0x0(%rcx)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%rdx
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0xC,%r14d
	movq (globalObjptr+0x230)(%rip),%r13
	movq %rax,(localObjptr+0x120)(%rip)
	movq %r13,%rax
	movq %rax,0x8(%rdx)
	movl %r14d,0x0(%rdx)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%rax
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x2A,%r14d
	movq (globalObjptr+0x238)(%rip),%r13
	movq %rbp,(localObjptr+0x128)(%rip)
	movq %r13,%rbp
	movq %rbp,0x8(%rax)
	movl %r14d,0x0(%rax)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%rbp
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x5C,%r14d
	movq (globalObjptr+0x240)(%rip),%r13
	movq %r9,(localObjptr+0x130)(%rip)
	movq %r13,%r9
	movq %r9,0x8(%rbp)
	movl %r14d,0x0(%rbp)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%r9
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x1C,%r14d
	movq (globalObjptr+0x248)(%rip),%r13
	movq %rsi,(localObjptr+0x138)(%rip)
	movq %r13,%rsi
	movq %rsi,0x8(%r9)
	movl %r14d,0x0(%r9)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%rsi
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x3F,%r14d
	movq (globalObjptr+0x250)(%rip),%r13
	movq %rsp,(localObjptr+0x140)(%rip)
	movq %r13,%rsp
	movq %rsp,0x8(%rsi)
	movl %r14d,0x0(%rsi)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%rsp
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x3C,%r14d
	movq (globalObjptr+0x258)(%rip),%r13
	movq %rbx,(localObjptr+0x148)(%rip)
	movq %r13,%rbx
	movq %rbx,0x8(%rsp)
	movl %r14d,0x0(%rsp)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%rbx
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x26,%r14d
	movq (globalObjptr+0x260)(%rip),%r13
	movq %r8,(localObjptr+0x150)(%rip)
	movq %r13,%r8
	movq %r8,0x8(%rbx)
	movl %r14d,0x0(%rbx)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%r8
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x6B,%r14d
	movq (globalObjptr+0x268)(%rip),%r13
	movq %rdi,(localObjptr+0x158)(%rip)
	movq %r13,%rdi
	movq %rdi,0x8(%r8)
	movl %r14d,0x0(%r8)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%rdi
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x14,%r14d
	movq (globalObjptr+0x270)(%rip),%r13
	movq %r15,(localObjptr+0x160)(%rip)
	movq %r13,%r15
	movq %r15,0x8(%rdi)
	movl %r14d,0x0(%rdi)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%r15
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x27,%r14d
	movq (globalObjptr+0x278)(%rip),%r13
	movq %r10,(localObjptr+0x168)(%rip)
	movq %r13,%r10
	movq %r10,0x8(%r15)
	movl %r14d,0x0(%r15)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%r10
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x58,%r14d
	movq (globalObjptr+0x280)(%rip),%r13
	movq %r11,(localObjptr+0x170)(%rip)
	movq %r13,%r11
	movq %r11,0x8(%r10)
	movl %r14d,0x0(%r10)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%r11
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x5F,%r14d
	movq (globalObjptr+0x288)(%rip),%r13
	movq %rcx,(localObjptr+0x178)(%rip)
	movq %r13,%rcx
	movq %rcx,0x8(%r11)
	movl %r14d,0x0(%r11)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%rcx
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x19,%r14d
	movq (globalObjptr+0x290)(%rip),%r13
	movq %rdx,(localObjptr+0x180)(%rip)
	movq %r13,%rdx
	movq %rdx,0x8(%rcx)
	movl %r14d,0x0(%rcx)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%rdx
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x6,%r14d
	movq (globalObjptr+0x298)(%rip),%r13
	movq %rax,(localObjptr+0x188)(%rip)
	movq %r13,%rax
	movq %rax,0x8(%rdx)
	movl %r14d,0x0(%rdx)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%rax
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x5F,%r14d
	movq (globalObjptr+0x2A0)(%rip),%r13
	movq %rbp,(localObjptr+0x190)(%rip)
	movq %r13,%rbp
	movq %rbp,0x8(%rax)
	movl %r14d,0x0(%rax)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%rbp
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x4B,%r14d
	movq (globalObjptr+0x2A8)(%rip),%r13
	movq %r9,(localObjptr+0x198)(%rip)
	movq %r13,%r9
	movq %r9,0x8(%rbp)
	movl %r14d,0x0(%rbp)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%r9
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x1,%r14d
	movq (globalObjptr+0x2B0)(%rip),%r13
	movq %rsi,(localObjptr+0x1A0)(%rip)
	movq %r13,%rsi
	movq %rsi,0x8(%r9)
	movl %r14d,0x0(%r9)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%rsi
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x20,%r14d
	movq (globalObjptr+0x2B8)(%rip),%r13
	movq %rsp,(localObjptr+0x1A8)(%rip)
	movq %r13,%rsp
	movq %rsp,0x8(%rsi)
	movl %r14d,0x0(%rsi)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%rsp
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x47,%r14d
	movq (globalObjptr+0x2C0)(%rip),%r13
	movq %rbx,(localObjptr+0x1B0)(%rip)
	movq %r13,%rbx
	movq %rbx,0x8(%rsp)
	movl %r14d,0x0(%rsp)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%rbx
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x5D,%r14d
	movq (globalObjptr+0x2C8)(%rip),%r13
	movq %r8,(localObjptr+0x1B8)(%rip)
	movq %r13,%r8
	movq %r8,0x8(%rbx)
	movl %r14d,0x0(%rbx)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%r8
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x5B,%r14d
	movq (globalObjptr+0x2D0)(%rip),%r13
	movq %rdi,(localObjptr+0x1C0)(%rip)
	movq %r13,%rdi
	movq %rdi,0x8(%r8)
	movl %r14d,0x0(%r8)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%rdi
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x22,%r14d
	movq (globalObjptr+0x2D8)(%rip),%r13
	movq %r15,(localObjptr+0x1C8)(%rip)
	movq %r13,%r15
	movq %r15,0x8(%rdi)
	movl %r14d,0x0(%rdi)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%r15
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x1E,%r14d
	movq (globalObjptr+0x2E0)(%rip),%r13
	movq %r10,(localObjptr+0x1D0)(%rip)
	movq %r13,%r10
	movq %r10,0x8(%r15)
	movl %r14d,0x0(%r15)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%r10
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x1D,%r14d
	movq (globalObjptr+0x2E8)(%rip),%r13
	movq %r11,(localObjptr+0x1D8)(%rip)
	movq %r13,%r11
	movq %r11,0x8(%r10)
	movl %r14d,0x0(%r10)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%r11
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x3,%r14d
	movq (globalObjptr+0x2F0)(%rip),%r13
	movq %rcx,(localObjptr+0x1E0)(%rip)
	movq %r13,%rcx
	movq %rcx,0x8(%r11)
	movl %r14d,0x0(%r11)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%rcx
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x74,%r14d
	movq (globalObjptr+0x2F8)(%rip),%r13
	movq %rdx,(localObjptr+0x1E8)(%rip)
	movq %r13,%rdx
	movq %rdx,0x8(%rcx)
	movl %r14d,0x0(%rcx)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%rdx
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x3E,%r14d
	movq (globalObjptr+0x300)(%rip),%r13
	movq %rax,(localObjptr+0x1F0)(%rip)
	movq %r13,%rax
	movq %rax,0x8(%rdx)
	movl %r14d,0x0(%rdx)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%rax
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x6E,%r14d
	movq (globalObjptr+0x308)(%rip),%r13
	movq %rbp,(localObjptr+0x1F8)(%rip)
	movq %r13,%rbp
	movq %rbp,0x8(%rax)
	movl %r14d,0x0(%rax)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%rbp
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x7,%r14d
	movq (globalObjptr+0x310)(%rip),%r13
	movq %r9,(localObjptr+0x200)(%rip)
	movq %r13,%r9
	movq %r9,0x8(%rbp)
	movl %r14d,0x0(%rbp)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%r9
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x1A,%r14d
	movq (globalObjptr+0x318)(%rip),%r13
	movq %rsi,(localObjptr+0x208)(%rip)
	movq %r13,%rsi
	movq %rsi,0x8(%r9)
	movl %r14d,0x0(%r9)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%rsi
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0xB,%r14d
	movq (globalObjptr+0x320)(%rip),%r13
	movq %rsp,(localObjptr+0x210)(%rip)
	movq %r13,%rsp
	movq %rsp,0x8(%rsi)
	movl %r14d,0x0(%rsi)
	movq $0x27,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%rsp
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0x12,%r14d
	movq (globalObjptr+0x328)(%rip),%r13
	movq %rbx,(localObjptr+0x218)(%rip)
	movq %r13,%rbx
	movq %rbx,0x8(%rsp)
	movl %r14d,0x0(%rsp)
	movq $0x4D,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%rbx
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq %rsp,%r14
	movq $0x1,%r13
	movq %r13,0x8(%rbx)
	movq %r14,0x0(%rbx)
	movq $0x4D,%rsp
	movq %r12,%r14
	addq $0x8,%r14
	movq %r14,%r13
	movq %rsp,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq %rsi,%r14
	movq %rbx,%rsp
	movq %rsp,0x8(%r13)
	movq %r14,0x0(%r13)
	movq $0x4D,%rsi
	movq %r12,%rbx
	addq $0x8,%rbx
	movq %rbx,%r14
	movq %rsi,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq %r9,%rsi
	movq %r13,%r9
	movq %r9,0x8(%r14)
	movq %rsi,0x0(%r14)
	movq $0x4D,%r13
	movq %r12,%rsp
	addq $0x8,%rsp
	movq %rsp,%rbx
	movq %r13,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq %rbp,%r13
	movq %r14,%rsp
	movq %rsp,0x8(%rbx)
	movq %r13,0x0(%rbx)
	movq $0x4D,%r14
	movq %r12,%r9
	addq $0x8,%r9
	movq %r9,%rbp
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq %rax,%r14
	movq %rbx,%r9
	movq %r9,0x8(%rbp)
	movq %r14,0x0(%rbp)
	movq $0x4D,%r13
	movq %r12,%rsp
	addq $0x8,%rsp
	movq %rsp,%rsi
	movq %r13,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq %rdx,%r13
	movq %rbp,%rsp
	movq %rsp,0x8(%rsi)
	movq %r13,0x0(%rsi)
	movq $0x4D,%r14
	movq %r12,%r9
	addq $0x8,%r9
	movq %r9,%rbp
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq %rcx,%r14
	movq %rsi,%r9
	movq %r9,0x8(%rbp)
	movq %r14,0x0(%rbp)
	movq $0x4D,%r13
	movq %r12,%rsp
	addq $0x8,%rsp
	movq %rsp,%rsi
	movq %r13,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq %r11,%r13
	movq %rbp,%r11
	movq %r11,0x8(%rsi)
	movq %r13,0x0(%rsi)
	movq $0x4D,%r14
	movq %r12,%r9
	addq $0x8,%r9
	movq %r9,%rsp
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq %r10,%r14
	movq %rsi,%r10
	movq %r10,0x8(%rsp)
	movq %r14,0x0(%rsp)
	movq $0x4D,%r13
	movq %r12,%r11
	addq $0x8,%r11
	movq %r11,%r9
	movq %r13,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq %r15,%r13
	movq %rsp,%r15
	movq %r15,0x8(%r9)
	movq %r13,0x0(%r9)
	movq $0x4D,%r14
	movq %r12,%r11
	addq $0x8,%r11
	movq %r11,%r10
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq %rdi,%r14
	movq %r9,%r11
	movq %r11,0x8(%r10)
	movq %r14,0x0(%r10)
	movq $0x4D,%r15
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%r9
	movq %r15,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq %r8,%r15
	movq %r10,%r13
	movq %r13,0x8(%r9)
	movq %r15,0x0(%r9)
	movq $0x4D,%r14
	movq %r12,%r11
	addq $0x8,%r11
	movq %r11,%r10
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (localObjptr+0x218)(%rip),%r14
	movq %r14,%r11
	movq %r9,%r14
	movq %r14,0x8(%r10)
	movq %r11,0x0(%r10)
	movq $0x4D,%r15
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%r9
	movq %r15,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (localObjptr+0x210)(%rip),%r15
	movq %r15,%r13
	movq %r10,%r15
	movq %r15,0x8(%r9)
	movq %r13,0x0(%r9)
	movq $0x4D,%r14
	movq %r12,%r11
	addq $0x8,%r11
	movq %r11,%r10
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (localObjptr+0x208)(%rip),%r14
	movq %r14,%r11
	movq %r9,%r14
	movq %r14,0x8(%r10)
	movq %r11,0x0(%r10)
	movq $0x4D,%r15
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%r9
	movq %r15,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (localObjptr+0x200)(%rip),%r15
	movq %r15,%r13
	movq %r10,%r15
	movq %r15,0x8(%r9)
	movq %r13,0x0(%r9)
	movq $0x4D,%r14
	movq %r12,%r11
	addq $0x8,%r11
	movq %r11,%r10
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (localObjptr+0x1F8)(%rip),%r14
	movq %r14,%r11
	movq %r9,%r14
	movq %r14,0x8(%r10)
	movq %r11,0x0(%r10)
	movq $0x4D,%r15
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%r9
	movq %r15,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (localObjptr+0x1F0)(%rip),%r15
	movq %r15,%r13
	movq %r10,%r15
	movq %r15,0x8(%r9)
	movq %r13,0x0(%r9)
	movq $0x4D,%r14
	movq %r12,%r11
	addq $0x8,%r11
	movq %r11,%r10
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (localObjptr+0x1E8)(%rip),%r14
	movq %r14,%r11
	movq %r9,%r14
	movq %r14,0x8(%r10)
	movq %r11,0x0(%r10)
	movq $0x4D,%r15
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%r9
	movq %r15,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (localObjptr+0x1E0)(%rip),%r15
	movq %r15,%r13
	movq %r10,%r15
	movq %r15,0x8(%r9)
	movq %r13,0x0(%r9)
	movq $0x4D,%r14
	movq %r12,%r11
	addq $0x8,%r11
	movq %r11,%r10
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (localObjptr+0x1D8)(%rip),%r14
	movq %r14,%r11
	movq %r9,%r14
	movq %r14,0x8(%r10)
	movq %r11,0x0(%r10)
	movq $0x4D,%r15
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%r9
	movq %r15,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (localObjptr+0x1D0)(%rip),%r15
	movq %r15,%r13
	movq %r10,%r15
	movq %r15,0x8(%r9)
	movq %r13,0x0(%r9)
	movq $0x4D,%r14
	movq %r12,%r11
	addq $0x8,%r11
	movq %r11,%r10
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (localObjptr+0x1C8)(%rip),%r14
	movq %r14,%r11
	movq %r9,%r14
	movq %r14,0x8(%r10)
	movq %r11,0x0(%r10)
	movq $0x4D,%r15
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%r9
	movq %r15,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (localObjptr+0x1C0)(%rip),%r15
	movq %r15,%r13
	movq %r10,%r15
	movq %r15,0x8(%r9)
	movq %r13,0x0(%r9)
	movq $0x4D,%r14
	movq %r12,%r11
	addq $0x8,%r11
	movq %r11,%r10
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (localObjptr+0x1B8)(%rip),%r14
	movq %r14,%r11
	movq %r9,%r14
	movq %r14,0x8(%r10)
	movq %r11,0x0(%r10)
	movq $0x4D,%r15
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%r9
	movq %r15,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (localObjptr+0x1B0)(%rip),%r15
	movq %r15,%r13
	movq %r10,%r15
	movq %r15,0x8(%r9)
	movq %r13,0x0(%r9)
	movq $0x4D,%r14
	movq %r12,%r11
	addq $0x8,%r11
	movq %r11,%r10
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (localObjptr+0x1A8)(%rip),%r14
	movq %r14,%r11
	movq %r9,%r14
	movq %r14,0x8(%r10)
	movq %r11,0x0(%r10)
	movq $0x4D,%r15
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%r9
	movq %r15,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (localObjptr+0x1A0)(%rip),%r15
	movq %r15,%r13
	movq %r10,%r15
	movq %r15,0x8(%r9)
	movq %r13,0x0(%r9)
	movq $0x4D,%r14
	movq %r12,%r11
	addq $0x8,%r11
	movq %r11,%r10
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (localObjptr+0x198)(%rip),%r14
	movq %r14,%r11
	movq %r9,%r14
	movq %r14,0x8(%r10)
	movq %r11,0x0(%r10)
	movq $0x4D,%r15
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%r9
	movq %r15,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (localObjptr+0x190)(%rip),%r15
	movq %r15,%r13
	movq %r10,%r15
	movq %r15,0x8(%r9)
	movq %r13,0x0(%r9)
	movq $0x4D,%r14
	movq %r12,%r11
	addq $0x8,%r11
	movq %r11,%r10
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (localObjptr+0x188)(%rip),%r14
	movq %r14,%r11
	movq %r9,%r14
	movq %r14,0x8(%r10)
	movq %r11,0x0(%r10)
	movq $0x4D,%r15
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%r9
	movq %r15,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (localObjptr+0x180)(%rip),%r15
	movq %r15,%r13
	movq %r10,%r15
	movq %r15,0x8(%r9)
	movq %r13,0x0(%r9)
	movq $0x4D,%r14
	movq %r12,%r11
	addq $0x8,%r11
	movq %r11,%r10
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (localObjptr+0x178)(%rip),%r14
	movq %r14,%r11
	movq %r9,%r14
	movq %r14,0x8(%r10)
	movq %r11,0x0(%r10)
	movq $0x4D,%r15
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%r9
	movq %r15,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (localObjptr+0x170)(%rip),%r15
	movq %r15,%r13
	movq %r10,%r15
	movq %r15,0x8(%r9)
	movq %r13,0x0(%r9)
	movq $0x4D,%r14
	movq %r12,%r11
	addq $0x8,%r11
	movq %r11,%r10
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (localObjptr+0x168)(%rip),%r14
	movq %r14,%r11
	movq %r9,%r14
	movq %r14,0x8(%r10)
	movq %r11,0x0(%r10)
	movq $0x4D,%r15
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%r9
	movq %r15,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (localObjptr+0x160)(%rip),%r15
	movq %r15,%r13
	movq %r10,%r15
	movq %r15,0x8(%r9)
	movq %r13,0x0(%r9)
	movq $0x4D,%r14
	movq %r12,%r11
	addq $0x8,%r11
	movq %r11,%r10
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (localObjptr+0x158)(%rip),%r14
	movq %r14,%r11
	movq %r9,%r14
	movq %r14,0x8(%r10)
	movq %r11,0x0(%r10)
	movq $0x4D,%r15
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%r9
	movq %r15,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (localObjptr+0x150)(%rip),%r15
	movq %r15,%r13
	movq %r10,%r15
	movq %r15,0x8(%r9)
	movq %r13,0x0(%r9)
	movq $0x4D,%r14
	movq %r12,%r11
	addq $0x8,%r11
	movq %r11,%r10
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (localObjptr+0x148)(%rip),%r14
	movq %r14,%r11
	movq %r9,%r14
	movq %r14,0x8(%r10)
	movq %r11,0x0(%r10)
	movq $0x4D,%r15
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%r9
	movq %r15,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (localObjptr+0x140)(%rip),%r15
	movq %r15,%r13
	movq %r10,%r15
	movq %r15,0x8(%r9)
	movq %r13,0x0(%r9)
	movq $0x4D,%r14
	movq %r12,%r11
	addq $0x8,%r11
	movq %r11,%r10
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (localObjptr+0x138)(%rip),%r14
	movq %r14,%r11
	movq %r9,%r14
	movq %r14,0x8(%r10)
	movq %r11,0x0(%r10)
	movq $0x4D,%r15
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%r9
	movq %r15,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (localObjptr+0x130)(%rip),%r15
	movq %r15,%r13
	movq %r10,%r15
	movq %r15,0x8(%r9)
	movq %r13,0x0(%r9)
	movq $0x4D,%r14
	movq %r12,%r11
	addq $0x8,%r11
	movq %r11,%r10
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (localObjptr+0x128)(%rip),%r14
	movq %r14,%r11
	movq %r9,%r14
	movq %r14,0x8(%r10)
	movq %r11,0x0(%r10)
	movq $0x4D,%r15
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%r9
	movq %r15,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (localObjptr+0x120)(%rip),%r15
	movq %r15,%r13
	movq %r10,%r15
	movq %r15,0x8(%r9)
	movq %r13,0x0(%r9)
	movq $0x4D,%r14
	movq %r12,%r11
	addq $0x8,%r11
	movq %r11,%r10
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (localObjptr+0x118)(%rip),%r14
	movq %r14,%r11
	movq %r9,%r14
	movq %r14,0x8(%r10)
	movq %r11,0x0(%r10)
	movq $0x4D,%r15
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%r9
	movq %r15,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (localObjptr+0x110)(%rip),%r15
	movq %r15,%r13
	movq %r10,%r15
	movq %r15,0x8(%r9)
	movq %r13,0x0(%r9)
	movq $0x4D,%r14
	movq %r12,%r11
	addq $0x8,%r11
	movq %r11,%r10
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (localObjptr+0x108)(%rip),%r14
	movq %r14,%r11
	movq %r9,%r14
	movq %r14,0x8(%r10)
	movq %r11,0x0(%r10)
	movq $0x4D,%r15
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%r9
	movq %r15,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (localObjptr+0x100)(%rip),%r15
	movq %r15,%r13
	movq %r10,%r15
	movq %r15,0x8(%r9)
	movq %r13,0x0(%r9)
	movq $0x4D,%r14
	movq %r12,%r11
	addq $0x8,%r11
	movq %r11,%r10
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (localObjptr+0xF8)(%rip),%r14
	movq %r14,%r11
	movq %r9,%r14
	movq %r14,0x8(%r10)
	movq %r11,0x0(%r10)
	movq $0x4D,%r15
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%r9
	movq %r15,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (localObjptr+0xF0)(%rip),%r15
	movq %r15,%r13
	movq %r10,%r15
	movq %r15,0x8(%r9)
	movq %r13,0x0(%r9)
	movq $0x4D,%r14
	movq %r12,%r11
	addq $0x8,%r11
	movq %r11,%r10
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (localObjptr+0xE8)(%rip),%r14
	movq %r14,%r11
	movq %r9,%r14
	movq %r14,0x8(%r10)
	movq %r11,0x0(%r10)
	movq $0x4D,%r15
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%r9
	movq %r15,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (localObjptr+0xE0)(%rip),%r15
	movq %r15,%r13
	movq %r10,%r15
	movq %r15,0x8(%r9)
	movq %r13,0x0(%r9)
	movq $0x4D,%r14
	movq %r12,%r11
	addq $0x8,%r11
	movq %r11,%r10
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (localObjptr+0xD8)(%rip),%r14
	movq %r14,%r11
	movq %r9,%r14
	movq %r14,0x8(%r10)
	movq %r11,0x0(%r10)
	movq $0x4D,%r15
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%r9
	movq %r15,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (localObjptr+0xD0)(%rip),%r15
	movq %r15,%r13
	movq %r10,%r15
	movq %r15,0x8(%r9)
	movq %r13,0x0(%r9)
	movq $0x4D,%r14
	movq %r12,%r11
	addq $0x8,%r11
	movq %r11,%r10
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (localObjptr+0xC8)(%rip),%r14
	movq %r14,%r11
	movq %r9,%r14
	movq %r14,0x8(%r10)
	movq %r11,0x0(%r10)
	movq $0x4D,%r15
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%r9
	movq %r15,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (localObjptr+0xC0)(%rip),%r15
	movq %r15,%r13
	movq %r10,%r15
	movq %r15,0x8(%r9)
	movq %r13,0x0(%r9)
	movq $0x4D,%r14
	movq %r12,%r11
	addq $0x8,%r11
	movq %r11,%r10
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (localObjptr+0xB8)(%rip),%r14
	movq %r14,%r11
	movq %r9,%r14
	movq %r14,0x8(%r10)
	movq %r11,0x0(%r10)
	movq $0x4D,%r15
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%r9
	movq %r15,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (localObjptr+0xB0)(%rip),%r15
	movq %r15,%r13
	movq %r10,%r15
	movq %r15,0x8(%r9)
	movq %r13,0x0(%r9)
	movq $0x4D,%r14
	movq %r12,%r11
	addq $0x8,%r11
	movq %r11,%r10
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (localObjptr+0xA8)(%rip),%r14
	movq %r14,%r11
	movq %r9,%r14
	movq %r14,0x8(%r10)
	movq %r11,0x0(%r10)
	movq $0x4D,%r15
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%r9
	movq %r15,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (localObjptr+0xA0)(%rip),%r15
	movq %r15,%r13
	movq %r10,%r15
	movq %r15,0x8(%r9)
	movq %r13,0x0(%r9)
	movq $0x4D,%r14
	movq %r12,%r11
	addq $0x8,%r11
	movq %r11,%r10
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (localObjptr+0x98)(%rip),%r14
	movq %r14,%r11
	movq %r9,%r14
	movq %r14,0x8(%r10)
	movq %r11,0x0(%r10)
	movq $0x4D,%r15
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%r9
	movq %r15,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (localObjptr+0x90)(%rip),%r15
	movq %r15,%r13
	movq %r10,%r15
	movq %r15,0x8(%r9)
	movq %r13,0x0(%r9)
	movq $0x4D,%r14
	movq %r12,%r11
	addq $0x8,%r11
	movq %r11,%r10
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (localObjptr+0x88)(%rip),%r14
	movq %r14,%r11
	movq %r9,%r14
	movq %r14,0x8(%r10)
	movq %r11,0x0(%r10)
	movq $0x4D,%r15
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%r9
	movq %r15,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (localObjptr+0x80)(%rip),%r15
	movq %r15,%r13
	movq %r10,%r15
	movq %r15,0x8(%r9)
	movq %r13,0x0(%r9)
	movq $0x4D,%r14
	movq %r12,%r11
	addq $0x8,%r11
	movq %r11,%r10
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (localObjptr+0x78)(%rip),%r14
	movq %r14,%r11
	movq %r9,%r14
	movq %r14,0x8(%r10)
	movq %r11,0x0(%r10)
	movq $0x4D,%r15
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%r9
	movq %r15,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (localObjptr+0x70)(%rip),%r15
	movq %r15,%r13
	movq %r10,%r15
	movq %r15,0x8(%r9)
	movq %r13,0x0(%r9)
	movq $0x4D,%r14
	movq %r12,%r11
	addq $0x8,%r11
	movq %r11,%r10
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (localObjptr+0x68)(%rip),%r14
	movq %r14,%r11
	movq %r9,%r14
	movq %r14,0x8(%r10)
	movq %r11,0x0(%r10)
	movq $0x4D,%r15
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%r9
	movq %r15,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (localObjptr+0x60)(%rip),%r15
	movq %r15,%r13
	movq %r10,%r15
	movq %r15,0x8(%r9)
	movq %r13,0x0(%r9)
	movq $0x4D,%r14
	movq %r12,%r11
	addq $0x8,%r11
	movq %r11,%r10
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (localObjptr+0x58)(%rip),%r14
	movq %r14,%r11
	movq %r9,%r14
	movq %r14,0x8(%r10)
	movq %r11,0x0(%r10)
	movq $0x4D,%r15
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%r9
	movq %r15,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (localObjptr+0x50)(%rip),%r15
	movq %r15,%r13
	movq %r10,%r15
	movq %r15,0x8(%r9)
	movq %r13,0x0(%r9)
	movq $0x4D,%r14
	movq %r12,%r11
	addq $0x8,%r11
	movq %r11,%r10
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (localObjptr+0x48)(%rip),%r14
	movq %r14,%r11
	movq %r9,%r14
	movq %r14,0x8(%r10)
	movq %r11,0x0(%r10)
	movq $0x4D,%r15
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%r9
	movq %r15,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (localObjptr+0x40)(%rip),%r15
	movq %r15,%r13
	movq %r10,%r15
	movq %r15,0x8(%r9)
	movq %r13,0x0(%r9)
	movq $0x4D,%r14
	movq %r12,%r11
	addq $0x8,%r11
	movq %r11,%r10
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (localObjptr+0x38)(%rip),%r14
	movq %r14,%r11
	movq %r9,%r14
	movq %r14,0x8(%r10)
	movq %r11,0x0(%r10)
	movq $0x4D,%r15
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%r9
	movq %r15,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (localObjptr+0x30)(%rip),%r15
	movq %r15,%r13
	movq %r10,%r15
	movq %r15,0x8(%r9)
	movq %r13,0x0(%r9)
	movq $0x4D,%r14
	movq %r12,%r11
	addq $0x8,%r11
	movq %r11,%r10
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (localObjptr+0x28)(%rip),%r14
	movq %r14,%r11
	movq %r9,%r14
	movq %r14,0x8(%r10)
	movq %r11,0x0(%r10)
	movq $0x4D,%r15
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%r9
	movq %r15,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (localObjptr+0x20)(%rip),%r15
	movq %r15,%r13
	movq %r10,%r15
	movq %r15,0x8(%r9)
	movq %r13,0x0(%r9)
	movq $0x4D,%r14
	movq %r12,%r11
	addq $0x8,%r11
	movq %r11,%r10
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (localObjptr+0x18)(%rip),%r14
	movq %r14,%r11
	movq %r9,%r14
	movq %r14,0x8(%r10)
	movq %r11,0x0(%r10)
	movq $0x4D,%r15
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%r9
	movq %r15,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (localObjptr+0x10)(%rip),%r15
	movq %r15,%r13
	movq %r10,%r15
	movq %r15,0x8(%r9)
	movq %r13,0x0(%r9)
	movq $0x57,%r14
	movq %r12,%r11
	addq $0x8,%r11
	movq %r11,%r10
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0x330)(%rip),%r14
	movq %r14,%r11
	movq $0x1,%r8
	movq %r8,0x8(%r10)
	movq %r11,0x0(%r10)
	movq $0x41,%rsp
	movq %r12,%rbp
	addq $0x8,%rbp
	movq %rbp,%rsi
	movq %rsp,0x0(%r12)
	movq %r12,%r12
	addq $0x10,%r12
	movq (globalObjptr+0x338)(%rip),%rsp
	movq %rsp,%rbp
	movq %rbp,0x0(%rsi)
	movq $0x41,%rdi
	movq %r12,%rdx
	addq $0x8,%rdx
	movq %rdx,%rcx
	movq %rdi,0x0(%r12)
	movq %r12,%r12
	addq $0x10,%r12
	movq (globalObjptr+0x340)(%rip),%rdi
	movq %rdi,%rdx
	movq %rdx,0x0(%rcx)
	movq $0x2B,%rbx
	movq %r12,%rax
	addq $0x8,%rax
	movq %rax,%r13
	movq %rbx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	xorl %ebx,%ebx
	movl $0x30,%eax
	movl $0x3930,%r15d
	movl %r15d,0x8(%r13)
	movl %eax,0x4(%r13)
	movl %ebx,0x0(%r13)
	movq $0x2B,%r14
	movq %r12,%r11
	addq $0x8,%r11
	movq %r11,%r8
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0xA,%r14d
	movl $0x61,%r11d
	movl $0x6661,%esp
	movl %esp,0x8(%r8)
	movl %r11d,0x4(%r8)
	movl %r14d,0x0(%r8)
	movq $0x2B,%rbp
	movq %r12,%rdi
	addq $0x8,%rdi
	movq %rdi,%rdx
	movq %rbp,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movl $0xA,%ebp
	movl $0x41,%edi
	movl $0x4641,%ebx
	movl %ebx,0x8(%rdx)
	movl %ebp,0x0(%rdx)
	movl %edi,0x4(%rdx)
	movq $0x49,%rax
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,%r14
	movq %rax,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq %rdx,%r15
	movq $0x1,%rbp
	movq %rbp,0x8(%r14)
	movq %r15,0x0(%r14)
	movq $0x49,%rdi
	movq %r12,%rdx
	addq $0x8,%rdx
	movq %rdx,%rbx
	movq %rdi,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq %r8,%rdi
	movq %r14,%r11
	movq %r11,0x8(%rbx)
	movq %rdi,0x0(%rbx)
	movq $0x3F,%r15
	movq %r12,%r14
	addq $0x8,%r14
	movq %r14,%r8
	movq %r15,0x0(%r12)
	movq %r12,%r12
	addq $0x10,%r12
	movq (globalObjptr+0x348)(%rip),%r15
	movq %r15,%r14
	movq %r14,0x0(%r8)
	movq $0x41,%rsp
	movq %r12,%rbp
	addq $0x8,%rbp
	movq %rbp,%rdx
	movq %rsp,0x0(%r12)
	movq %r12,%r12
	addq $0x10,%r12
	movq (globalObjptr+0x350)(%rip),%rsp
	movq %rsp,%rbp
	movq %rbp,0x0(%rdx)
	movq $0x15,%rax
	movq %r12,%rdi
	addq $0x8,%rdi
	movq %rdi,%r11
	movq %rax,0x0(%r12)
	movq %r12,%r12
	addq $0x10,%r12
	xorl %edi,%edi
	movl %edi,0x0(%r11)
	movq $0x41,%rax
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,%r14
	movq %rax,0x0(%r12)
	movq %r12,%r12
	addq $0x10,%r12
	movq (globalObjptr+0x358)(%rip),%r15
	movq %r15,%rax
	movq %rax,0x0(%r14)
	movq $0x41,%rsp
	movq %r12,%rbp
	addq $0x8,%rbp
	movq %rbp,%rdi
	movq %rsp,0x0(%r12)
	movq %r12,%r12
	addq $0x10,%r12
	movq (globalObjptr+0x360)(%rip),%rsp
	movq %rsp,%rbp
	movq %rbp,0x0(%rdi)
	movq $0x15,%r15
	movq %r12,%rax
	addq $0x8,%rax
	movq %rax,%rsp
	movq %r15,0x0(%r12)
	movq %r12,%r12
	addq $0x10,%r12
	xorl %r15d,%r15d
	movl %r15d,0x0(%rsp)
	movq $0x57,%rax
	movq %r12,%rbp
	addq $0x8,%rbp
	movq %rbp,%r15
	movq %rax,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0x368)(%rip),%rbp
	movq %rbp,%rax
	movq $0x1,%rbp
	movq %rbp,0x8(%r15)
	movq %rax,0x0(%r15)
	movq $0x57,%rax
	movq %r12,%rbp
	addq $0x8,%rbp
	movq %r9,(globalObjptr+0x18)(%rip)
	movq %rbp,%r9
	movq %rax,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0x370)(%rip),%rbp
	movq %rbp,%rax
	movq %r15,%rbp
	movq %rbp,0x8(%r9)
	movq %rax,0x0(%r9)
	movq $0x41,%r15
	movq %r12,%rax
	addq $0x8,%rax
	movq %rax,%rbp
	movq %r15,0x0(%r12)
	movq %r12,%r12
	addq $0x10,%r12
	movq (globalObjptr+0x378)(%rip),%r15
	movq %r15,%rax
	movq %rax,0x0(%rbp)
	movq $0x57,%rbp
	movq %r12,%rax
	addq $0x8,%rax
	movq %rax,%r15
	movq %rbp,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0x380)(%rip),%rbp
	movq %rbp,%rax
	movq $0x1,%rbp
	movq %rbp,0x8(%r15)
	movq %rax,0x0(%r15)
	movq $0x55,%rax
	movq %r12,%rbp
	addq $0x8,%rbp
	movq %r10,(globalObjptr+0x20)(%rip)
	movq %rbp,%r10
	movq %rax,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movsd (globalReal64+0x0)(%rip),%xmm15
	movsd %xmm15,%xmm14
	movq $0x1,%rbp
	movsd %xmm14,0x0(%r10)
	movq %rbp,0x8(%r10)
	movq $0x55,%rax
	movq %r12,%rbp
	addq $0x8,%rbp
	movq %rsi,(globalObjptr+0x28)(%rip)
	movq %rbp,%rsi
	movq %rax,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movsd (globalReal64+0x8)(%rip),%xmm13
	movsd %xmm13,%xmm12
	movq %r10,%rbp
	movsd %xmm12,0x0(%rsi)
	movq %rbp,0x8(%rsi)
	movq $0x55,%r10
	movq %r12,%rax
	addq $0x8,%rax
	movq %rax,%rbp
	movq %r10,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movsd (globalReal64+0x10)(%rip),%xmm14
	movsd %xmm14,%xmm11
	movq %rsi,%r10
	movsd %xmm11,0x0(%rbp)
	movq %r10,0x8(%rbp)
	movq $0x55,%rsi
	movq %r12,%rax
	addq $0x8,%rax
	movq %rax,%r10
	movq %rsi,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movsd (globalReal64+0x18)(%rip),%xmm12
	movsd %xmm12,%xmm10
	movq %rbp,%rsi
	movsd %xmm10,0x0(%r10)
	movq %rsi,0x8(%r10)
	movq $0x55,%rbp
	movq %r12,%rax
	addq $0x8,%rax
	movq %rax,%rsi
	movq %rbp,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movsd (globalReal64+0x20)(%rip),%xmm11
	movsd %xmm11,%xmm9
	movq %r10,%rbp
	movsd %xmm9,0x0(%rsi)
	movq %rbp,0x8(%rsi)
	movq $0x55,%rax
	movq %r12,%rbp
	addq $0x8,%rbp
	movq %rcx,(globalObjptr+0x30)(%rip)
	movq %rbp,%rcx
	movq %rax,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movsd %xmm11,%xmm8
	movq $0x1,%rbp
	movsd %xmm8,0x0(%rcx)
	movq %rbp,0x8(%rcx)
	movq $0x55,%rax
	movq %r12,%rbp
	addq $0x8,%rbp
	movq %r13,(globalObjptr+0x38)(%rip)
	movq %rbp,%r13
	movq %rax,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movsd %xmm12,%xmm7
	movq %rcx,%rbp
	movsd %xmm7,0x0(%r13)
	movq %rbp,0x8(%r13)
	movq $0x55,%rcx
	movq %r12,%rax
	addq $0x8,%rax
	movq %rax,%rbp
	movq %rcx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movsd %xmm14,%xmm8
	movq %r13,%rcx
	movsd %xmm8,0x0(%rbp)
	movq %rcx,0x8(%rbp)
	movq $0x55,%r13
	movq %r12,%rax
	addq $0x8,%rax
	movq %rax,%rcx
	movq %r13,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movsd %xmm13,%xmm7
	movq %rbp,%r13
	movsd %xmm7,0x0(%rcx)
	movq %r13,0x8(%rcx)
	movq $0x55,%rbp
	movq %r12,%rax
	addq $0x8,%rax
	movq %rax,%r13
	movq %rbp,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movsd %xmm15,%xmm8
	movq %rcx,%rbp
	movq (c_stackP+0x0)(%rip),%rax
	xchgq %rax,%rsp
	movq %rbx,(globalObjptr+0x40)(%rip)
	movq $0x2D,%rbx
	xchgq %rbx,%rcx
	movq %r8,(globalObjptr+0x48)(%rip)
	xorq %r8,%r8
	xchgq %r8,%rdx
	movq %r8,(globalObjptr+0x50)(%rip)
	xorq %r8,%r8
	xchgq %r8,%rsi
	movq %r11,(globalObjptr+0x58)(%rip)
	leaq gcState(%rip),%r11
	movq %r14,(globalObjptr+0x60)(%rip)
	movq %r11,%r14
	xchgq %r14,%rdi
	xorq %r11,%r11
	xchgq %r11,%rax
	movq %r14,(globalObjptr+0x68)(%rip)
	movq (gcState+0x10)(%rip),%r14
	addq $0x8,%r14
	movq %r11,(globalObjptr+0x70)(%rip)
	leaq (L_3+0x0)(%rip),%r11
	movq %r11,0xFFFFFFFFFFFFFFF8(%r14)
	movsd %xmm8,0x0(%r13)
	movq %r8,(globalObjptr+0x90)(%rip)
	movq %rbx,(globalObjptr+0x98)(%rip)
	movq %rbp,0x8(%r13)
	movq %r13,(globalObjptr+0xA0)(%rip)
	movq %r10,(globalObjptr+0x88)(%rip)
	movq %r9,(globalObjptr+0x78)(%rip)
	movq %r15,(globalObjptr+0x80)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	movq %r14,(gcState+0x10)(%rip)
	xchgq %r11,%r15
	xchgq %r8,%rbx
	xchgq %r10,%rbx
	xchgq %r9,%rbx
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r15
	movq %r15,%r12
	movq (gcState+0x10)(%rip),%r15
	movq %r15,%rbp
	jmp L_3
.p2align 0x4
.long 0x0
L_3:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq %rax,%r15
	movq (c_stackP+0x0)(%rip),%r14
	movq %r14,%rsp
	movq $0x17,%r14
	movq %r14,%rcx
	xorq %r14,%r14
	movq %r14,%rdx
	xorq %r14,%r14
	movq %r14,%rsi
	leaq gcState(%rip),%r14
	movq %r14,%r13
	movq %r13,%rdi
	xorq %r14,%r14
	xchgq %r14,%rax
	addq $0x8,%rbp
	leaq (L_4+0x0)(%rip),%r13
	movq %r13,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %r15,(globalObjptr+0xA8)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	movq %rbp,(gcState+0x10)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r15
	movq %r15,%r12
	movq (gcState+0x10)(%rip),%r15
	movq %r15,%rbp
	jmp L_4
.p2align 0x4
.long 0x0
L_4:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq %rax,%r15
	addq $0x8,%rbp
	leaq (L_5+0x0)(%rip),%r14
	movq %r14,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %r15,(globalObjptr+0xB0)(%rip)
	jmp main_0
.p2align 0x4
L_1319:
L_6:
	movq (c_stackP+0x0)(%rip),%r15
	movq %r15,%rsp
	movl $0x0,%r15d
	movl %r15d,%r14d
	movq %r14,%rdx
	movq $0x1170,%r15
	movq %r15,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%r14
	movq %r14,%rdi
	xorq %r15,%r15
	movq %r15,%rax
	addq $0x8,%rbp
	leaq (L_7+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r15
	movq %r15,%r12
	movq (gcState+0x10)(%rip),%r15
	movq %r15,%rbp
	jmp L_7
.p2align 0x4
.long 0x0
L_7:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	jmp L_2
.p2align 0x4
.long 0x1
L_5:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq (c_stackP+0x0)(%rip),%r15
	movq %r15,%rsp
	movq (globalObjptr+0x388)(%rip),%r15
	movq %r15,%r14
	movq %r14,%rdi
	xorq %r14,%r14
	movq %r14,%rax
	call MLton_bug
.text
.p2align 0x4
.globl main_0
.hidden main_0
main_0:
L_8:
	movq (gcState+0x20)(%rip),%r15
	movq %r15,0x8(%rbp)
	cmpq %rbp,(gcState+0x18)(%rip)
	jb L_401
L_9:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_1438
L_10:
	movq $0x19,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0x10(%rbp)
	addq $0x10,%r12
	movq $0x0,0x0(%r15)
	movq $0x19,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0x18(%rbp)
	addq $0x10,%r12
	movq $0x0,0x0(%r15)
	movq $0x15,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0x20(%rbp)
	addq $0x10,%r12
	movl $0x0,0x0(%r15)
	movq (globalObjptr+0x0)(%rip),%r15
	movq %r15,0x28(%rbp)
	movq $0x1,0x30(%rbp)
	movq $0x4000000000000000,%r15
	movq %r15,0x38(%rbp)
.p2align 0x4,,0x7
loop_0:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_1437
.p2align 0x4,,0x7
L_11:
	movq 0x38(%rbp),%r15
	testq %r15,%r15
	jz L_1330
L_12:
	movq 0x30(%rbp),%r14
	movq %r14,%r13
	incq %r13
	jo L_1321
L_31:
	movq $0x11,0x0(%r12)
	movq %r12,%r11
	addq $0x8,%r11
	addq $0x18,%r12
	movq %r15,0x0(%r11)
	movq %r14,0x8(%r11)
	movq %r13,0x30(%rbp)
	movq $0x5D,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r11,0x0(%r15)
	addq $0x18,%r12
	movq 0x28(%rbp),%r14
	movq %r14,0x8(%r15)
	movq %r15,0x28(%rbp)
	movq $0x0,0x38(%rbp)
	jmp loop_0
.p2align 0x4
L_1321:
L_13:
	movq $0x1,%r13
	xchgq %r13,%r15
L_14:
	movq (c_stackP+0x0)(%rip),%rsp
	movq (globalObjptr+0x390)(%rip),%rdi
	xorq %rax,%rax
	call Stdio_print
L_15:
	cmpq $0x1,%r15
	je L_1329
	cmpq $0x2,%r15
	je L_1328
	cmpq $0x3,%r15
	je L_1327
	cmpq $0x5,%r15
	je L_1326
	cmpq $0x6,%r15
	je L_1325
L_16:
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r14
	shrq $0x1,%r14
	cmpq $0x20,%r14
	je L_1324
	cmpq $0x21,%r14
	je L_1323
	cmpq $0x22,%r14
	je L_1322
L_17:
	movq 0x0(%r15),%r14
	movq (globalObjptr+0x398)(%rip),%rdi
	xorq %rax,%rax
	call Stdio_print
L_18:
	movq %r14,%rdi
	xorq %rax,%rax
	call Stdio_print
L_19:
print_0:
	movq (c_stackP+0x0)(%rip),%rsp
	movq (globalObjptr+0x380)(%rip),%rdi
	xorq %rax,%rax
	call Stdio_print
L_20:
	movq (globalObjptr+0x3A0)(%rip),%rdi
	xorq %rax,%rax
	call MLton_bug
L_21:
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_1322:
L_25:
	movq (globalObjptr+0x3B8)(%rip),%r15
print_1:
	movq (c_stackP+0x0)(%rip),%rsp
	movq %r15,%rdi
	xorq %rax,%rax
	call Stdio_print
L_23:
	jmp print_0
.p2align 0x4
L_1323:
L_24:
	movq (globalObjptr+0x3B0)(%rip),%r15
	jmp print_1
.p2align 0x4
L_1324:
L_22:
	movq (globalObjptr+0x3A8)(%rip),%r15
	jmp print_1
.p2align 0x4
L_1325:
L_30:
	movq (globalObjptr+0x3E0)(%rip),%r15
	jmp print_1
.p2align 0x4
L_1326:
L_29:
	movq (globalObjptr+0x3D8)(%rip),%r15
	jmp print_1
.p2align 0x4
L_1327:
L_28:
	movq (globalObjptr+0x3D0)(%rip),%r15
	jmp print_1
.p2align 0x4
L_1328:
L_27:
	movq (globalObjptr+0x3C8)(%rip),%r15
	jmp print_1
.p2align 0x4
L_1329:
L_26:
	movq (globalObjptr+0x3C0)(%rip),%r15
	jmp print_1
.p2align 0x4
L_1330:
L_32:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_33
L_397:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r14d
	movl %r14d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r14
	movq %r14,%rdi
	xorq %rax,%rax
	addq $0x40,%rbp
	leaq (L_398+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_398
.p2align 0x4
.long 0x23
L_398:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
L_33:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x2D,%rcx
	movq 0x30(%rbp),%rdx
	movq $0x10,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_34+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_34
.p2align 0x4
.long 0x2
L_34:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movq 0x28(%rbp),%r11
	cmpq $0x1,%r11
	je L_40
L_35:
	movq 0x8(%r11),%r13
	movq 0x0(%r11),%r14
	movq %rax,%r15
.p2align 0x4,,0x7
L_36:
	movq 0x8(%r14),%r11
	movq 0x0(%r14),%r10
	movq %r10,0x0(%r15,%r11,8)
	cmpq $0x1,%r13
	je L_1331
L_37:
	movq 0x0(%r13),%r14
	movq 0x8(%r13),%r13
	jmp L_36
.p2align 0x4
L_1331:
L_38:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_40
L_394:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x30,%rbp
	leaq (L_395+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_395
.p2align 0x4
.long 0x22
L_395:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
L_40:
	movq $0xF,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r14,0x28(%rbp)
	addq $0x10,%r12
	movq $0x1,0x0(%r14)
	xorq %r15,%r15
.p2align 0x4,,0x7
loop_1:
	cmpq $0x100,%r15
	jnl L_1332
L_393:
	incq %r15
	jmp loop_1
.p2align 0x4
L_1332:
L_41:
	xorq %r15,%r15
.p2align 0x4,,0x7
loop_2:
	cmpq $0x100,%r15
	jnl L_1333
L_392:
	incq %r15
	jmp loop_2
.p2align 0x4
L_1333:
L_42:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x2F,%rcx
	movq $0x100,%rdx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_43+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_43
.p2align 0x4
.long 0x2
L_43:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movq %rax,0x30(%rbp)
	xorq %r15,%r15
.p2align 0x4,,0x7
loop_3:
	cmpq $0x100,%r15
	jnl L_1336
L_385:
	movb %r15b,%r13b
	cmpb $0x30,%r13b
	jb L_390
L_386:
	cmpb $0x39,%r13b
	ja L_1334
L_387:
	movzbl %r13b,%r11d
	subl $0x30,%r11d
	movl %r11d,%r14d
	shlq $0x1,%r14
	orq $0x1,%r14
L_388:
	movq 0x30(%rbp),%r13
	movq %r14,0x0(%r13,%r15,8)
	incq %r15
	jmp loop_3
.p2align 0x4
L_1334:
L_390:
	xorq %r14,%r14
	jmp L_388
.p2align 0x4
L_1336:
L_44:
	xorq %r15,%r15
.p2align 0x4,,0x7
loop_4:
	cmpq $0x100,%r15
	jnl L_1340
L_375:
	movb %r15b,%dl
	movq (globalObjptr+0x40)(%rip),%r13
	movq (globalObjptr+0x38)(%rip),%r14
.p2align 0x4,,0x7
L_376:
	movb 0x9(%r14),%r11b
	cmpb 0x8(%r14),%dl
	jb L_1339
L_377:
	cmpb %dl,%r11b
	jnb L_1338
	movq %r15,(localWord64+0x0)(%rip)
L_381:
	cmpq $0x1,%r13
	je L_1337
L_382:
	movq 0x0(%r13),%r14
	movq 0x8(%r13),%r13
	movq (localWord64+0x0)(%rip),%r15
	jmp L_376
.p2align 0x4
L_1337:
L_379:
	movq (localWord64+0x0)(%rip),%r15
	incq %r15
	jmp loop_4
.p2align 0x4
L_1338:
	movq %r15,(localWord64+0x0)(%rip)
	jmp L_379
.p2align 0x4
L_1339:
	movq %r15,(localWord64+0x0)(%rip)
	jmp L_381
.p2align 0x4
L_1340:
L_45:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x31,%rcx
	movq $0x100,%rdx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x40,%rbp
	leaq (L_46+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_46
.p2align 0x4
.long 0x3
L_46:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	movq %rax,0x38(%rbp)
	xorq %r15,%r15
.p2align 0x4,,0x7
loop_5:
	cmpq $0x100,%r15
	jnl L_1346
L_362:
	movb %r15b,%r14b
	cmpb $0x20,%r14b
	je L_370
L_363:
	cmpb $0x9,%r14b
	je L_370
L_364:
	cmpb $0xD,%r14b
	je L_370
L_365:
	cmpb $0xA,%r14b
	je L_370
L_366:
	cmpb $0xB,%r14b
	je L_1341
L_367:
	cmpb $0xC,%r14b
	sete %cl
	movzbl %cl,%ecx
L_368:
	movq 0x38(%rbp),%r14
	movl %ecx,0x0(%r14,%r15,4)
	incq %r15
	jmp loop_5
.p2align 0x4
L_1341:
L_370:
	movl $0x1,%ecx
	jmp L_368
.p2align 0x4
L_1346:
L_47:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x17,%rcx
	movq $0x21,%rdx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_48+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_48
.p2align 0x4
.long 0x4
L_48:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movq %rax,0x40(%rbp)
	xorq %r15,%r15
.p2align 0x4,,0x7
loop_6:
	cmpq $0x21,%r15
	jnl L_1347
L_361:
	movq 0x40(%rbp),%r14
	movb $0x0,0x0(%r14,%r15,1)
	incq %r15
	jmp loop_6
.p2align 0x4
L_1347:
L_49:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_50
L_359:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x50,%rbp
	leaq (L_360+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_360
.p2align 0x4
.long 0x21
L_360:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
L_50:
	movq $0x1B,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movl $0x0,0x0(%r15)
	movq $0x33,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	addq $0x18,%r12
	movq %r12,(gcState+0x0)(%rip)
	movq 0x40(%rbp),%r15
	movq %r15,0x8(%r14)
	movq %r14,0x48(%rbp)
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x17,%rcx
	movq $0x41,%rdx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x58,%rbp
	leaq (L_51+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_51
.p2align 0x4
.long 0x5
L_51:
	addq $0xFFFFFFFFFFFFFFA8,%rbp
	xorq %r15,%r15
	movq %rax,%r14
.p2align 0x4,,0x7
loop_7:
	cmpq $0x41,%r15
	jnl L_1348
L_358:
	movb $0x0,0x0(%r14,%r15,1)
	incq %r15
	jmp loop_7
.p2align 0x4
L_1348:
L_52:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x17,%rcx
	movq $0x1,%rdx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x58,%rbp
	leaq (L_53+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_53
.p2align 0x4
.long 0x5
L_53:
	addq $0xFFFFFFFFFFFFFFA8,%rbp
	xorq %r15,%r15
	movq %rax,%r14
.p2align 0x4,,0x7
loop_8:
	cmpq $0x1,%r15
	jnl L_1349
L_357:
	movb $0x0,0x0(%r14,%r15,1)
	incq %r15
	jmp loop_8
.p2align 0x4
L_1349:
L_54:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_55
L_355:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x58,%rbp
	leaq (L_356+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_356
.p2align 0x4
.long 0x5
L_356:
	addq $0xFFFFFFFFFFFFFFA8,%rbp
L_55:
	movq 0x28(%rbp),%r15
	movq 0x0(%r15),%r14
	movq $0x47,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r14,0x8(%r13)
	addq $0x18,%r12
	movq $0x1,0x0(%r13)
	movq %r15,%r14
	shrq $0x8,%r14
	movq (gcState+0x3D0)(%rip),%r11
	movb $0x1,0x0(%r11,%r14,1)
	movq %r13,0x0(%r15)
	movq $0x35,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r14,0x40(%rbp)
	addq $0x10,%r12
	movq $0x1,0x0(%r14)
	movq 0x0(%r15),%r13
	movq $0x47,0x0(%r12)
	movq %r12,%r10
	addq $0x8,%r10
	movq %r13,0x8(%r10)
	addq $0x18,%r12
	movq $0x2,0x0(%r10)
	movq %r15,%r13
	shrq $0x8,%r13
	movb $0x1,0x0(%r11,%r13,1)
	movq %r10,0x0(%r15)
	movq $0x1B,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,0x50(%rbp)
	addq $0x10,%r12
	movl $0x0,0x0(%r13)
	movq 0x0(%r15),%r13
	movq $0x47,0x0(%r12)
	movq %r12,%r10
	addq $0x8,%r10
	movq %r13,0x8(%r10)
	addq $0x18,%r12
	movq %r15,0x0(%r10)
	movq %r15,%r13
	shrq $0x8,%r13
	movb $0x1,0x0(%r11,%r13,1)
	movq %r10,0x0(%r15)
	movq $0x29,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0x58(%rbp)
	addq $0x10,%r12
	movq $0x1,0x0(%r15)
	movq 0x0(%r14),%r13
	movq $0x4B,0x0(%r12)
	movq %r12,%r10
	addq $0x8,%r10
	movq %r13,0x8(%r10)
	addq $0x18,%r12
	movq %r15,0x0(%r10)
	movq %r14,%r15
	shrq $0x8,%r15
	movb $0x1,0x0(%r11,%r15,1)
	movq %r10,0x0(%r14)
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x1,%r15d
	movl %r15d,%edi
	xorq %rax,%rax
	call Posix_ProcEnv_isatty
L_56:
	testl %eax,%eax
	jz L_1431
L_57:
	movb $0x1,0x60(%rbp)
L_58:
	movq $0x1B,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0x68(%rbp)
	addq $0x10,%r12
	movl $0x0,0x0(%r15)
	incl (gcState+0x44)(%rip)
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x1,%r15d
	movl %r15d,%edi
	xorq %rax,%rax
	call Posix_FileSys_Stat_fstat
L_59:
	movl %eax,%r15d
	movl %eax,(cReturnTemp+0x0)(%rip)
	cmpl $0xFFFFFFFF,%r15d
	je L_1422
L_60:
	xorq %rax,%rax
	call Posix_FileSys_Stat_getDev
L_61:
	xorq %r15,%r15
	xchgq %r15,%rax
	call Posix_FileSys_Stat_getINo
L_62:
	xorq %r15,%r15
	xchgq %r15,%rax
	call Posix_FileSys_Stat_getMode
L_63:
	movl %eax,0x64(%rbp)
	movl %eax,(cReturnTemp+0x0)(%rip)
	xorq %rax,%rax
	call Posix_FileSys_Stat_getNLink
L_64:
	movq %rax,%r15
	movq %rax,(cReturnTemp+0x0)(%rip)
	movl %r15d,%r14d
	movl %r14d,%r13d
	cmpq %r15,%r13
	jne L_66
L_69:
	cmpl $0x0,%r14d
	jl L_66
L_70:
	xorq %rax,%rax
	call Posix_FileSys_Stat_getUId
L_71:
	xorq %r15,%r15
	movl %eax,(cReturnTemp+0x0)(%rip)
	movq %r15,%rax
	call Posix_FileSys_Stat_getGId
L_72:
	xorq %r15,%r15
	movl %eax,(cReturnTemp+0x0)(%rip)
	movq %r15,%rax
	call Posix_FileSys_Stat_getSize
L_73:
	xorq %r15,%r15
	xchgq %r15,%rax
	call Posix_FileSys_Stat_getATime
L_74:
	movq %rax,%r15
	sarq $0x3E,%r15
	jz L_1419
L_75:
	cmpq $0xFFFFFFFFFFFFFFFF,%r15
	je L_1418
L_76:
	cmpq $0x0,%rax
	jl L_1417
L_77:
	movq %rax,0x80(%rbp)
	movq (globalObjptr+0x0)(%rip),%r15
	movq %r15,0x70(%rbp)
	movq $0x1,0x78(%rbp)
.p2align 0x4,,0x7
loop_9:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_1416
.p2align 0x4,,0x7
L_78:
	movq 0x80(%rbp),%r15
	testq %r15,%r15
	jz L_1352
L_79:
	movq 0x78(%rbp),%r14
	movq %r14,%r13
	incq %r13
	jo L_1350
L_80:
	movq $0x11,0x0(%r12)
	movq %r12,%r11
	addq $0x8,%r11
	addq $0x18,%r12
	movq %r15,0x0(%r11)
	movq %r14,0x8(%r11)
	movq %r13,0x78(%rbp)
	movq $0x5D,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r11,0x0(%r15)
	addq $0x18,%r12
	movq 0x70(%rbp),%r14
	movq %r14,0x8(%r15)
	movq %r15,0x70(%rbp)
	movq $0x0,0x80(%rbp)
	jmp loop_9
.p2align 0x4
L_1350:
L_66:
	movl (gcState+0x44)(%rip),%r14d
	testl %r14d,%r14d
	jz L_1351
L_67:
	decl %r14d
	movl %r14d,(gcState+0x44)(%rip)
	movq $0x1,%r15
	jmp L_14
.p2align 0x4
L_1351:
L_68:
	movq (globalObjptr+0x48)(%rip),%r15
	jmp L_14
.p2align 0x4
L_1352:
L_81:
	movq 0x78(%rbp),%rdx
	testq %rdx,%rdx
	jz L_1414
L_82:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x2D,%rcx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r14
	movq %r14,%rdi
	xorq %rax,%rax
	addq $0x80,%rbp
	leaq (L_83+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83
.p2align 0x4
.long 0x6
L_83:
	addq $0xFFFFFFFFFFFFFF80,%rbp
	movq 0x70(%rbp),%r11
	cmpq $0x1,%r11
	je L_1413
L_84:
	movq 0x8(%r11),%r14
	movq 0x0(%r11),%r15
	movq %rax,%r13
.p2align 0x4,,0x7
L_85:
	movq 0x8(%r15),%r11
	movq 0x0(%r15),%r10
	movq %r10,0x0(%r13,%r11,8)
	cmpq $0x1,%r14
	je L_1353
L_86:
	movq 0x0(%r14),%r15
	movq 0x8(%r14),%r14
	jmp L_85
.p2align 0x4
L_1353:
L_87:
	movq %r13,%r15
L_88:
	movq $0xD,0xFFFFFFFFFFFFFFF8(%r15)
L_89:
	movq %r15,%r14
	andq $0x77359401,%r14
	andq $0x1,%r14
	jz numLimbs_0
L_90:
	movq %r15,%r14
	sarq $0x1,%r14
	imulq $0x3B9ACA00,%r14
	jo numLimbs_0
L_316:
	movq %r14,%r13
	shlq $0x1,%r13
	orq $0x1,%r13
	xorq %r13,%r14
	cmpq $0x0,%r14
	jnl L_94
numLimbs_0:
	movq %r15,%r14
	andq $0x1,%r14
	jnz L_1411
L_314:
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	decq %r14
	jo L_66
L_315:
	movq %r14,%r15
L_92:
	incq %r15
	jo L_66
L_94:
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %rax,%rax
	call Posix_FileSys_Stat_getMTime
L_95:
	movq %rax,%r15
	sarq $0x3E,%r15
	jz L_1408
L_96:
	cmpq $0xFFFFFFFFFFFFFFFF,%r15
	je L_1407
L_97:
	cmpq $0x0,%rax
	jl L_1406
L_98:
	movq %rax,0x80(%rbp)
	movq (globalObjptr+0x0)(%rip),%r15
	movq %r15,0x70(%rbp)
	movq $0x1,0x78(%rbp)
.p2align 0x4,,0x7
loop_10:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_1405
.p2align 0x4,,0x7
L_99:
	movq 0x80(%rbp),%r15
	testq %r15,%r15
	jz L_1355
L_100:
	movq 0x78(%rbp),%r14
	movq %r14,%r13
	incq %r13
	jo L_66
L_101:
	movq $0x11,0x0(%r12)
	movq %r12,%r11
	addq $0x8,%r11
	addq $0x18,%r12
	movq %r15,0x0(%r11)
	movq %r14,0x8(%r11)
	movq %r13,0x78(%rbp)
	movq $0x5D,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r11,0x0(%r15)
	addq $0x18,%r12
	movq 0x70(%rbp),%r14
	movq %r14,0x8(%r15)
	movq %r15,0x70(%rbp)
	movq $0x0,0x80(%rbp)
	jmp loop_10
.p2align 0x4
L_1355:
L_102:
	movq 0x78(%rbp),%rdx
	testq %rdx,%rdx
	jz L_1403
L_103:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x2D,%rcx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r14
	movq %r14,%rdi
	xorq %rax,%rax
	addq $0x80,%rbp
	leaq (L_104+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_104
.p2align 0x4
.long 0x6
L_104:
	addq $0xFFFFFFFFFFFFFF80,%rbp
	movq 0x70(%rbp),%r11
	cmpq $0x1,%r11
	je L_1402
L_105:
	movq 0x8(%r11),%r14
	movq 0x0(%r11),%r15
	movq %rax,%r13
.p2align 0x4,,0x7
L_106:
	movq 0x8(%r15),%r11
	movq 0x0(%r15),%r10
	movq %r10,0x0(%r13,%r11,8)
	cmpq $0x1,%r14
	je L_1356
L_107:
	movq 0x0(%r14),%r15
	movq 0x8(%r14),%r14
	jmp L_106
.p2align 0x4
L_1356:
L_108:
	movq %r13,%r15
L_109:
	movq $0xD,0xFFFFFFFFFFFFFFF8(%r15)
L_110:
	movq %r15,%r14
	andq $0x77359401,%r14
	andq $0x1,%r14
	jz numLimbs_1
L_111:
	movq %r15,%r14
	sarq $0x1,%r14
	imulq $0x3B9ACA00,%r14
	jo numLimbs_1
L_300:
	movq %r14,%r13
	shlq $0x1,%r13
	orq $0x1,%r13
	xorq %r13,%r14
	cmpq $0x0,%r14
	jnl L_115
numLimbs_1:
	movq %r15,%r14
	andq $0x1,%r14
	jnz L_1400
L_298:
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	decq %r14
	jo L_66
L_299:
	movq %r14,%r15
L_113:
	incq %r15
	jo L_66
L_115:
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %rax,%rax
	call Posix_FileSys_Stat_getCTime
L_116:
	movq %rax,%r15
	sarq $0x3E,%r15
	jz L_1397
L_117:
	cmpq $0xFFFFFFFFFFFFFFFF,%r15
	je L_1396
L_118:
	cmpq $0x0,%rax
	jl L_1395
L_119:
	movq %rax,0x80(%rbp)
	movq (globalObjptr+0x0)(%rip),%r15
	movq %r15,0x70(%rbp)
	movq $0x1,0x78(%rbp)
.p2align 0x4,,0x7
loop_11:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_1394
.p2align 0x4,,0x7
L_120:
	movq 0x80(%rbp),%r15
	testq %r15,%r15
	jz L_1358
L_121:
	movq 0x78(%rbp),%r14
	movq %r14,%r13
	incq %r13
	jo L_66
L_122:
	movq $0x11,0x0(%r12)
	movq %r12,%r11
	addq $0x8,%r11
	addq $0x18,%r12
	movq %r15,0x0(%r11)
	movq %r14,0x8(%r11)
	movq %r13,0x78(%rbp)
	movq $0x5D,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r11,0x0(%r15)
	addq $0x18,%r12
	movq 0x70(%rbp),%r14
	movq %r14,0x8(%r15)
	movq %r15,0x70(%rbp)
	movq $0x0,0x80(%rbp)
	jmp loop_11
.p2align 0x4
L_1358:
L_123:
	movq 0x78(%rbp),%rdx
	testq %rdx,%rdx
	jz L_1392
L_124:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x2D,%rcx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r14
	movq %r14,%rdi
	xorq %rax,%rax
	addq $0x80,%rbp
	leaq (L_125+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_125
.p2align 0x4
.long 0x6
L_125:
	addq $0xFFFFFFFFFFFFFF80,%rbp
	movq 0x70(%rbp),%r11
	cmpq $0x1,%r11
	je L_1391
L_126:
	movq 0x8(%r11),%r14
	movq 0x0(%r11),%r15
	movq %rax,%r13
.p2align 0x4,,0x7
L_127:
	movq 0x8(%r15),%r11
	movq 0x0(%r15),%r10
	movq %r10,0x0(%r13,%r11,8)
	cmpq $0x1,%r14
	je L_1359
L_128:
	movq 0x0(%r14),%r15
	movq 0x8(%r14),%r14
	jmp L_127
.p2align 0x4
L_1359:
L_129:
	movq %r13,%r15
L_130:
	movq $0xD,0xFFFFFFFFFFFFFFF8(%r15)
L_131:
	movq %r15,%r14
	andq $0x77359401,%r14
	andq $0x1,%r14
	jz numLimbs_2
L_132:
	movq %r15,%r14
	sarq $0x1,%r14
	imulq $0x3B9ACA00,%r14
	jo numLimbs_2
L_284:
	movq %r14,%r13
	shlq $0x1,%r13
	orq $0x1,%r13
	xorq %r13,%r14
	cmpq $0x0,%r14
	jnl L_136
numLimbs_2:
	movq %r15,%r14
	andq $0x1,%r14
	jnz L_1389
L_282:
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	decq %r14
	jo L_66
L_283:
	movq %r14,%r15
L_134:
	incq %r15
	jo L_66
L_136:
	movl (gcState+0x44)(%rip),%r15d
	testl %r15d,%r15d
	jz L_1386
L_137:
	decl %r15d
	movl %r15d,(gcState+0x44)(%rip)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_138
L_279:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_280+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_280
.p2align 0x4
.long 0x1F
L_280:
	addq $0xFFFFFFFFFFFFFF88,%rbp
L_138:
	movq (c_stackP+0x0)(%rip),%rsp
	movl 0x64(%rbp),%edi
	xorq %rax,%rax
	call Posix_FileSys_ST_isReg
L_139:
	testl %eax,%eax
	jz L_1384
L_140:
	incl (gcState+0x44)(%rip)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_141
L_276:
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_277+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_277
.p2align 0x4
.long 0x1E
L_277:
	addq $0xFFFFFFFFFFFFFF88,%rbp
L_141:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x1,%r14d
	movl %r14d,%edx
	xorq %rsi,%rsi
	movl $0x1,%r14d
	movl %r14d,%edi
	xorq %rax,%rax
	call Posix_IO_lseek
L_142:
	cmpq $0xFFFFFFFFFFFFFFFF,%rax
	je L_1374
L_143:
	movl (gcState+0x44)(%rip),%r14d
	testl %r14d,%r14d
	jz L_1373
L_144:
	movq 0x10(%rbp),%r15
	movq %rax,0x0(%r15)
	decl %r14d
	movl %r14d,(gcState+0x44)(%rip)
L_145:
	movq $0x1D,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq 0x68(%rbp),%r15
	movq %r15,0x0(%r14)
	movq $0x1F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x0(%r15)
	movq %r14,0x8(%r15)
	addq $0x20,%r12
	movq (globalObjptr+0x3E8)(%rip),%r14
	movq %r14,0x10(%r15)
	movq %r15,0x10(%rbp)
	movq $0x23,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0x18(%rbp)
	addq $0x8,%r12
	movb 0x60(%rbp),%r15b
	testb %r15b,%r15b
	jnz L_1370
L_146:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x17,%rcx
	movq $0x1000,%rdx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x68,%rbp
	leaq (L_147+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_147
.p2align 0x4
.long 0x7
L_147:
	addq $0xFFFFFFFFFFFFFF98,%rbp
	movq %rax,0x20(%rbp)
	xorq %r15,%r15
.p2align 0x4,,0x7
loop_12:
	cmpq $0x1000,%r15
	jnl L_1360
L_244:
	movq 0x20(%rbp),%r14
	movb $0x0,0x0(%r14,%r15,1)
	incq %r15
	jmp loop_12
.p2align 0x4
L_1360:
L_148:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_149
L_242:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x68,%rbp
	leaq (L_243+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_243
.p2align 0x4
.long 0x19
L_243:
	addq $0xFFFFFFFFFFFFFF98,%rbp
L_149:
	movq $0x51,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x20(%rbp),%r14
	movq %r14,0x0(%r15)
	movq (globalObjptr+0x70)(%rip),%r14
	movq %r14,0x8(%r15)
L_150:
	movq $0x21,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	addq $0x10,%r12
	movq $0x25,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x10(%r15)
	addq $0x28,%r12
	movq 0x10(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x18(%rbp),%r13
	movq %r13,0x8(%r15)
	movq %r14,0x18(%r15)
	movq 0x58(%rbp),%r14
	movq 0x0(%r14),%r13
	movq $0x4F,0x0(%r12)
	movq %r12,%r11
	addq $0x8,%r11
	movq %r13,0x8(%r11)
	addq $0x18,%r12
	movq %r15,0x0(%r11)
	movq %r14,%r13
	shrq $0x8,%r13
	movq (gcState+0x3D0)(%rip),%r10
	movb $0x1,0x0(%r10,%r13,1)
	movq %r11,0x0(%r14)
	movq $0x37,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r14,0x20(%rbp)
	movq %r15,0x0(%r14)
	addq $0x10,%r12
	movq $0x1B,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movl $0x0,0x0(%r15)
	movq $0x39,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r14,0x60(%rbp)
	movq %r15,0x10(%r14)
	addq $0x20,%r12
	movq 0x48(%rbp),%r13
	movq %r13,0x0(%r14)
	movq 0x40(%rbp),%r13
	movq %r13,0x8(%r14)
	movq (globalObjptr+0x88)(%rip),%r15
	xorl %ecx,%ecx
.p2align 0x4,,0x7
L_151:
	incl %ecx
	cmpq $0x1,%r15
	je L_1361
L_152:
	movq 0x8(%r15),%r15
	jmp L_151
.p2align 0x4
L_1361:
L_153:
	movslq %ecx,%rdx
	movq %rdx,0x10(%rbp)
	cmpq $0x7FFFFFFF,%rdx
	ja L_1368
L_154:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x3B,%rcx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x70,%rbp
	leaq (L_155+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_155
.p2align 0x4
.long 0x8
L_155:
	addq $0xFFFFFFFFFFFFFF90,%rbp
	movq %rax,0x18(%rbp)
	movq (globalObjptr+0x90)(%rip),%r14
	xorq %r15,%r15
.p2align 0x4,,0x7
loop_13:
	cmpq 0x10(%rbp),%r15
	jnl L_1363
L_238:
	cmpq $0x1,%r14
	je L_1362
L_239:
	movq 0x8(%r14),%r13
	movsd 0x0(%r14),%xmm15
	movq 0x18(%rbp),%r11
	movsd %xmm15,0x0(%r11,%r15,8)
	incq %r15
	movq %r13,%r14
	jmp loop_13
.p2align 0x4
L_1362:
L_240:
	movq 0x60(%rbp),%r13
	movq %r13,0x10(%rbp)
	movq 0x28(%rbp),%r14
	movq (globalObjptr+0x30)(%rip),%r15
L_175:
	movq %r15,0x20(%rbp)
	movq %r14,0x28(%rbp)
	leaq print_3(%rip),%r15
	movq %r15,0x0(%rbp)
	movq %rbp,%r15
	addq $0x8,%r15
	subq (gcState+0x650)(%rip),%r15
	movq %r15,(gcState+0x20)(%rip)
	addq $0x20,%rbp
	leaq (L_176+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp exnMessage_0
.p2align 0x4
L_1363:
L_156:
	movq (globalObjptr+0x98)(%rip),%r15
	xorl %ecx,%ecx
.p2align 0x4,,0x7
L_157:
	incl %ecx
	cmpq $0x1,%r15
	je L_1364
L_158:
	movq 0x8(%r15),%r15
	jmp L_157
.p2align 0x4
L_1364:
L_159:
	movslq %ecx,%rdx
	movq %rdx,0x40(%rbp)
	cmpq $0x7FFFFFFF,%rdx
	ja L_1367
L_160:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x3B,%rcx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x70,%rbp
	leaq (L_161+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_161
.p2align 0x4
.long 0x9
L_161:
	addq $0xFFFFFFFFFFFFFF90,%rbp
	movq %rax,0x58(%rbp)
	movq (globalObjptr+0xA0)(%rip),%r14
	xorq %r15,%r15
.p2align 0x4,,0x7
loop_14:
	cmpq 0x40(%rbp),%r15
	jnl L_1366
L_234:
	cmpq $0x1,%r14
	je L_1365
L_235:
	movq 0x8(%r14),%r13
	movsd 0x0(%r14),%xmm15
	movq 0x58(%rbp),%r11
	movsd %xmm15,0x0(%r11,%r15,8)
	incq %r15
	movq %r13,%r14
	jmp loop_14
.p2align 0x4
L_1365:
L_236:
	movq 0x60(%rbp),%r13
	movq %r13,0x10(%rbp)
	movq 0x28(%rbp),%r14
	movq (globalObjptr+0x30)(%rip),%r15
	jmp L_175
.p2align 0x4
L_1366:
L_162:
	leaq L_174(%rip),%r15
	movq %r15,0x0(%rbp)
	movq %rbp,%r15
	addq $0x8,%r15
	subq (gcState+0x650)(%rip),%r15
	movq %r15,(gcState+0x20)(%rip)
	movq (globalObjptr+0x3F0)(%rip),%r15
	movq %r15,0x70(%rbp)
	movq 0x20(%rbp),%r15
	movq %r15,0x78(%rbp)
	addq $0x70,%rbp
	leaq (L_163+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp print_5
.p2align 0x4
L_1367:
L_237:
	movq 0x60(%rbp),%r13
	movq %r13,0x10(%rbp)
	movq 0x28(%rbp),%r14
	movq $0x2,%r15
	jmp L_175
.p2align 0x4
L_1368:
L_241:
	movq 0x60(%rbp),%r13
	movq %r13,0x10(%rbp)
	movq 0x28(%rbp),%r14
	movq $0x2,%r15
	jmp L_175
.p2align 0x4
L_1370:
L_245:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x17,%rcx
	movq $0x1000,%rdx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x68,%rbp
	leaq (L_246+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_246
.p2align 0x4
.long 0x19
L_246:
	addq $0xFFFFFFFFFFFFFF98,%rbp
	movq %rax,0x60(%rbp)
	xorq %r15,%r15
.p2align 0x4,,0x7
loop_18:
	cmpq $0x1000,%r15
	jnl L_1371
L_251:
	movq 0x60(%rbp),%r14
	movb $0x0,0x0(%r14,%r15,1)
	incq %r15
	jmp loop_18
.p2align 0x4
L_1371:
L_247:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_248
L_249:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x70,%rbp
	leaq (L_250+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_250
.p2align 0x4
.long 0x1A
L_250:
	addq $0xFFFFFFFFFFFFFF90,%rbp
L_248:
	movq $0x53,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x60(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x20(%rbp),%r14
	movq %r14,0x8(%r15)
	jmp L_150
.p2align 0x4
L_1373:
L_252:
	movq (globalObjptr+0x48)(%rip),%r15
	jmp L_14
.p2align 0x4
L_1374:
L_253:
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %rax,%rax
	call Posix_Error_getErrno
L_254:
	movl %eax,0x10(%rbp)
	movl (gcState+0x44)(%rip),%r15d
	testl %r15d,%r15d
	jz L_1382
L_255:
	decl %r15d
	movl %r15d,(gcState+0x44)(%rip)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_256
L_273:
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x20,%rbp
	leaq (L_274+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_274
.p2align 0x4
.long 0x1D
L_274:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
L_256:
	movq (c_stackP+0x0)(%rip),%rsp
	movl 0x10(%rbp),%edi
	xorq %rax,%rax
	call Posix_Error_strError
L_257:
	movq %rax,0x18(%rbp)
	testq %rax,%rax
	jz L_1380
L_258:
	xorl %ecx,%ecx
.p2align 0x4,,0x7
loop_19:
	movslq %ecx,%r15
	movq %r15,0x20(%rbp)
	movq 0x18(%rbp),%r13
	movb 0x0(%r13,%r15,1),%r14b
	testb %r14b,%r14b
	jz L_1375
L_259:
	incl %ecx
	jmp loop_19
.p2align 0x4
L_1375:
L_260:
	movq 0x20(%rbp),%rdx
	cmpq $0x7FFFFFFF,%rdx
	ja L_1379
L_261:
	testq %rdx,%rdx
	jz L_1378
L_262:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x17,%rcx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x30,%rbp
	leaq (L_263+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_263
.p2align 0x4
.long 0x1B
L_263:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
	movq %rax,0x28(%rbp)
L_join_4:
	xorq %r15,%r15
.p2align 0x4,,0x7
loop_20:
	cmpq 0x20(%rbp),%r15
	jnl L_1376
L_269:
	movl %r15d,%r14d
	movslq %r14d,%r13
	movq 0x28(%rbp),%r14
	movq 0x18(%rbp),%r10
	movb 0x0(%r10,%r13,1),%r11b
	movb %r11b,0x0(%r14,%r15,1)
	incq %r15
	jmp loop_20
.p2align 0x4
L_1376:
L_264:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_265
L_267:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_268+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_268
.p2align 0x4
.long 0x1C
L_268:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
L_265:
	movq 0x28(%rbp),%r15
	movq $0x7,0xFFFFFFFFFFFFFFF8(%r15)
L_266:
	movl 0x10(%rbp),%r14d
	shlq $0x1,%r14
	orq $0x1,%r14
	movq $0x43,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r14,0x0(%r13)
	movq %r15,0x8(%r13)
	addq $0x18,%r12
	movq %r13,%r15
	jmp L_14
.p2align 0x4
L_1378:
L_270:
	movq (globalObjptr+0xB0)(%rip),%r15
	movq %r15,0x28(%rbp)
	jmp L_join_4
.p2align 0x4
L_1379:
L_271:
	movq $0x2,%r15
	jmp L_14
.p2align 0x4
L_1380:
L_272:
	movq (globalObjptr+0x420)(%rip),%r15
	jmp L_266
.p2align 0x4
L_1382:
L_275:
	movq (globalObjptr+0x48)(%rip),%r14
	movq %r14,%r15
	jmp L_14
.p2align 0x4
L_1384:
L_278:
	movq 0x18(%rbp),%r15
	jmp L_145
.p2align 0x4
L_1386:
L_281:
	movq (globalObjptr+0x48)(%rip),%r14
	movq %r14,%r15
	jmp L_14
.p2align 0x4
L_1389:
L_133:
	movq $0x1,%r15
	jmp L_134
.p2align 0x4
L_1391:
	movq %rax,%r15
	jmp L_130
.p2align 0x4
L_1392:
L_289:
	movq 0x70(%rbp),%r11
	cmpq $0x1,%r11
	je L_1393
L_290:
	movq 0x8(%r11),%r14
	movq 0x0(%r11),%r10
	movq (globalObjptr+0xA8)(%rip),%r13
	xchgq %r10,%r15
	jmp L_127
.p2align 0x4
L_1393:
L_291:
	movq (globalObjptr+0xA8)(%rip),%r14
	xchgq %r14,%r15
	jmp L_130
.p2align 0x4
L_1394:
L_292:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x90,%rbp
	leaq (L_293+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_293
.p2align 0x4
.long 0x20
L_293:
	addq $0xFFFFFFFFFFFFFF70,%rbp
	jmp L_120
.p2align 0x4
L_1395:
L_294:
	negq %rax
	movq %rax,0x80(%rbp)
	movq (globalObjptr+0x8)(%rip),%r15
	movq %r15,0x70(%rbp)
	movq $0x1,0x78(%rbp)
	jmp loop_11
.p2align 0x4
L_1396:
	movq %rax,%r15
L_296:
	shlq $0x1,%r15
	orq $0x1,%r15
	jmp L_131
.p2align 0x4
L_1397:
	movq %rax,%r15
	jmp L_296
.p2align 0x4
L_1400:
L_112:
	movq $0x1,%r15
	jmp L_113
.p2align 0x4
L_1402:
	movq %rax,%r15
	jmp L_109
.p2align 0x4
L_1403:
L_305:
	movq 0x70(%rbp),%r11
	cmpq $0x1,%r11
	je L_1404
L_306:
	movq 0x8(%r11),%r14
	movq 0x0(%r11),%r10
	movq (globalObjptr+0xA8)(%rip),%r13
	xchgq %r10,%r15
	jmp L_106
.p2align 0x4
L_1404:
L_307:
	movq (globalObjptr+0xA8)(%rip),%r14
	xchgq %r14,%r15
	jmp L_109
.p2align 0x4
L_1405:
L_308:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x90,%rbp
	leaq (L_309+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_309
.p2align 0x4
.long 0x20
L_309:
	addq $0xFFFFFFFFFFFFFF70,%rbp
	jmp L_99
.p2align 0x4
L_1406:
L_310:
	negq %rax
	movq %rax,0x80(%rbp)
	movq (globalObjptr+0x8)(%rip),%r15
	movq %r15,0x70(%rbp)
	movq $0x1,0x78(%rbp)
	jmp loop_10
.p2align 0x4
L_1407:
	movq %rax,%r15
L_312:
	shlq $0x1,%r15
	orq $0x1,%r15
	jmp L_110
.p2align 0x4
L_1408:
	movq %rax,%r15
	jmp L_312
.p2align 0x4
L_1411:
L_91:
	movq $0x1,%r15
	jmp L_92
.p2align 0x4
L_1413:
	movq %rax,%r15
	jmp L_88
.p2align 0x4
L_1414:
L_321:
	movq 0x70(%rbp),%r11
	cmpq $0x1,%r11
	je L_1415
L_322:
	movq 0x8(%r11),%r14
	movq 0x0(%r11),%r10
	movq (globalObjptr+0xA8)(%rip),%r13
	xchgq %r10,%r15
	jmp L_85
.p2align 0x4
L_1415:
L_323:
	movq (globalObjptr+0xA8)(%rip),%r14
	xchgq %r14,%r15
	jmp L_88
.p2align 0x4
L_1416:
L_324:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x90,%rbp
	leaq (L_325+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_325
.p2align 0x4
.long 0x20
L_325:
	addq $0xFFFFFFFFFFFFFF70,%rbp
	jmp L_78
.p2align 0x4
L_1417:
L_326:
	negq %rax
	movq %rax,0x80(%rbp)
	movq (globalObjptr+0x8)(%rip),%r15
	movq %r15,0x70(%rbp)
	movq $0x1,0x78(%rbp)
	jmp loop_9
.p2align 0x4
L_1418:
	movq %rax,%r15
L_328:
	shlq $0x1,%r15
	orq $0x1,%r15
	jmp L_89
.p2align 0x4
L_1419:
	movq %rax,%r15
	jmp L_328
.p2align 0x4
L_1422:
L_331:
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %rax,%rax
	call Posix_Error_getErrno
L_332:
	movl %eax,0x10(%rbp)
	movl (gcState+0x44)(%rip),%r15d
	testl %r15d,%r15d
	jz L_1430
L_333:
	decl %r15d
	movl %r15d,(gcState+0x44)(%rip)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_334
L_351:
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x20,%rbp
	leaq (L_352+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_352
.p2align 0x4
.long 0x1D
L_352:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
L_334:
	movq (c_stackP+0x0)(%rip),%rsp
	movl 0x10(%rbp),%edi
	xorq %rax,%rax
	call Posix_Error_strError
L_335:
	movq %rax,0x18(%rbp)
	testq %rax,%rax
	jz L_1428
L_336:
	xorl %ecx,%ecx
.p2align 0x4,,0x7
loop_21:
	movslq %ecx,%r15
	movq %r15,0x20(%rbp)
	movq 0x18(%rbp),%r13
	movb 0x0(%r13,%r15,1),%r14b
	testb %r14b,%r14b
	jz L_1423
L_337:
	incl %ecx
	jmp loop_21
.p2align 0x4
L_1423:
L_338:
	movq 0x20(%rbp),%rdx
	cmpq $0x7FFFFFFF,%rdx
	ja L_1427
L_339:
	testq %rdx,%rdx
	jz L_1426
L_340:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x17,%rcx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x30,%rbp
	leaq (L_341+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_341
.p2align 0x4
.long 0x1B
L_341:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
	movq %rax,0x28(%rbp)
L_join_5:
	xorq %r15,%r15
.p2align 0x4,,0x7
loop_22:
	cmpq 0x20(%rbp),%r15
	jnl L_1424
L_347:
	movl %r15d,%r14d
	movslq %r14d,%r13
	movq 0x28(%rbp),%r14
	movq 0x18(%rbp),%r10
	movb 0x0(%r10,%r13,1),%r11b
	movb %r11b,0x0(%r14,%r15,1)
	incq %r15
	jmp loop_22
.p2align 0x4
L_1424:
L_342:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_343
L_345:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_346+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_346
.p2align 0x4
.long 0x1C
L_346:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
L_343:
	movq 0x28(%rbp),%r15
	movq $0x7,0xFFFFFFFFFFFFFFF8(%r15)
L_344:
	movl 0x10(%rbp),%r14d
	shlq $0x1,%r14
	orq $0x1,%r14
	movq $0x43,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r14,0x0(%r13)
	movq %r15,0x8(%r13)
	addq $0x18,%r12
	movq %r13,%r15
	jmp L_14
.p2align 0x4
L_1426:
L_348:
	movq (globalObjptr+0xB0)(%rip),%r15
	movq %r15,0x28(%rbp)
	jmp L_join_5
.p2align 0x4
L_1427:
L_349:
	movq $0x2,%r15
	jmp L_14
.p2align 0x4
L_1428:
L_350:
	movq (globalObjptr+0x420)(%rip),%r15
	jmp L_344
.p2align 0x4
L_1430:
L_353:
	movq (globalObjptr+0x48)(%rip),%r14
	movq %r14,%r15
	jmp L_14
.p2align 0x4
L_1431:
L_354:
	movb $0x0,0x60(%rbp)
	jmp L_58
.p2align 0x4
L_1437:
L_399:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_400+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_400
.p2align 0x4
.long 0x24
L_400:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	jmp L_11
.p2align 0x4
L_1438:
L_401:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x18,%rbp
	leaq (L_402+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_402
.p2align 0x4
.long 0x25
L_402:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
	jmp L_10
.p2align 0x4
.long 0xE
L_176:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
	movq 0x20(%rbp),%r15
	movq %r15,0x18(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_177
L_182:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x28,%rbp
	leaq (L_183+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_183
.p2align 0x4
.long 0x10
L_183:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
L_177:
	movq $0x57,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x18(%rbp),%r14
	movq %r14,0x0(%r15)
	movq (globalObjptr+0x80)(%rip),%r14
	movq %r14,0x8(%r15)
	movq $0x57,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq (globalObjptr+0x390)(%rip),%r15
	movq %r15,0x0(%r14)
	movq %r14,0x20(%rbp)
	leaq L_181(%rip),%r15
	movq %r15,0x0(%rbp)
	addq $0x20,%rbp
	leaq (print_2+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp concat_0
.p2align 0x4
.long 0x1
print_3:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
print_4:
	movq (c_stackP+0x0)(%rip),%rsp
	movq (globalObjptr+0x400)(%rip),%rdi
	xorq %rax,%rax
	call Stdio_print
L_180:
	movl $0x1,%r15d
	movl %r15d,%esi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call MLton_halt
.p2align 0x4
.long 0xA
L_163:
	addq $0xFFFFFFFFFFFFFF90,%rbp
	movq 0x10(%rbp),%r14
	decq %r14
	movq %r14,0x68(%rbp)
	xorq %r15,%r15
loop_15:
	cmpq %r15,0x68(%rbp)
	jl L_1441
L_164:
	movq %r15,%r14
	incq %r14
	movq %r14,0x10(%rbp)
	movq 0x18(%rbp),%r14
	movsd 0x0(%r14,%r15,8),%xmm15
	movsd %xmm15,0x78(%rbp)
	movq 0x50(%rbp),%r15
	movq %r15,0x80(%rbp)
	movq 0x48(%rbp),%r15
	movq %r15,0x88(%rbp)
	movq 0x38(%rbp),%r15
	movq %r15,0x90(%rbp)
	movq 0x30(%rbp),%r15
	movq %r15,0x98(%rbp)
	addq $0x78,%rbp
	leaq (L_165+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_2
.p2align 0x4
L_1441:
L_187:
	movq (globalObjptr+0x408)(%rip),%r15
	movq %r15,0x78(%rbp)
	movq 0x20(%rbp),%r15
	movq %r15,0x80(%rbp)
	addq $0x78,%rbp
	leaq (L_188+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp print_5
.p2align 0x4
.long 0x1
L_174:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq (globalObjptrNonRoot+0x0)(%rip),%r15
	movq 0x60(%rbp),%r13
	movq %r13,0x10(%rbp)
	movq 0x28(%rbp),%r14
	jmp L_175
.p2align 0x4
.long 0xE
print_2:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
	movq (c_stackP+0x0)(%rip),%rsp
	movq 0x20(%rbp),%rdi
	xorq %rax,%rax
	call Stdio_print
L_178:
	leaq print_3(%rip),%r15
	movq %r15,0x0(%rbp)
	movl $0x1,0x18(%rbp)
	movq 0x10(%rbp),%r15
	movq %r15,0x20(%rbp)
	addq $0x18,%rbp
	leaq (L_179+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp exit_0
.p2align 0x4
.long 0x1
L_181:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	jmp print_4
.p2align 0x4
.long 0xB
L_165:
	addq $0xFFFFFFFFFFFFFF88,%rbp
	movq 0x78(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF0(%r15),%rdx
	movq %rdx,0x78(%rbp)
	movq %r15,0x70(%rbp)
	testq %rdx,%rdx
	jz L_1444
L_166:
	addq $0x2,%rdx
	cmpq $0x7FFFFFFF,%rdx
	ja L_1443
L_167:
	testq %rdx,%rdx
	jz L_1442
L_168:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x17,%rcx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x88,%rbp
	leaq (L_169+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_169
.p2align 0x4
.long 0xC
L_169:
	addq $0xFFFFFFFFFFFFFF78,%rbp
	movq %rax,0x80(%rbp)
L_join_0:
	movq (c_stackP+0x0)(%rip),%rsp
	movq 0x78(%rbp),%r9
	xorq %r8,%r8
	movq 0x70(%rbp),%rcx
	xorq %rdx,%rdx
	movq 0x80(%rbp),%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x90,%rbp
	leaq (L_170+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayCopy
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_170
.p2align 0x4
.long 0xD
L_170:
	addq $0xFFFFFFFFFFFFFF70,%rbp
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x2,%r9
	xorq %r8,%r8
	movq (globalObjptr+0x3F8)(%rip),%rcx
	movq 0x78(%rbp),%rdx
	movq 0x80(%rbp),%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x90,%rbp
	leaq (L_171+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayCopy
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_171
.p2align 0x4
.long 0xD
L_171:
	addq $0xFFFFFFFFFFFFFF70,%rbp
	movq 0x80(%rbp),%r15
	movq $0x7,0xFFFFFFFFFFFFFFF8(%r15)
L_172:
	movq %r15,0x78(%rbp)
	movq 0x20(%rbp),%r15
	movq %r15,0x80(%rbp)
	addq $0x78,%rbp
	leaq (L_173+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp print_5
.p2align 0x4
L_1442:
L_184:
	movq (globalObjptr+0xB0)(%rip),%r15
	movq %r15,0x80(%rbp)
	jmp L_join_0
.p2align 0x4
L_1443:
L_185:
	movq 0x60(%rbp),%r13
	movq %r13,0x10(%rbp)
	movq 0x28(%rbp),%r14
	movq $0x2,%r15
	jmp L_175
.p2align 0x4
L_1444:
L_186:
	movq (globalObjptr+0x3F8)(%rip),%r15
	jmp L_172
.p2align 0x4
.long 0xB
L_188:
	addq $0xFFFFFFFFFFFFFF88,%rbp
	movq (globalObjptr+0x3F0)(%rip),%r15
	movq %r15,0x78(%rbp)
	movq 0x20(%rbp),%r15
	movq %r15,0x80(%rbp)
	addq $0x78,%rbp
	leaq (L_189+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp print_5
.p2align 0x4
.long 0xF
L_179:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
	movq (c_stackP+0x0)(%rip),%rsp
	movq (globalObjptr+0x388)(%rip),%rdi
	xorq %rax,%rax
	call MLton_bug
.p2align 0x4
.long 0xB
L_173:
	addq $0xFFFFFFFFFFFFFF88,%rbp
	movq 0x10(%rbp),%r15
	jmp loop_15
.p2align 0x4
.long 0xB
L_189:
	addq $0xFFFFFFFFFFFFFF88,%rbp
	movq 0x40(%rbp),%r14
	decq %r14
	movq %r14,0x10(%rbp)
	xorq %r15,%r15
loop_16:
	cmpq %r15,0x10(%rbp)
	jl L_1445
L_190:
	movq %r15,%r14
	incq %r14
	movq %r14,0x70(%rbp)
	movq 0x58(%rbp),%r14
	movsd 0x0(%r14,%r15,8),%xmm15
	movsd %xmm15,0x80(%rbp)
	movq 0x50(%rbp),%r15
	movq %r15,0x88(%rbp)
	movq 0x48(%rbp),%r15
	movq %r15,0x90(%rbp)
	movq 0x38(%rbp),%r15
	movq %r15,0x98(%rbp)
	movq 0x30(%rbp),%r15
	movq %r15,0xA0(%rbp)
	addq $0x80,%rbp
	leaq (L_191+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_2
.p2align 0x4
L_1445:
L_203:
	movq (globalObjptr+0x408)(%rip),%r15
	movq %r15,0x78(%rbp)
	movq 0x20(%rbp),%r15
	movq %r15,0x80(%rbp)
	addq $0x78,%rbp
	leaq (L_204+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp print_5
.p2align 0x4
.long 0x11
L_191:
	addq $0xFFFFFFFFFFFFFF80,%rbp
	movq 0x80(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF0(%r15),%rdx
	movq %rdx,0x80(%rbp)
	movq %r15,0x78(%rbp)
	testq %rdx,%rdx
	jz L_1448
L_192:
	addq $0x2,%rdx
	cmpq $0x7FFFFFFF,%rdx
	ja L_1447
L_193:
	testq %rdx,%rdx
	jz L_1446
L_194:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x17,%rcx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x90,%rbp
	leaq (L_195+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_195
.p2align 0x4
.long 0x12
L_195:
	addq $0xFFFFFFFFFFFFFF70,%rbp
	movq %rax,0x88(%rbp)
L_join_1:
	movq (c_stackP+0x0)(%rip),%rsp
	movq 0x80(%rbp),%r9
	xorq %r8,%r8
	movq 0x78(%rbp),%rcx
	xorq %rdx,%rdx
	movq 0x88(%rbp),%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x98,%rbp
	leaq (L_196+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayCopy
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_196
.p2align 0x4
.long 0x13
L_196:
	addq $0xFFFFFFFFFFFFFF68,%rbp
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x2,%r9
	xorq %r8,%r8
	movq (globalObjptr+0x3F8)(%rip),%rcx
	movq 0x80(%rbp),%rdx
	movq 0x88(%rbp),%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x98,%rbp
	leaq (L_197+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayCopy
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_197
.p2align 0x4
.long 0x13
L_197:
	addq $0xFFFFFFFFFFFFFF68,%rbp
	movq 0x88(%rbp),%r15
	movq $0x7,0xFFFFFFFFFFFFFFF8(%r15)
L_198:
	movq %r15,0x80(%rbp)
	movq 0x20(%rbp),%r15
	movq %r15,0x88(%rbp)
	addq $0x80,%rbp
	leaq (L_199+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp print_5
.p2align 0x4
L_1446:
L_200:
	movq (globalObjptr+0xB0)(%rip),%r15
	movq %r15,0x88(%rbp)
	jmp L_join_1
.p2align 0x4
L_1447:
L_201:
	movq 0x60(%rbp),%r13
	movq %r13,0x10(%rbp)
	movq 0x28(%rbp),%r14
	movq $0x2,%r15
	jmp L_175
.p2align 0x4
L_1448:
L_202:
	movq (globalObjptr+0x3F8)(%rip),%r15
	jmp L_198
.p2align 0x4
.long 0xB
L_204:
	addq $0xFFFFFFFFFFFFFF88,%rbp
	movsd (globalReal64+0x28)(%rip),%xmm15
	xorq %r15,%r15
	movsd %xmm15,%xmm7
.p2align 0x4,,0x7
loop_17:
	cmpq %r15,0x68(%rbp)
	jl L_1450
L_205:
	movq %r15,%r14
	incq %r14
	movq 0x18(%rbp),%r13
	movsd 0x0(%r13,%r15,8),%xmm15
	movl %r15d,%r13d
	movslq %r13d,%r15
	cmpq 0x40(%rbp),%r15
	jnb L_1449
L_207:
	movq 0x58(%rbp),%r13
	mulsd 0x0(%r13,%r15,8),%xmm15
	addsd %xmm15,%xmm7
	movq %r14,%r15
	jmp loop_17
.p2align 0x4
L_1449:
L_206:
	movq 0x60(%rbp),%r13
	movq %r13,0x10(%rbp)
	movq 0x28(%rbp),%r14
	movq $0x3,%r15
	jmp L_175
.p2align 0x4
L_1450:
L_208:
	movsd %xmm7,%xmm15
	movsd %xmm15,0x70(%rbp)
	movq 0x50(%rbp),%r15
	movq %r15,0x78(%rbp)
	movq 0x48(%rbp),%r15
	movq %r15,0x80(%rbp)
	movq 0x38(%rbp),%r15
	movq %r15,0x88(%rbp)
	movq 0x30(%rbp),%r15
	movq %r15,0x90(%rbp)
	addq $0x70,%rbp
	leaq (L_209+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_2
.p2align 0x4
.long 0x11
L_199:
	addq $0xFFFFFFFFFFFFFF80,%rbp
	movq 0x70(%rbp),%r15
	jmp loop_16
.p2align 0x4
.long 0x14
L_209:
	addq $0xFFFFFFFFFFFFFF90,%rbp
	movq 0x70(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF0(%r15),%rdx
	movq %rdx,0x18(%rbp)
	movq %r15,0x10(%rbp)
	testq %rdx,%rdx
	jz L_1456
L_210:
	addq $0x9,%rdx
	cmpq $0x7FFFFFFF,%rdx
	ja L_1455
L_211:
	testq %rdx,%rdx
	jz L_1454
L_212:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x17,%rcx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x70,%rbp
	leaq (L_213+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_213
.p2align 0x4
.long 0x15
L_213:
	addq $0xFFFFFFFFFFFFFF90,%rbp
	movq %rax,0x30(%rbp)
L_join_2:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x9,%r9
	xorq %r8,%r8
	movq (globalObjptr+0x410)(%rip),%rcx
	xorq %rdx,%rdx
	movq 0x30(%rbp),%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x70,%rbp
	leaq (L_214+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayCopy
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_214
.p2align 0x4
.long 0x16
L_214:
	addq $0xFFFFFFFFFFFFFF90,%rbp
	movq (c_stackP+0x0)(%rip),%rsp
	movq 0x18(%rbp),%r9
	xorq %r8,%r8
	movq 0x10(%rbp),%rcx
	movq $0x9,%rdx
	movq 0x30(%rbp),%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x70,%rbp
	leaq (L_215+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayCopy
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_215
.p2align 0x4
.long 0x17
L_215:
	addq $0xFFFFFFFFFFFFFF90,%rbp
	movq 0x30(%rbp),%r15
	movq $0x7,0xFFFFFFFFFFFFFFF8(%r15)
	movq %r15,0x10(%rbp)
L_216:
	movq 0x10(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF0(%r15),%rdx
	movq %rdx,0x18(%rbp)
	testq %rdx,%rdx
	jz L_1453
L_217:
	incq %rdx
	cmpq $0x7FFFFFFF,%rdx
	ja L_1452
L_218:
	testq %rdx,%rdx
	jz L_1451
L_219:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x17,%rcx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x70,%rbp
	leaq (L_220+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_220
.p2align 0x4
.long 0x15
L_220:
	addq $0xFFFFFFFFFFFFFF90,%rbp
	movq %rax,0x30(%rbp)
L_join_3:
	movq (c_stackP+0x0)(%rip),%rsp
	movq 0x18(%rbp),%r9
	xorq %r8,%r8
	movq 0x10(%rbp),%rcx
	xorq %rdx,%rdx
	movq 0x30(%rbp),%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x70,%rbp
	leaq (L_221+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayCopy
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_221
.p2align 0x4
.long 0x17
L_221:
	addq $0xFFFFFFFFFFFFFF90,%rbp
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x1,%r9
	xorq %r8,%r8
	movq (globalObjptr+0x380)(%rip),%rcx
	movq 0x18(%rbp),%rdx
	movq 0x30(%rbp),%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x70,%rbp
	leaq (L_222+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayCopy
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_222
.p2align 0x4
.long 0x17
L_222:
	addq $0xFFFFFFFFFFFFFF90,%rbp
	movq 0x30(%rbp),%r15
	movq $0x7,0xFFFFFFFFFFFFFFF8(%r15)
L_223:
	movq %r15,0x70(%rbp)
	movq 0x20(%rbp),%r15
	movq %r15,0x78(%rbp)
	addq $0x70,%rbp
	leaq (L_224+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp print_5
.p2align 0x4
L_1451:
L_228:
	movq (globalObjptr+0xB0)(%rip),%r15
	movq %r15,0x30(%rbp)
	jmp L_join_3
.p2align 0x4
L_1452:
L_229:
	movq 0x60(%rbp),%r13
	movq %r13,0x10(%rbp)
	movq 0x28(%rbp),%r14
	movq $0x2,%r15
	jmp L_175
.p2align 0x4
L_1453:
L_230:
	movq (globalObjptr+0x380)(%rip),%r15
	jmp L_223
.p2align 0x4
L_1454:
L_231:
	movq (globalObjptr+0xB0)(%rip),%r15
	movq %r15,0x30(%rbp)
	jmp L_join_2
.p2align 0x4
L_1455:
L_232:
	movq 0x60(%rbp),%r13
	movq %r13,0x10(%rbp)
	movq 0x28(%rbp),%r14
	movq $0x2,%r15
	jmp L_175
.p2align 0x4
L_1456:
L_233:
	movq (globalObjptr+0x410)(%rip),%r15
	movq %r15,0x10(%rbp)
	jmp L_216
.p2align 0x4
.long 0x18
L_224:
	addq $0xFFFFFFFFFFFFFF90,%rbp
	leaq L_226(%rip),%r15
	movq %r15,0x0(%rbp)
	movl $0x0,0x18(%rbp)
	movq 0x60(%rbp),%r15
	movq %r15,0x20(%rbp)
	addq $0x18,%rbp
	leaq (L_225+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp exit_0
.p2align 0x4
.long 0xF
L_225:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
	movq (c_stackP+0x0)(%rip),%rsp
	movq (globalObjptr+0x388)(%rip),%rdi
	xorq %rax,%rax
	call MLton_bug
.p2align 0x4
.long 0x1
L_226:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq %rbp,(gcState+0x10)(%rip)
	movq (c_stackP+0x0)(%rip),%rsp
	movq (globalObjptr+0x418)(%rip),%rdi
	xorq %rax,%rax
	call Stdio_print
L_227:
	movl $0x1,%r15d
	movl %r15d,%esi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	movq %r12,(gcState+0x0)(%rip)
	call MLton_halt
.text
.p2align 0x4
.globl print_5
.hidden print_5
print_5:
L_403:
	movq (gcState+0x20)(%rip),%r15
	movq %r15,0x18(%rbp)
	cmpq %rbp,(gcState+0x18)(%rip)
	jb L_590
L_404:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_1482
L_405:
	movq 0x8(%rbp),%r13
	movq 0x0(%r13),%r11
	movq %r11,0x20(%rbp)
	movq 0x18(%r11),%r13
	movq %r13,0x28(%rbp)
	movq 0x10(%r11),%r13
	movq 0x0(%r13),%r15
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r14
	shrq $0x1,%r14
	cmpq $0x28,%r14
	je L_1471
L_558:
	movq 0x8(%r15),%r13
	movq %r13,0x30(%rbp)
	movq 0x0(%r15),%r11
	movq %r11,0x38(%rbp)
	movq $0x3D,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq %r13,0x0(%r15)
	movq %r11,0x8(%r15)
	movl 0x0(%r13),%r10d
	movl %r10d,0x40(%rbp)
	movq 0x0(%rbp),%r13
	movq 0xFFFFFFFFFFFFFFF0(%r13),%r9
	movq %r9,0x48(%rbp)
	movl %r9d,%r13d
	movslq %r13d,%r14
	cmpq %r9,%r14
	jne L_408
L_560:
	addl %r10d,%r13d
	movl %r13d,0x44(%rbp)
	jo L_1469
L_561:
	movq 0xFFFFFFFFFFFFFFF0(%r11),%r10
	movq %r10,0x50(%rbp)
	movl %r10d,%r11d
	movslq %r11d,%r14
	cmpq %r10,%r14
	jne L_1468
L_563:
	cmpl %r11d,%r13d
	jnl L_565
L_566:
	decq %r9
	movq %r9,0x58(%rbp)
	xorq %r14,%r14
.p2align 0x4,,0x7
loop_30:
	cmpq %r14,0x58(%rbp)
	jl L_1458
L_567:
	movq 0x0(%rbp),%r13
	cmpb $0xA,0x0(%r13,%r14,1)
	je L_1457
L_568:
	incq %r14
	jmp loop_30
.p2align 0x4
L_1457:
L_565:
	movq %r15,0x38(%rbp)
	leaq L_537(%rip),%r15
	movq %r15,0x10(%rbp)
	movq %rbp,%r15
	addq $0x18,%r15
	subq (gcState+0x650)(%rip),%r15
	movq %r15,(gcState+0x20)(%rip)
	movq 0x28(%rbp),%r15
	movq %r15,0x40(%rbp)
	addq $0x38,%rbp
	leaq (put_0+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp flushBuf_0
.p2align 0x4
L_1458:
L_570:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_571
L_588:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x68,%rbp
	leaq (L_589+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_589
.p2align 0x4
.long 0x33
L_589:
	addq $0xFFFFFFFFFFFFFF98,%rbp
L_571:
	movslq 0x40(%rbp),%r15
	movq %r15,0x28(%rbp)
	movq 0x50(%rbp),%r14
	cmpq %r15,%r14
	jb L_524
L_572:
	movq 0x48(%rbp),%r13
	addq %r13,%r15
	cmpq %r15,%r14
	jb L_1464
L_573:
	cmpq $0x5,%r13
	jl L_1461
L_574:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_575
L_578:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x58,%rbp
	leaq (L_579+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_579
.p2align 0x4
.long 0x32
L_579:
	addq $0xFFFFFFFFFFFFFFA8,%rbp
L_575:
	movq (c_stackP+0x0)(%rip),%rsp
	movq 0x48(%rbp),%r9
	xorq %r8,%r8
	movq 0x0(%rbp),%rcx
	movq 0x28(%rbp),%rdx
	movq 0x38(%rbp),%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x50,%rbp
	leaq (L_576+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayCopy
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_576
.p2align 0x4
.long 0x31
L_576:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
L_577:
	movq 0x30(%rbp),%r15
	movl 0x44(%rbp),%r14d
	movl %r14d,0x0(%r15)
L_527:
	movq 0x8(%rbp),%r15
	movq 0x0(%r15),%r14
	movq 0x18(%r14),%r15
	movq 0x10(%r14),%r13
	movq 0x0(%r13),%r11
	movq %r14,0x0(%rbp)
	movq 0xFFFFFFFFFFFFFFF8(%r11),%r14
	shrq $0x1,%r14
	cmpq $0x28,%r14
	je L_1459
L_534:
	movq %r15,0x8(%rbp)
	movq 0x8(%r11),%r15
	movq 0x0(%r11),%r14
	movq $0x3D,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r15,0x0(%r13)
	movq %r14,0x8(%r13)
	movq %r13,0x0(%rbp)
	addq $0x18,%r12
	movq 0x18(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	jmp flushBuf_0
.p2align 0x4
L_1459:
L_528:
	movq %r15,0x30(%rbp)
	movq 0x8(%r11),%r15
	movq 0x0(%r11),%r14
	movq $0x3D,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r15,0x0(%r13)
	movq %r14,0x8(%r13)
	movq %r13,0x28(%rbp)
	addq $0x18,%r12
	leaq L_530(%rip),%r15
	movq %r15,0x10(%rbp)
	movq %rbp,%r15
	addq $0x18,%r15
	subq (gcState+0x650)(%rip),%r15
	movq %r15,(gcState+0x20)(%rip)
	addq $0x28,%rbp
	leaq (L_529+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp flushBuf_0
.p2align 0x4
L_1461:
L_580:
	xorq %r15,%r15
.p2align 0x4,,0x7
loop_31:
	cmpq %r15,0x58(%rbp)
	jl L_1462
L_581:
	movq %r15,%r14
	addq 0x28(%rbp),%r14
	movq 0x38(%rbp),%r13
	movq 0x0(%rbp),%r10
	movb 0x0(%r10,%r15,1),%r11b
	movb %r11b,0x0(%r13,%r14,1)
	incq %r15
	jmp loop_31
.p2align 0x4
L_1462:
L_582:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_577
L_584:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x50,%rbp
	leaq (L_585+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_585
.p2align 0x4
.long 0x31
L_585:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
	jmp L_577
.p2align 0x4
L_1464:
L_524:
	movq $0x3,%r15
L_409:
	movq 0x20(%rbp),%r14
	movq 0x0(%r14),%r13
	movq 0x10(%r13),%r11
	movq $0x45,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r11,0x10(%r14)
	addq $0x20,%r12
	movq (globalObjptr+0x428)(%rip),%r15
	movq %r15,0x8(%r14)
	movq %r14,(globalObjptrNonRoot+0x0)(%rip)
	movq 0x18(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	movq (gcState+0x650)(%rip),%rbp
	addq %r15,%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_1468:
L_408:
	movq (globalObjptr+0x50)(%rip),%r15
	jmp L_409
.p2align 0x4
L_1469:
L_411:
	movq $0x1,%r15
	jmp L_409
.p2align 0x4
L_1471:
L_406:
	movq 0x8(%r15),%r14
	movq 0x0(%r15),%r13
	movq %r13,0x30(%rbp)
	movq $0x3D,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x0(%r15)
	addq $0x18,%r12
	movq %r13,0x8(%r15)
	movq (globalObjptr+0x70)(%rip),%r14
	movl 0x0(%r14),%r11d
	movq 0x0(%rbp),%r14
	movq 0xFFFFFFFFFFFFFFF0(%r14),%r10
	movq %r10,0x38(%rbp)
	movl %r10d,%r14d
	movslq %r14d,%r9
	cmpq %r10,%r9
	jne L_408
L_410:
	addl %r11d,%r14d
	movl %r14d,0x40(%rbp)
	jo L_411
L_412:
	movq 0xFFFFFFFFFFFFFFF0(%r13),%r9
	movl %r9d,%r13d
	movslq %r13d,%r8
	cmpq %r9,%r8
	jne L_408
L_414:
	cmpl %r13d,%r14d
	jnl L_1478
L_541:
	movslq %r11d,%r14
	movq %r14,0x28(%rbp)
	cmpq %r14,%r9
	jb L_524
L_542:
	addq %r10,%r14
	cmpq %r14,%r9
	jb L_524
L_543:
	cmpq $0x5,%r10
	jl L_1473
L_544:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_545
L_548:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r14d
	movl %r14d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r14
	movq %r14,%rdi
	xorq %rax,%rax
	addq $0x50,%rbp
	leaq (L_549+0x0)(%rip),%r14
	movq %r14,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_549
.p2align 0x4
.long 0x30
L_549:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
L_545:
	movq (c_stackP+0x0)(%rip),%rsp
	movq 0x38(%rbp),%r9
	xorq %r8,%r8
	movq 0x0(%rbp),%rcx
	movq 0x28(%rbp),%rdx
	movq 0x30(%rbp),%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x50,%rbp
	leaq (L_546+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayCopy
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_546
.p2align 0x4
.long 0x2F
L_546:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
L_547:
	movq (globalObjptr+0x70)(%rip),%r15
	movl 0x40(%rbp),%r14d
	movl %r14d,0x0(%r15)
	jmp L_527
.p2align 0x4
L_1473:
L_550:
	movq 0x38(%rbp),%r14
	decq %r14
	xorq %r15,%r15
.p2align 0x4,,0x7
loop_29:
	cmpq %r15,%r14
	jl L_1474
L_551:
	movq %r15,%r13
	addq 0x28(%rbp),%r13
	movq 0x30(%rbp),%r11
	movq 0x0(%rbp),%r9
	movb 0x0(%r9,%r15,1),%r10b
	movb %r10b,0x0(%r11,%r13,1)
	incq %r15
	jmp loop_29
.p2align 0x4
L_1474:
L_552:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_547
L_554:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x50,%rbp
	leaq (L_555+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_555
.p2align 0x4
.long 0x2F
L_555:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
	jmp L_547
.p2align 0x4
L_1478:
L_415:
	movq %r15,0x38(%rbp)
	leaq L_537(%rip),%r15
	movq %r15,0x10(%rbp)
	movq %rbp,%r15
	addq $0x18,%r15
	subq (gcState+0x650)(%rip),%r15
	movq %r15,(gcState+0x20)(%rip)
	movq 0x28(%rbp),%r15
	movq %r15,0x40(%rbp)
	addq $0x38,%rbp
	leaq (put_0+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp flushBuf_0
.p2align 0x4
L_1482:
L_590:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x28,%rbp
	leaq (L_591+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_591
.p2align 0x4
.long 0x2C
L_591:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	jmp L_405
.p2align 0x4
.long 0x26
put_0:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_416
L_535:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_536+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_536
.p2align 0x4
.long 0x2D
L_536:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
L_416:
	movq 0x0(%rbp),%r14
	movq 0xFFFFFFFFFFFFFFF0(%r14),%r13
	movq %r13,0x30(%rbp)
	movq 0x28(%rbp),%r14
	movq 0x0(%r14),%r11
	movq %r11,0x38(%rbp)
	movl %r13d,%r14d
	movl %r14d,0x40(%rbp)
	movslq %r14d,%r15
	cmpq %r13,%r15
	je L_1484
L_417:
	movq (globalObjptr+0x28)(%rip),%r15
	jmp L_409
.p2align 0x4
L_1484:
L_418:
	movl $0x0,0x28(%rbp)
.p2align 0x4,,0x7
loop_23:
	movl 0x28(%rbp),%r15d
	movl 0x40(%rbp),%r14d
	cmpl %r14d,%r15d
	je L_527
L_419:
	subl %r15d,%r14d
	jo L_411
L_420:
	movslq %r15d,%r13
	movslq %r14d,%r15
	movq %r15,0x48(%rbp)
	movq 0x30(%rbp),%r14
	cmpq %r13,%r14
	jb L_524
L_421:
	subq %r13,%r14
	cmpq %r15,%r14
	jb L_524
L_422:
	movq 0x38(%rbp),%r15
	movq 0x8(%r15),%r14
	movq %r14,0x50(%rbp)
	movq 0x0(%r15),%r14
	movl 0x0(%r14),%r13d
	testl %r13d,%r13d
	jnz L_1522
L_423:
	incl (gcState+0x44)(%rip)
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_1521
.p2align 0x4,,0x7
L_424:
	movq (c_stackP+0x0)(%rip),%rsp
	movq 0x48(%rbp),%rcx
	movl 0x28(%rbp),%edx
	movq 0x0(%rbp),%rsi
	movl $0x1,%r14d
	movl %r14d,%edi
	xorq %rax,%rax
	call Posix_IO_writeChar8Vec
L_425:
	cmpq $0xFFFFFFFFFFFFFFFF,%rax
	je L_1490
L_426:
	movl (gcState+0x44)(%rip),%r14d
	testl %r14d,%r14d
	jz L_1489
L_427:
	decl %r14d
	movl %r14d,(gcState+0x44)(%rip)
	movq %rax,%r15
x_0:
	movl %r15d,%r14d
	movslq %r14d,%r13
	cmpq %r15,%r13
	jne L_411
L_429:
	movq 0x50(%rbp),%r15
	addq 0x0(%r15),%r13
	jo L_411
L_430:
	movq %r13,0x0(%r15)
	testl %r14d,%r14d
	jz L_1486
L_431:
	addl 0x28(%rbp),%r14d
	jo L_411
L_432:
	movl %r14d,0x28(%rbp)
	jmp loop_23
.p2align 0x4
L_1486:
L_433:
	movq (globalObjptr+0x68)(%rip),%r15
	jmp L_409
.p2align 0x4
L_1489:
L_435:
	movq (globalObjptr+0x48)(%rip),%r15
	jmp L_409
.p2align 0x4
L_1490:
L_436:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_1520
.p2align 0x4,,0x7
L_437:
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %rax,%rax
	call Posix_Error_getErrno
L_438:
	movl (gcState+0x44)(%rip),%r15d
	testl %r15d,%r15d
	jz L_435
L_439:
	movl %eax,0x2C(%rbp)
	decl %r15d
	movl %r15d,(gcState+0x44)(%rip)
loop_24:
	cmpl $0x4,0x2C(%rbp)
	jne L_1510
L_464:
	movl (gcState+0x44)(%rip),%r15d
	testl %r15d,%r15d
	jz L_1504
L_465:
	incl %r15d
	movl %r15d,(gcState+0x44)(%rip)
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_1503
.p2align 0x4,,0x7
L_466:
	movq (c_stackP+0x0)(%rip),%rsp
	movq 0x48(%rbp),%rcx
	movl 0x28(%rbp),%edx
	movq 0x0(%rbp),%rsi
	movl $0x1,%r14d
	movl %r14d,%edi
	xorq %rax,%rax
	call Posix_IO_writeChar8Vec
L_467:
	cmpq $0xFFFFFFFFFFFFFFFF,%rax
	je L_1492
L_468:
	movl (gcState+0x44)(%rip),%r14d
	testl %r14d,%r14d
	jz L_435
L_469:
	decl %r14d
	movl %r14d,(gcState+0x44)(%rip)
	movq %rax,%r15
	jmp x_0
.p2align 0x4
L_1492:
L_471:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_472
L_498:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x30,%rbp
	leaq (L_499+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_499
.p2align 0x4
.long 0x29
L_499:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
L_472:
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %rax,%rax
	call Posix_Error_getErrno
L_473:
	movl %eax,0x0(%rbp)
	movl (gcState+0x44)(%rip),%r15d
	testl %r15d,%r15d
	jz L_435
L_474:
	decl %r15d
	movl %r15d,(gcState+0x44)(%rip)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_475
L_495:
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x30,%rbp
	leaq (L_496+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_496
.p2align 0x4
.long 0x29
L_496:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
L_475:
	movq (c_stackP+0x0)(%rip),%rsp
	movl 0x0(%rbp),%edi
	xorq %rax,%rax
	call Posix_Error_strError
L_476:
	movq %rax,0x8(%rbp)
	testq %rax,%rax
	jz L_1499
L_477:
	xorl %ecx,%ecx
.p2align 0x4,,0x7
loop_27:
	movslq %ecx,%r15
	movq %r15,0x28(%rbp)
	movq 0x8(%rbp),%r13
	movb 0x0(%r13,%r15,1),%r14b
	testb %r14b,%r14b
	jz L_1493
L_478:
	incl %ecx
	jmp loop_27
.p2align 0x4
L_1493:
L_479:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_480
L_492:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_493+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_493
.p2align 0x4
.long 0x27
L_493:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
L_480:
	movq 0x28(%rbp),%rdx
	cmpq $0x7FFFFFFF,%rdx
	ja L_1497
L_481:
	testq %rdx,%rdx
	jz L_1496
L_482:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x17,%rcx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_483+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_483
.p2align 0x4
.long 0x27
L_483:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movq %rax,0x30(%rbp)
L_join_7:
	xorq %r15,%r15
.p2align 0x4,,0x7
loop_28:
	cmpq 0x28(%rbp),%r15
	jnl L_1494
L_489:
	movl %r15d,%r14d
	movslq %r14d,%r13
	movq 0x30(%rbp),%r14
	movq 0x8(%rbp),%r10
	movb 0x0(%r10,%r13,1),%r11b
	movb %r11b,0x0(%r14,%r15,1)
	incq %r15
	jmp loop_28
.p2align 0x4
L_1494:
L_484:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_485
L_487:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x40,%rbp
	leaq (L_488+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_488
.p2align 0x4
.long 0x28
L_488:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
L_485:
	movq 0x30(%rbp),%r15
	movq $0x7,0xFFFFFFFFFFFFFFF8(%r15)
L_486:
	movl 0x0(%rbp),%r14d
	shlq $0x1,%r14
	orq $0x1,%r14
	movq $0x43,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r14,0x0(%r13)
	movq %r15,0x8(%r13)
	addq $0x18,%r12
	movq %r13,%r15
	jmp L_409
.p2align 0x4
L_1496:
L_490:
	movq (globalObjptr+0xB0)(%rip),%r15
	movq %r15,0x30(%rbp)
	jmp L_join_7
.p2align 0x4
L_1497:
L_458:
	movq $0x2,%r15
	jmp L_409
.p2align 0x4
L_1499:
L_494:
	movq (globalObjptr+0x420)(%rip),%r15
	jmp L_486
.p2align 0x4
L_1503:
L_500:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x60,%rbp
	leaq (L_501+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_501
.p2align 0x4
.long 0x2A
L_501:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
	jmp L_466
.p2align 0x4
L_1504:
L_502:
	incl %r15d
	movl %r15d,(gcState+0x44)(%rip)
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_1509
.p2align 0x4,,0x7
L_503:
	movq (c_stackP+0x0)(%rip),%rsp
	movq 0x48(%rbp),%rcx
	movl 0x28(%rbp),%edx
	movq 0x0(%rbp),%rsi
	movl $0x1,%r14d
	movl %r14d,%edi
	xorq %rax,%rax
	call Posix_IO_writeChar8Vec
L_504:
	cmpq $0xFFFFFFFFFFFFFFFF,%rax
	je L_1506
L_505:
	movl (gcState+0x44)(%rip),%r14d
	testl %r14d,%r14d
	jz L_435
L_506:
	decl %r14d
	movl %r14d,(gcState+0x44)(%rip)
	movq %rax,%r15
	jmp x_0
.p2align 0x4
L_1506:
L_508:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_1508
.p2align 0x4,,0x7
L_509:
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %rax,%rax
	call Posix_Error_getErrno
L_510:
	movl (gcState+0x44)(%rip),%r15d
	testl %r15d,%r15d
	jz L_435
L_511:
	movl %eax,0x2C(%rbp)
	decl %r15d
	movl %r15d,(gcState+0x44)(%rip)
	jmp loop_24
.p2align 0x4
L_1508:
L_513:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x60,%rbp
	leaq (L_514+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_514
.p2align 0x4
.long 0x2A
L_514:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
	jmp L_509
.p2align 0x4
L_1509:
L_515:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x60,%rbp
	leaq (L_516+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_516
.p2align 0x4
.long 0x2A
L_516:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
	jmp L_503
.p2align 0x4
L_1510:
L_440:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_441
L_462:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_463+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_463
.p2align 0x4
.long 0x27
L_463:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
L_441:
	movq (c_stackP+0x0)(%rip),%rsp
	movl 0x2C(%rbp),%edi
	xorq %rax,%rax
	call Posix_Error_strError
L_442:
	movq %rax,0x0(%rbp)
	testq %rax,%rax
	jz L_1517
L_443:
	xorl %ecx,%ecx
.p2align 0x4,,0x7
loop_25:
	movslq %ecx,%r15
	movq %r15,0x8(%rbp)
	movq 0x0(%rbp),%r13
	movb 0x0(%r13,%r15,1),%r14b
	testb %r14b,%r14b
	jz L_1511
L_444:
	incl %ecx
	jmp loop_25
.p2align 0x4
L_1511:
L_445:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_446
L_459:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_460+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_460
.p2align 0x4
.long 0x27
L_460:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
L_446:
	movq 0x8(%rbp),%rdx
	cmpq $0x7FFFFFFF,%rdx
	ja L_458
L_447:
	testq %rdx,%rdx
	jz L_1514
L_448:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x17,%rcx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_449+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_449
.p2align 0x4
.long 0x27
L_449:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movq %rax,0x30(%rbp)
L_join_6:
	xorq %r15,%r15
.p2align 0x4,,0x7
loop_26:
	cmpq 0x8(%rbp),%r15
	jnl L_1512
L_455:
	movl %r15d,%r14d
	movslq %r14d,%r13
	movq 0x30(%rbp),%r14
	movq 0x0(%rbp),%r10
	movb 0x0(%r10,%r13,1),%r11b
	movb %r11b,0x0(%r14,%r15,1)
	incq %r15
	jmp loop_26
.p2align 0x4
L_1512:
L_450:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_451
L_453:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x40,%rbp
	leaq (L_454+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_454
.p2align 0x4
.long 0x28
L_454:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
L_451:
	movq 0x30(%rbp),%r15
	movq $0x7,0xFFFFFFFFFFFFFFF8(%r15)
L_452:
	movl 0x2C(%rbp),%r14d
	shlq $0x1,%r14
	orq $0x1,%r14
	movq $0x43,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r14,0x0(%r13)
	movq %r15,0x8(%r13)
	addq $0x18,%r12
	movq %r13,%r15
	jmp L_409
.p2align 0x4
L_1514:
L_456:
	movq (globalObjptr+0xB0)(%rip),%r15
	movq %r15,0x30(%rbp)
	jmp L_join_6
.p2align 0x4
L_1517:
L_461:
	movq (globalObjptr+0x420)(%rip),%r15
	jmp L_452
.p2align 0x4
L_1520:
L_518:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x60,%rbp
	leaq (L_519+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_519
.p2align 0x4
.long 0x2A
L_519:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
	jmp L_437
.p2align 0x4
L_1521:
L_520:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x60,%rbp
	leaq (L_521+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_521
.p2align 0x4
.long 0x2A
L_521:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
	jmp L_424
.p2align 0x4
L_1522:
L_522:
	movq $0x6,%r15
	jmp L_409
.p2align 0x4
.long 0xF
L_537:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
	movq (globalObjptrNonRoot+0x0)(%rip),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_538
L_539:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x30,%rbp
	leaq (L_540+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_540
.p2align 0x4
.long 0x2E
L_540:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
L_538:
	movq 0x0(%rbp),%r15
	jmp L_409
.p2align 0x4
.long 0x2B
L_529:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	movq 0x18(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0xF
L_530:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
	movq (globalObjptrNonRoot+0x0)(%rip),%r15
	movq %r15,0x8(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_531
L_532:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x28,%rbp
	leaq (L_533+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_533
.p2align 0x4
.long 0x2C
L_533:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
L_531:
	movq 0x0(%rbp),%r15
	movq 0x0(%r15),%r14
	movq 0x10(%r14),%r13
	movq $0x45,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r13,0x10(%r15)
	addq $0x20,%r12
	movq 0x8(%rbp),%r14
	movq %r14,0x0(%r15)
	movq (globalObjptr+0x430)(%rip),%r14
	movq %r14,0x8(%r15)
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq 0x18(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	movq (gcState+0x650)(%rip),%rbp
	addq %r15,%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.text
.p2align 0x4
.globl flushBuf_0
.hidden flushBuf_0
flushBuf_0:
L_592:
	cmpq %rbp,(gcState+0x18)(%rip)
	jnb L_593
L_681:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x18,%rbp
	leaq (L_682+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_682
.p2align 0x4
.long 0x36
L_682:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
L_593:
	movq 0x0(%rbp),%r11
	movq 0x8(%r11),%r14
	movq 0x0(%r11),%r10
	movl 0x0(%r10),%ecx
	movl $0x0,0x0(%r10)
	movq 0xFFFFFFFFFFFFFFF0(%r14),%r15
	movslq %ecx,%r13
	cmpq %r13,%r15
	jb L_677
L_594:
	movq 0x8(%rbp),%r11
	movq 0x8(%r11),%r13
	xorl %ebx,%ebx
.p2align 0x4,,0x7
loop_32:
	cmpl %ecx,%ebx
	je L_1563
L_595:
	movl %ecx,%r9d
	subl %ebx,%r9d
	jo L_596
L_597:
	movslq %ebx,%r11
	movslq %r9d,%r8
	cmpq %r11,%r15
	jb L_677
L_598:
	movq %r15,%r10
	subq %r11,%r10
	cmpq %r8,%r10
	jb L_1560
L_599:
	movq 0x8(%r13),%r9
	movq 0x0(%r13),%rsi
	movl 0x0(%rsi),%r11d
	testl %r11d,%r11d
	jnz L_1559
L_600:
	movl (gcState+0x44)(%rip),%esi
	incl %esi
	movl %esi,(gcState+0x44)(%rip)
	movq (c_stackP+0x0)(%rip),%rsp
	movq %r8,%r11
	movl %ecx,(localWord32+0x0)(%rip)
	movq %r11,%rcx
	movl %ebx,%edx
	movq %r14,%r11
	movq %r11,%rsi
	movl $0x1,%r11d
	movl %r11d,%edi
	xorq %rax,%rax
	xchgq %r8,%r12
	xchgq %r9,%r14
	movq %r8,(gcState+0x0)(%rip)
	movq %r9,(localObjptr+0x8)(%rip)
	call Posix_IO_writeChar8Arr
L_601:
	cmpq $0xFFFFFFFFFFFFFFFF,%rax
	je L_1535
L_602:
	movl (gcState+0x44)(%rip),%r9d
	testl %r9d,%r9d
	jz L_1534
L_603:
	decl %r9d
	movl %r9d,(gcState+0x44)(%rip)
	movq (gcState+0x0)(%rip),%r9
	xchgq %r9,%r12
	movq %rax,%r11
	movq (localObjptr+0x8)(%rip),%r10
	movl (localWord32+0x0)(%rip),%ecx
	xchgq %r14,%r15
x_1:
	movl %r11d,%r9d
	movslq %r9d,%r8
	cmpq %r11,%r8
	jne L_596
L_605:
	addq 0x0(%r15),%r8
	jo L_596
L_606:
	movq %r8,0x0(%r15)
	testl %r9d,%r9d
	jz L_1531
L_607:
	addl %ebx,%r9d
	jo L_1530
L_608:
	movq %r14,%r15
	movq %r10,%r14
	movl %r9d,%ebx
	jmp loop_32
.p2align 0x4
L_1530:
L_596:
	movq $0x1,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x650)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_1531:
L_609:
	movq (globalObjptr+0x68)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x650)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_1534:
	movq (gcState+0x0)(%rip),%r12
L_611:
	movq (globalObjptr+0x48)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x650)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_1535:
L_612:
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %rax,%rax
	call Posix_Error_getErrno
L_613:
	movl (gcState+0x44)(%rip),%r9d
	testl %r9d,%r9d
	jz L_1558
L_614:
	movl %eax,0x0(%rbp)
	decl %r9d
	movl %r9d,(gcState+0x44)(%rip)
	movq (gcState+0x0)(%rip),%r9
	xchgq %r9,%r12
	movq %r9,%r10
	movq (localObjptr+0x8)(%rip),%r11
	movl (localWord32+0x0)(%rip),%ecx
	xchgq %r14,%r15
.p2align 0x4,,0x7
loop_33:
	cmpl $0x4,0x0(%rbp)
	jne L_1550
L_636:
	movl (gcState+0x44)(%rip),%r9d
	testl %r9d,%r9d
	jnz L_1539
L_665:
	incl %r9d
	movl %r9d,(gcState+0x44)(%rip)
	movq (c_stackP+0x0)(%rip),%rsp
	movq %r10,%r8
	movl %ecx,(localWord32+0x0)(%rip)
	movq %r8,%rcx
	movl %ebx,%edx
	movq %r11,%rsi
	movl $0x1,%r8d
	movl %r8d,%edi
	xorq %rax,%rax
	xchgq %r11,%r12
	xchgq %r10,%r12
	movq %r12,(localWord64+0x10)(%rip)
	movl %r9d,%r12d
	movq %r10,(localObjptr+0x8)(%rip)
	movq %r11,(gcState+0x0)(%rip)
	call Posix_IO_writeChar8Arr
L_666:
	movq %rax,%r9
	movq %rax,(cReturnTemp+0x0)(%rip)
	cmpq $0xFFFFFFFFFFFFFFFF,%r9
	jne L_1537
L_670:
	xorq %rax,%rax
	xchgq %r9,%r13
	movq %r9,(localObjptr+0x0)(%rip)
	call Posix_Error_getErrno
L_671:
	testl %r12d,%r12d
	jz L_1536
L_672:
	movl %eax,0x0(%rbp)
	decl %r12d
	movl %r12d,(gcState+0x44)(%rip)
	movq (gcState+0x0)(%rip),%r12
	movq (localObjptr+0x0)(%rip),%r9
	xchgq %r9,%r13
	movq (localObjptr+0x8)(%rip),%r11
	movq (localWord64+0x10)(%rip),%r10
	movl (localWord32+0x0)(%rip),%ecx
	jmp loop_33
.p2align 0x4
L_1536:
	movq (gcState+0x0)(%rip),%r15
	movq %r15,%r12
	jmp L_611
.p2align 0x4
L_1537:
L_667:
	testl %r12d,%r12d
	jz L_1538
L_668:
	decl %r12d
	movl %r12d,(gcState+0x44)(%rip)
	movq (gcState+0x0)(%rip),%r12
	movq %r9,%r11
	movq (localObjptr+0x8)(%rip),%r10
	movl (localWord32+0x0)(%rip),%ecx
	jmp x_1
.p2align 0x4
L_1538:
	movq (gcState+0x0)(%rip),%r15
	movq %r15,%r12
	jmp L_611
.p2align 0x4
L_1539:
L_637:
	incl %r9d
	movl %r9d,(gcState+0x44)(%rip)
	movq (c_stackP+0x0)(%rip),%rsp
	movl %ecx,(localWord32+0x0)(%rip)
	movq %r10,%rcx
	movl %ebx,%edx
	movq %r11,%rsi
	movl $0x1,%r8d
	movl %r8d,%edi
	xorq %rax,%rax
	xchgl %r9d,%ebx
	xchgq %r11,%r13
	movl %r9d,(localWord32+0x4)(%rip)
	movq %r11,(localObjptr+0x0)(%rip)
	call Posix_IO_writeChar8Arr
L_638:
	cmpq $0xFFFFFFFFFFFFFFFF,%rax
	je L_1541
L_639:
	testl %ebx,%ebx
	jz L_611
L_640:
	decl %ebx
	movl %ebx,(gcState+0x44)(%rip)
	movq %rax,%r11
	movq %r13,%r10
	movq (localObjptr+0x0)(%rip),%r13
	movl (localWord32+0x0)(%rip),%ecx
	movl (localWord32+0x4)(%rip),%ebx
	jmp x_1
.p2align 0x4
L_1541:
L_642:
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %rax,%rax
	call Posix_Error_getErrno
L_643:
	movl %eax,0x0(%rbp)
	testl %ebx,%ebx
	jz L_611
L_644:
	decl %ebx
	movl %ebx,(gcState+0x44)(%rip)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_645
L_662:
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_663+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_663
.p2align 0x4
.long 0x35
L_663:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_645:
	movq (c_stackP+0x0)(%rip),%rsp
	movl 0x0(%rbp),%edi
	xorq %rax,%rax
	call Posix_Error_strError
L_646:
	movq %rax,0x8(%rbp)
	testq %rax,%rax
	jz L_1547
L_647:
	xorl %ecx,%ecx
.p2align 0x4,,0x7
loop_36:
	movslq %ecx,%r15
	movq %r15,0x10(%rbp)
	movq 0x8(%rbp),%r13
	movb 0x0(%r13,%r15,1),%r14b
	testb %r14b,%r14b
	jz L_1542
L_648:
	incl %ecx
	jmp loop_36
.p2align 0x4
L_1542:
L_649:
	movq 0x10(%rbp),%rdx
	cmpq $0x7FFFFFFF,%rdx
	ja L_1546
L_650:
	testq %rdx,%rdx
	jz L_1545
L_651:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x17,%rcx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x20,%rbp
	leaq (L_652+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_652
.p2align 0x4
.long 0x1D
L_652:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
	movq %rax,0x18(%rbp)
L_join_9:
	xorq %r15,%r15
.p2align 0x4,,0x7
loop_37:
	cmpq 0x10(%rbp),%r15
	jnl L_1543
L_658:
	movl %r15d,%r14d
	movslq %r14d,%r13
	movq 0x18(%rbp),%r14
	movq 0x8(%rbp),%r10
	movb 0x0(%r10,%r13,1),%r11b
	movb %r11b,0x0(%r14,%r15,1)
	incq %r15
	jmp loop_37
.p2align 0x4
L_1543:
L_653:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_654
L_656:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x28,%rbp
	leaq (L_657+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_657
.p2align 0x4
.long 0x34
L_657:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
L_654:
	movq 0x18(%rbp),%r15
	movq $0x7,0xFFFFFFFFFFFFFFF8(%r15)
L_655:
	movl 0x0(%rbp),%r14d
	shlq $0x1,%r14
	orq $0x1,%r14
	movq $0x43,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r14,0x0(%r13)
	movq %r15,0x8(%r13)
	movq %r13,(globalObjptrNonRoot+0x0)(%rip)
	addq $0x18,%r12
	movq (gcState+0x650)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_1545:
L_659:
	movq (globalObjptr+0xB0)(%rip),%r15
	movq %r15,0x18(%rbp)
	jmp L_join_9
.p2align 0x4
L_1546:
L_632:
	movq $0x2,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x650)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_1547:
L_661:
	movq (globalObjptr+0x420)(%rip),%r15
	jmp L_655
.p2align 0x4
L_1550:
L_615:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_616
L_634:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_635+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_635
.p2align 0x4
.long 0x35
L_635:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_616:
	movq (c_stackP+0x0)(%rip),%rsp
	movl 0x0(%rbp),%edi
	xorq %rax,%rax
	call Posix_Error_strError
L_617:
	movq %rax,0x8(%rbp)
	testq %rax,%rax
	jz L_1556
L_618:
	xorl %ecx,%ecx
.p2align 0x4,,0x7
loop_34:
	movslq %ecx,%r15
	movq %r15,0x10(%rbp)
	movq 0x8(%rbp),%r13
	movb 0x0(%r13,%r15,1),%r14b
	testb %r14b,%r14b
	jz L_1551
L_619:
	incl %ecx
	jmp loop_34
.p2align 0x4
L_1551:
L_620:
	movq 0x10(%rbp),%rdx
	cmpq $0x7FFFFFFF,%rdx
	ja L_632
L_621:
	testq %rdx,%rdx
	jz L_1554
L_622:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x17,%rcx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x20,%rbp
	leaq (L_623+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_623
.p2align 0x4
.long 0x1D
L_623:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
	movq %rax,0x18(%rbp)
L_join_8:
	xorq %r15,%r15
.p2align 0x4,,0x7
loop_35:
	cmpq 0x10(%rbp),%r15
	jnl L_1552
L_629:
	movl %r15d,%r14d
	movslq %r14d,%r13
	movq 0x18(%rbp),%r14
	movq 0x8(%rbp),%r10
	movb 0x0(%r10,%r13,1),%r11b
	movb %r11b,0x0(%r14,%r15,1)
	incq %r15
	jmp loop_35
.p2align 0x4
L_1552:
L_624:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_625
L_627:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x28,%rbp
	leaq (L_628+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_628
.p2align 0x4
.long 0x34
L_628:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
L_625:
	movq 0x18(%rbp),%r15
	movq $0x7,0xFFFFFFFFFFFFFFF8(%r15)
L_626:
	movl 0x0(%rbp),%r14d
	shlq $0x1,%r14
	orq $0x1,%r14
	movq $0x43,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r14,0x0(%r13)
	movq %r15,0x8(%r13)
	movq %r13,(globalObjptrNonRoot+0x0)(%rip)
	addq $0x18,%r12
	movq (gcState+0x650)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_1554:
L_630:
	movq (globalObjptr+0xB0)(%rip),%r15
	movq %r15,0x18(%rbp)
	jmp L_join_8
.p2align 0x4
L_1556:
L_633:
	movq (globalObjptr+0x420)(%rip),%r15
	jmp L_626
.p2align 0x4
L_1558:
	movq (gcState+0x0)(%rip),%r12
	jmp L_611
.p2align 0x4
L_1559:
L_675:
	movq $0x6,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x650)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_1560:
L_677:
	movq $0x3,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x650)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_1563:
L_679:
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.text
.p2align 0x4
.globl x_2
.hidden x_2
x_2:
L_683:
	cmpq %rbp,(gcState+0x18)(%rip)
	jnb L_684
L_1121:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x30,%rbp
	leaq (L_1122+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_1122
.p2align 0x4
.long 0x58
L_1122:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
L_684:
	movsd 0x0(%rbp),%xmm15
	movd %xmm15,%r15
	movq %r15,%r14
	movq $0x7FF0000000000000,%r13
	andq %r13,%r14
	movq $0x7FF0000000000000,%r13
	cmpq %r13,%r14
	jne L_1568
L_1116:
	movq $0xFFFFFFFFFFFFF,%r14
	andq %r14,%r15
	jz L_1566
L_1117:
	movq (globalObjptr+0x468)(%rip),%r15
	movq %r15,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_1566:
L_1118:
	movsd (globalReal64+0x28)(%rip),%xmm15
	ucomisd 0x0(%rbp),%xmm15
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_1567
L_1119:
	movq (globalObjptr+0x470)(%rip),%r15
	movq %r15,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_1567:
L_1120:
	movq (globalObjptr+0x478)(%rip),%r15
	movq %r15,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_1568:
L_685:
	movsd 0x0(%rbp),%xmm15
	ucomisd (globalReal64+0x28)(%rip),%xmm15
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_1585
L_686:
	movq (globalObjptr+0x438)(%rip),%r15
	movq %r15,0x28(%rbp)
L_687:
	movsd 0x0(%rbp),%xmm15
	ucomisd (globalReal64+0x28)(%rip),%xmm15
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_1584
L_688:
	movq (globalObjptr+0x438)(%rip),%r15
	movq %r15,0x30(%rbp)
L_689:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_690
L_1112:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x40,%rbp
	leaq (L_1113+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_1113
.p2align 0x4
.long 0x57
L_1113:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
L_690:
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %rax,%rax
	call IEEEReal_getRoundingMode
L_691:
	testl %eax,%eax
	jz L_1582
L_692:
	cmpl $0x400,%eax
	je L_1581
L_693:
	cmpl $0x800,%eax
	je L_1580
L_694:
	cmpl $0xC00,%eax
	je L_1569
L_695:
	movq (globalObjptr+0x60)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x650)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_1569:
L_696:
	xorl %ecx,%ecx
L_697:
	movl (gcState+0x44)(%rip),%r14d
	incl %r14d
	movl %r14d,(gcState+0x44)(%rip)
	movq 0x8(%rbp),%r13
	movl 0x0(%r13),%ebx
	testl %ebx,%ebx
	jnz L_1578
L_698:
	movl $0x1,0x0(%r13)
	testl %r14d,%r14d
	jz L_1577
L_699:
	decl %r14d
	movl %r14d,(gcState+0x44)(%rip)
	movq (globalObjptr+0x58)(%rip),%r15
L_700:
	movq (c_stackP+0x0)(%rip),%rsp
	movq %r15,%r14
	movl %ecx,(localWord32+0x0)(%rip)
	movq %r14,%rcx
	movl (localWord32+0x0)(%rip),%edx
	movl $0xC,%r14d
	movl %r14d,%esi
	movl $0x2,%r14d
	movl %r14d,%edi
	movsd 0x0(%rbp),%xmm15
	movsd %xmm15,%xmm0
	movq $0x1,%rax
	call Real64_gdtoa
L_701:
	movl 0x0(%r15),%r14d
	movl %r14d,0x0(%rbp)
	testl %ebx,%ebx
	jnz L_1576
L_702:
	movq 0x8(%rbp),%r14
	movl $0x0,0x0(%r14)
	movq %rax,%r15
L_703:
	movl $0x0,0x4(%rbp)
.p2align 0x4,,0x7
loop_38:
	movq %r15,%r14
	movq %r14,0x8(%rbp)
	movl 0x4(%rbp),%r13d
	movslq %r13d,%r11
	movb 0x0(%r14,%r11,1),%r10b
	testb %r10b,%r10b
	jz L_1570
L_704:
	incl %r13d
	movl %r13d,0x4(%rbp)
	jmp loop_38
.p2align 0x4
L_1570:
L_705:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x17,%rcx
	movq $0x1,%rdx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x40,%rbp
	leaq (L_706+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_706
.p2align 0x4
.long 0x3
L_706:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	movq %rax,0x38(%rbp)
	xorq %r15,%r15
.p2align 0x4,,0x7
loop_39:
	cmpq $0x1,%r15
	jnl L_1571
L_1103:
	movq 0x38(%rbp),%r14
	movq 0x8(%rbp),%r11
	movb 0x0(%r11),%r13b
	movb %r13b,0x0(%r14,%r15,1)
	incq %r15
	jmp loop_39
.p2align 0x4
L_1571:
L_707:
	movq 0x38(%rbp),%r15
	movq $0x7,0xFFFFFFFFFFFFFFF8(%r15)
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x17,%rcx
	movq $0xB,%rdx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_708+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_708
.p2align 0x4
.long 0x4
L_708:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movq %rax,0x40(%rbp)
	xorq %r15,%r15
.p2align 0x4,,0x7
loop_40:
	cmpq $0xB,%r15
	jnl L_1574
L_1098:
	movl %r15d,%r14d
	incl %r14d
	jo L_1573
L_1099:
	cmpl 0x4(%rbp),%r14d
	jnl L_1572
L_1102:
	movslq %r14d,%r13
	movq 0x8(%rbp),%r14
	movb 0x0(%r14,%r13,1),%dl
L_1101:
	movq 0x40(%rbp),%r14
	movb %dl,0x0(%r14,%r15,1)
	incq %r15
	jmp loop_40
.p2align 0x4
L_1572:
L_1100:
	movb $0x30,%dl
	jmp L_1101
.p2align 0x4
L_1573:
L_712:
	movq $0x1,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x650)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_1574:
L_709:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_710
L_1096:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x50,%rbp
	leaq (L_1097+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_1097
.p2align 0x4
.long 0x21
L_1097:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
L_710:
	movq 0x40(%rbp),%r15
	movq $0x7,0xFFFFFFFFFFFFFFF8(%r15)
	movq $0x57,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x18,%r12
	movq %r15,0x0(%r14)
	movq $0x1,0x8(%r14)
	movq $0x57,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x8(%r15)
	addq $0x18,%r12
	movq (globalObjptr+0x440)(%rip),%r14
	movq %r14,0x0(%r15)
	movq %r15,0x48(%rbp)
	addq $0x48,%rbp
	leaq (L_711+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp concat_0
.p2align 0x4
L_1576:
	movq %rax,%r15
	jmp L_703
.p2align 0x4
L_1577:
L_1087:
	movq (globalObjptr+0x48)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x650)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_1578:
L_1106:
	testl %r14d,%r14d
	jz L_1087
L_1107:
	decl %r14d
	movl %r14d,(gcState+0x44)(%rip)
	movq $0x15,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movl $0x0,0x0(%r15)
	jmp L_700
.p2align 0x4
L_1580:
L_1109:
	movl $0x2,%ecx
	jmp L_697
.p2align 0x4
L_1581:
L_1110:
	movl $0x3,%ecx
	jmp L_697
.p2align 0x4
L_1582:
L_1111:
	movl $0x1,%ecx
	jmp L_697
.p2align 0x4
L_1584:
L_1114:
	movq (globalObjptr+0x460)(%rip),%r15
	movq %r15,0x30(%rbp)
	jmp L_689
.p2align 0x4
L_1585:
L_1115:
	movq $0x8000000000000000,%r15
	movd %r15,%xmm15
	movsd 0x0(%rbp),%xmm14
	xorpd %xmm14,%xmm15
	movsd %xmm15,%xmm14
	movsd %xmm14,0x0(%rbp)
	movq (globalObjptr+0x460)(%rip),%r15
	movq %r15,0x28(%rbp)
	jmp L_687
.p2align 0x4
.long 0x37
L_711:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movq 0x48(%rbp),%r15
	movq %r15,0x8(%rbp)
	movl 0x0(%rbp),%r15d
	decl %r15d
	jo L_712
L_713:
	cmpl $0x0,%r15d
	jl L_1608
L_714:
	movl %r15d,0x40(%rbp)
	movq (globalObjptr+0x438)(%rip),%r15
	movq %r15,0x0(%rbp)
L_715:
	movq 0x10(%rbp),%r15
	movq 0x8(%r15),%r14
	movq 0x0(%r15),%r13
	movq %r13,0x48(%rbp)
	movl (gcState+0x44)(%rip),%r15d
	incl %r15d
	movl %r15d,(gcState+0x44)(%rip)
	movl 0x0(%r13),%r11d
	movl %r11d,0x44(%rbp)
	testl %r11d,%r11d
	jnz L_1605
L_716:
	movl $0x1,0x0(%r13)
	testl %r15d,%r15d
	jz L_1087
L_717:
	movq %r14,0x10(%rbp)
	decl %r15d
	movl %r15d,(gcState+0x44)(%rip)
L_718:
	movl 0x40(%rbp),%ebx
	cmpl $0x0,%ebx
	setl %al
	movzbl %al,%eax
	jl L_1603
L_719:
	negl %ebx
	movl $0x20,%ecx
	movl %eax,(localWord32+0x0)(%rip)
.p2align 0x4,,0x7
loop_41:
	movl %ebx,%eax
	movl $0xA,%edi
	cltd
	idivl %edi
	negl %edx
	movslq %edx,%r15
	cmpq $0x10,%r15
	jnb L_721
L_725:
	movq (globalObjptr+0x448)(%rip),%r14
	movb 0x0(%r14,%r15,1),%r13b
	movq 0x10(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movslq %ecx,%r11
	cmpq %r14,%r11
	jnb L_721
L_727:
	movb %r13b,0x0(%r15,%r11,1)
	movl %ebx,%eax
	movl $0xA,%ebx
	cltd
	idivl %ebx
	testl %eax,%eax
	jz L_1589
L_728:
	decl %ecx
	jo L_1587
L_732:
	movl %eax,%ebx
	jmp loop_41
.p2align 0x4
L_1587:
L_729:
	movl 0x44(%rbp),%r14d
	testl %r14d,%r14d
	jnz L_1588
L_730:
	movq $0x1,%r15
L_723:
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq 0x48(%rbp),%r15
	movl $0x0,0x0(%r15)
	movq (gcState+0x650)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_1588:
L_731:
	movq $0x1,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x650)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_1589:
L_733:
	movl (localWord32+0x0)(%rip),%r15d
	testl %r15d,%r15d
	jnz L_1598
L_734:
L_735:
	movslq %ecx,%r15
	movq %r15,0x50(%rbp)
	cmpq %r15,%r14
	jb L_1596
L_736:
	subq %r15,%r14
	movq %r14,0x58(%rbp)
	jz L_1595
L_737:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x17,%rcx
	movq %r14,%rdx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x68,%rbp
	leaq (L_738+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_738
.p2align 0x4
.long 0x38
L_738:
	addq $0xFFFFFFFFFFFFFF98,%rbp
	movq %rax,0x60(%rbp)
L_join_10:
	cmpq $0x5,0x58(%rbp)
	jl L_1592
L_739:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_740
L_1071:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x70,%rbp
	leaq (L_1072+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_1072
.p2align 0x4
.long 0x55
L_1072:
	addq $0xFFFFFFFFFFFFFF90,%rbp
L_740:
	movq (c_stackP+0x0)(%rip),%rsp
	movq 0x58(%rbp),%r9
	movq 0x50(%rbp),%r8
	movq 0x10(%rbp),%rcx
	xorq %rdx,%rdx
	movq 0x60(%rbp),%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x70,%rbp
	leaq (L_741+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayCopy
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_741
.p2align 0x4
.long 0x39
L_741:
	addq $0xFFFFFFFFFFFFFF90,%rbp
L_742:
	movq 0x60(%rbp),%r15
	movq $0x7,0xFFFFFFFFFFFFFFF8(%r15)
	movl 0x44(%rbp),%r15d
	testl %r15d,%r15d
	jnz L_744
L_743:
	movq 0x48(%rbp),%r15
	movl $0x0,0x0(%r15)
L_744:
	movq $0x57,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x60(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x1,0x8(%r15)
	movq $0x57,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq 0x0(%rbp),%r15
	movq %r15,0x0(%r14)
	movq %r14,0x48(%rbp)
	addq $0x48,%rbp
	leaq (L_745+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp concat_0
.p2align 0x4
L_1592:
L_1073:
	movq 0x58(%rbp),%r14
	decq %r14
	xorq %r15,%r15
.p2align 0x4,,0x7
loop_53:
	cmpq %r15,%r14
	jl L_1593
L_1074:
	movq %r15,%r13
	addq 0x50(%rbp),%r13
	movq 0x60(%rbp),%r11
	movq 0x10(%rbp),%r9
	movb 0x0(%r9,%r13,1),%r10b
	movb %r10b,0x0(%r11,%r15,1)
	incq %r15
	jmp loop_53
.p2align 0x4
L_1593:
L_1075:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_742
L_1077:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x70,%rbp
	leaq (L_1078+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_1078
.p2align 0x4
.long 0x39
L_1078:
	addq $0xFFFFFFFFFFFFFF90,%rbp
	jmp L_742
.p2align 0x4
L_1595:
L_1079:
	movq (globalObjptr+0xB0)(%rip),%r15
	movq %r15,0x60(%rbp)
	jmp L_join_10
.p2align 0x4
L_1596:
L_721:
	movl 0x44(%rbp),%r14d
	testl %r14d,%r14d
	jnz L_1597
L_722:
	movq $0x3,%r15
	jmp L_723
.p2align 0x4
L_1597:
L_724:
	movq $0x3,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x650)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_1598:
L_1081:
	decl %ecx
	jo L_729
L_1082:
	movslq %ecx,%r15
	cmpq %r14,%r15
	jnb L_721
L_1084:
	movq 0x10(%rbp),%r13
	movb $0x7E,0x0(%r13,%r15,1)
	jmp L_735
.p2align 0x4
L_1603:
L_1085:
	movl $0x20,%ecx
	movl %eax,(localWord32+0x0)(%rip)
	jmp loop_41
.p2align 0x4
L_1605:
L_1088:
	testl %r15d,%r15d
	jz L_1087
L_1089:
	decl %r15d
	movl %r15d,(gcState+0x44)(%rip)
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x17,%rcx
	movq $0x21,%rdx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x58,%rbp
	leaq (L_1090+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_1090
.p2align 0x4
.long 0x56
L_1090:
	addq $0xFFFFFFFFFFFFFFA8,%rbp
	xorq %r15,%r15
	movq %rax,%r14
.p2align 0x4,,0x7
loop_54:
	cmpq $0x21,%r15
	jnl L_1606
L_1092:
	movb $0x0,0x0(%r14,%r15,1)
	incq %r15
	jmp loop_54
.p2align 0x4
L_1606:
L_1091:
	movq %r14,0x10(%rbp)
	jmp L_718
.p2align 0x4
L_1608:
L_1094:
	negl %r15d
	jo L_712
L_1095:
	movl %r15d,0x40(%rbp)
	movq (globalObjptr+0x460)(%rip),%r15
	movq %r15,0x0(%rbp)
	jmp L_715
.p2align 0x4
.long 0x3A
L_745:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movq 0x48(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_746
L_1068:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_1069+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_1069
.p2align 0x4
.long 0x54
L_1069:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
L_746:
	movq $0x57,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x1,0x8(%r15)
	movq $0x57,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq (globalObjptr+0x450)(%rip),%r15
	movq %r15,0x0(%r14)
	movq $0x57,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x8(%r15)
	addq $0x18,%r12
	movq 0x8(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x57,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq 0x38(%rbp),%r15
	movq %r15,0x0(%r14)
	movq $0x57,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x8(%r15)
	addq $0x18,%r12
	movq 0x30(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0x38(%rbp)
	addq $0x38,%rbp
	leaq (full_0+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp concat_0
.p2align 0x4
.long 0x3B
full_0:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movq 0x38(%rbp),%r14
	movq %r14,0x0(%rbp)
	movq 0xFFFFFFFFFFFFFFF0(%r14),%r15
	movq %r15,0x8(%rbp)
	decq %r15
.p2align 0x4,,0x7
loop_42:
	cmpq $0x0,%r15
	jl L_1737
L_747:
	movq 0x0(%rbp),%r14
	cmpb $0x45,0x0(%r14,%r15,1)
	je L_1612
L_748:
	decq %r15
	jmp loop_42
.p2align 0x4
L_1612:
L_749:
	incq %r15
	movq %r15,0x10(%rbp)
L_750:
	movq 0x8(%rbp),%r15
	movq %r15,%r14
	movq 0x10(%rbp),%r13
	subq %r13,%r14
	movq %r14,0x30(%rbp)
	testq %r13,%r13
	jnz L_752
L_1064:
	cmpq %r15,%r14
	jne L_1733
L_1066:
	movq 0x0(%rbp),%r15
	movq %r15,0x10(%rbp)
L_757:
	movq $0x1,0x30(%rbp)
	movl $0x0,0x38(%rbp)
.p2align 0x4,,0x7
loop_43:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_1732
.p2align 0x4,,0x7
L_758:
	movq 0x10(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movq %r14,0x40(%rbp)
	movl %r14d,%r13d
	movl %r13d,0x3C(%rbp)
	movslq %r13d,%r11
	cmpq %r14,%r11
	jne L_760
L_761:
	movl 0x38(%rbp),%r11d
	cmpl %r13d,%r11d
	setl %al
	movzbl %al,%eax
	movl %eax,0x48(%rbp)
	jnl L_1722
L_1032:
	movslq %r11d,%r13
	cmpq %r14,%r13
	jnb L_781
L_1034:
	incl %r11d
	movzbq 0x0(%r15,%r13,1),%r14
	cmpq $0x100,%r14
	jnb L_781
L_1036:
	movq 0x18(%rbp),%r15
	movl 0x0(%r15,%r14,4),%r13d
	testl %r13d,%r13d
	jz L_1613
L_1059:
	movl %r11d,0x38(%rbp)
	movq $0x59,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x30(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0x30(%rbp)
	jmp loop_43
.p2align 0x4
L_1613:
L_1037:
	movq 0x30(%rbp),%r15
	cmpq $0x1,%r15
	je L_1719
L_1038:
	movq 0x0(%r15),%r14
	movq %r14,0x18(%rbp)
	movq $0x1,0x30(%rbp)
.p2align 0x4,,0x7
L_1039:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_1718
.p2align 0x4,,0x7
L_1040:
	movq $0x59,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x30(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x18(%rbp),%r14
	cmpq $0x1,%r14
	je L_1614
L_1041:
	movq %r15,0x30(%rbp)
	movq 0x0(%r14),%r14
	movq %r14,0x18(%rbp)
	jmp L_1039
.p2align 0x4
L_1614:
L_1043:
	cmpq $0x1,%r15
	je L_1717
L_1044:
	movq 0x0(%r15),%r14
	xorl %ecx,%ecx
.p2align 0x4,,0x7
L_1045:
	incl %ecx
	cmpq $0x1,%r14
	je L_1615
L_1046:
	movq 0x0(%r14),%r14
	jmp L_1045
.p2align 0x4
L_1615:
L_1047:
L_1048:
	movslq %ecx,%r14
	cmpq $0x7FFFFFFF,%r14
	ja L_826
L_1049:
	xorq %r13,%r13
.p2align 0x4,,0x7
loop_52:
	cmpq %r14,%r13
	jnl L_1617
L_1051:
	cmpq $0x1,%r15
	je L_1616
L_1052:
	movq 0x0(%r15),%r15
	incq %r13
	jmp loop_52
.p2align 0x4
L_1616:
L_1026:
	movq (globalObjptr+0x30)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x650)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_1617:
L_776:
	movl 0x48(%rbp),%r15d
	testl %r15d,%r15d
	jz L_778
L_779:
	movl 0x38(%rbp),%ecx
	movslq %ecx,%r15
	cmpq 0x40(%rbp),%r15
	jnb L_781
L_782:
	movl %ecx,%r14d
	incl %r14d
	movq 0x10(%rbp),%r11
	movb 0x0(%r11,%r15,1),%r13b
	cmpb $0x2B,%r13b
	je L_1713
	cmpb $0x2D,%r13b
	je L_1702
	cmpb $0x7E,%r13b
	je L_1691
L_783:
L_784:
	cmpl 0x3C(%rbp),%ecx
	jnl L_778
L_786:
	movslq %ecx,%r15
	cmpq 0x40(%rbp),%r15
	jnb L_781
L_788:
	incl %ecx
	movq 0x10(%rbp),%r14
	movzbq 0x0(%r14,%r15,1),%r13
	cmpq $0x100,%r13
	jnb L_781
L_790:
	movq 0x20(%rbp),%r15
	movq 0x0(%r15,%r13,8),%r14
	movq %r14,%r15
	andq $0x1,%r15
	jz L_1687
L_792:
	shrq $0x1,%r14
	movl %r14d,%ebx
	negl %ebx
.p2align 0x4,,0x7
L_793:
	cmpl 0x3C(%rbp),%ecx
	jnl L_795
L_973:
	movslq %ecx,%r15
	cmpq 0x40(%rbp),%r15
	jnb L_781
L_975:
	incl %ecx
	movq 0x10(%rbp),%r14
	movzbq 0x0(%r14,%r15,1),%r13
	cmpq $0x100,%r13
	jnb L_781
L_977:
	movq 0x20(%rbp),%r15
	movq 0x0(%r15,%r13,8),%r14
	movq %r14,%r15
	andq $0x1,%r15
	jz L_1620
L_979:
	shrq $0x1,%r14
	movl %r14d,%r15d
	imull $0xA,%ebx
	jo L_712
L_980:
	subl %r15d,%ebx
	jo L_712
L_981:
	jmp L_793
.p2align 0x4
L_1620:
L_795:
	negl %ebx
	jo L_712
L_796:
	movl %ebx,0x18(%rbp)
L_797:
	xorq %r15,%r15
.p2align 0x4,,0x7
loop_45:
	cmpq 0x8(%rbp),%r15
	jnl L_799
L_970:
	movq 0x0(%rbp),%r14
	cmpb $0x45,0x0(%r14,%r15,1)
	je L_1621
L_971:
	incq %r15
	jmp loop_45
.p2align 0x4
L_1621:
L_799:
	decq %r15
.p2align 0x4,,0x7
loop_46:
	cmpq $0x0,%r15
	jl L_1681
L_800:
	movq 0x0(%rbp),%r14
	cmpb $0x30,0x0(%r14,%r15,1)
	jne L_1622
L_968:
	decq %r15
	jmp loop_46
.p2align 0x4
L_1622:
L_801:
	incq %r15
	movq %r15,0x20(%rbp)
L_802:
	movq 0x20(%rbp),%rdx
	cmpq 0x8(%rbp),%rdx
	je full_1
L_803:
	cmpq $0x7FFFFFFF,%rdx
	ja L_826
L_804:
	testq %rdx,%rdx
	jz L_1679
L_805:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x17,%rcx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_806+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_806
.p2align 0x4
.long 0x3E
L_806:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movq %rax,0x8(%rbp)
L_join_12:
	movq (c_stackP+0x0)(%rip),%rsp
	movq 0x20(%rbp),%r9
	xorq %r8,%r8
	movq 0x0(%rbp),%rcx
	xorq %rdx,%rdx
	movq 0x8(%rbp),%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_807+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayCopy
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_807
.p2align 0x4
.long 0x3F
L_807:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movq 0x8(%rbp),%r15
	movq $0x7,0xFFFFFFFFFFFFFFF8(%r15)
	movq %r15,0x0(%rbp)
full_1:
	movq 0x0(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	decq %r14
	movq %r14,0x8(%rbp)
	movq $0x1,0x20(%rbp)
	movq $0x0,0x30(%rbp)
.p2align 0x4,,0x7
loop_47:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_1678
.p2align 0x4,,0x7
L_808:
	movq 0x30(%rbp),%r15
	cmpq %r15,0x8(%rbp)
	jl L_1626
L_809:
	movq %r15,%r14
	incq %r14
	movq %r14,0x38(%rbp)
	movq 0x0(%rbp),%r14
	movb 0x0(%r14,%r15,1),%r13b
	movb %r13b,0x1C(%rbp)
	cmpb $0x2E,%r13b
	jne L_1624
L_817:
	movq (globalObjptr+0x438)(%rip),%r15
	movq %r15,0x30(%rbp)
.p2align 0x4,,0x7
full_2:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_1623
.p2align 0x4,,0x7
L_813:
	movq 0x30(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movq $0x13,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r14,0x8(%r13)
	addq $0x20,%r12
	movq $0x0,0x0(%r13)
	movq %r15,0x10(%r13)
	movq $0x5B,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r13,0x0(%r15)
	addq $0x18,%r12
	movq 0x20(%rbp),%r14
	movq %r14,0x8(%r15)
	movq %r15,0x20(%rbp)
	movq 0x38(%rbp),%r15
	movq %r15,0x30(%rbp)
	jmp loop_47
.p2align 0x4
L_1623:
L_814:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_815+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_815
.p2align 0x4
.long 0x41
L_815:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	jmp L_813
.p2align 0x4
L_1624:
L_810:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x17,%rcx
	movq $0x1,%rdx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_811+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_811
.p2align 0x4
.long 0x40
L_811:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	xorq %r15,%r15
	movq %rax,%r14
.p2align 0x4,,0x7
loop_48:
	cmpq $0x1,%r15
	jnl L_1625
L_816:
	movb 0x1C(%rbp),%r13b
	movb %r13b,0x0(%r14,%r15,1)
	incq %r15
	jmp loop_48
.p2align 0x4
L_1625:
L_812:
	movq $0x7,0xFFFFFFFFFFFFFFF8(%r14)
	movq %r14,0x30(%rbp)
	jmp full_2
.p2align 0x4
L_1626:
L_818:
	movq 0x20(%rbp),%r14
	cmpq $0x1,%r14
	je L_1677
L_819:
	movq 0x8(%r14),%r13
	movq %r13,0x0(%rbp)
	movq 0x0(%r14),%r13
	movq %r13,0x8(%rbp)
	movq $0x1,0x20(%rbp)
.p2align 0x4,,0x7
L_820:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_1676
.p2align 0x4,,0x7
L_821:
	movq $0x5B,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x8(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x20(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x0(%rbp),%r14
	cmpq $0x1,%r14
	je L_1627
L_822:
	movq %r15,0x20(%rbp)
	movq 0x0(%r14),%r15
	movq 0x8(%r14),%r14
	movq %r14,0x0(%rbp)
	movq %r15,0x8(%rbp)
	jmp L_820
.p2align 0x4
L_1627:
L_823:
	movq 0x20(%rbp),%r13
	cmpq $0x1,%r13
	je L_1670
L_824:
	movq 0x8(%rbp),%r15
	xorq %r11,%r11
	xchgq %r11,%r14
.p2align 0x4,,0x7
L_825:
	addq 0x8(%r15),%r14
	jo L_826
L_827:
	cmpq $0x1,%r13
	je L_1628
L_828:
	movq 0x0(%r13),%r15
	movq 0x8(%r13),%r13
	jmp L_825
.p2align 0x4
L_1628:
L_829:
	cmpq $0x7FFFFFFF,%r14
	ja L_826
L_830:
	testq %r14,%r14
	jz L_1667
L_831:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x17,%rcx
	movq %r14,%rdx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_832+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_832
.p2align 0x4
.long 0x42
L_832:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movq 0x20(%rbp),%r15
	movq %r15,0x0(%rbp)
	movq $0x0,0x20(%rbp)
	movq 0x8(%rbp),%r15
	movq %rax,0x8(%rbp)
.p2align 0x4,,0x7
L_833:
	movq 0x0(%r15),%r10
	movq 0x10(%r15),%r14
	movq 0x8(%r15),%r11
	movq %r11,0x30(%rbp)
	cmpq $0x5,%r11
	jnl L_1666
L_940:
	decq %r11
	xorq %r13,%r13
	movq %r10,%r15
.p2align 0x4,,0x7
loop_51:
	cmpq %r13,%r11
	jl L_1629
L_941:
	movq %r13,%r10
	addq 0x20(%rbp),%r10
	movq %r15,%r9
	addq %r13,%r9
	movq 0x8(%rbp),%r8
	movb 0x0(%r14,%r9,1),%spl
	movb %spl,0x0(%r8,%r10,1)
	incq %r13
	jmp loop_51
.p2align 0x4
L_1629:
.p2align 0x4,,0x7
L_836:
	movq 0x30(%rbp),%r15
	addq 0x20(%rbp),%r15
	movq 0x0(%rbp),%r14
	cmpq $0x1,%r14
	je L_1630
L_837:
	movq %r15,0x20(%rbp)
	movq 0x0(%r14),%r15
	movq 0x8(%r14),%r14
	movq %r14,0x0(%rbp)
	jmp L_833
.p2align 0x4
L_1630:
L_838:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_839
L_938:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_939+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_939
.p2align 0x4
.long 0x3F
L_939:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
L_839:
	movq 0x8(%rbp),%r15
	movq $0x7,0xFFFFFFFFFFFFFFF8(%r15)
	movq %r15,0x0(%rbp)
L_840:
	movq 0x0(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movq %r14,0x8(%rbp)
	movl %r14d,%ecx
	movslq %ecx,%r15
	cmpq %r14,%r15
	jne L_1664
L_842:
	cmpl $0x1,%ecx
	sete %al
	movzbl %al,%eax
	je L_1663
L_843:
	movl %ecx,%ebx
	addl $0x3,%ebx
	jo L_712
	movl %eax,(localWord32+0x4)(%rip)
L_845:
	movl 0x18(%rbp),%r15d
	cmpl %ebx,%r15d
	jnl sci_2
L_870:
	decl %ecx
	jo L_712
L_871:
	cmpl %ecx,%r15d
	jl L_1636
L_872:
	subl %ecx,%r15d
	jo L_712
L_873:
	movslq %r15d,%rdx
	movq %rdx,0x8(%rbp)
	cmpq $0x7FFFFFFF,%rdx
	ja L_1634
L_874:
	testq %rdx,%rdx
	jz L_1633
L_875:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x17,%rcx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_876+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_876
.p2align 0x4
.long 0x49
L_876:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movq %rax,0x10(%rbp)
L_join_14:
	xorq %r15,%r15
.p2align 0x4,,0x7
loop_49:
	cmpq 0x8(%rbp),%r15
	jnl L_1631
L_881:
	movq 0x10(%rbp),%r14
	movb $0x30,0x0(%r14,%r15,1)
	incq %r15
	jmp loop_49
.p2align 0x4
L_1631:
L_877:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_878
L_879:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_880+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_880
.p2align 0x4
.long 0x3E
L_880:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
L_878:
	movq 0x10(%rbp),%r15
	movq $0x7,0xFFFFFFFFFFFFFFF8(%r15)
	movq $0x57,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x18,%r12
	movq %r15,0x0(%r14)
	movq $0x1,0x8(%r14)
	movq $0x57,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x8(%r15)
	addq $0x18,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x57,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq 0x28(%rbp),%r15
	movq %r15,0x0(%r14)
	movq %r14,0x0(%rbp)
	jmp concat_0
.p2align 0x4
L_1633:
L_882:
	movq (globalObjptr+0xB0)(%rip),%r15
	movq %r15,0x10(%rbp)
	jmp L_join_14
.p2align 0x4
L_1634:
L_826:
	movq $0x2,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x650)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_1636:
L_884:
	cmpl $0x0,%r15d
	jnl L_1650
L_919:
	movl (localWord32+0x4)(%rip),%ebx
	testl %ebx,%ebx
	jnz L_1649
L_920:
	movl $0xFFFFFFFD,%ecx
L_921:
	movl 0x18(%rbp),%r15d
	cmpl %ecx,%r15d
	jl sci_1
L_922:
	movq $0x57,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x18,%r12
	movq 0x0(%rbp),%rdx
	movq %rdx,0x0(%r14)
	movq $0x1,0x8(%r14)
	movq %r14,0x8(%rbp)
	negl %r15d
	jo L_712
L_923:
	decl %r15d
	jo L_712
L_924:
	movslq %r15d,%rdx
	movq %rdx,0x0(%rbp)
	cmpq $0x7FFFFFFF,%rdx
	ja L_826
L_925:
	testq %rdx,%rdx
	jz L_1639
L_926:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x17,%rcx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_927+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_927
.p2align 0x4
.long 0x4D
L_927:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movq %rax,0x10(%rbp)
L_join_17:
	xorq %r15,%r15
.p2align 0x4,,0x7
loop_50:
	cmpq 0x0(%rbp),%r15
	jnl L_1637
L_932:
	movq 0x10(%rbp),%r14
	movb $0x30,0x0(%r14,%r15,1)
	incq %r15
	jmp loop_50
.p2align 0x4
L_1637:
L_928:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_929
L_930:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_931+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_931
.p2align 0x4
.long 0x3F
L_931:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
L_929:
	movq 0x10(%rbp),%r15
	movq $0x7,0xFFFFFFFFFFFFFFF8(%r15)
	movq $0x57,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x18,%r12
	movq %r15,0x0(%r14)
	movq 0x8(%rbp),%r15
	movq %r15,0x8(%r14)
	movq $0x57,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x8(%r15)
	addq $0x18,%r12
	movq (globalObjptr+0x458)(%rip),%r14
	movq %r14,0x0(%r15)
	movq $0x57,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq 0x28(%rbp),%r15
	movq %r15,0x0(%r14)
	movq %r14,0x0(%rbp)
	jmp concat_0
.p2align 0x4
L_1639:
L_933:
	movq (globalObjptr+0xB0)(%rip),%r15
	movq %r15,0x10(%rbp)
	jmp L_join_17
.p2align 0x4
sci_1:
	movl %ebx,%ecx
sci_0:
	movq $0x57,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x10(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x1,0x8(%r15)
	movq $0x57,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq (globalObjptr+0x450)(%rip),%r15
	movq %r15,0x0(%r14)
	movq %r14,0x18(%rbp)
	testl %ecx,%ecx
	jnz L_1648
L_847:
	movq 0x8(%rbp),%r15
	cmpq $0x1,%r15
	jb L_1647
L_848:
	cmpq $0x1,%r15
	je L_1646
L_849:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x17,%rcx
	movq $0x1,%rdx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_850+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_850
.p2align 0x4
.long 0x44
L_850:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x1,%r9
	xorq %r8,%r8
	movq 0x0(%rbp),%rcx
	xorq %rdx,%rdx
	movq %rax,%rsi
	movq %rax,0x10(%rbp)
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_851+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayCopy
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_851
.p2align 0x4
.long 0x45
L_851:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movq 0x10(%rbp),%r15
	movq $0x7,0xFFFFFFFFFFFFFFF8(%r15)
L_852:
	movq 0x8(%rbp),%rdx
	decq %rdx
	movq %rdx,0x20(%rbp)
	cmpq $0x7FFFFFFF,%rdx
	ja L_826
L_853:
	testq %rdx,%rdx
	jz L_1644
L_854:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x17,%rcx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_855+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_855
.p2align 0x4
.long 0x45
L_855:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movq %rax,0x8(%rbp)
L_join_13:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_856
L_863:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_864+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_864
.p2align 0x4
.long 0x48
L_864:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
L_856:
	movq (c_stackP+0x0)(%rip),%rsp
	movq 0x20(%rbp),%r9
	movq $0x1,%r8
	movq 0x0(%rbp),%rcx
	xorq %rdx,%rdx
	movq 0x8(%rbp),%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_857+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayCopy
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_857
.p2align 0x4
.long 0x46
L_857:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movq 0x8(%rbp),%r15
	movq $0x7,0xFFFFFFFFFFFFFFF8(%r15)
	movq $0x57,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x18,%r12
	movq %r15,0x0(%r14)
	movq $0x1,0x8(%r14)
	movq $0x57,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x8(%r15)
	addq $0x18,%r12
	movq (globalObjptr+0x440)(%rip),%r14
	movq %r14,0x0(%r15)
	movq $0x57,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq 0x10(%rbp),%r15
	movq %r15,0x0(%r14)
	movq %r14,0x38(%rbp)
	addq $0x38,%rbp
	leaq (L_858+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp concat_0
.p2align 0x4
L_1644:
L_865:
	movq (globalObjptr+0xB0)(%rip),%r15
	movq %r15,0x8(%rbp)
	jmp L_join_13
.p2align 0x4
L_1646:
L_867:
	movq 0x0(%rbp),%r15
	movq %r15,0x10(%rbp)
	jmp L_852
.p2align 0x4
L_1647:
L_781:
	movq $0x3,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x650)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_1648:
L_869:
	movq 0x0(%rbp),%r15
L_860:
	movq $0x57,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	addq $0x18,%r12
	movq 0x18(%rbp),%r15
	movq %r15,0x8(%r14)
	movq $0x57,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x8(%r15)
	addq $0x18,%r12
	movq 0x28(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0x0(%rbp)
	jmp concat_0
.p2align 0x4
L_1649:
L_936:
	movl $0xFFFFFFFE,%ecx
	jmp L_921
.p2align 0x4
L_1650:
L_885:
	movl 0x18(%rbp),%r15d
	incl %r15d
	movslq %r15d,%rdx
	movq %rdx,0x10(%rbp)
	movq 0x8(%rbp),%r15
	cmpq %rdx,%r15
	jb L_781
L_886:
	cmpq %r15,%rdx
	je L_1659
L_887:
	cmpq $0x7FFFFFFF,%rdx
	ja L_826
L_888:
	testq %rdx,%rdx
	jz L_1657
L_889:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x17,%rcx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_890+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_890
.p2align 0x4
.long 0x49
L_890:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movq %rax,0x18(%rbp)
L_join_15:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_891
L_913:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_914+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_914
.p2align 0x4
.long 0x44
L_914:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
L_891:
	movq (c_stackP+0x0)(%rip),%rsp
	movq 0x10(%rbp),%r9
	xorq %r8,%r8
	movq 0x0(%rbp),%rcx
	xorq %rdx,%rdx
	movq 0x18(%rbp),%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_892+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayCopy
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_892
.p2align 0x4
.long 0x44
L_892:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movq 0x18(%rbp),%r15
	movq $0x7,0xFFFFFFFFFFFFFFF8(%r15)
L_893:
	movq 0x8(%rbp),%r14
	movq %r14,%r13
	movq 0x10(%rbp),%r11
	subq %r11,%r13
	movq %r13,0x20(%rbp)
	testq %r11,%r11
	jnz L_895
L_910:
	cmpq %r14,%r13
	jne L_1651
L_912:
	movq 0x0(%rbp),%r15
L_901:
	movq $0x57,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	addq $0x18,%r12
	movq $0x1,0x8(%r14)
	movq $0x57,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x8(%r15)
	addq $0x18,%r12
	movq (globalObjptr+0x440)(%rip),%r14
	movq %r14,0x0(%r15)
	movq $0x57,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq 0x18(%rbp),%r15
	movq %r15,0x0(%r14)
	movq %r14,0x38(%rbp)
	addq $0x38,%rbp
	leaq (L_902+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp concat_0
.p2align 0x4
L_1651:
L_895:
	movq 0x20(%rbp),%rdx
	cmpq $0x7FFFFFFF,%rdx
	ja L_826
L_896:
	testq %rdx,%rdx
	jz L_1653
L_897:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x17,%rcx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_898+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_898
.p2align 0x4
.long 0x44
L_898:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movq %rax,0x8(%rbp)
L_join_16:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_899
L_906:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_907+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_907
.p2align 0x4
.long 0x4C
L_907:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
L_899:
	movq (c_stackP+0x0)(%rip),%rsp
	movq 0x20(%rbp),%r9
	movq 0x10(%rbp),%r8
	movq 0x0(%rbp),%rcx
	xorq %rdx,%rdx
	movq 0x8(%rbp),%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_900+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayCopy
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_900
.p2align 0x4
.long 0x4A
L_900:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movq 0x8(%rbp),%r15
	movq $0x7,0xFFFFFFFFFFFFFFF8(%r15)
	jmp L_901
.p2align 0x4
L_1653:
L_908:
	movq (globalObjptr+0xB0)(%rip),%r15
	movq %r15,0x8(%rbp)
	jmp L_join_16
.p2align 0x4
L_1657:
L_915:
	movq (globalObjptr+0xB0)(%rip),%r15
	movq %r15,0x18(%rbp)
	jmp L_join_15
.p2align 0x4
L_1659:
L_917:
	movq 0x0(%rbp),%r15
	movq %r15,0x18(%rbp)
	jmp L_893
.p2align 0x4
sci_2:
	movl (localWord32+0x4)(%rip),%ecx
	jmp sci_0
.p2align 0x4
L_1663:
L_937:
	movl $0x3,%ebx
	movl %eax,(localWord32+0x4)(%rip)
	jmp L_845
.p2align 0x4
L_1664:
L_760:
	movq (globalObjptr+0x50)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x650)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_1666:
L_834:
	movq (c_stackP+0x0)(%rip),%rsp
	movq %r11,%r9
	movq %r10,%r8
	movq %r14,%rcx
	movq 0x20(%rbp),%rdx
	movq 0x8(%rbp),%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x40,%rbp
	leaq (L_835+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayCopy
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_835
.p2align 0x4
.long 0x43
L_835:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	jmp L_836
.p2align 0x4
L_1667:
L_943:
	movq 0x20(%rbp),%r15
	movq %r15,0x0(%rbp)
	movq 0x8(%rbp),%r15
	movq (globalObjptr+0xB0)(%rip),%r14
	movq %r14,0x8(%rbp)
	movq $0x0,0x20(%rbp)
	jmp L_833
.p2align 0x4
L_1670:
L_945:
	movq 0x8(%rbp),%r15
	movq 0x0(%r15),%r14
	movq 0x10(%r15),%r13
	movq %r13,0x20(%rbp)
	movq 0x8(%r15),%r11
	movq %r11,0x30(%rbp)
	testq %r14,%r14
	movq %r14,0x0(%rbp)
	jnz L_947
L_957:
	cmpq %r11,0xFFFFFFFFFFFFFFF0(%r13)
	jne L_1671
L_959:
	movq %r13,0x0(%rbp)
	jmp L_840
.p2align 0x4
L_1671:
L_947:
	movq 0x30(%rbp),%rdx
	cmpq $0x7FFFFFFF,%rdx
	ja L_826
L_948:
	testq %rdx,%rdx
	jz L_1673
L_949:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x17,%rcx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x40,%rbp
	leaq (L_950+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_950
.p2align 0x4
.long 0x4E
L_950:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	movq %rax,0x8(%rbp)
L_join_18:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_951
L_953:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x40,%rbp
	leaq (L_954+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_954
.p2align 0x4
.long 0x4F
L_954:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
L_951:
	movq (c_stackP+0x0)(%rip),%rsp
	movq 0x30(%rbp),%r9
	movq 0x0(%rbp),%r8
	movq 0x20(%rbp),%rcx
	xorq %rdx,%rdx
	movq 0x8(%rbp),%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_952+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayCopy
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_952
.p2align 0x4
.long 0x3F
L_952:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movq 0x8(%rbp),%r15
	movq $0x7,0xFFFFFFFFFFFFFFF8(%r15)
	movq %r15,0x0(%rbp)
	jmp L_840
.p2align 0x4
L_1673:
L_955:
	movq (globalObjptr+0xB0)(%rip),%r15
	movq %r15,0x8(%rbp)
	jmp L_join_18
.p2align 0x4
L_1676:
L_960:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_961+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_961
.p2align 0x4
.long 0x50
L_961:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	jmp L_821
.p2align 0x4
L_1677:
L_962:
	movq (globalObjptr+0x438)(%rip),%r13
	movq %r13,0x0(%rbp)
	jmp L_840
.p2align 0x4
L_1678:
L_963:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x40,%rbp
	leaq (L_964+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_964
.p2align 0x4
.long 0x51
L_964:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	jmp L_808
.p2align 0x4
L_1679:
L_965:
	movq (globalObjptr+0xB0)(%rip),%r15
	movq %r15,0x8(%rbp)
	jmp L_join_12
.p2align 0x4
L_1681:
L_969:
	movq $0x0,0x20(%rbp)
	jmp L_802
.p2align 0x4
L_1687:
L_778:
	movq $0x5,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x650)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_1691:
L_1003:
	cmpl 0x3C(%rbp),%r14d
	jnl L_778
L_1005:
	movslq %r14d,%r15
	cmpq 0x40(%rbp),%r15
	jnb L_781
L_1007:
	incl %r14d
	movq 0x10(%rbp),%r13
	movzbq 0x0(%r13,%r15,1),%r11
	cmpq $0x100,%r11
	jnb L_781
L_1009:
	movq 0x20(%rbp),%r15
	movq 0x0(%r15,%r11,8),%r13
	movq %r13,%r15
	andq $0x1,%r15
	jz L_778
L_1011:
	shrq $0x1,%r13
	movl %r13d,%ebx
	negl %ebx
	xchgl %r14d,%ecx
.p2align 0x4,,0x7
L_1012:
	cmpl 0x3C(%rbp),%ecx
	jnl L_1697
L_1014:
	movslq %ecx,%r15
	cmpq 0x40(%rbp),%r15
	jnb L_781
L_1016:
	incl %ecx
	movq 0x10(%rbp),%r14
	movzbq 0x0(%r14,%r15,1),%r13
	cmpq $0x100,%r13
	jnb L_781
L_1018:
	movq 0x20(%rbp),%r15
	movq 0x0(%r15,%r13,8),%r14
	movq %r14,%r15
	andq $0x1,%r15
	jz L_1694
L_1020:
	shrq $0x1,%r14
	movl %r14d,%r15d
	imull $0xA,%ebx
	jo L_712
L_1021:
	subl %r15d,%ebx
	jo L_712
L_1022:
	jmp L_1012
.p2align 0x4
L_1694:
L_1019:
	movl %ebx,0x18(%rbp)
	jmp L_797
.p2align 0x4
L_1697:
L_1013:
	movl %ebx,0x18(%rbp)
	jmp L_797
.p2align 0x4
L_1702:
L_983:
	cmpl 0x3C(%rbp),%r14d
	jnl L_778
L_985:
	movslq %r14d,%r15
	cmpq 0x40(%rbp),%r15
	jnb L_781
L_987:
	incl %r14d
	movzbq 0x0(%r11,%r15,1),%r13
	cmpq $0x100,%r13
	jnb L_781
L_989:
	movq 0x20(%rbp),%r15
	movq 0x0(%r15,%r13,8),%r11
	movq %r11,%r15
	andq $0x1,%r15
	jz L_778
L_991:
	shrq $0x1,%r11
	movl %r11d,%ebx
	negl %ebx
	xchgl %r14d,%ecx
.p2align 0x4,,0x7
L_992:
	cmpl 0x3C(%rbp),%ecx
	jnl L_1708
L_994:
	movslq %ecx,%r15
	cmpq 0x40(%rbp),%r15
	jnb L_781
L_996:
	incl %ecx
	movq 0x10(%rbp),%r14
	movzbq 0x0(%r14,%r15,1),%r13
	cmpq $0x100,%r13
	jnb L_781
L_998:
	movq 0x20(%rbp),%r15
	movq 0x0(%r15,%r13,8),%r14
	movq %r14,%r15
	andq $0x1,%r15
	jz L_1705
L_1000:
	shrq $0x1,%r14
	movl %r14d,%r15d
	imull $0xA,%ebx
	jo L_712
L_1001:
	subl %r15d,%ebx
	jo L_712
L_1002:
	jmp L_992
.p2align 0x4
L_1705:
L_999:
	movl %ebx,0x18(%rbp)
	jmp L_797
.p2align 0x4
L_1708:
L_993:
	movl %ebx,0x18(%rbp)
	jmp L_797
.p2align 0x4
L_1713:
	xchgl %r14d,%ecx
	jmp L_784
.p2align 0x4
L_1717:
L_1055:
	xorl %ecx,%ecx
	jmp L_1048
.p2align 0x4
L_1718:
L_1056:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x58,%rbp
	leaq (L_1057+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_1057
.p2align 0x4
.long 0x52
L_1057:
	addq $0xFFFFFFFFFFFFFFA8,%rbp
	jmp L_1040
.p2align 0x4
L_1719:
L_1058:
	movq $0x1,%r14
	xchgq %r14,%r15
	jmp L_1043
.p2align 0x4
L_1722:
L_762:
	movq 0x30(%rbp),%r13
	cmpq $0x1,%r13
	je L_1730
L_763:
	movq 0x0(%r13),%r10
	movq %r10,0x18(%rbp)
	movq $0x1,0x30(%rbp)
.p2align 0x4,,0x7
L_764:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_1729
.p2align 0x4,,0x7
L_765:
	movq $0x59,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x30(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x18(%rbp),%r14
	cmpq $0x1,%r14
	je L_1723
L_766:
	movq %r15,0x30(%rbp)
	movq 0x0(%r14),%r14
	movq %r14,0x18(%rbp)
	jmp L_764
.p2align 0x4
L_1723:
L_768:
	cmpq $0x1,%r15
	je L_1728
L_769:
	movq 0x0(%r15),%r14
	xorl %ecx,%ecx
.p2align 0x4,,0x7
L_770:
	incl %ecx
	cmpq $0x1,%r14
	je L_1724
L_771:
	movq 0x0(%r14),%r14
	jmp L_770
.p2align 0x4
L_1724:
L_772:
L_773:
	movslq %ecx,%r14
	cmpq $0x7FFFFFFF,%r14
	ja L_826
L_774:
	xorq %r13,%r13
.p2align 0x4,,0x7
loop_44:
	cmpq %r14,%r13
	jnl L_776
L_1023:
	cmpq $0x1,%r15
	je L_1026
L_1024:
	movq 0x0(%r15),%r15
	incq %r13
	jmp loop_44
.p2align 0x4
L_1728:
L_1028:
	xorl %ecx,%ecx
	jmp L_773
.p2align 0x4
L_1729:
L_1029:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x58,%rbp
	leaq (L_1030+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_1030
.p2align 0x4
.long 0x52
L_1030:
	addq $0xFFFFFFFFFFFFFFA8,%rbp
	jmp L_765
.p2align 0x4
L_1730:
L_1031:
	movq $0x1,%r10
	xchgq %r10,%r15
	jmp L_768
.p2align 0x4
L_1732:
L_1060:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_1061+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_1061
.p2align 0x4
.long 0x53
L_1061:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	jmp L_758
.p2align 0x4
L_1733:
L_752:
	movq 0x30(%rbp),%rdx
	cmpq $0x7FFFFFFF,%rdx
	ja L_826
L_753:
	testq %rdx,%rdx
	jz L_1734
L_754:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x17,%rcx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x40,%rbp
	leaq (L_755+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_755
.p2align 0x4
.long 0x3C
L_755:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	movq %rax,0x38(%rbp)
L_join_11:
	movq (c_stackP+0x0)(%rip),%rsp
	movq 0x30(%rbp),%r9
	movq 0x10(%rbp),%r8
	movq 0x0(%rbp),%rcx
	xorq %rdx,%rdx
	movq 0x38(%rbp),%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_756+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayCopy
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_756
.p2align 0x4
.long 0x3D
L_756:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movq 0x38(%rbp),%r15
	movq $0x7,0xFFFFFFFFFFFFFFF8(%r15)
	movq %r15,0x10(%rbp)
	jmp L_757
.p2align 0x4
L_1734:
L_1062:
	movq (globalObjptr+0xB0)(%rip),%r15
	movq %r15,0x38(%rbp)
	jmp L_join_11
.p2align 0x4
L_1737:
L_1067:
	movq $0x0,0x10(%rbp)
	jmp L_750
.p2align 0x4
.long 0x47
L_858:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movq 0x38(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_859
L_861:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_862+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_862
.p2align 0x4
.long 0x44
L_862:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
L_859:
	movq 0x0(%rbp),%r15
	jmp L_860
.p2align 0x4
.long 0x4B
L_902:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movq 0x38(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_903
L_904:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_905+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_905
.p2align 0x4
.long 0x49
L_905:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
L_903:
	movq $0x57,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x1,0x8(%r15)
	movq $0x57,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq 0x28(%rbp),%r15
	movq %r15,0x0(%r14)
	movq %r14,0x0(%rbp)
	jmp concat_0
.text
.p2align 0x4
.globl concat_0
.hidden concat_0
concat_0:
L_1123:
	cmpq %rbp,(gcState+0x18)(%rip)
	jnb L_1124
L_1148:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_1149+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_1149
.p2align 0x4
.long 0x5A
L_1149:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_1124:
	movq 0x0(%rbp),%r11
	cmpq $0x1,%r11
	je L_1748
L_1125:
	movq 0x8(%r11),%r13
	movq %r13,0x8(%rbp)
	movq 0x0(%r11),%r15
	movq %r15,0x10(%rbp)
	cmpq $0x1,%r13
	je L_1747
L_1126:
	xorq %r14,%r14
.p2align 0x4,,0x7
L_1127:
	addq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	jo L_1128
L_1129:
	cmpq $0x1,%r13
	je L_1740
L_1130:
	movq 0x0(%r13),%r15
	movq 0x8(%r13),%r13
	jmp L_1127
.p2align 0x4
L_1740:
L_1131:
	cmpq $0x7FFFFFFF,%r14
	ja L_1745
L_1132:
	testq %r14,%r14
	jz L_1744
L_1133:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x17,%rcx
	movq %r14,%rdx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x20,%rbp
	leaq (L_1134+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_1134
.p2align 0x4
.long 0x59
L_1134:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	movq %rax,0x8(%rbp)
	movq 0x10(%rbp),%r15
	movq $0x0,0x10(%rbp)
.p2align 0x4,,0x7
L_1135:
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r13
	movq %r13,0x18(%rbp)
	cmpq $0x5,%r13
	jnl L_1743
L_1141:
	decq %r13
	xorq %r14,%r14
.p2align 0x4,,0x7
loop_55:
	cmpq %r14,%r13
	jl L_1741
L_1142:
	movq %r14,%r11
	addq 0x10(%rbp),%r11
	movq 0x8(%rbp),%r10
	movb 0x0(%r15,%r14,1),%r9b
	movb %r9b,0x0(%r10,%r11,1)
	incq %r14
	jmp loop_55
.p2align 0x4
L_1741:
.p2align 0x4,,0x7
L_1138:
	movq 0x18(%rbp),%r15
	addq 0x10(%rbp),%r15
	movq 0x0(%rbp),%r14
	cmpq $0x1,%r14
	je L_1742
L_1139:
	movq %r15,0x10(%rbp)
	movq 0x0(%r14),%r15
	movq 0x8(%r14),%r14
	movq %r14,0x0(%rbp)
	jmp L_1135
.p2align 0x4
L_1742:
L_1140:
	movq 0x8(%rbp),%r15
	movq $0x7,0xFFFFFFFFFFFFFFF8(%r15)
	movq %r15,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_1743:
L_1136:
	movq (c_stackP+0x0)(%rip),%rsp
	movq %r13,%r9
	xorq %r8,%r8
	movq %r15,%rcx
	movq 0x10(%rbp),%rdx
	movq 0x8(%rbp),%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x28,%rbp
	leaq (L_1137+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayCopy
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_1137
.p2align 0x4
.long 0x2C
L_1137:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	jmp L_1138
.p2align 0x4
L_1744:
L_1144:
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	movq 0x10(%rbp),%r15
	movq (globalObjptr+0xB0)(%rip),%r14
	movq %r14,0x8(%rbp)
	movq $0x0,0x10(%rbp)
	jmp L_1135
.p2align 0x4
L_1745:
L_1128:
	movq $0x2,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x650)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_1747:
L_1146:
	movq %r15,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_1748:
L_1147:
	movq (globalObjptr+0x438)(%rip),%r15
	movq %r15,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.text
.p2align 0x4
.globl exnMessage_0
.hidden exnMessage_0
exnMessage_0:
L_1150:
	movq (gcState+0x20)(%rip),%r15
	movq %r15,0x18(%rbp)
	cmpq %rbp,(gcState+0x18)(%rip)
	jnb L_1151
L_1222:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x28,%rbp
	leaq (L_1223+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_1223
.p2align 0x4
.long 0x2C
L_1223:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
L_1151:
	movq 0x8(%rbp),%r13
	movq 0x0(%r13),%r11
	cmpq $0x1,%r11
	je L_1159
L_1152:
	movq 0x0(%r11),%r14
	movq 0x8(%r11),%r11
	movq %r11,%r15
.p2align 0x4,,0x7
L_1153:
	cmpq $0x1,%r14
	je L_1771
	cmpq $0x2,%r14
	je L_1761
L_1155:
	movq 0x0(%rbp),%r13
	movq %r13,%r11
	andq $0x3,%r11
	jnz L_1156
L_1170:
	movq 0xFFFFFFFFFFFFFFF8(%r13),%r11
	shrq $0x1,%r11
	cmpq $0x22,%r11
	je L_1759
L_1156:
	cmpq $0x1,%r15
	je L_1750
L_1157:
	movq 0x0(%r15),%r14
	movq 0x8(%r15),%r15
	jmp L_1153
.p2align 0x4
L_1750:
L_1159:
	movq 0x0(%rbp),%r15
	cmpq $0x1,%r15
	je L_1758
	cmpq $0x2,%r15
	je L_1757
	cmpq $0x3,%r15
	je L_1756
	cmpq $0x5,%r15
	je L_1755
	cmpq $0x6,%r15
	je L_1754
L_1160:
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r14
	shrq $0x1,%r14
	cmpq $0x20,%r14
	je L_1753
	cmpq $0x21,%r14
	je L_1752
	cmpq $0x22,%r14
	je L_1751
L_1161:
	movq (globalObjptr+0x480)(%rip),%r15
	movq %r15,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_1751:
L_1164:
	movq (globalObjptr+0x3B8)(%rip),%r15
	movq %r15,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_1752:
L_1163:
	movq (globalObjptr+0x3B0)(%rip),%r15
	movq %r15,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_1753:
L_1162:
	movq (globalObjptr+0x3A8)(%rip),%r15
	movq %r15,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_1754:
L_1169:
	movq (globalObjptr+0x3E0)(%rip),%r15
	movq %r15,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_1755:
L_1168:
	movq (globalObjptr+0x3D8)(%rip),%r15
	movq %r15,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_1756:
L_1167:
	movq (globalObjptr+0x3D0)(%rip),%r15
	movq %r15,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_1757:
L_1166:
	movq (globalObjptr+0x3C8)(%rip),%r15
	movq %r15,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_1758:
L_1165:
	movq (globalObjptr+0x3C0)(%rip),%r15
	movq %r15,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_1759:
L_1171:
	movq %r14,0x38(%rbp)
	movq 0x0(%rbp),%r15
	movq 0x10(%r15),%r14
	movq %r14,0x8(%rbp)
	movq 0x8(%r15),%r14
	movq %r14,0x20(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0x30(%rbp)
	addq $0x30,%rbp
	leaq (L_1172+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp exnMessage_0
.p2align 0x4
L_1761:
L_1191:
	movq 0x0(%rbp),%r14
	movq %r14,%r13
	andq $0x3,%r13
	jnz L_1192
L_1195:
	movq 0xFFFFFFFFFFFFFFF8(%r14),%r13
	shrq $0x1,%r13
	cmpq $0x21,%r13
	je L_1763
L_1192:
	cmpq $0x1,%r15
	je L_1159
L_1193:
	movq 0x0(%r15),%r14
	movq 0x8(%r15),%r15
	jmp L_1153
.p2align 0x4
L_1763:
L_1196:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_1197
L_1219:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x28,%rbp
	leaq (L_1220+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_1220
.p2align 0x4
.long 0x5E
L_1220:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
L_1197:
	movq 0x0(%rbp),%r14
	movq 0x0(%r14),%r15
	movq 0x8(%r14),%r13
	movq %r13,0x8(%rbp)
	movq %r15,%r14
	andq $0x1,%r14
	jz L_1768
L_1202:
	shrq $0x1,%r15
	movl %r15d,%ecx
	movq (globalObjptr+0x18)(%rip),%r15
	movq (globalObjptr+0x10)(%rip),%r14
	movq %r14,0x0(%rbp)
.p2align 0x4,,0x7
L_1203:
	movq 0x0(%rbp),%r14
	cmpl %ecx,0x0(%r14)
	je L_1766
L_1204:
	cmpq $0x1,%r15
	je L_1764
L_1205:
	movq 0x0(%r15),%r14
	movq 0x8(%r15),%r15
	movq %r14,0x0(%rbp)
	jmp L_1203
.p2align 0x4
L_1764:
L_1206:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_1207
L_1213:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x28,%rbp
	leaq (L_1214+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_1214
.p2align 0x4
.long 0x60
L_1214:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
L_1207:
	movq (globalObjptr+0x4B0)(%rip),%r15
L_1208:
	movq $0x57,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	addq $0x18,%r12
	movq (globalObjptr+0x20)(%rip),%r15
	movq %r15,0x8(%r14)
	movq $0x57,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x8(%r15)
	addq $0x18,%r12
	movq (globalObjptr+0x4B8)(%rip),%r14
	movq %r14,0x0(%r15)
	movq %r15,0x28(%rbp)
	leaq L_1201(%rip),%r15
	movq %r15,0x10(%rbp)
	movq %rbp,%r15
	addq $0x18,%r15
	subq (gcState+0x650)(%rip),%r15
	movq %r15,(gcState+0x20)(%rip)
	addq $0x28,%rbp
	leaq (L_1209+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp concat_0
.p2align 0x4
L_1766:
L_1215:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_1216
L_1217:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x28,%rbp
	leaq (L_1218+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_1218
.p2align 0x4
.long 0x2C
L_1218:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
L_1216:
	movq 0x0(%rbp),%r14
	movq 0x8(%r14),%r15
	jmp L_1208
.p2align 0x4
L_1768:
L_1198:
	movq (globalObjptr+0x438)(%rip),%r15
L_1199:
	movq $0x57,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	addq $0x18,%r12
	movq $0x1,0x8(%r14)
	movq $0x57,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x8(%r15)
	addq $0x18,%r12
	movq 0x8(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x57,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq (globalObjptr+0x4A8)(%rip),%r15
	movq %r15,0x0(%r14)
	movq %r14,0x28(%rbp)
	leaq L_1201(%rip),%r15
	movq %r15,0x10(%rbp)
	movq %rbp,%r15
	addq $0x18,%r15
	subq (gcState+0x650)(%rip),%r15
	movq %r15,(gcState+0x20)(%rip)
	addq $0x28,%rbp
	leaq (L_1200+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp concat_0
.p2align 0x4
L_1771:
L_1179:
	movq 0x0(%rbp),%r14
	movq %r14,%r13
	andq $0x3,%r13
	jnz L_1180
L_1183:
	movq 0xFFFFFFFFFFFFFFF8(%r14),%r13
	shrq $0x1,%r13
	cmpq $0x20,%r13
	je L_1773
L_1180:
	cmpq $0x1,%r15
	je L_1159
L_1181:
	movq 0x0(%r15),%r14
	movq 0x8(%r15),%r15
	jmp L_1153
.p2align 0x4
L_1773:
L_1184:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_1185
L_1188:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x28,%rbp
	leaq (L_1189+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_1189
.p2align 0x4
.long 0x5E
L_1189:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
L_1185:
	movq 0x0(%rbp),%r15
	movq 0x0(%r15),%r14
	movq $0x57,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x0(%r15)
	addq $0x18,%r12
	movq $0x1,0x8(%r15)
	movq $0x57,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq (globalObjptr+0x4A0)(%rip),%r15
	movq %r15,0x0(%r14)
	movq %r14,0x28(%rbp)
	leaq L_1187(%rip),%r15
	movq %r15,0x10(%rbp)
	movq %rbp,%r15
	addq $0x18,%r15
	subq (gcState+0x650)(%rip),%r15
	movq %r15,(gcState+0x20)(%rip)
	addq $0x28,%rbp
	leaq (L_1186+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp concat_0
.p2align 0x4
.long 0x5B
L_1172:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
	movq 0x30(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_1173
L_1176:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x30,%rbp
	leaq (L_1177+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_1177
.p2align 0x4
.long 0x5D
L_1177:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
L_1173:
	movq $0x57,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x1,0x8(%r15)
	movq $0x57,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq (globalObjptr+0x488)(%rip),%r15
	movq %r15,0x0(%r14)
	movq $0x57,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x8(%r15)
	addq $0x18,%r12
	movq 0x8(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x57,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq (globalObjptr+0x490)(%rip),%r15
	movq %r15,0x0(%r14)
	movq $0x57,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x8(%r15)
	addq $0x18,%r12
	movq 0x20(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x57,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq (globalObjptr+0x498)(%rip),%r15
	movq %r15,0x0(%r14)
	movq %r14,0x28(%rbp)
	leaq L_1175(%rip),%r15
	movq %r15,0x10(%rbp)
	movq %rbp,%r15
	addq $0x18,%r15
	subq (gcState+0x650)(%rip),%r15
	movq %r15,(gcState+0x20)(%rip)
	addq $0x28,%rbp
	leaq (L_1174+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp concat_0
.p2align 0x4
.long 0x5F
L_1209:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	movq 0x28(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_1210
L_1211:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x28,%rbp
	leaq (L_1212+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_1212
.p2align 0x4
.long 0x2C
L_1212:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
L_1210:
	movq 0x0(%rbp),%r15
	jmp L_1199
.p2align 0x4
.long 0xF
L_1201:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
	movq 0x18(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	movq (gcState+0x650)(%rip),%rbp
	addq %r15,%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x5C
L_1200:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	movq 0x28(%rbp),%r15
	movq %r15,0x0(%rbp)
	movq 0x18(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x5C
L_1186:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	movq 0x28(%rbp),%r15
	movq %r15,0x0(%rbp)
	movq 0x18(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0xF
L_1187:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
	movq 0x18(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	movq (gcState+0x650)(%rip),%rbp
	addq %r15,%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x5C
L_1174:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	movq 0x28(%rbp),%r15
	movq %r15,0x0(%rbp)
	movq 0x18(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0xF
L_1175:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
	movq 0x18(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	movq (gcState+0x650)(%rip),%rbp
	addq %r15,%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.text
.p2align 0x4
.globl exit_0
.hidden exit_0
exit_0:
L_1224:
	movq (gcState+0x20)(%rip),%r15
	movq %r15,0x18(%rbp)
	cmpq %rbp,(gcState+0x18)(%rip)
	jnb L_1225
L_1317:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x28,%rbp
	leaq (L_1318+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_1318
.p2align 0x4
.long 0x60
L_1318:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
L_1225:
	movq 0x8(%rbp),%r14
	movq 0x10(%r14),%r15
	movq 0x8(%r14),%r13
	movq 0x0(%r14),%r11
	movl 0x0(%r15),%r14d
	testl %r14d,%r14d
	jnz L_1808
L_1226:
	movl $0x1,0x0(%r15)
	movl 0x0(%rbp),%r14d
	cmpl $0x0,%r14d
	setl %al
	movzbl %al,%eax
	movl %eax,0x4(%rbp)
	jl L_1807
L_1227:
	cmpl $0x100,%r14d
	jnl L_1785
L_1282:
	movq 0x0(%r13),%r14
	cmpq $0x1,%r14
	je L_1297
L_1283:
	movq 0x8(%r14),%r13
	movq %r13,0x8(%rbp)
	movq 0x0(%r14),%r14
	movq %r14,%r15
.p2align 0x4,,0x7
L_1284:
	movq 0x0(%r15),%r14
	movq %r14,0x20(%rbp)
	cmpq $0x1,%r14
	jne L_1781
.p2align 0x4,,0x7
L_1294:
	movq 0x8(%rbp),%r14
	cmpq $0x1,%r14
	je L_1780
L_1295:
	movq 0x0(%r14),%r15
	movq 0x8(%r14),%r14
	movq %r14,0x8(%rbp)
	jmp L_1284
.p2align 0x4
L_1780:
L_1297:
	movq (c_stackP+0x0)(%rip),%rsp
	movl 0x0(%rbp),%esi
	movq %rbp,(gcState+0x10)(%rip)
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	movq %r12,(gcState+0x0)(%rip)
	call MLton_halt
.p2align 0x4
L_1781:
L_1285:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_1286
L_1311:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x30,%rbp
	leaq (L_1312+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_1312
.p2align 0x4
.long 0x65
L_1312:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
L_1286:
	movq 0x20(%rbp),%r14
	movq 0x0(%r14),%r15
	movq 0x8(%r14),%r14
	movq %r14,0x20(%rbp)
L_1287:
	movq 0x18(%r15),%r14
	movq 0x10(%r15),%r13
	movq 0x0(%r13),%r11
	movq 0xFFFFFFFFFFFFFFF8(%r11),%r15
	shrq $0x1,%r15
	cmpq $0x28,%r15
	je L_1782
L_1303:
	movq %r14,0x38(%rbp)
	movq 0x8(%r11),%r15
	movq 0x0(%r11),%r14
	movq $0x3D,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r15,0x0(%r13)
	movq %r14,0x8(%r13)
	movq %r13,0x30(%rbp)
	addq $0x18,%r12
	leaq L_1308(%rip),%r15
	movq %r15,0x10(%rbp)
	movq %rbp,%r15
	addq $0x18,%r15
	subq (gcState+0x650)(%rip),%r15
	movq %r15,(gcState+0x20)(%rip)
	addq $0x30,%rbp
	leaq (L_1304+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp flushBuf_0
.p2align 0x4
L_1782:
L_1288:
	movq %r14,0x38(%rbp)
	movq 0x8(%r11),%r15
	movq 0x0(%r11),%r14
	movq $0x3D,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r15,0x0(%r13)
	movq %r14,0x8(%r13)
	movq %r13,0x30(%rbp)
	addq $0x18,%r12
	leaq L_1300(%rip),%r15
	movq %r15,0x10(%rbp)
	movq %rbp,%r15
	addq $0x18,%r15
	subq (gcState+0x650)(%rip),%r15
	movq %r15,(gcState+0x20)(%rip)
	addq $0x30,%rbp
	leaq (L_1289+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp flushBuf_0
.p2align 0x4
L_1785:
	movq %r11,%r14
L_1229:
	movq 0x8(%r14),%r15
	movq 0x0(%r14),%r13
	movq %r13,0x8(%rbp)
	movl (gcState+0x44)(%rip),%r14d
	incl %r14d
	movl %r14d,(gcState+0x44)(%rip)
	movl 0x0(%r13),%r11d
	movl %r11d,0x20(%rbp)
	testl %r11d,%r11d
	jnz L_1803
L_1230:
	movl $0x1,0x0(%r13)
	testl %r14d,%r14d
	jz L_1802
L_1231:
	decl %r14d
	movl %r14d,(gcState+0x44)(%rip)
	movl 0x4(%rbp),%r14d
	testl %r14d,%r14d
	jz L_1801
L_1272:
	movq %r15,0x28(%rbp)
	movl $0x20,%ebx
	movl 0x0(%rbp),%ecx
.p2align 0x4,,0x7
loop_56:
	movl %ecx,%eax
	movl $0xA,%edi
	cltd
	idivl %edi
	negl %edx
	movslq %edx,%r15
	cmpq $0x10,%r15
	jnb L_1235
L_1238:
	movq (globalObjptr+0x448)(%rip),%r14
	movb 0x0(%r14,%r15,1),%r13b
	movq 0x28(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movslq %ebx,%r11
	cmpq %r14,%r11
	jnb L_1235
L_1240:
	movb %r13b,0x0(%r15,%r11,1)
	movl %ecx,%eax
	movl $0xA,%ecx
	cltd
	idivl %ecx
	testl %eax,%eax
	jz L_1788
L_1241:
	decl %ebx
	jo L_1786
L_1242:
	movl %eax,%ecx
	jmp loop_56
.p2align 0x4
L_1786:
L_1235:
	movl 0x20(%rbp),%r15d
	testl %r15d,%r15d
	jnz L_1787
L_1236:
	movq 0x8(%rbp),%r15
	movl $0x0,0x0(%r15)
	movq (gcState+0x650)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_1787:
L_1237:
	movq (gcState+0x650)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_1788:
L_1243:
	movl 0x4(%rbp),%r15d
	testl %r15d,%r15d
	jz L_1245
L_1268:
	decl %ebx
	jo L_1235
L_1269:
	movslq %ebx,%r15
	cmpq %r14,%r15
	jnb L_1235
L_1271:
	movq 0x28(%rbp),%r13
	movb $0x7E,0x0(%r13,%r15,1)
L_1245:
	movslq %ebx,%r15
	movq %r15,0x0(%rbp)
	cmpq %r15,%r14
	jb L_1235
L_1246:
	subq %r15,%r14
	movq %r14,0x30(%rbp)
	jz L_1794
L_1247:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x17,%rcx
	movq %r14,%rdx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x40,%rbp
	leaq (L_1248+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_1248
.p2align 0x4
.long 0x61
L_1248:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	movq %rax,0x38(%rbp)
L_join_19:
	cmpq $0x5,0x30(%rbp)
	jl L_1791
L_1249:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_1250
L_1258:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_1259+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_1259
.p2align 0x4
.long 0x63
L_1259:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
L_1250:
	movq (c_stackP+0x0)(%rip),%rsp
	movq 0x30(%rbp),%r9
	movq 0x0(%rbp),%r8
	movq 0x28(%rbp),%rcx
	xorq %rdx,%rdx
	movq 0x38(%rbp),%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_1251+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayCopy
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_1251
.p2align 0x4
.long 0x62
L_1251:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
L_1252:
	movq 0x38(%rbp),%r15
	movq $0x7,0xFFFFFFFFFFFFFFF8(%r15)
	movl 0x20(%rbp),%r15d
	testl %r15d,%r15d
	jnz L_1254
L_1253:
	movq 0x8(%rbp),%r15
	movl $0x0,0x0(%r15)
L_1254:
	movq $0x57,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x38(%rbp),%r14
	movq %r14,0x0(%r15)
	movq (globalObjptr+0x78)(%rip),%r14
	movq %r14,0x8(%r15)
	movq $0x57,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq (globalObjptr+0x4C0)(%rip),%r15
	movq %r15,0x0(%r14)
	movq %r14,0x28(%rbp)
	leaq L_1256(%rip),%r15
	movq %r15,0x10(%rbp)
	movq %rbp,%r15
	addq $0x18,%r15
	subq (gcState+0x650)(%rip),%r15
	movq %r15,(gcState+0x20)(%rip)
	addq $0x28,%rbp
	leaq (L_1255+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp concat_0
.p2align 0x4
L_1791:
L_1260:
	movq 0x30(%rbp),%r14
	decq %r14
	xorq %r15,%r15
.p2align 0x4,,0x7
loop_57:
	cmpq %r15,%r14
	jl L_1792
L_1261:
	movq %r15,%r13
	addq 0x0(%rbp),%r13
	movq 0x38(%rbp),%r11
	movq 0x28(%rbp),%r9
	movb 0x0(%r9,%r13,1),%r10b
	movb %r10b,0x0(%r11,%r15,1)
	incq %r15
	jmp loop_57
.p2align 0x4
L_1792:
L_1262:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_1252
L_1264:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_1265+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_1265
.p2align 0x4
.long 0x62
L_1265:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	jmp L_1252
.p2align 0x4
L_1794:
L_1266:
	movq (globalObjptr+0xB0)(%rip),%r15
	movq %r15,0x38(%rbp)
	jmp L_join_19
.p2align 0x4
L_1801:
L_1233:
	movq %r15,0x28(%rbp)
	movl 0x0(%rbp),%ecx
	negl %ecx
	movl $0x20,%ebx
	jmp loop_56
.p2align 0x4
L_1802:
L_1273:
	movq (gcState+0x650)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_1803:
L_1274:
	testl %r14d,%r14d
	jz L_1806
L_1275:
	decl %r14d
	movl %r14d,(gcState+0x44)(%rip)
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x17,%rcx
	movq $0x21,%rdx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x30,%rbp
	leaq (L_1276+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_1276
.p2align 0x4
.long 0x64
L_1276:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
	xorq %r15,%r15
	movq %rax,%r14
.p2align 0x4,,0x7
loop_58:
	cmpq $0x21,%r15
	jnl L_1804
L_1280:
	movb $0x0,0x0(%r14,%r15,1)
	incq %r15
	jmp loop_58
.p2align 0x4
L_1804:
L_1277:
	movl 0x4(%rbp),%r15d
	testl %r15d,%r15d
	jz L_1805
L_1279:
	movq %r14,0x28(%rbp)
	movl $0x20,%ebx
	movl 0x0(%rbp),%ecx
	jmp loop_56
.p2align 0x4
L_1805:
	movq %r14,%r15
	jmp L_1233
.p2align 0x4
L_1806:
L_1281:
	movq (gcState+0x650)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_1807:
	movq %r11,%r14
	jmp L_1229
.p2align 0x4
L_1808:
L_1316:
	movq (gcState+0x650)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x5B
L_1304:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_1291
L_1306:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x30,%rbp
	leaq (L_1307+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_1307
.p2align 0x4
.long 0x65
L_1307:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
L_1291:
	movq 0x20(%rbp),%r14
	cmpq $0x1,%r14
	je L_1294
L_1292:
	movq 0x0(%r14),%r15
	movq 0x8(%r14),%r14
	movq %r14,0x20(%rbp)
	jmp L_1287
.p2align 0x4
.long 0xF
L_1308:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
	movq 0x8(%rbp),%r14
	cmpq $0x1,%r14
	je L_1297
L_1309:
	movq 0x0(%r14),%r15
	movq 0x8(%r14),%r14
	movq %r14,0x8(%rbp)
	jmp L_1284
.p2align 0x4
.long 0x5B
L_1289:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_1291
L_1298:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x30,%rbp
	leaq (L_1299+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_1299
.p2align 0x4
.long 0x65
L_1299:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
	jmp L_1291
.p2align 0x4
.long 0xF
L_1300:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
	movq 0x8(%rbp),%r14
	cmpq $0x1,%r14
	je L_1297
L_1301:
	movq 0x0(%r14),%r15
	movq 0x8(%r14),%r14
	movq %r14,0x8(%rbp)
	jmp L_1284
.p2align 0x4
.long 0x5C
L_1255:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	movq 0x18(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	movq (gcState+0x650)(%rip),%rbp
	addq %r15,%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0xF
L_1256:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
	movq 0x18(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	movq (gcState+0x650)(%rip),%rbp
	addq %r15,%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
